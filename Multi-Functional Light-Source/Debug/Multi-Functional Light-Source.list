
Multi-Functional Light-Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08008d30  08008d30  00018d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009030  08009030  000200e8  2**0
                  CONTENTS
  4 .ARM          00000000  08009030  08009030  000200e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009030  08009030  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009030  08009030  00019030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009034  08009034  00019034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08009038  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e8  2**0
                  CONTENTS
 10 .bss          0000228c  200000e8  200000e8  000200e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002374  20002374  000200e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001381d  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002610  00000000  00000000  00033935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd0  00000000  00000000  00035f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ee8  00000000  00000000  00036f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022051  00000000  00000000  00037e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014a9c  00000000  00000000  00059e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d40d7  00000000  00000000  0006e8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001429c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000487c  00000000  00000000  00142a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e8 	.word	0x200000e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008d18 	.word	0x08008d18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ec 	.word	0x200000ec
 80001dc:	08008d18 	.word	0x08008d18

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <HAL_UART_RxCpltCallback>:
// return system state
char ret_state[3] = {' '} ;
char ret_param1[3] = {' ' };
char ret_param2[3] = {' '} ;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

	// store recieved characters one at at time
	set_or_ret_sys_state[num_characters] = recvd_char[0] ;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <HAL_UART_RxCpltCallback+0x80>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <HAL_UART_RxCpltCallback+0x84>)
 80008cc:	7819      	ldrb	r1, [r3, #0]
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <HAL_UART_RxCpltCallback+0x88>)
 80008d0:	5499      	strb	r1, [r3, r2]

	num_characters++ ;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <HAL_UART_RxCpltCallback+0x80>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	3301      	adds	r3, #1
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <HAL_UART_RxCpltCallback+0x80>)
 80008dc:	701a      	strb	r2, [r3, #0]

	if(recvd_char[0] == '\n'){
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <HAL_UART_RxCpltCallback+0x84>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b0a      	cmp	r3, #10
 80008e4:	d121      	bne.n	800092a <HAL_UART_RxCpltCallback+0x6e>
		if(num_characters == 19){
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <HAL_UART_RxCpltCallback+0x80>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b13      	cmp	r3, #19
 80008ec:	d108      	bne.n	8000900 <HAL_UART_RxCpltCallback+0x44>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"set mode\n",9 ) ;
 80008ee:	2209      	movs	r2, #9
 80008f0:	4915      	ldr	r1, [pc, #84]	; (8000948 <HAL_UART_RxCpltCallback+0x8c>)
 80008f2:	4816      	ldr	r0, [pc, #88]	; (800094c <HAL_UART_RxCpltCallback+0x90>)
 80008f4:	f006 f9d2 	bl	8006c9c <HAL_UART_Transmit_IT>
			UART_set_syst_state = 1 ;
 80008f8:	4b15      	ldr	r3, [pc, #84]	; (8000950 <HAL_UART_RxCpltCallback+0x94>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
 80008fe:	e011      	b.n	8000924 <HAL_UART_RxCpltCallback+0x68>
		}else if( num_characters == 7){
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_UART_RxCpltCallback+0x80>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b07      	cmp	r3, #7
 8000906:	d108      	bne.n	800091a <HAL_UART_RxCpltCallback+0x5e>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"request mode\n", 13) ;
 8000908:	220d      	movs	r2, #13
 800090a:	4912      	ldr	r1, [pc, #72]	; (8000954 <HAL_UART_RxCpltCallback+0x98>)
 800090c:	480f      	ldr	r0, [pc, #60]	; (800094c <HAL_UART_RxCpltCallback+0x90>)
 800090e:	f006 f9c5 	bl	8006c9c <HAL_UART_Transmit_IT>
			UART_ret_sys_state = 1 ;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <HAL_UART_RxCpltCallback+0x9c>)
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
 8000918:	e004      	b.n	8000924 <HAL_UART_RxCpltCallback+0x68>
		}else{
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Incorrect status request size\n", 30) ;
 800091a:	221e      	movs	r2, #30
 800091c:	490f      	ldr	r1, [pc, #60]	; (800095c <HAL_UART_RxCpltCallback+0xa0>)
 800091e:	480b      	ldr	r0, [pc, #44]	; (800094c <HAL_UART_RxCpltCallback+0x90>)
 8000920:	f006 f9bc 	bl	8006c9c <HAL_UART_Transmit_IT>
		}

		num_characters =  0;
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_UART_RxCpltCallback+0x80>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]

	}
	// recieve character - re-prime receiver to receive single characters at a time
	HAL_UART_Receive_IT(&huart2, (uint8_t*)recvd_char, 1);
 800092a:	2201      	movs	r2, #1
 800092c:	4904      	ldr	r1, [pc, #16]	; (8000940 <HAL_UART_RxCpltCallback+0x84>)
 800092e:	4807      	ldr	r0, [pc, #28]	; (800094c <HAL_UART_RxCpltCallback+0x90>)
 8000930:	f006 fa12 	bl	8006d58 <HAL_UART_Receive_IT>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20002331 	.word	0x20002331
 8000940:	20002330 	.word	0x20002330
 8000944:	20000044 	.word	0x20000044
 8000948:	08008e60 	.word	0x08008e60
 800094c:	2000027c 	.word	0x2000027c
 8000950:	20002332 	.word	0x20002332
 8000954:	08008e6c 	.word	0x08008e6c
 8000958:	20002333 	.word	0x20002333
 800095c:	08008e7c 	.word	0x08008e7c

08000960 <adc_dma_val_processing>:

/**
 * scale up transmit ADC values
 */

void adc_dma_val_processing(){
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0

	if(adc_conv_complete == 1){
 8000966:	4b3c      	ldr	r3, [pc, #240]	; (8000a58 <adc_dma_val_processing+0xf8>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d142      	bne.n	80009f4 <adc_dma_val_processing+0x94>

		adc_conv_complete =0  ;
 800096e:	4b3a      	ldr	r3, [pc, #232]	; (8000a58 <adc_dma_val_processing+0xf8>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
		sum = 0 ;
 8000974:	4b39      	ldr	r3, [pc, #228]	; (8000a5c <adc_dma_val_processing+0xfc>)
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
		for(int i = 0 ; i < adc_buf_len ; i++){
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	e00c      	b.n	800099a <adc_dma_val_processing+0x3a>
			sum += adc_buf[i] ;
 8000980:	4a37      	ldr	r2, [pc, #220]	; (8000a60 <adc_dma_val_processing+0x100>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000988:	461a      	mov	r2, r3
 800098a:	4b34      	ldr	r3, [pc, #208]	; (8000a5c <adc_dma_val_processing+0xfc>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4413      	add	r3, r2
 8000990:	4a32      	ldr	r2, [pc, #200]	; (8000a5c <adc_dma_val_processing+0xfc>)
 8000992:	6013      	str	r3, [r2, #0]
		for(int i = 0 ; i < adc_buf_len ; i++){
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3301      	adds	r3, #1
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009a0:	dbee      	blt.n	8000980 <adc_dma_val_processing+0x20>
		}
		raw_adc_dma_val =(uint16_t)(sum/adc_buf_len) ;
 80009a2:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <adc_dma_val_processing+0xfc>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	da01      	bge.n	80009ae <adc_dma_val_processing+0x4e>
 80009aa:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80009ae:	131b      	asrs	r3, r3, #12
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	4b2c      	ldr	r3, [pc, #176]	; (8000a64 <adc_dma_val_processing+0x104>)
 80009b4:	801a      	strh	r2, [r3, #0]

		scaled_adc_val = (uint16_t)raw_adc_dma_val*adc_scale_up ; //adc scaled to max =4095
 80009b6:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <adc_dma_val_processing+0x104>)
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fef4 	bl	80007a8 <__aeabi_i2d>
 80009c0:	4b29      	ldr	r3, [pc, #164]	; (8000a68 <adc_dma_val_processing+0x108>)
 80009c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009c6:	f7ff fc73 	bl	80002b0 <__aeabi_dmul>
 80009ca:	4602      	mov	r2, r0
 80009cc:	460b      	mov	r3, r1
 80009ce:	4610      	mov	r0, r2
 80009d0:	4619      	mov	r1, r3
 80009d2:	f7ff ff53 	bl	800087c <__aeabi_d2uiz>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b29a      	uxth	r2, r3
 80009da:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <adc_dma_val_processing+0x10c>)
 80009dc:	801a      	strh	r2, [r3, #0]

		//capture previous adc cal
		if(adc_val_capture == 1){
 80009de:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <adc_dma_val_processing+0x110>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d106      	bne.n	80009f4 <adc_dma_val_processing+0x94>
			adc_val_snapshot = scaled_adc_val ;
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <adc_dma_val_processing+0x10c>)
 80009e8:	881a      	ldrh	r2, [r3, #0]
 80009ea:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <adc_dma_val_processing+0x114>)
 80009ec:	801a      	strh	r2, [r3, #0]
			adc_val_capture = 0 ;
 80009ee:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <adc_dma_val_processing+0x110>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
		}
	}

	// if ADC movement significant update LED intensity
	if(abs(scaled_adc_val - adc_val_snapshot) >15){
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <adc_dma_val_processing+0x10c>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <adc_dma_val_processing+0x114>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	bfb8      	it	lt
 8000a04:	425b      	neglt	r3, r3
 8000a06:	2b0f      	cmp	r3, #15
 8000a08:	dd02      	ble.n	8000a10 <adc_dma_val_processing+0xb0>
	  update_led_via_ADC = 1 ;
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <adc_dma_val_processing+0x118>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
	}

//	 WHITE LED intensity
	LED_intensity =(float)(scaled_adc_val)*(512.0/4095.0)  ;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <adc_dma_val_processing+0x10c>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	ee07 3a90 	vmov	s15, r3
 8000a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a1c:	ee17 0a90 	vmov	r0, s15
 8000a20:	f7ff fed4 	bl	80007cc <__aeabi_f2d>
 8000a24:	a30a      	add	r3, pc, #40	; (adr r3, 8000a50 <adc_dma_val_processing+0xf0>)
 8000a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a2a:	f7ff fc41 	bl	80002b0 <__aeabi_dmul>
 8000a2e:	4602      	mov	r2, r0
 8000a30:	460b      	mov	r3, r1
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	f7ff ff21 	bl	800087c <__aeabi_d2uiz>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <adc_dma_val_processing+0x11c>)
 8000a40:	801a      	strh	r2, [r3, #0]
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	f3af 8000 	nop.w
 8000a50:	10010010 	.word	0x10010010
 8000a54:	3fc00100 	.word	0x3fc00100
 8000a58:	20002316 	.word	0x20002316
 8000a5c:	20002310 	.word	0x20002310
 8000a60:	2000030c 	.word	0x2000030c
 8000a64:	2000230c 	.word	0x2000230c
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	20002318 	.word	0x20002318
 8000a70:	20000002 	.word	0x20000002
 8000a74:	20002314 	.word	0x20002314
 8000a78:	2000231a 	.word	0x2000231a
 8000a7c:	20000010 	.word	0x20000010

08000a80 <system_state_update>:

void system_state_update(){
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
	 if(left_button_pressed ==1 && UART_set_syst_state == 0 && UART_ret_sys_state == 0 ){
 8000a84:	4b3a      	ldr	r3, [pc, #232]	; (8000b70 <system_state_update+0xf0>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d12d      	bne.n	8000ae8 <system_state_update+0x68>
 8000a8c:	4b39      	ldr	r3, [pc, #228]	; (8000b74 <system_state_update+0xf4>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d129      	bne.n	8000ae8 <system_state_update+0x68>
 8000a94:	4b38      	ldr	r3, [pc, #224]	; (8000b78 <system_state_update+0xf8>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d125      	bne.n	8000ae8 <system_state_update+0x68>

		 button_count++ ;
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <system_state_update+0xfc>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	4a36      	ldr	r2, [pc, #216]	; (8000b7c <system_state_update+0xfc>)
 8000aa4:	6013      	str	r3, [r2, #0]
		 if(button_count > 2){
 8000aa6:	4b35      	ldr	r3, [pc, #212]	; (8000b7c <system_state_update+0xfc>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	dd02      	ble.n	8000ab4 <system_state_update+0x34>
			 button_count = 0 ;
 8000aae:	4b33      	ldr	r3, [pc, #204]	; (8000b7c <system_state_update+0xfc>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
		 }
		 update_led_via_ADC =  0 ; // don't read ADC by default in next state
 8000ab4:	4b32      	ldr	r3, [pc, #200]	; (8000b80 <system_state_update+0x100>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
		 // snapshot of ADC taken in next state
		 if(adc_conv_complete == 1){
 8000aba:	4b32      	ldr	r3, [pc, #200]	; (8000b84 <system_state_update+0x104>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d102      	bne.n	8000ac8 <system_state_update+0x48>
			 adc_val_capture =1  ; // capture ADC value
 8000ac2:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <system_state_update+0x108>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
		 }

		 // Emergency MODE DEFAULT
		 if(button_count != 1){
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <system_state_update+0xfc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d007      	beq.n	8000ae0 <system_state_update+0x60>
			 strobe_led_Intensity = 256 ;
 8000ad0:	4b2e      	ldr	r3, [pc, #184]	; (8000b8c <system_state_update+0x10c>)
 8000ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ad6:	801a      	strh	r2, [r3, #0]
			 strobe_delay = 512;
 8000ad8:	4b2d      	ldr	r3, [pc, #180]	; (8000b90 <system_state_update+0x110>)
 8000ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ade:	801a      	strh	r2, [r3, #0]
		 }

		 left_button_pressed = 0 ;
 8000ae0:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <system_state_update+0xf0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
 8000ae6:	e03d      	b.n	8000b64 <system_state_update+0xe4>

	 }else if( UART_set_syst_state == 1 && left_button_pressed == 0 && UART_ret_sys_state ==0){ // System state update to come from only one source
 8000ae8:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <system_state_update+0xf4>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d125      	bne.n	8000b3c <system_state_update+0xbc>
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <system_state_update+0xf0>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d121      	bne.n	8000b3c <system_state_update+0xbc>
 8000af8:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <system_state_update+0xf8>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d11d      	bne.n	8000b3c <system_state_update+0xbc>
		 UART_set_syst_state = 0;
 8000b00:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <system_state_update+0xf4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
		 UART_state_update =1;
 8000b06:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <system_state_update+0x114>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]

		 if(set_or_ret_sys_state[3] == 'F'){
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <system_state_update+0x118>)
 8000b0e:	78db      	ldrb	r3, [r3, #3]
 8000b10:	2b46      	cmp	r3, #70	; 0x46
 8000b12:	d103      	bne.n	8000b1c <system_state_update+0x9c>
			 button_count =0 ;
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <system_state_update+0xfc>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
		 if(set_or_ret_sys_state[3] == 'F'){
 8000b1a:	e022      	b.n	8000b62 <system_state_update+0xe2>
		 }
		 else if(set_or_ret_sys_state[3] =='E'){
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <system_state_update+0x118>)
 8000b1e:	78db      	ldrb	r3, [r3, #3]
 8000b20:	2b45      	cmp	r3, #69	; 0x45
 8000b22:	d103      	bne.n	8000b2c <system_state_update+0xac>
			 button_count =1;
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <system_state_update+0xfc>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	601a      	str	r2, [r3, #0]
		 if(set_or_ret_sys_state[3] == 'F'){
 8000b2a:	e01a      	b.n	8000b62 <system_state_update+0xe2>

		 }else{
			 if(set_or_ret_sys_state[3] == 'M'){
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <system_state_update+0x118>)
 8000b2e:	78db      	ldrb	r3, [r3, #3]
 8000b30:	2b4d      	cmp	r3, #77	; 0x4d
 8000b32:	d116      	bne.n	8000b62 <system_state_update+0xe2>
				 button_count =2 ;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <system_state_update+0xfc>)
 8000b36:	2202      	movs	r2, #2
 8000b38:	601a      	str	r2, [r3, #0]
		 if(set_or_ret_sys_state[3] == 'F'){
 8000b3a:	e012      	b.n	8000b62 <system_state_update+0xe2>

			 }
		 }
	 }else{ //dont update the system in any way - read current and previous states
		 if( UART_set_syst_state == 0 && left_button_pressed == 0 && UART_ret_sys_state ==1){
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <system_state_update+0xf4>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d10f      	bne.n	8000b64 <system_state_update+0xe4>
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <system_state_update+0xf0>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d10b      	bne.n	8000b64 <system_state_update+0xe4>
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <system_state_update+0xf8>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d107      	bne.n	8000b64 <system_state_update+0xe4>
			 UART_ret_sys_state = 0;
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <system_state_update+0xf8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
			 READ_SYS =1;
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <system_state_update+0x11c>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	701a      	strb	r2, [r3, #0]

		 }
	 }
}
 8000b60:	e000      	b.n	8000b64 <system_state_update+0xe4>
		 if(set_or_ret_sys_state[3] == 'F'){
 8000b62:	bf00      	nop
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	2000235a 	.word	0x2000235a
 8000b74:	20002332 	.word	0x20002332
 8000b78:	20002333 	.word	0x20002333
 8000b7c:	20000304 	.word	0x20000304
 8000b80:	2000231a 	.word	0x2000231a
 8000b84:	20002316 	.word	0x20002316
 8000b88:	20000002 	.word	0x20000002
 8000b8c:	20000014 	.word	0x20000014
 8000b90:	20000012 	.word	0x20000012
 8000b94:	20002334 	.word	0x20002334
 8000b98:	20000044 	.word	0x20000044
 8000b9c:	2000233c 	.word	0x2000233c

08000ba0 <right_button_state_update>:

/**
 * Updates system state after right button pressed in emergency mode
 */
void right_button_state_update(){
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
	if(button_count == 1){
 8000ba4:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <right_button_state_update+0x5c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d117      	bne.n	8000bdc <right_button_state_update+0x3c>
		if(right_button_pressed){
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <right_button_state_update+0x60>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d01e      	beq.n	8000bf2 <right_button_state_update+0x52>
			right_button_pressed = 0 ;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <right_button_state_update+0x60>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]

			update_led_via_ADC = 0 ; // dont read adc by default in next state
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <right_button_state_update+0x64>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]

			 em_count++ ;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <right_button_state_update+0x68>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <right_button_state_update+0x68>)
 8000bca:	701a      	strb	r2, [r3, #0]

			 if(em_count>2){
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <right_button_state_update+0x68>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d90e      	bls.n	8000bf2 <right_button_state_update+0x52>
				 em_count = 0;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <right_button_state_update+0x68>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
		}
	}else if( button_count != 1 && right_button_pressed){
		right_button_pressed = 0; //do not read right button presses triggered
								  // in other states except emergency mode
	}
}
 8000bda:	e00a      	b.n	8000bf2 <right_button_state_update+0x52>
	}else if( button_count != 1 && right_button_pressed){
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <right_button_state_update+0x5c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d006      	beq.n	8000bf2 <right_button_state_update+0x52>
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <right_button_state_update+0x60>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d002      	beq.n	8000bf2 <right_button_state_update+0x52>
		right_button_pressed = 0; //do not read right button presses triggered
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <right_button_state_update+0x60>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	20000304 	.word	0x20000304
 8000c00:	20002359 	.word	0x20002359
 8000c04:	2000231a 	.word	0x2000231a
 8000c08:	20000308 	.word	0x20000308

08000c0c <TURN_LED_ON_OFF>:

/**
 * Middle button press turns LED ON/OFF
 */
void TURN_LED_ON_OFF(){
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
	if(middle_button_pressed == 1){
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <TURN_LED_ON_OFF+0x54>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d11d      	bne.n	8000c54 <TURN_LED_ON_OFF+0x48>
		 LED_ON = !LED_ON ;  // turns the LED on OR off
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <TURN_LED_ON_OFF+0x58>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	bf0c      	ite	eq
 8000c20:	2301      	moveq	r3, #1
 8000c22:	2300      	movne	r3, #0
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <TURN_LED_ON_OFF+0x58>)
 8000c2a:	701a      	strb	r2, [r3, #0]

		 // Middle button press -> LED ON / OFF
		 if(LED_ON == 1){
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <TURN_LED_ON_OFF+0x58>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d104      	bne.n	8000c3e <TURN_LED_ON_OFF+0x32>
			 htim2.Instance->CCR1 = 1 ; // LED ON
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <TURN_LED_ON_OFF+0x5c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2201      	movs	r2, #1
 8000c3a:	635a      	str	r2, [r3, #52]	; 0x34
 8000c3c:	e007      	b.n	8000c4e <TURN_LED_ON_OFF+0x42>
		 }else if(LED_ON ==0){
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <TURN_LED_ON_OFF+0x58>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d103      	bne.n	8000c4e <TURN_LED_ON_OFF+0x42>
			 htim2.Instance->CCR1 = 0 ; //LED OFFS
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <TURN_LED_ON_OFF+0x5c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	635a      	str	r2, [r3, #52]	; 0x34
		 }

		 middle_button_pressed = 0 ;
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <TURN_LED_ON_OFF+0x54>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
	 }
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20002358 	.word	0x20002358
 8000c64:	2000231b 	.word	0x2000231b
 8000c68:	20000198 	.word	0x20000198

08000c6c <EM_mode_Strobe>:

/**
 * LED strobed with provided number of ms
 */
void EM_mode_Strobe(uint16_t strobe_delay){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	80fb      	strh	r3, [r7, #6]

	 // default delay 512ms
	 timePassed =HAL_GetTick() - strobe_ticks ;
 8000c76:	f001 fc7d 	bl	8002574 <HAL_GetTick>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <EM_mode_Strobe+0x84>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <EM_mode_Strobe+0x88>)
 8000c84:	6013      	str	r3, [r2, #0]
	 // time passed >512
	 if( timePassed >= strobe_delay && led_strobe_on == 0){
 8000c86:	88fa      	ldrh	r2, [r7, #6]
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <EM_mode_Strobe+0x88>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d80a      	bhi.n	8000ca6 <EM_mode_Strobe+0x3a>
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <EM_mode_Strobe+0x8c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d106      	bne.n	8000ca6 <EM_mode_Strobe+0x3a>
		 led_strobe_on =1 ;
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <EM_mode_Strobe+0x8c>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
		 htim2.Instance->CCR1 = 0 ;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <EM_mode_Strobe+0x90>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	635a      	str	r2, [r3, #52]	; 0x34
	 }
	 // time Passed > 1024
	 if(timePassed >= 1024 && led_strobe_on == 1){
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <EM_mode_Strobe+0x88>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cae:	d31a      	bcc.n	8000ce6 <EM_mode_Strobe+0x7a>
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <EM_mode_Strobe+0x8c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d116      	bne.n	8000ce6 <EM_mode_Strobe+0x7a>
		 strobe_ticks =  HAL_GetTick() ; // update current time
 8000cb8:	f001 fc5c 	bl	8002574 <HAL_GetTick>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <EM_mode_Strobe+0x84>)
 8000cc0:	6013      	str	r3, [r2, #0]
		 led_strobe_on = 0 ;
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <EM_mode_Strobe+0x8c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]

		 if(update_led_via_ADC ==1){ // update LED intensity if the slider moved
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <EM_mode_Strobe+0x94>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d105      	bne.n	8000cdc <EM_mode_Strobe+0x70>
			 htim2.Instance->CCR1 = LED_intensity ;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <EM_mode_Strobe+0x98>)
 8000cd2:	881a      	ldrh	r2, [r3, #0]
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <EM_mode_Strobe+0x90>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	635a      	str	r2, [r3, #52]	; 0x34
		 }
	 }

	 // restore

}
 8000cda:	e004      	b.n	8000ce6 <EM_mode_Strobe+0x7a>
			 htim2.Instance->CCR1 = strobe_led_Intensity;
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <EM_mode_Strobe+0x9c>)
 8000cde:	881a      	ldrh	r2, [r3, #0]
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <EM_mode_Strobe+0x90>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000231c 	.word	0x2000231c
 8000cf4:	20002324 	.word	0x20002324
 8000cf8:	20002320 	.word	0x20002320
 8000cfc:	20000198 	.word	0x20000198
 8000d00:	2000231a 	.word	0x2000231a
 8000d04:	20000010 	.word	0x20000010
 8000d08:	20000014 	.word	0x20000014

08000d0c <convert_UART_state_params_to_Int>:
void convert_UART_state_params_to_Int(){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
	if(UART_set_syst_state) {
 8000d12:	4b59      	ldr	r3, [pc, #356]	; (8000e78 <convert_UART_state_params_to_Int+0x16c>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 80aa 	beq.w	8000e70 <convert_UART_state_params_to_Int+0x164>
		for(int i = 0; i < 19 ; i++){
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	e05f      	b.n	8000de2 <convert_UART_state_params_to_Int+0xd6>
			switch(i){
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3b05      	subs	r3, #5
 8000d26:	2b0a      	cmp	r3, #10
 8000d28:	d857      	bhi.n	8000dda <convert_UART_state_params_to_Int+0xce>
 8000d2a:	a201      	add	r2, pc, #4	; (adr r2, 8000d30 <convert_UART_state_params_to_Int+0x24>)
 8000d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d30:	08000d5d 	.word	0x08000d5d
 8000d34:	08000d6b 	.word	0x08000d6b
 8000d38:	08000d79 	.word	0x08000d79
 8000d3c:	08000ddb 	.word	0x08000ddb
 8000d40:	08000d87 	.word	0x08000d87
 8000d44:	08000d95 	.word	0x08000d95
 8000d48:	08000da3 	.word	0x08000da3
 8000d4c:	08000ddb 	.word	0x08000ddb
 8000d50:	08000db1 	.word	0x08000db1
 8000d54:	08000dbf 	.word	0x08000dbf
 8000d58:	08000dcd 	.word	0x08000dcd
			case 5:
				STATE[0]= set_or_ret_sys_state[i] ;
 8000d5c:	4a47      	ldr	r2, [pc, #284]	; (8000e7c <convert_UART_state_params_to_Int+0x170>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	4b46      	ldr	r3, [pc, #280]	; (8000e80 <convert_UART_state_params_to_Int+0x174>)
 8000d66:	701a      	strb	r2, [r3, #0]
				break;
 8000d68:	e038      	b.n	8000ddc <convert_UART_state_params_to_Int+0xd0>
			case 6:
				STATE[1]= set_or_ret_sys_state[i] ;
 8000d6a:	4a44      	ldr	r2, [pc, #272]	; (8000e7c <convert_UART_state_params_to_Int+0x170>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4413      	add	r3, r2
 8000d70:	781a      	ldrb	r2, [r3, #0]
 8000d72:	4b43      	ldr	r3, [pc, #268]	; (8000e80 <convert_UART_state_params_to_Int+0x174>)
 8000d74:	705a      	strb	r2, [r3, #1]
				break;
 8000d76:	e031      	b.n	8000ddc <convert_UART_state_params_to_Int+0xd0>
			case 7:
				STATE[2] = set_or_ret_sys_state[i] ;
 8000d78:	4a40      	ldr	r2, [pc, #256]	; (8000e7c <convert_UART_state_params_to_Int+0x170>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	4b3f      	ldr	r3, [pc, #252]	; (8000e80 <convert_UART_state_params_to_Int+0x174>)
 8000d82:	709a      	strb	r2, [r3, #2]
				break;
 8000d84:	e02a      	b.n	8000ddc <convert_UART_state_params_to_Int+0xd0>

			case 9:
				PARAM1[0] = set_or_ret_sys_state[i];
 8000d86:	4a3d      	ldr	r2, [pc, #244]	; (8000e7c <convert_UART_state_params_to_Int+0x170>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	781a      	ldrb	r2, [r3, #0]
 8000d8e:	4b3d      	ldr	r3, [pc, #244]	; (8000e84 <convert_UART_state_params_to_Int+0x178>)
 8000d90:	701a      	strb	r2, [r3, #0]
				break;
 8000d92:	e023      	b.n	8000ddc <convert_UART_state_params_to_Int+0xd0>
			case 10:
				PARAM1[1] = set_or_ret_sys_state[i] ;
 8000d94:	4a39      	ldr	r2, [pc, #228]	; (8000e7c <convert_UART_state_params_to_Int+0x170>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	781a      	ldrb	r2, [r3, #0]
 8000d9c:	4b39      	ldr	r3, [pc, #228]	; (8000e84 <convert_UART_state_params_to_Int+0x178>)
 8000d9e:	705a      	strb	r2, [r3, #1]
				break;
 8000da0:	e01c      	b.n	8000ddc <convert_UART_state_params_to_Int+0xd0>
			case 11:
				PARAM1[2] = set_or_ret_sys_state[i] ;
 8000da2:	4a36      	ldr	r2, [pc, #216]	; (8000e7c <convert_UART_state_params_to_Int+0x170>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4413      	add	r3, r2
 8000da8:	781a      	ldrb	r2, [r3, #0]
 8000daa:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <convert_UART_state_params_to_Int+0x178>)
 8000dac:	709a      	strb	r2, [r3, #2]
				break ;
 8000dae:	e015      	b.n	8000ddc <convert_UART_state_params_to_Int+0xd0>
			case 13:
				PARAM2[0] = set_or_ret_sys_state[i] ;
 8000db0:	4a32      	ldr	r2, [pc, #200]	; (8000e7c <convert_UART_state_params_to_Int+0x170>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	781a      	ldrb	r2, [r3, #0]
 8000db8:	4b33      	ldr	r3, [pc, #204]	; (8000e88 <convert_UART_state_params_to_Int+0x17c>)
 8000dba:	701a      	strb	r2, [r3, #0]
				break;
 8000dbc:	e00e      	b.n	8000ddc <convert_UART_state_params_to_Int+0xd0>
			case 14:
				PARAM2[1] = set_or_ret_sys_state[i] ;
 8000dbe:	4a2f      	ldr	r2, [pc, #188]	; (8000e7c <convert_UART_state_params_to_Int+0x170>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	781a      	ldrb	r2, [r3, #0]
 8000dc6:	4b30      	ldr	r3, [pc, #192]	; (8000e88 <convert_UART_state_params_to_Int+0x17c>)
 8000dc8:	705a      	strb	r2, [r3, #1]
				break;
 8000dca:	e007      	b.n	8000ddc <convert_UART_state_params_to_Int+0xd0>
			case 15:
				PARAM2[2] = set_or_ret_sys_state[i ];
 8000dcc:	4a2b      	ldr	r2, [pc, #172]	; (8000e7c <convert_UART_state_params_to_Int+0x170>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	781a      	ldrb	r2, [r3, #0]
 8000dd4:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <convert_UART_state_params_to_Int+0x17c>)
 8000dd6:	709a      	strb	r2, [r3, #2]
				break;
 8000dd8:	e000      	b.n	8000ddc <convert_UART_state_params_to_Int+0xd0>

			default:
				break ;
 8000dda:	bf00      	nop
		for(int i = 0; i < 19 ; i++){
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3301      	adds	r3, #1
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b12      	cmp	r3, #18
 8000de6:	dd9c      	ble.n	8000d22 <convert_UART_state_params_to_Int+0x16>
			}

		}

		state = atoi(STATE) ;
 8000de8:	4825      	ldr	r0, [pc, #148]	; (8000e80 <convert_UART_state_params_to_Int+0x174>)
 8000dea:	f007 fa5d 	bl	80082a8 <atoi>
 8000dee:	4603      	mov	r3, r0
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <convert_UART_state_params_to_Int+0x180>)
 8000df4:	801a      	strh	r2, [r3, #0]
		param1 = atoi(PARAM1);
 8000df6:	4823      	ldr	r0, [pc, #140]	; (8000e84 <convert_UART_state_params_to_Int+0x178>)
 8000df8:	f007 fa56 	bl	80082a8 <atoi>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <convert_UART_state_params_to_Int+0x184>)
 8000e02:	801a      	strh	r2, [r3, #0]
		// problem - perform check for if non integer characters are passed!
		if(strcmp(PARAM2, "000") == 0 && set_or_ret_sys_state[3] == 'E'){
 8000e04:	4923      	ldr	r1, [pc, #140]	; (8000e94 <convert_UART_state_params_to_Int+0x188>)
 8000e06:	4820      	ldr	r0, [pc, #128]	; (8000e88 <convert_UART_state_params_to_Int+0x17c>)
 8000e08:	f7ff f9ea 	bl	80001e0 <strcmp>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10b      	bne.n	8000e2a <convert_UART_state_params_to_Int+0x11e>
 8000e12:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <convert_UART_state_params_to_Int+0x170>)
 8000e14:	78db      	ldrb	r3, [r3, #3]
 8000e16:	2b45      	cmp	r3, #69	; 0x45
 8000e18:	d107      	bne.n	8000e2a <convert_UART_state_params_to_Int+0x11e>

			param2 = atoi(PARAM2) ;  // SOS MORSE OUTPUT
 8000e1a:	481b      	ldr	r0, [pc, #108]	; (8000e88 <convert_UART_state_params_to_Int+0x17c>)
 8000e1c:	f007 fa44 	bl	80082a8 <atoi>
 8000e20:	4603      	mov	r3, r0
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <convert_UART_state_params_to_Int+0x18c>)
 8000e26:	801a      	strh	r2, [r3, #0]
 8000e28:	e022      	b.n	8000e70 <convert_UART_state_params_to_Int+0x164>
		}
		else if( strcmp(PARAM2, "000") != 0 && set_or_ret_sys_state[3] == 'E' ){
 8000e2a:	491a      	ldr	r1, [pc, #104]	; (8000e94 <convert_UART_state_params_to_Int+0x188>)
 8000e2c:	4816      	ldr	r0, [pc, #88]	; (8000e88 <convert_UART_state_params_to_Int+0x17c>)
 8000e2e:	f7ff f9d7 	bl	80001e0 <strcmp>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d013      	beq.n	8000e60 <convert_UART_state_params_to_Int+0x154>
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <convert_UART_state_params_to_Int+0x170>)
 8000e3a:	78db      	ldrb	r3, [r3, #3]
 8000e3c:	2b45      	cmp	r3, #69	; 0x45
 8000e3e:	d10f      	bne.n	8000e60 <convert_UART_state_params_to_Int+0x154>

			Custom_Morse_Msg[0] = PARAM2[0] ; // CUSTOM MORSE output - declare variable to store the output
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <convert_UART_state_params_to_Int+0x17c>)
 8000e42:	781a      	ldrb	r2, [r3, #0]
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <convert_UART_state_params_to_Int+0x190>)
 8000e46:	701a      	strb	r2, [r3, #0]
			Custom_Morse_Msg[1] = PARAM2[1] ;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <convert_UART_state_params_to_Int+0x17c>)
 8000e4a:	785a      	ldrb	r2, [r3, #1]
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <convert_UART_state_params_to_Int+0x190>)
 8000e4e:	705a      	strb	r2, [r3, #1]
			Custom_Morse_Msg[2] = PARAM2[2] ;
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <convert_UART_state_params_to_Int+0x17c>)
 8000e52:	789a      	ldrb	r2, [r3, #2]
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <convert_UART_state_params_to_Int+0x190>)
 8000e56:	709a      	strb	r2, [r3, #2]

			custom_morse_msg_rcvd = 1;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <convert_UART_state_params_to_Int+0x194>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	701a      	strb	r2, [r3, #0]
 8000e5e:	e007      	b.n	8000e70 <convert_UART_state_params_to_Int+0x164>
		}
		else{
			param2 = atoi(PARAM2) ;
 8000e60:	4809      	ldr	r0, [pc, #36]	; (8000e88 <convert_UART_state_params_to_Int+0x17c>)
 8000e62:	f007 fa21 	bl	80082a8 <atoi>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <convert_UART_state_params_to_Int+0x18c>)
 8000e6c:	801a      	strh	r2, [r3, #0]
		}

	}
}
 8000e6e:	e7ff      	b.n	8000e70 <convert_UART_state_params_to_Int+0x164>
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20002332 	.word	0x20002332
 8000e7c:	20000044 	.word	0x20000044
 8000e80:	20000058 	.word	0x20000058
 8000e84:	2000005c 	.word	0x2000005c
 8000e88:	20000060 	.word	0x20000060
 8000e8c:	20002336 	.word	0x20002336
 8000e90:	20002338 	.word	0x20002338
 8000e94:	08008e9c 	.word	0x08008e9c
 8000e98:	2000233a 	.word	0x2000233a
 8000e9c:	20000064 	.word	0x20000064
 8000ea0:	20002335 	.word	0x20002335

08000ea4 <Emergency_Mode_State_Update>:

/**
 * Function updates the necessary states/ values when UART command reached to
 * update the system state
 */
void Emergency_Mode_State_Update(){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0

	if(UART_state_update == 1 && state > 0 && set_or_ret_sys_state[3] =='E'){
 8000ea8:	4b3a      	ldr	r3, [pc, #232]	; (8000f94 <Emergency_Mode_State_Update+0xf0>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d14c      	bne.n	8000f4a <Emergency_Mode_State_Update+0xa6>
 8000eb0:	4b39      	ldr	r3, [pc, #228]	; (8000f98 <Emergency_Mode_State_Update+0xf4>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d048      	beq.n	8000f4a <Emergency_Mode_State_Update+0xa6>
 8000eb8:	4b38      	ldr	r3, [pc, #224]	; (8000f9c <Emergency_Mode_State_Update+0xf8>)
 8000eba:	78db      	ldrb	r3, [r3, #3]
 8000ebc:	2b45      	cmp	r3, #69	; 0x45
 8000ebe:	d144      	bne.n	8000f4a <Emergency_Mode_State_Update+0xa6>
		// Dont read ADC
		if(adc_conv_complete == 1){
 8000ec0:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <Emergency_Mode_State_Update+0xfc>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d105      	bne.n	8000ed4 <Emergency_Mode_State_Update+0x30>
			adc_val_capture = 1 ; // capture slider value
 8000ec8:	4b36      	ldr	r3, [pc, #216]	; (8000fa4 <Emergency_Mode_State_Update+0x100>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
			update_led_via_ADC = 0 ; // dont read until slider moved
 8000ece:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <Emergency_Mode_State_Update+0x104>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
		}

		//update LED intensity
		strobe_led_Intensity = state;
 8000ed4:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <Emergency_Mode_State_Update+0xf4>)
 8000ed6:	881a      	ldrh	r2, [r3, #0]
 8000ed8:	4b34      	ldr	r3, [pc, #208]	; (8000fac <Emergency_Mode_State_Update+0x108>)
 8000eda:	801a      	strh	r2, [r3, #0]

		// strobe
		if(param1 > 0 ){
 8000edc:	4b34      	ldr	r3, [pc, #208]	; (8000fb0 <Emergency_Mode_State_Update+0x10c>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d007      	beq.n	8000ef4 <Emergency_Mode_State_Update+0x50>
			em_count = 0 ;
 8000ee4:	4b33      	ldr	r3, [pc, #204]	; (8000fb4 <Emergency_Mode_State_Update+0x110>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
			strobe_delay = param1 ;  // update the ON/off time of strobe
 8000eea:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <Emergency_Mode_State_Update+0x10c>)
 8000eec:	881a      	ldrh	r2, [r3, #0]
 8000eee:	4b32      	ldr	r3, [pc, #200]	; (8000fb8 <Emergency_Mode_State_Update+0x114>)
 8000ef0:	801a      	strh	r2, [r3, #0]
 8000ef2:	e027      	b.n	8000f44 <Emergency_Mode_State_Update+0xa0>

		}
		// SOS output
		else if(param1 == 0 && param2 == 0 && custom_morse_msg_rcvd == 0 ){
 8000ef4:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <Emergency_Mode_State_Update+0x10c>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d110      	bne.n	8000f1e <Emergency_Mode_State_Update+0x7a>
 8000efc:	4b2f      	ldr	r3, [pc, #188]	; (8000fbc <Emergency_Mode_State_Update+0x118>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d10c      	bne.n	8000f1e <Emergency_Mode_State_Update+0x7a>
 8000f04:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <Emergency_Mode_State_Update+0x11c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d108      	bne.n	8000f1e <Emergency_Mode_State_Update+0x7a>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"SOS MORSE\n", 10) ;
 8000f0c:	220a      	movs	r2, #10
 8000f0e:	492d      	ldr	r1, [pc, #180]	; (8000fc4 <Emergency_Mode_State_Update+0x120>)
 8000f10:	482d      	ldr	r0, [pc, #180]	; (8000fc8 <Emergency_Mode_State_Update+0x124>)
 8000f12:	f005 fec3 	bl	8006c9c <HAL_UART_Transmit_IT>
			em_count =1 ; // SOS mode
 8000f16:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <Emergency_Mode_State_Update+0x110>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
 8000f1c:	e012      	b.n	8000f44 <Emergency_Mode_State_Update+0xa0>
		}
		// CUSTOM morse msg received
		else{
			if(param1 == 0 && custom_morse_msg_rcvd ==1 ){
 8000f1e:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <Emergency_Mode_State_Update+0x10c>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10e      	bne.n	8000f44 <Emergency_Mode_State_Update+0xa0>
 8000f26:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <Emergency_Mode_State_Update+0x11c>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d10a      	bne.n	8000f44 <Emergency_Mode_State_Update+0xa0>
				custom_morse_msg_rcvd = 0;
 8000f2e:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <Emergency_Mode_State_Update+0x11c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart2, (uint8_t*)"CUSTOM MORSE\n", 13) ;
 8000f34:	220d      	movs	r2, #13
 8000f36:	4925      	ldr	r1, [pc, #148]	; (8000fcc <Emergency_Mode_State_Update+0x128>)
 8000f38:	4823      	ldr	r0, [pc, #140]	; (8000fc8 <Emergency_Mode_State_Update+0x124>)
 8000f3a:	f005 feaf 	bl	8006c9c <HAL_UART_Transmit_IT>
				em_count = 2 ; // CUSTOM MORSE
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <Emergency_Mode_State_Update+0x110>)
 8000f40:	2202      	movs	r2, #2
 8000f42:	701a      	strb	r2, [r3, #0]
			}
		}



		UART_state_update = 0;
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <Emergency_Mode_State_Update+0xf0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
	}
	 // copy previous states information
		 ME_state = strobe_led_Intensity ;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <Emergency_Mode_State_Update+0x108>)
 8000f4c:	881a      	ldrh	r2, [r3, #0]
 8000f4e:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <Emergency_Mode_State_Update+0x12c>)
 8000f50:	801a      	strh	r2, [r3, #0]
		 ME_param1 =  strobe_delay;
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <Emergency_Mode_State_Update+0x114>)
 8000f54:	881a      	ldrh	r2, [r3, #0]
 8000f56:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <Emergency_Mode_State_Update+0x130>)
 8000f58:	801a      	strh	r2, [r3, #0]
		 if(strcmp(Custom_Morse_Msg, "000") == 0){
 8000f5a:	491f      	ldr	r1, [pc, #124]	; (8000fd8 <Emergency_Mode_State_Update+0x134>)
 8000f5c:	481f      	ldr	r0, [pc, #124]	; (8000fdc <Emergency_Mode_State_Update+0x138>)
 8000f5e:	f7ff f93f 	bl	80001e0 <strcmp>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d107      	bne.n	8000f78 <Emergency_Mode_State_Update+0xd4>
	//		ME_param2 = param2 ;
			sprintf(ME_param2, "%d", param2) ;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <Emergency_Mode_State_Update+0x118>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	491c      	ldr	r1, [pc, #112]	; (8000fe0 <Emergency_Mode_State_Update+0x13c>)
 8000f70:	481c      	ldr	r0, [pc, #112]	; (8000fe4 <Emergency_Mode_State_Update+0x140>)
 8000f72:	f007 f9cf 	bl	8008314 <siprintf>
			ME_param2[1] = Custom_Morse_Msg[1] ;
			ME_param2[2] = Custom_Morse_Msg[2] ;
		}


}
 8000f76:	e00b      	b.n	8000f90 <Emergency_Mode_State_Update+0xec>
			ME_param2[0] = Custom_Morse_Msg[0];
 8000f78:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <Emergency_Mode_State_Update+0x138>)
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <Emergency_Mode_State_Update+0x140>)
 8000f7e:	701a      	strb	r2, [r3, #0]
			ME_param2[1] = Custom_Morse_Msg[1] ;
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <Emergency_Mode_State_Update+0x138>)
 8000f82:	785a      	ldrb	r2, [r3, #1]
 8000f84:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <Emergency_Mode_State_Update+0x140>)
 8000f86:	705a      	strb	r2, [r3, #1]
			ME_param2[2] = Custom_Morse_Msg[2] ;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <Emergency_Mode_State_Update+0x138>)
 8000f8a:	789a      	ldrb	r2, [r3, #2]
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <Emergency_Mode_State_Update+0x140>)
 8000f8e:	709a      	strb	r2, [r3, #2]
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20002334 	.word	0x20002334
 8000f98:	20002336 	.word	0x20002336
 8000f9c:	20000044 	.word	0x20000044
 8000fa0:	20002316 	.word	0x20002316
 8000fa4:	20000002 	.word	0x20000002
 8000fa8:	2000231a 	.word	0x2000231a
 8000fac:	20000014 	.word	0x20000014
 8000fb0:	20002338 	.word	0x20002338
 8000fb4:	20000308 	.word	0x20000308
 8000fb8:	20000012 	.word	0x20000012
 8000fbc:	2000233a 	.word	0x2000233a
 8000fc0:	20002335 	.word	0x20002335
 8000fc4:	08008ea0 	.word	0x08008ea0
 8000fc8:	2000027c 	.word	0x2000027c
 8000fcc:	08008eac 	.word	0x08008eac
 8000fd0:	20002344 	.word	0x20002344
 8000fd4:	20002346 	.word	0x20002346
 8000fd8:	08008e9c 	.word	0x08008e9c
 8000fdc:	20000064 	.word	0x20000064
 8000fe0:	08008ebc 	.word	0x08008ebc
 8000fe4:	20000068 	.word	0x20000068

08000fe8 <Mood_Mode_State_Update>:

void Mood_Mode_State_Update(){
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
	if(UART_state_update ==1  && set_or_ret_sys_state[3] == 'M'){
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <Mood_Mode_State_Update+0x3c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d112      	bne.n	800101a <Mood_Mode_State_Update+0x32>
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <Mood_Mode_State_Update+0x40>)
 8000ff6:	78db      	ldrb	r3, [r3, #3]
 8000ff8:	2b4d      	cmp	r3, #77	; 0x4d
 8000ffa:	d10e      	bne.n	800101a <Mood_Mode_State_Update+0x32>

		// set R channel intensity
		R_channel_Intensity = state ;
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <Mood_Mode_State_Update+0x44>)
 8000ffe:	881a      	ldrh	r2, [r3, #0]
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <Mood_Mode_State_Update+0x48>)
 8001002:	801a      	strh	r2, [r3, #0]
		// set G channel intensity
		G_channel_Intensity = param1 ;
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <Mood_Mode_State_Update+0x4c>)
 8001006:	881a      	ldrh	r2, [r3, #0]
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <Mood_Mode_State_Update+0x50>)
 800100a:	801a      	strh	r2, [r3, #0]
		// set B channel intensity
		B_channel_Intensity = param2 ;
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <Mood_Mode_State_Update+0x54>)
 800100e:	881a      	ldrh	r2, [r3, #0]
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <Mood_Mode_State_Update+0x58>)
 8001012:	801a      	strh	r2, [r3, #0]

		UART_state_update = 0;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <Mood_Mode_State_Update+0x3c>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
	}
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	20002334 	.word	0x20002334
 8001028:	20000044 	.word	0x20000044
 800102c:	20002336 	.word	0x20002336
 8001030:	2000002e 	.word	0x2000002e
 8001034:	20002338 	.word	0x20002338
 8001038:	20000030 	.word	0x20000030
 800103c:	2000233a 	.word	0x2000233a
 8001040:	20000032 	.word	0x20000032

08001044 <Request_return_system_state>:
int length = 0;
void Request_return_system_state(){
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0

	// problem might have to manually insert characters into array
	// consider the case a value is  2 or 1 digit , three characters
	// wont be copied into the above array as needed
	if(READ_SYS ==1 ){
 8001048:	4b67      	ldr	r3, [pc, #412]	; (80011e8 <Request_return_system_state+0x1a4>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	f040 80c8 	bne.w	80011e2 <Request_return_system_state+0x19e>
		// dont read ADC
		if(adc_conv_complete == 1){
 8001052:	4b66      	ldr	r3, [pc, #408]	; (80011ec <Request_return_system_state+0x1a8>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d105      	bne.n	8001066 <Request_return_system_state+0x22>
			adc_val_capture = 1 ; // capture slider value
 800105a:	4b65      	ldr	r3, [pc, #404]	; (80011f0 <Request_return_system_state+0x1ac>)
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
			update_led_via_ADC = 0 ; // dont read until slider moved
 8001060:	4b64      	ldr	r3, [pc, #400]	; (80011f4 <Request_return_system_state+0x1b0>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
		}

		// flash light mode
		if(set_or_ret_sys_state[3] == 'F'){
 8001066:	4b64      	ldr	r3, [pc, #400]	; (80011f8 <Request_return_system_state+0x1b4>)
 8001068:	78db      	ldrb	r3, [r3, #3]
 800106a:	2b46      	cmp	r3, #70	; 0x46
 800106c:	d133      	bne.n	80010d6 <Request_return_system_state+0x92>
			/* here manual copy*/
			sprintf(ret_state, "%d\n", MF_state) ;
 800106e:	4b63      	ldr	r3, [pc, #396]	; (80011fc <Request_return_system_state+0x1b8>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	4962      	ldr	r1, [pc, #392]	; (8001200 <Request_return_system_state+0x1bc>)
 8001076:	4863      	ldr	r0, [pc, #396]	; (8001204 <Request_return_system_state+0x1c0>)
 8001078:	f007 f94c 	bl	8008314 <siprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)ret_state, strlen(ret_state)) ;
 800107c:	4861      	ldr	r0, [pc, #388]	; (8001204 <Request_return_system_state+0x1c0>)
 800107e:	f7ff f8b9 	bl	80001f4 <strlen>
 8001082:	4603      	mov	r3, r0
 8001084:	b29b      	uxth	r3, r3
 8001086:	461a      	mov	r2, r3
 8001088:	495e      	ldr	r1, [pc, #376]	; (8001204 <Request_return_system_state+0x1c0>)
 800108a:	485f      	ldr	r0, [pc, #380]	; (8001208 <Request_return_system_state+0x1c4>)
 800108c:	f005 fe06 	bl	8006c9c <HAL_UART_Transmit_IT>
			sprintf(ret_param1, "%d\n", MF_param1) ;
 8001090:	4b5e      	ldr	r3, [pc, #376]	; (800120c <Request_return_system_state+0x1c8>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	495a      	ldr	r1, [pc, #360]	; (8001200 <Request_return_system_state+0x1bc>)
 8001098:	485d      	ldr	r0, [pc, #372]	; (8001210 <Request_return_system_state+0x1cc>)
 800109a:	f007 f93b 	bl	8008314 <siprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)ret_param1, strlen(ret_param1)) ;
 800109e:	485c      	ldr	r0, [pc, #368]	; (8001210 <Request_return_system_state+0x1cc>)
 80010a0:	f7ff f8a8 	bl	80001f4 <strlen>
 80010a4:	4603      	mov	r3, r0
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	461a      	mov	r2, r3
 80010aa:	4959      	ldr	r1, [pc, #356]	; (8001210 <Request_return_system_state+0x1cc>)
 80010ac:	4856      	ldr	r0, [pc, #344]	; (8001208 <Request_return_system_state+0x1c4>)
 80010ae:	f005 fdf5 	bl	8006c9c <HAL_UART_Transmit_IT>

			sprintf(ret_param2, "%d\n", MF_param2) ;
 80010b2:	4b58      	ldr	r3, [pc, #352]	; (8001214 <Request_return_system_state+0x1d0>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	4951      	ldr	r1, [pc, #324]	; (8001200 <Request_return_system_state+0x1bc>)
 80010ba:	4857      	ldr	r0, [pc, #348]	; (8001218 <Request_return_system_state+0x1d4>)
 80010bc:	f007 f92a 	bl	8008314 <siprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)ret_param2, strlen(ret_param2)) ;
 80010c0:	4855      	ldr	r0, [pc, #340]	; (8001218 <Request_return_system_state+0x1d4>)
 80010c2:	f7ff f897 	bl	80001f4 <strlen>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	461a      	mov	r2, r3
 80010cc:	4952      	ldr	r1, [pc, #328]	; (8001218 <Request_return_system_state+0x1d4>)
 80010ce:	484e      	ldr	r0, [pc, #312]	; (8001208 <Request_return_system_state+0x1c4>)
 80010d0:	f005 fde4 	bl	8006c9c <HAL_UART_Transmit_IT>
 80010d4:	e064      	b.n	80011a0 <Request_return_system_state+0x15c>


		}
		// emergency mode
		else if(set_or_ret_sys_state[3] == 'E'){
 80010d6:	4b48      	ldr	r3, [pc, #288]	; (80011f8 <Request_return_system_state+0x1b4>)
 80010d8:	78db      	ldrb	r3, [r3, #3]
 80010da:	2b45      	cmp	r3, #69	; 0x45
 80010dc:	d144      	bne.n	8001168 <Request_return_system_state+0x124>
			/* here manual copy*/
			sprintf(ret_state, "%d\n",ME_state) ;
 80010de:	4b4f      	ldr	r3, [pc, #316]	; (800121c <Request_return_system_state+0x1d8>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	4946      	ldr	r1, [pc, #280]	; (8001200 <Request_return_system_state+0x1bc>)
 80010e6:	4847      	ldr	r0, [pc, #284]	; (8001204 <Request_return_system_state+0x1c0>)
 80010e8:	f007 f914 	bl	8008314 <siprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)ret_state, strlen(ret_state)) ;
 80010ec:	4845      	ldr	r0, [pc, #276]	; (8001204 <Request_return_system_state+0x1c0>)
 80010ee:	f7ff f881 	bl	80001f4 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	4942      	ldr	r1, [pc, #264]	; (8001204 <Request_return_system_state+0x1c0>)
 80010fa:	4843      	ldr	r0, [pc, #268]	; (8001208 <Request_return_system_state+0x1c4>)
 80010fc:	f005 fdce 	bl	8006c9c <HAL_UART_Transmit_IT>

			sprintf(ret_param1, "%d\n", ME_param1);
 8001100:	4b47      	ldr	r3, [pc, #284]	; (8001220 <Request_return_system_state+0x1dc>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	493e      	ldr	r1, [pc, #248]	; (8001200 <Request_return_system_state+0x1bc>)
 8001108:	4841      	ldr	r0, [pc, #260]	; (8001210 <Request_return_system_state+0x1cc>)
 800110a:	f007 f903 	bl	8008314 <siprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)ret_param1, strlen(ret_param1)) ;
 800110e:	4840      	ldr	r0, [pc, #256]	; (8001210 <Request_return_system_state+0x1cc>)
 8001110:	f7ff f870 	bl	80001f4 <strlen>
 8001114:	4603      	mov	r3, r0
 8001116:	b29b      	uxth	r3, r3
 8001118:	461a      	mov	r2, r3
 800111a:	493d      	ldr	r1, [pc, #244]	; (8001210 <Request_return_system_state+0x1cc>)
 800111c:	483a      	ldr	r0, [pc, #232]	; (8001208 <Request_return_system_state+0x1c4>)
 800111e:	f005 fdbd 	bl	8006c9c <HAL_UART_Transmit_IT>

			// check whether param2 was 0 OR CUSTOM morse message recvd
			if(strcmp(Custom_Morse_Msg, "000") == 0){
 8001122:	4940      	ldr	r1, [pc, #256]	; (8001224 <Request_return_system_state+0x1e0>)
 8001124:	4840      	ldr	r0, [pc, #256]	; (8001228 <Request_return_system_state+0x1e4>)
 8001126:	f7ff f85b 	bl	80001e0 <strcmp>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d104      	bne.n	800113a <Request_return_system_state+0xf6>

//				sprintf(ret_param2,'%d', ME_param2) ;
				strcpy(ret_param2, ME_param2) ;
 8001130:	493e      	ldr	r1, [pc, #248]	; (800122c <Request_return_system_state+0x1e8>)
 8001132:	4839      	ldr	r0, [pc, #228]	; (8001218 <Request_return_system_state+0x1d4>)
 8001134:	f007 f90e 	bl	8008354 <strcpy>
 8001138:	e00b      	b.n	8001152 <Request_return_system_state+0x10e>

			}else{
				ret_param2[0] = Custom_Morse_Msg[0];
 800113a:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <Request_return_system_state+0x1e4>)
 800113c:	781a      	ldrb	r2, [r3, #0]
 800113e:	4b36      	ldr	r3, [pc, #216]	; (8001218 <Request_return_system_state+0x1d4>)
 8001140:	701a      	strb	r2, [r3, #0]
				ret_param2[1] = Custom_Morse_Msg[1] ;
 8001142:	4b39      	ldr	r3, [pc, #228]	; (8001228 <Request_return_system_state+0x1e4>)
 8001144:	785a      	ldrb	r2, [r3, #1]
 8001146:	4b34      	ldr	r3, [pc, #208]	; (8001218 <Request_return_system_state+0x1d4>)
 8001148:	705a      	strb	r2, [r3, #1]
				ret_param2[2] = Custom_Morse_Msg[2] ;
 800114a:	4b37      	ldr	r3, [pc, #220]	; (8001228 <Request_return_system_state+0x1e4>)
 800114c:	789a      	ldrb	r2, [r3, #2]
 800114e:	4b32      	ldr	r3, [pc, #200]	; (8001218 <Request_return_system_state+0x1d4>)
 8001150:	709a      	strb	r2, [r3, #2]
			}
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)ret_param2, strlen(ret_param2)) ;
 8001152:	4831      	ldr	r0, [pc, #196]	; (8001218 <Request_return_system_state+0x1d4>)
 8001154:	f7ff f84e 	bl	80001f4 <strlen>
 8001158:	4603      	mov	r3, r0
 800115a:	b29b      	uxth	r3, r3
 800115c:	461a      	mov	r2, r3
 800115e:	492e      	ldr	r1, [pc, #184]	; (8001218 <Request_return_system_state+0x1d4>)
 8001160:	4829      	ldr	r0, [pc, #164]	; (8001208 <Request_return_system_state+0x1c4>)
 8001162:	f005 fd9b 	bl	8006c9c <HAL_UART_Transmit_IT>
 8001166:	e01b      	b.n	80011a0 <Request_return_system_state+0x15c>


		}
		// mood mode
		else{
			if(set_or_ret_sys_state[3] == 'M'){
 8001168:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <Request_return_system_state+0x1b4>)
 800116a:	78db      	ldrb	r3, [r3, #3]
 800116c:	2b4d      	cmp	r3, #77	; 0x4d
 800116e:	d117      	bne.n	80011a0 <Request_return_system_state+0x15c>
				/* here manual copy*/
				length =sprintf(ret_state, "%d\n", MM_state) ;
 8001170:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <Request_return_system_state+0x1ec>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4922      	ldr	r1, [pc, #136]	; (8001200 <Request_return_system_state+0x1bc>)
 8001178:	4822      	ldr	r0, [pc, #136]	; (8001204 <Request_return_system_state+0x1c0>)
 800117a:	f007 f8cb 	bl	8008314 <siprintf>
 800117e:	4603      	mov	r3, r0
 8001180:	4a2c      	ldr	r2, [pc, #176]	; (8001234 <Request_return_system_state+0x1f0>)
 8001182:	6013      	str	r3, [r2, #0]
//				HAL_UART_Transmit_IT(&huart2, (uint8_t*)ret_state, strlen(ret_state)) ;

				sprintf(ret_param1, "%d\n", MM_param1) ;
 8001184:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <Request_return_system_state+0x1f4>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	491d      	ldr	r1, [pc, #116]	; (8001200 <Request_return_system_state+0x1bc>)
 800118c:	4820      	ldr	r0, [pc, #128]	; (8001210 <Request_return_system_state+0x1cc>)
 800118e:	f007 f8c1 	bl	8008314 <siprintf>
//				HAL_UART_Transmit_IT(&huart2, (uint8_t*)ret_param1, strlen(ret_param1)) ;

				sprintf(ret_param2, "%d\n", MM_param2) ;
 8001192:	4b2a      	ldr	r3, [pc, #168]	; (800123c <Request_return_system_state+0x1f8>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	4919      	ldr	r1, [pc, #100]	; (8001200 <Request_return_system_state+0x1bc>)
 800119a:	481f      	ldr	r0, [pc, #124]	; (8001218 <Request_return_system_state+0x1d4>)
 800119c:	f007 f8ba 	bl	8008314 <siprintf>
//				HAL_UART_Transmit_IT(&huart2, (uint8_t*)ret_param2, strlen(ret_param2)) ;

			}
		}

		HAL_UART_Transmit_IT(&huart2, (uint8_t*)ret_state, strlen(ret_state)) ;
 80011a0:	4818      	ldr	r0, [pc, #96]	; (8001204 <Request_return_system_state+0x1c0>)
 80011a2:	f7ff f827 	bl	80001f4 <strlen>
 80011a6:	4603      	mov	r3, r0
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	4915      	ldr	r1, [pc, #84]	; (8001204 <Request_return_system_state+0x1c0>)
 80011ae:	4816      	ldr	r0, [pc, #88]	; (8001208 <Request_return_system_state+0x1c4>)
 80011b0:	f005 fd74 	bl	8006c9c <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)ret_param1, strlen(ret_param1)) ;
 80011b4:	4816      	ldr	r0, [pc, #88]	; (8001210 <Request_return_system_state+0x1cc>)
 80011b6:	f7ff f81d 	bl	80001f4 <strlen>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b29b      	uxth	r3, r3
 80011be:	461a      	mov	r2, r3
 80011c0:	4913      	ldr	r1, [pc, #76]	; (8001210 <Request_return_system_state+0x1cc>)
 80011c2:	4811      	ldr	r0, [pc, #68]	; (8001208 <Request_return_system_state+0x1c4>)
 80011c4:	f005 fd6a 	bl	8006c9c <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)ret_param2, strlen(ret_param2)) ;
 80011c8:	4813      	ldr	r0, [pc, #76]	; (8001218 <Request_return_system_state+0x1d4>)
 80011ca:	f7ff f813 	bl	80001f4 <strlen>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	461a      	mov	r2, r3
 80011d4:	4910      	ldr	r1, [pc, #64]	; (8001218 <Request_return_system_state+0x1d4>)
 80011d6:	480c      	ldr	r0, [pc, #48]	; (8001208 <Request_return_system_state+0x1c4>)
 80011d8:	f005 fd60 	bl	8006c9c <HAL_UART_Transmit_IT>



		READ_SYS = 0 ;
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <Request_return_system_state+0x1a4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
	}
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000233c 	.word	0x2000233c
 80011ec:	20002316 	.word	0x20002316
 80011f0:	20000002 	.word	0x20000002
 80011f4:	2000231a 	.word	0x2000231a
 80011f8:	20000044 	.word	0x20000044
 80011fc:	2000233e 	.word	0x2000233e
 8001200:	08008ec0 	.word	0x08008ec0
 8001204:	2000006c 	.word	0x2000006c
 8001208:	2000027c 	.word	0x2000027c
 800120c:	20002340 	.word	0x20002340
 8001210:	20000070 	.word	0x20000070
 8001214:	20002342 	.word	0x20002342
 8001218:	20000074 	.word	0x20000074
 800121c:	20002344 	.word	0x20002344
 8001220:	20002346 	.word	0x20002346
 8001224:	08008e9c 	.word	0x08008e9c
 8001228:	20000064 	.word	0x20000064
 800122c:	20000068 	.word	0x20000068
 8001230:	20002348 	.word	0x20002348
 8001234:	20002350 	.word	0x20002350
 8001238:	2000234a 	.word	0x2000234a
 800123c:	2000234c 	.word	0x2000234c

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001246:	f001 f93b 	bl	80024c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124a:	f000 fa4d 	bl	80016e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124e:	f000 fce5 	bl	8001c1c <MX_GPIO_Init>
  MX_DMA_Init();
 8001252:	f000 fcc5 	bl	8001be0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001256:	f000 fc91 	bl	8001b7c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800125a:	f000 faad 	bl	80017b8 <MX_ADC1_Init>
  MX_TIM2_Init();
 800125e:	f000 fb1b 	bl	8001898 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001262:	f000 fb9b 	bl	800199c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001266:	f000 fc11 	bl	8001a8c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(200);
 800126a:	20c8      	movs	r0, #200	; 0xc8
 800126c:	f001 f98e 	bl	800258c <HAL_Delay>
  HAL_UART_Transmit(&huart2, studentNum, 13, 150); //transmit student number
 8001270:	2396      	movs	r3, #150	; 0x96
 8001272:	220d      	movs	r2, #13
 8001274:	498f      	ldr	r1, [pc, #572]	; (80014b4 <main+0x274>)
 8001276:	4890      	ldr	r0, [pc, #576]	; (80014b8 <main+0x278>)
 8001278:	f005 fc86 	bl	8006b88 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)recvd_char, 1);
 800127c:	2201      	movs	r2, #1
 800127e:	498f      	ldr	r1, [pc, #572]	; (80014bc <main+0x27c>)
 8001280:	488d      	ldr	r0, [pc, #564]	; (80014b8 <main+0x278>)
 8001282:	f005 fd69 	bl	8006d58 <HAL_UART_Receive_IT>

  //Startup ADC
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, adc_buf_len) ;
 8001286:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800128a:	498d      	ldr	r1, [pc, #564]	; (80014c0 <main+0x280>)
 800128c:	488d      	ldr	r0, [pc, #564]	; (80014c4 <main+0x284>)
 800128e:	f001 fbaf 	bl	80029f0 <HAL_ADC_Start_DMA>

  // TIM2_CH1 start PWM
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1) ;
 8001292:	2100      	movs	r1, #0
 8001294:	488c      	ldr	r0, [pc, #560]	; (80014c8 <main+0x288>)
 8001296:	f004 fc4f 	bl	8005b38 <HAL_TIM_PWM_Start>
  // TIM2_CH4 start PWM - red LED
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) ;
 800129a:	210c      	movs	r1, #12
 800129c:	488a      	ldr	r0, [pc, #552]	; (80014c8 <main+0x288>)
 800129e:	f004 fc4b 	bl	8005b38 <HAL_TIM_PWM_Start>
  // TIM3_CH4 start PWM - GREEN LED
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80012a2:	210c      	movs	r1, #12
 80012a4:	4889      	ldr	r0, [pc, #548]	; (80014cc <main+0x28c>)
 80012a6:	f004 fc47 	bl	8005b38 <HAL_TIM_PWM_Start>
  // TIM4_CH1 start PWM - BLUE LED
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) ;
 80012aa:	2100      	movs	r1, #0
 80012ac:	4888      	ldr	r0, [pc, #544]	; (80014d0 <main+0x290>)
 80012ae:	f004 fc43 	bl	8005b38 <HAL_TIM_PWM_Start>

  strobe_ticks  = HAL_GetTick() ;
 80012b2:	f001 f95f 	bl	8002574 <HAL_GetTick>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a86      	ldr	r2, [pc, #536]	; (80014d4 <main+0x294>)
 80012ba:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // left button press to update system state (MF -> ME -> MM)
	  system_state_update() ;
 80012bc:	f7ff fbe0 	bl	8000a80 <system_state_update>
	  //run adc and capture previous snapshot of ADC value and adc movement processing
	  adc_dma_val_processing();
 80012c0:	f7ff fb4e 	bl	8000960 <adc_dma_val_processing>
	  // Turn LED ON/OFF
	  TURN_LED_ON_OFF() ;
 80012c4:	f7ff fca2 	bl	8000c0c <TURN_LED_ON_OFF>
	  // read UART params
	  convert_UART_state_params_to_Int() ;
 80012c8:	f7ff fd20 	bl	8000d0c <convert_UART_state_params_to_Int>
	  // REAS sys state
	  Request_return_system_state() ;
 80012cc:	f7ff feba 	bl	8001044 <Request_return_system_state>
//	  if(READ_SYS ==1){
//		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)"state transmission\n", 19);
//		  READ_SYS = 0;
//	  }
	 // system state
	 if(button_count == 0 || start_up == 1 ){
 80012d0:	4b81      	ldr	r3, [pc, #516]	; (80014d8 <main+0x298>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <main+0xa0>
 80012d8:	4b80      	ldr	r3, [pc, #512]	; (80014dc <main+0x29c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d143      	bne.n	8001368 <main+0x128>

		 start_up = 0 ; //for default MF state
 80012e0:	4b7e      	ldr	r3, [pc, #504]	; (80014dc <main+0x29c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]

		 MF_mode_LED() ; // sets the corresponding mode LED
 80012e6:	f000 fd3d 	bl	8001d64 <MF_mode_LED>
		 em_count=0;     // reset the emergency mode count
 80012ea:	4b7d      	ldr	r3, [pc, #500]	; (80014e0 <main+0x2a0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
		 em_default = 1; // to re-enter the EM state
 80012f0:	4b7c      	ldr	r3, [pc, #496]	; (80014e4 <main+0x2a4>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]

		if(LED_ON == 1){
 80012f6:	4b7c      	ldr	r3, [pc, #496]	; (80014e8 <main+0x2a8>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d178      	bne.n	80013f0 <main+0x1b0>
			 // if LED_ON and SLIDER MOVED -> updated LED intensity
			if(update_led_via_ADC == 1 && UART_state_update == 0){
 80012fe:	4b7b      	ldr	r3, [pc, #492]	; (80014ec <main+0x2ac>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d10d      	bne.n	8001322 <main+0xe2>
 8001306:	4b7a      	ldr	r3, [pc, #488]	; (80014f0 <main+0x2b0>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d109      	bne.n	8001322 <main+0xe2>

				htim2.Instance->CCR1 =  LED_intensity ; // vary the duty cycle of the LED [1:512]
 800130e:	4b79      	ldr	r3, [pc, #484]	; (80014f4 <main+0x2b4>)
 8001310:	881a      	ldrh	r2, [r3, #0]
 8001312:	4b6d      	ldr	r3, [pc, #436]	; (80014c8 <main+0x288>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	635a      	str	r2, [r3, #52]	; 0x34
				MF_state = LED_intensity ;
 8001318:	4b76      	ldr	r3, [pc, #472]	; (80014f4 <main+0x2b4>)
 800131a:	881a      	ldrh	r2, [r3, #0]
 800131c:	4b76      	ldr	r3, [pc, #472]	; (80014f8 <main+0x2b8>)
 800131e:	801a      	strh	r2, [r3, #0]
		if(LED_ON == 1){
 8001320:	e066      	b.n	80013f0 <main+0x1b0>
			}
			else if(UART_state_update == 1 && state > 0 && set_or_ret_sys_state[3] =='F' ){
 8001322:	4b73      	ldr	r3, [pc, #460]	; (80014f0 <main+0x2b0>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d162      	bne.n	80013f0 <main+0x1b0>
 800132a:	4b74      	ldr	r3, [pc, #464]	; (80014fc <main+0x2bc>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d05e      	beq.n	80013f0 <main+0x1b0>
 8001332:	4b73      	ldr	r3, [pc, #460]	; (8001500 <main+0x2c0>)
 8001334:	78db      	ldrb	r3, [r3, #3]
 8001336:	2b46      	cmp	r3, #70	; 0x46
 8001338:	d15a      	bne.n	80013f0 <main+0x1b0>

				if(adc_conv_complete == 1){
 800133a:	4b72      	ldr	r3, [pc, #456]	; (8001504 <main+0x2c4>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d105      	bne.n	800134e <main+0x10e>
					adc_val_capture = 1 ; // capture slider value
 8001342:	4b71      	ldr	r3, [pc, #452]	; (8001508 <main+0x2c8>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
					update_led_via_ADC = 0 ; // dont read until slider moved
 8001348:	4b68      	ldr	r3, [pc, #416]	; (80014ec <main+0x2ac>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
				}
				htim2.Instance->CCR1 = state ;
 800134e:	4b6b      	ldr	r3, [pc, #428]	; (80014fc <main+0x2bc>)
 8001350:	881a      	ldrh	r2, [r3, #0]
 8001352:	4b5d      	ldr	r3, [pc, #372]	; (80014c8 <main+0x288>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	635a      	str	r2, [r3, #52]	; 0x34

				MF_state = state ;  // for when sys request made
 8001358:	4b68      	ldr	r3, [pc, #416]	; (80014fc <main+0x2bc>)
 800135a:	881a      	ldrh	r2, [r3, #0]
 800135c:	4b66      	ldr	r3, [pc, #408]	; (80014f8 <main+0x2b8>)
 800135e:	801a      	strh	r2, [r3, #0]

				UART_state_update = 0;
 8001360:	4b63      	ldr	r3, [pc, #396]	; (80014f0 <main+0x2b0>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
		if(LED_ON == 1){
 8001366:	e043      	b.n	80013f0 <main+0x1b0>
//					HAL_UART_Transmit_IT(&huart2, (uint8_t*)"state transmit\n", 15);
//					UART_ret_sys_state = 0 ;
//				}
//			}
		}
	 }else if(button_count == 1 ){// right button system state updated
 8001368:	4b5b      	ldr	r3, [pc, #364]	; (80014d8 <main+0x298>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d104      	bne.n	800137a <main+0x13a>
		 ME_mode_LED() ; // sets the corresponding modes LED
 8001370:	f000 fd16 	bl	8001da0 <ME_mode_LED>

		 Emergency_Mode_State_Update() ;
 8001374:	f7ff fd96 	bl	8000ea4 <Emergency_Mode_State_Update>
 8001378:	e03b      	b.n	80013f2 <main+0x1b2>

	 }else{
		 if(button_count == 2){ // Mood Mode
 800137a:	4b57      	ldr	r3, [pc, #348]	; (80014d8 <main+0x298>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d137      	bne.n	80013f2 <main+0x1b2>
			 // SET THE NECESSARY STATES
			 em_count=0; // reset the emergency mode state
 8001382:	4b57      	ldr	r3, [pc, #348]	; (80014e0 <main+0x2a0>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
			 em_default = 1; // to re-enter EM state
 8001388:	4b56      	ldr	r3, [pc, #344]	; (80014e4 <main+0x2a4>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]

			 MM_mode_LED() ; //sets the corresponding modes LED
 800138e:	f000 fd1f 	bl	8001dd0 <MM_mode_LED>

			 Mood_Mode_State_Update() ; // update the necessary MM states
 8001392:	f7ff fe29 	bl	8000fe8 <Mood_Mode_State_Update>
			 if(LED_ON == 1){
 8001396:	4b54      	ldr	r3, [pc, #336]	; (80014e8 <main+0x2a8>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d11b      	bne.n	80013d6 <main+0x196>
				 // set to channel intensities to default values
				 // no longer default mode - reset back to default in other states?
				 //red channel
				 htim2.Instance->CCR4 = R_channel_Intensity ;
 800139e:	4b5b      	ldr	r3, [pc, #364]	; (800150c <main+0x2cc>)
 80013a0:	881a      	ldrh	r2, [r3, #0]
 80013a2:	4b49      	ldr	r3, [pc, #292]	; (80014c8 <main+0x288>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	641a      	str	r2, [r3, #64]	; 0x40
				 MM_state = R_channel_Intensity ;
 80013a8:	4b58      	ldr	r3, [pc, #352]	; (800150c <main+0x2cc>)
 80013aa:	881a      	ldrh	r2, [r3, #0]
 80013ac:	4b58      	ldr	r3, [pc, #352]	; (8001510 <main+0x2d0>)
 80013ae:	801a      	strh	r2, [r3, #0]
				 // GREEN channel
				 htim3.Instance->CCR4 = G_channel_Intensity ;
 80013b0:	4b58      	ldr	r3, [pc, #352]	; (8001514 <main+0x2d4>)
 80013b2:	881a      	ldrh	r2, [r3, #0]
 80013b4:	4b45      	ldr	r3, [pc, #276]	; (80014cc <main+0x28c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	641a      	str	r2, [r3, #64]	; 0x40
				 MM_param1 = G_channel_Intensity ;
 80013ba:	4b56      	ldr	r3, [pc, #344]	; (8001514 <main+0x2d4>)
 80013bc:	881a      	ldrh	r2, [r3, #0]
 80013be:	4b56      	ldr	r3, [pc, #344]	; (8001518 <main+0x2d8>)
 80013c0:	801a      	strh	r2, [r3, #0]
				 // BLUE channel
				 htim4.Instance->CCR1 = B_channel_Intensity ;
 80013c2:	4b56      	ldr	r3, [pc, #344]	; (800151c <main+0x2dc>)
 80013c4:	881a      	ldrh	r2, [r3, #0]
 80013c6:	4b42      	ldr	r3, [pc, #264]	; (80014d0 <main+0x290>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	635a      	str	r2, [r3, #52]	; 0x34
				 MM_param2 = B_channel_Intensity ;
 80013cc:	4b53      	ldr	r3, [pc, #332]	; (800151c <main+0x2dc>)
 80013ce:	881a      	ldrh	r2, [r3, #0]
 80013d0:	4b53      	ldr	r3, [pc, #332]	; (8001520 <main+0x2e0>)
 80013d2:	801a      	strh	r2, [r3, #0]
 80013d4:	e00d      	b.n	80013f2 <main+0x1b2>


			 }else{
				 // put all channels off
				 //red channel
				 htim2.Instance->CCR4 =  0;
 80013d6:	4b3c      	ldr	r3, [pc, #240]	; (80014c8 <main+0x288>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2200      	movs	r2, #0
 80013dc:	641a      	str	r2, [r3, #64]	; 0x40
				 // GREEN channel
				 htim3.Instance->CCR4 = 0 ;
 80013de:	4b3b      	ldr	r3, [pc, #236]	; (80014cc <main+0x28c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2200      	movs	r2, #0
 80013e4:	641a      	str	r2, [r3, #64]	; 0x40
				 // BLUE channel
				 htim4.Instance->CCR1 = 0 ;
 80013e6:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <main+0x290>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2200      	movs	r2, #0
 80013ec:	635a      	str	r2, [r3, #52]	; 0x34
 80013ee:	e000      	b.n	80013f2 <main+0x1b2>
		if(LED_ON == 1){
 80013f0:	bf00      	nop

		 }
	 }

	 // right button state update
	 right_button_state_update() ;
 80013f2:	f7ff fbd5 	bl	8000ba0 <right_button_state_update>
	 //EMERGENCY MODES
	  if(button_count ==1 ){
 80013f6:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <main+0x298>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	f47f af5e 	bne.w	80012bc <main+0x7c>

		 if(em_count == 0 || em_default ==1){ //strobe wit default intensity
 8001400:	4b37      	ldr	r3, [pc, #220]	; (80014e0 <main+0x2a0>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <main+0x1d0>
 8001408:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <main+0x2a4>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d112      	bne.n	8001436 <main+0x1f6>
			 em_default = 0 ; //default state reached
 8001410:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <main+0x2a4>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2120      	movs	r1, #32
 800141a:	4842      	ldr	r0, [pc, #264]	; (8001524 <main+0x2e4>)
 800141c:	f002 fdf0 	bl	8004000 <HAL_GPIO_WritePin>


			 if(LED_ON){ //LED_on =?
 8001420:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <main+0x2a8>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 8145 	beq.w	80016b4 <main+0x474>
				 // strobe LED with provided on time
				 EM_mode_Strobe(strobe_delay) ;
 800142a:	4b3f      	ldr	r3, [pc, #252]	; (8001528 <main+0x2e8>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fc1c 	bl	8000c6c <EM_mode_Strobe>
			 if(LED_ON){ //LED_on =?
 8001434:	e13e      	b.n	80016b4 <main+0x474>
			 }
		 }
		 else if(em_count ==1){ // SOS MOSRE
 8001436:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <main+0x2a0>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	f040 8130 	bne.w	80016a0 <main+0x460>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	2120      	movs	r1, #32
 8001444:	4837      	ldr	r0, [pc, #220]	; (8001524 <main+0x2e4>)
 8001446:	f002 fddb 	bl	8004000 <HAL_GPIO_WritePin>

			 for(int i = 0; SOS[i] !='\0' ; i++){
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	e11f      	b.n	8001690 <main+0x450>

				 if(SOS[i] == '.' && DOT == 1){
 8001450:	4a36      	ldr	r2, [pc, #216]	; (800152c <main+0x2ec>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b2e      	cmp	r3, #46	; 0x2e
 800145a:	d175      	bne.n	8001548 <main+0x308>
 800145c:	4b34      	ldr	r3, [pc, #208]	; (8001530 <main+0x2f0>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d171      	bne.n	8001548 <main+0x308>

					 htim2.Instance->CCR1 = 512 ;
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <main+0x288>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146c:	635a      	str	r2, [r3, #52]	; 0x34
					 timePassed = HAL_GetTick() - morse_current_time ;
 800146e:	f001 f881 	bl	8002574 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <main+0x2f4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	4a2f      	ldr	r2, [pc, #188]	; (8001538 <main+0x2f8>)
 800147c:	6013      	str	r3, [r2, #0]
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 800147e:	f001 f879 	bl	8002574 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <main+0x2f4>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	4a2c      	ldr	r2, [pc, #176]	; (800153c <main+0x2fc>)
 800148c:	8812      	ldrh	r2, [r2, #0]
 800148e:	4293      	cmp	r3, r2
 8001490:	f0c0 80ed 	bcc.w	800166e <main+0x42e>
						 morse_current_time = HAL_GetTick() ;
 8001494:	f001 f86e 	bl	8002574 <HAL_GetTick>
 8001498:	4603      	mov	r3, r0
 800149a:	4a26      	ldr	r2, [pc, #152]	; (8001534 <main+0x2f4>)
 800149c:	6013      	str	r3, [r2, #0]

						 DOT=0;
 800149e:	4b24      	ldr	r3, [pc, #144]	; (8001530 <main+0x2f0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
						 DASH =0 ;
 80014a4:	4b26      	ldr	r3, [pc, #152]	; (8001540 <main+0x300>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
						 space_in_letter = 1 ;
 80014aa:	4b26      	ldr	r3, [pc, #152]	; (8001544 <main+0x304>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 80014b0:	e0dd      	b.n	800166e <main+0x42e>
 80014b2:	bf00      	nop
 80014b4:	20000034 	.word	0x20000034
 80014b8:	2000027c 	.word	0x2000027c
 80014bc:	20002330 	.word	0x20002330
 80014c0:	2000030c 	.word	0x2000030c
 80014c4:	20000104 	.word	0x20000104
 80014c8:	20000198 	.word	0x20000198
 80014cc:	200001e4 	.word	0x200001e4
 80014d0:	20000230 	.word	0x20000230
 80014d4:	2000231c 	.word	0x2000231c
 80014d8:	20000304 	.word	0x20000304
 80014dc:	20000000 	.word	0x20000000
 80014e0:	20000308 	.word	0x20000308
 80014e4:	20000001 	.word	0x20000001
 80014e8:	2000231b 	.word	0x2000231b
 80014ec:	2000231a 	.word	0x2000231a
 80014f0:	20002334 	.word	0x20002334
 80014f4:	20000010 	.word	0x20000010
 80014f8:	2000233e 	.word	0x2000233e
 80014fc:	20002336 	.word	0x20002336
 8001500:	20000044 	.word	0x20000044
 8001504:	20002316 	.word	0x20002316
 8001508:	20000002 	.word	0x20000002
 800150c:	2000002e 	.word	0x2000002e
 8001510:	20002348 	.word	0x20002348
 8001514:	20000030 	.word	0x20000030
 8001518:	2000234a 	.word	0x2000234a
 800151c:	20000032 	.word	0x20000032
 8001520:	2000234c 	.word	0x2000234c
 8001524:	48000400 	.word	0x48000400
 8001528:	20000012 	.word	0x20000012
 800152c:	2000001c 	.word	0x2000001c
 8001530:	20000018 	.word	0x20000018
 8001534:	20002328 	.word	0x20002328
 8001538:	20002324 	.word	0x20002324
 800153c:	20000016 	.word	0x20000016
 8001540:	20000019 	.word	0x20000019
 8001544:	2000232c 	.word	0x2000232c

					 }
				 }
				 else if(SOS[i] =='-'  && DASH == 1){
 8001548:	4a5b      	ldr	r2, [pc, #364]	; (80016b8 <main+0x478>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b2d      	cmp	r3, #45	; 0x2d
 8001552:	d125      	bne.n	80015a0 <main+0x360>
 8001554:	4b59      	ldr	r3, [pc, #356]	; (80016bc <main+0x47c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d121      	bne.n	80015a0 <main+0x360>

					 htim2.Instance->CCR1 = 512 ;
 800155c:	4b58      	ldr	r3, [pc, #352]	; (80016c0 <main+0x480>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001564:	635a      	str	r2, [r3, #52]	; 0x34
					 if(HAL_GetTick() - morse_current_time >= 3*time_unit  ){
 8001566:	f001 f805 	bl	8002574 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	4b55      	ldr	r3, [pc, #340]	; (80016c4 <main+0x484>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	1ad2      	subs	r2, r2, r3
 8001572:	4b55      	ldr	r3, [pc, #340]	; (80016c8 <main+0x488>)
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	4619      	mov	r1, r3
 8001578:	460b      	mov	r3, r1
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	440b      	add	r3, r1
 800157e:	429a      	cmp	r2, r3
 8001580:	d375      	bcc.n	800166e <main+0x42e>
						 morse_current_time = HAL_GetTick() ;
 8001582:	f000 fff7 	bl	8002574 <HAL_GetTick>
 8001586:	4603      	mov	r3, r0
 8001588:	4a4e      	ldr	r2, [pc, #312]	; (80016c4 <main+0x484>)
 800158a:	6013      	str	r3, [r2, #0]

						 DOT =  0 ;
 800158c:	4b4f      	ldr	r3, [pc, #316]	; (80016cc <main+0x48c>)
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
						 DASH = 0 ;
 8001592:	4b4a      	ldr	r3, [pc, #296]	; (80016bc <main+0x47c>)
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
						 space_in_letter = 1 ;
 8001598:	4b4d      	ldr	r3, [pc, #308]	; (80016d0 <main+0x490>)
 800159a:	2201      	movs	r2, #1
 800159c:	701a      	strb	r2, [r3, #0]
					 if(HAL_GetTick() - morse_current_time >= 3*time_unit  ){
 800159e:	e066      	b.n	800166e <main+0x42e>

					 }
				 }
				 else if(SOS[i]== ' '   && space_in_letter ==1){
 80015a0:	4a45      	ldr	r2, [pc, #276]	; (80016b8 <main+0x478>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	d141      	bne.n	8001630 <main+0x3f0>
 80015ac:	4b48      	ldr	r3, [pc, #288]	; (80016d0 <main+0x490>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d13d      	bne.n	8001630 <main+0x3f0>

					 htim2.Instance->CCR1 = 0 ;
 80015b4:	4b42      	ldr	r3, [pc, #264]	; (80016c0 <main+0x480>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2200      	movs	r2, #0
 80015ba:	635a      	str	r2, [r3, #52]	; 0x34

					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 80015bc:	f000 ffda 	bl	8002574 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b40      	ldr	r3, [pc, #256]	; (80016c4 <main+0x484>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	4a3f      	ldr	r2, [pc, #252]	; (80016c8 <main+0x488>)
 80015ca:	8812      	ldrh	r2, [r2, #0]
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d34d      	bcc.n	800166c <main+0x42c>
						 morse_current_time = HAL_GetTick() ;
 80015d0:	f000 ffd0 	bl	8002574 <HAL_GetTick>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a3b      	ldr	r2, [pc, #236]	; (80016c4 <main+0x484>)
 80015d8:	6013      	str	r3, [r2, #0]
						 space_in_letter = 0 ;
 80015da:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <main+0x490>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]

						 //NEXT CHARACTER CHECK
						 next_char_check = i ;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b3b      	ldr	r3, [pc, #236]	; (80016d4 <main+0x494>)
 80015e6:	701a      	strb	r2, [r3, #0]
						 next_char_check++ ;
 80015e8:	4b3a      	ldr	r3, [pc, #232]	; (80016d4 <main+0x494>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <main+0x494>)
 80015f2:	701a      	strb	r2, [r3, #0]
						 if(SOS[next_char_check] == '.' && DOT == 0 ){
 80015f4:	4b37      	ldr	r3, [pc, #220]	; (80016d4 <main+0x494>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <main+0x478>)
 80015fc:	5c9b      	ldrb	r3, [r3, r2]
 80015fe:	2b2e      	cmp	r3, #46	; 0x2e
 8001600:	d107      	bne.n	8001612 <main+0x3d2>
 8001602:	4b32      	ldr	r3, [pc, #200]	; (80016cc <main+0x48c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d103      	bne.n	8001612 <main+0x3d2>
							 DOT= 1 ;
 800160a:	4b30      	ldr	r3, [pc, #192]	; (80016cc <main+0x48c>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 8001610:	e02c      	b.n	800166c <main+0x42c>
						 }else if(SOS[next_char_check] == '-' && DASH == 0){
 8001612:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <main+0x494>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <main+0x478>)
 800161a:	5c9b      	ldrb	r3, [r3, r2]
 800161c:	2b2d      	cmp	r3, #45	; 0x2d
 800161e:	d125      	bne.n	800166c <main+0x42c>
 8001620:	4b26      	ldr	r3, [pc, #152]	; (80016bc <main+0x47c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d121      	bne.n	800166c <main+0x42c>
							 DASH =1;
 8001628:	4b24      	ldr	r3, [pc, #144]	; (80016bc <main+0x47c>)
 800162a:	2201      	movs	r2, #1
 800162c:	701a      	strb	r2, [r3, #0]
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 800162e:	e01d      	b.n	800166c <main+0x42c>

					 }

				 }
				 else{
					 if(SOS[i]== '\0'){
 8001630:	4a21      	ldr	r2, [pc, #132]	; (80016b8 <main+0x478>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d118      	bne.n	800166e <main+0x42e>

						 htim2.Instance->CCR1 = 0 ;
 800163c:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <main+0x480>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2200      	movs	r2, #0
 8001642:	635a      	str	r2, [r3, #52]	; 0x34
						 if(HAL_GetTick() - morse_current_time >= 3*time_unit){
 8001644:	f000 ff96 	bl	8002574 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <main+0x484>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	1ad2      	subs	r2, r2, r3
 8001650:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <main+0x488>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	460b      	mov	r3, r1
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	440b      	add	r3, r1
 800165c:	429a      	cmp	r2, r3
 800165e:	d306      	bcc.n	800166e <main+0x42e>
							morse_current_time = HAL_GetTick() ;
 8001660:	f000 ff88 	bl	8002574 <HAL_GetTick>
 8001664:	4603      	mov	r3, r0
 8001666:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <main+0x484>)
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e000      	b.n	800166e <main+0x42e>
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 800166c:	bf00      	nop

						 }
					 }
				 }
				 if(next_char_checked == 1){
 800166e:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <main+0x498>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d109      	bne.n	800168a <main+0x44a>
					 character = SOS[i++] ;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <main+0x478>)
 800167e:	5cd2      	ldrb	r2, [r2, r3]
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <main+0x49c>)
 8001682:	701a      	strb	r2, [r3, #0]
					 next_char_checked = 0;
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <main+0x498>)
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
			 for(int i = 0; SOS[i] !='\0' ; i++){
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3301      	adds	r3, #1
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <main+0x478>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	f47f aed9 	bne.w	8001450 <main+0x210>
 800169e:	e60d      	b.n	80012bc <main+0x7c>
				 }
			 }
		 }
		 else{
			 if(em_count == 2){ // CUSTOM MORSE
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <main+0x4a0>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	f47f ae09 	bne.w	80012bc <main+0x7c>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80016aa:	2201      	movs	r2, #1
 80016ac:	2120      	movs	r1, #32
 80016ae:	480d      	ldr	r0, [pc, #52]	; (80016e4 <main+0x4a4>)
 80016b0:	f002 fca6 	bl	8004000 <HAL_GPIO_WritePin>
	  system_state_update() ;
 80016b4:	e602      	b.n	80012bc <main+0x7c>
 80016b6:	bf00      	nop
 80016b8:	2000001c 	.word	0x2000001c
 80016bc:	20000019 	.word	0x20000019
 80016c0:	20000198 	.word	0x20000198
 80016c4:	20002328 	.word	0x20002328
 80016c8:	20000016 	.word	0x20000016
 80016cc:	20000018 	.word	0x20000018
 80016d0:	2000232c 	.word	0x2000232c
 80016d4:	2000232d 	.word	0x2000232d
 80016d8:	2000232e 	.word	0x2000232e
 80016dc:	2000232f 	.word	0x2000232f
 80016e0:	20000308 	.word	0x20000308
 80016e4:	48000400 	.word	0x48000400

080016e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b0a6      	sub	sp, #152	; 0x98
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016f2:	2228      	movs	r2, #40	; 0x28
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f006 fe04 	bl	8008304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2258      	movs	r2, #88	; 0x58
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f006 fdf6 	bl	8008304 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001718:	2302      	movs	r3, #2
 800171a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800171c:	2301      	movs	r3, #1
 800171e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001720:	2310      	movs	r3, #16
 8001722:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001726:	2302      	movs	r3, #2
 8001728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800172c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001730:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001734:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001738:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001742:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001746:	4618      	mov	r0, r3
 8001748:	f002 fc96 	bl	8004078 <HAL_RCC_OscConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001752:	f000 fb6b 	bl	8001e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001756:	230f      	movs	r3, #15
 8001758:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175a:	2302      	movs	r3, #2
 800175c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001766:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800176c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001770:	2102      	movs	r1, #2
 8001772:	4618      	mov	r0, r3
 8001774:	f003 fcd4 	bl	8005120 <HAL_RCC_ClockConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800177e:	f000 fb55 	bl	8001e2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <SystemClock_Config+0xcc>)
 8001784:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800178a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001790:	2300      	movs	r3, #0
 8001792:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001794:	2300      	movs	r3, #0
 8001796:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	4618      	mov	r0, r3
 800179c:	f003 fef6 	bl	800558c <HAL_RCCEx_PeriphCLKConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017a6:	f000 fb41 	bl	8001e2c <Error_Handler>
  }
}
 80017aa:	bf00      	nop
 80017ac:	3798      	adds	r7, #152	; 0x98
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	00300082 	.word	0x00300082

080017b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
 80017d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017da:	4b2e      	ldr	r3, [pc, #184]	; (8001894 <MX_ADC1_Init+0xdc>)
 80017dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80017e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017e2:	4b2c      	ldr	r3, [pc, #176]	; (8001894 <MX_ADC1_Init+0xdc>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017e8:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <MX_ADC1_Init+0xdc>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017ee:	4b29      	ldr	r3, [pc, #164]	; (8001894 <MX_ADC1_Init+0xdc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017f4:	4b27      	ldr	r3, [pc, #156]	; (8001894 <MX_ADC1_Init+0xdc>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017fa:	4b26      	ldr	r3, [pc, #152]	; (8001894 <MX_ADC1_Init+0xdc>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001802:	4b24      	ldr	r3, [pc, #144]	; (8001894 <MX_ADC1_Init+0xdc>)
 8001804:	2200      	movs	r2, #0
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001808:	4b22      	ldr	r3, [pc, #136]	; (8001894 <MX_ADC1_Init+0xdc>)
 800180a:	2201      	movs	r2, #1
 800180c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <MX_ADC1_Init+0xdc>)
 8001810:	2200      	movs	r2, #0
 8001812:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <MX_ADC1_Init+0xdc>)
 8001816:	2201      	movs	r2, #1
 8001818:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <MX_ADC1_Init+0xdc>)
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <MX_ADC1_Init+0xdc>)
 8001824:	2204      	movs	r2, #4
 8001826:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <MX_ADC1_Init+0xdc>)
 800182a:	2200      	movs	r2, #0
 800182c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <MX_ADC1_Init+0xdc>)
 8001830:	2200      	movs	r2, #0
 8001832:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001834:	4817      	ldr	r0, [pc, #92]	; (8001894 <MX_ADC1_Init+0xdc>)
 8001836:	f000 fee1 	bl	80025fc <HAL_ADC_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001840:	f000 faf4 	bl	8001e2c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	4619      	mov	r1, r3
 800184e:	4811      	ldr	r0, [pc, #68]	; (8001894 <MX_ADC1_Init+0xdc>)
 8001850:	f001 fcd6 	bl	8003200 <HAL_ADCEx_MultiModeConfigChannel>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800185a:	f000 fae7 	bl	8001e2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800185e:	2301      	movs	r3, #1
 8001860:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001862:	2301      	movs	r3, #1
 8001864:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	4619      	mov	r1, r3
 800187a:	4806      	ldr	r0, [pc, #24]	; (8001894 <MX_ADC1_Init+0xdc>)
 800187c:	f001 f9d4 	bl	8002c28 <HAL_ADC_ConfigChannel>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001886:	f000 fad1 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	3728      	adds	r7, #40	; 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000104 	.word	0x20000104

08001898 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08e      	sub	sp, #56	; 0x38
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b8:	463b      	mov	r3, r7
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	615a      	str	r2, [r3, #20]
 80018c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018ca:	4b33      	ldr	r3, [pc, #204]	; (8001998 <MX_TIM2_Init+0x100>)
 80018cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36;
 80018d2:	4b31      	ldr	r3, [pc, #196]	; (8001998 <MX_TIM2_Init+0x100>)
 80018d4:	2224      	movs	r2, #36	; 0x24
 80018d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d8:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <MX_TIM2_Init+0x100>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 512;
 80018de:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <MX_TIM2_Init+0x100>)
 80018e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e6:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <MX_TIM2_Init+0x100>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ec:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <MX_TIM2_Init+0x100>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018f2:	4829      	ldr	r0, [pc, #164]	; (8001998 <MX_TIM2_Init+0x100>)
 80018f4:	f004 f868 	bl	80059c8 <HAL_TIM_Base_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80018fe:	f000 fa95 	bl	8001e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001908:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800190c:	4619      	mov	r1, r3
 800190e:	4822      	ldr	r0, [pc, #136]	; (8001998 <MX_TIM2_Init+0x100>)
 8001910:	f004 fb32 	bl	8005f78 <HAL_TIM_ConfigClockSource>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800191a:	f000 fa87 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800191e:	481e      	ldr	r0, [pc, #120]	; (8001998 <MX_TIM2_Init+0x100>)
 8001920:	f004 f8a9 	bl	8005a76 <HAL_TIM_PWM_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800192a:	f000 fa7f 	bl	8001e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001936:	f107 031c 	add.w	r3, r7, #28
 800193a:	4619      	mov	r1, r3
 800193c:	4816      	ldr	r0, [pc, #88]	; (8001998 <MX_TIM2_Init+0x100>)
 800193e:	f005 f849 	bl	80069d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001948:	f000 fa70 	bl	8001e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800194c:	2360      	movs	r3, #96	; 0x60
 800194e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001954:	2300      	movs	r3, #0
 8001956:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800195c:	463b      	mov	r3, r7
 800195e:	2200      	movs	r2, #0
 8001960:	4619      	mov	r1, r3
 8001962:	480d      	ldr	r0, [pc, #52]	; (8001998 <MX_TIM2_Init+0x100>)
 8001964:	f004 f9f4 	bl	8005d50 <HAL_TIM_PWM_ConfigChannel>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800196e:	f000 fa5d 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001972:	463b      	mov	r3, r7
 8001974:	220c      	movs	r2, #12
 8001976:	4619      	mov	r1, r3
 8001978:	4807      	ldr	r0, [pc, #28]	; (8001998 <MX_TIM2_Init+0x100>)
 800197a:	f004 f9e9 	bl	8005d50 <HAL_TIM_PWM_ConfigChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001984:	f000 fa52 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001988:	4803      	ldr	r0, [pc, #12]	; (8001998 <MX_TIM2_Init+0x100>)
 800198a:	f000 fb27 	bl	8001fdc <HAL_TIM_MspPostInit>

}
 800198e:	bf00      	nop
 8001990:	3738      	adds	r7, #56	; 0x38
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000198 	.word	0x20000198

0800199c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08e      	sub	sp, #56	; 0x38
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b0:	f107 031c 	add.w	r3, r7, #28
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019bc:	463b      	mov	r3, r7
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019ce:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <MX_TIM3_Init+0xe8>)
 80019d0:	4a2d      	ldr	r2, [pc, #180]	; (8001a88 <MX_TIM3_Init+0xec>)
 80019d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36;
 80019d4:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <MX_TIM3_Init+0xe8>)
 80019d6:	2224      	movs	r2, #36	; 0x24
 80019d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019da:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <MX_TIM3_Init+0xe8>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 512;
 80019e0:	4b28      	ldr	r3, [pc, #160]	; (8001a84 <MX_TIM3_Init+0xe8>)
 80019e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e8:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <MX_TIM3_Init+0xe8>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ee:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <MX_TIM3_Init+0xe8>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019f4:	4823      	ldr	r0, [pc, #140]	; (8001a84 <MX_TIM3_Init+0xe8>)
 80019f6:	f003 ffe7 	bl	80059c8 <HAL_TIM_Base_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001a00:	f000 fa14 	bl	8001e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a0e:	4619      	mov	r1, r3
 8001a10:	481c      	ldr	r0, [pc, #112]	; (8001a84 <MX_TIM3_Init+0xe8>)
 8001a12:	f004 fab1 	bl	8005f78 <HAL_TIM_ConfigClockSource>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001a1c:	f000 fa06 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a20:	4818      	ldr	r0, [pc, #96]	; (8001a84 <MX_TIM3_Init+0xe8>)
 8001a22:	f004 f828 	bl	8005a76 <HAL_TIM_PWM_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001a2c:	f000 f9fe 	bl	8001e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4811      	ldr	r0, [pc, #68]	; (8001a84 <MX_TIM3_Init+0xe8>)
 8001a40:	f004 ffc8 	bl	80069d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001a4a:	f000 f9ef 	bl	8001e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a4e:	2360      	movs	r3, #96	; 0x60
 8001a50:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a5e:	463b      	mov	r3, r7
 8001a60:	220c      	movs	r2, #12
 8001a62:	4619      	mov	r1, r3
 8001a64:	4807      	ldr	r0, [pc, #28]	; (8001a84 <MX_TIM3_Init+0xe8>)
 8001a66:	f004 f973 	bl	8005d50 <HAL_TIM_PWM_ConfigChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001a70:	f000 f9dc 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a74:	4803      	ldr	r0, [pc, #12]	; (8001a84 <MX_TIM3_Init+0xe8>)
 8001a76:	f000 fab1 	bl	8001fdc <HAL_TIM_MspPostInit>

}
 8001a7a:	bf00      	nop
 8001a7c:	3738      	adds	r7, #56	; 0x38
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200001e4 	.word	0x200001e4
 8001a88:	40000400 	.word	0x40000400

08001a8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08e      	sub	sp, #56	; 0x38
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aac:	463b      	mov	r3, r7
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]
 8001aba:	615a      	str	r2, [r3, #20]
 8001abc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001abe:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <MX_TIM4_Init+0xe8>)
 8001ac0:	4a2d      	ldr	r2, [pc, #180]	; (8001b78 <MX_TIM4_Init+0xec>)
 8001ac2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36;
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <MX_TIM4_Init+0xe8>)
 8001ac6:	2224      	movs	r2, #36	; 0x24
 8001ac8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <MX_TIM4_Init+0xe8>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ad0:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <MX_TIM4_Init+0xe8>)
 8001ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ad6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad8:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <MX_TIM4_Init+0xe8>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ade:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <MX_TIM4_Init+0xe8>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ae4:	4823      	ldr	r0, [pc, #140]	; (8001b74 <MX_TIM4_Init+0xe8>)
 8001ae6:	f003 ff6f 	bl	80059c8 <HAL_TIM_Base_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001af0:	f000 f99c 	bl	8001e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001afe:	4619      	mov	r1, r3
 8001b00:	481c      	ldr	r0, [pc, #112]	; (8001b74 <MX_TIM4_Init+0xe8>)
 8001b02:	f004 fa39 	bl	8005f78 <HAL_TIM_ConfigClockSource>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001b0c:	f000 f98e 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b10:	4818      	ldr	r0, [pc, #96]	; (8001b74 <MX_TIM4_Init+0xe8>)
 8001b12:	f003 ffb0 	bl	8005a76 <HAL_TIM_PWM_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001b1c:	f000 f986 	bl	8001e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4811      	ldr	r0, [pc, #68]	; (8001b74 <MX_TIM4_Init+0xe8>)
 8001b30:	f004 ff50 	bl	80069d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001b3a:	f000 f977 	bl	8001e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b3e:	2360      	movs	r3, #96	; 0x60
 8001b40:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b4e:	463b      	mov	r3, r7
 8001b50:	2200      	movs	r2, #0
 8001b52:	4619      	mov	r1, r3
 8001b54:	4807      	ldr	r0, [pc, #28]	; (8001b74 <MX_TIM4_Init+0xe8>)
 8001b56:	f004 f8fb 	bl	8005d50 <HAL_TIM_PWM_ConfigChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001b60:	f000 f964 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b64:	4803      	ldr	r0, [pc, #12]	; (8001b74 <MX_TIM4_Init+0xe8>)
 8001b66:	f000 fa39 	bl	8001fdc <HAL_TIM_MspPostInit>

}
 8001b6a:	bf00      	nop
 8001b6c:	3738      	adds	r7, #56	; 0x38
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000230 	.word	0x20000230
 8001b78:	40000800 	.word	0x40000800

08001b7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <MX_USART2_UART_Init+0x5c>)
 8001b82:	4a16      	ldr	r2, [pc, #88]	; (8001bdc <MX_USART2_UART_Init+0x60>)
 8001b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <MX_USART2_UART_Init+0x5c>)
 8001b88:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <MX_USART2_UART_Init+0x5c>)
 8001b90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b94:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <MX_USART2_UART_Init+0x5c>)
 8001b98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <MX_USART2_UART_Init+0x5c>)
 8001ba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <MX_USART2_UART_Init+0x5c>)
 8001ba8:	220c      	movs	r2, #12
 8001baa:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <MX_USART2_UART_Init+0x5c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MX_USART2_UART_Init+0x5c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bb8:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <MX_USART2_UART_Init+0x5c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <MX_USART2_UART_Init+0x5c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bc4:	4804      	ldr	r0, [pc, #16]	; (8001bd8 <MX_USART2_UART_Init+0x5c>)
 8001bc6:	f004 ff91 	bl	8006aec <HAL_UART_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001bd0:	f000 f92c 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	2000027c 	.word	0x2000027c
 8001bdc:	40004400 	.word	0x40004400

08001be0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_DMA_Init+0x38>)
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <MX_DMA_Init+0x38>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6153      	str	r3, [r2, #20]
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_DMA_Init+0x38>)
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	200b      	movs	r0, #11
 8001c04:	f001 fdf9 	bl	80037fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c08:	200b      	movs	r0, #11
 8001c0a:	f001 fe12 	bl	8003832 <HAL_NVIC_EnableIRQ>

}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000

08001c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c32:	4b49      	ldr	r3, [pc, #292]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	4a48      	ldr	r2, [pc, #288]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c3c:	6153      	str	r3, [r2, #20]
 8001c3e:	4b46      	ldr	r3, [pc, #280]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c4a:	4b43      	ldr	r3, [pc, #268]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	4a42      	ldr	r2, [pc, #264]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c54:	6153      	str	r3, [r2, #20]
 8001c56:	4b40      	ldr	r3, [pc, #256]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	4b3d      	ldr	r3, [pc, #244]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	4a3c      	ldr	r2, [pc, #240]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	6153      	str	r3, [r2, #20]
 8001c6e:	4b3a      	ldr	r3, [pc, #232]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	4b37      	ldr	r3, [pc, #220]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	4a36      	ldr	r2, [pc, #216]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c84:	6153      	str	r3, [r2, #20]
 8001c86:	4b34      	ldr	r3, [pc, #208]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D3_Pin|LED_D4_Pin|LED_D5_Pin, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001c98:	4830      	ldr	r0, [pc, #192]	; (8001d5c <MX_GPIO_Init+0x140>)
 8001c9a:	f002 f9b1 	bl	8004000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca8:	f002 f9aa 	bl	8004000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cb2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4827      	ldr	r0, [pc, #156]	; (8001d60 <MX_GPIO_Init+0x144>)
 8001cc4:	f001 fffa 	bl	8003cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cc8:	23c0      	movs	r3, #192	; 0xc0
 8001cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ccc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce0:	f001 ffec 	bl	8003cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D3_Pin LED_D4_Pin LED_D5_Pin */
  GPIO_InitStruct.Pin = LED_D3_Pin|LED_D4_Pin|LED_D5_Pin;
 8001ce4:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4817      	ldr	r0, [pc, #92]	; (8001d5c <MX_GPIO_Init+0x140>)
 8001cfe:	f001 ffdd 	bl	8003cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D2_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 8001d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1e:	f001 ffcd 	bl	8003cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001d28:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	4808      	ldr	r0, [pc, #32]	; (8001d5c <MX_GPIO_Init+0x140>)
 8001d3a:	f001 ffbf 	bl	8003cbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	2017      	movs	r0, #23
 8001d44:	f001 fd59 	bl	80037fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d48:	2017      	movs	r0, #23
 8001d4a:	f001 fd72 	bl	8003832 <HAL_NVIC_EnableIRQ>

}
 8001d4e:	bf00      	nop
 8001d50:	3728      	adds	r7, #40	; 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	48000400 	.word	0x48000400
 8001d60:	48000800 	.word	0x48000800

08001d64 <MF_mode_LED>:

/* USER CODE BEGIN 4 */
// FUNCTIONS
void MF_mode_LED(){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d72:	f002 f945 	bl	8004000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d76:	2200      	movs	r2, #0
 8001d78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d7c:	4807      	ldr	r0, [pc, #28]	; (8001d9c <MF_mode_LED+0x38>)
 8001d7e:	f002 f93f 	bl	8004000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2110      	movs	r1, #16
 8001d86:	4805      	ldr	r0, [pc, #20]	; (8001d9c <MF_mode_LED+0x38>)
 8001d88:	f002 f93a 	bl	8004000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2120      	movs	r1, #32
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <MF_mode_LED+0x38>)
 8001d92:	f002 f935 	bl	8004000 <HAL_GPIO_WritePin>
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	48000400 	.word	0x48000400

08001da0 <ME_mode_LED>:

void ME_mode_LED(){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001da4:	2200      	movs	r2, #0
 8001da6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dae:	f002 f927 	bl	8004000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001db2:	2201      	movs	r2, #1
 8001db4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001db8:	4804      	ldr	r0, [pc, #16]	; (8001dcc <ME_mode_LED+0x2c>)
 8001dba:	f002 f921 	bl	8004000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2110      	movs	r1, #16
 8001dc2:	4802      	ldr	r0, [pc, #8]	; (8001dcc <ME_mode_LED+0x2c>)
 8001dc4:	f002 f91c 	bl	8004000 <HAL_GPIO_WritePin>
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	48000400 	.word	0x48000400

08001dd0 <MM_mode_LED>:

void MM_mode_LED(){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dde:	f002 f90f 	bl	8004000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001de8:	4807      	ldr	r0, [pc, #28]	; (8001e08 <MM_mode_LED+0x38>)
 8001dea:	f002 f909 	bl	8004000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001dee:	2201      	movs	r2, #1
 8001df0:	2110      	movs	r1, #16
 8001df2:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MM_mode_LED+0x38>)
 8001df4:	f002 f904 	bl	8004000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2120      	movs	r1, #32
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <MM_mode_LED+0x38>)
 8001dfe:	f002 f8ff 	bl	8004000 <HAL_GPIO_WritePin>
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	48000400 	.word	0x48000400

08001e0c <HAL_ADC_ConvCpltCallback>:


// adc buffer filled by dma circular sampling
// data should not be processed in the interrupt, it makes rest of the
// progam inaccessible
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	adc_conv_complete = 1 ;
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]

}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20002316 	.word	0x20002316

08001e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e30:	b672      	cpsid	i
}
 8001e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <Error_Handler+0x8>
	...

08001e38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_MspInit+0x44>)
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <HAL_MspInit+0x44>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6193      	str	r3, [r2, #24]
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_MspInit+0x44>)
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_MspInit+0x44>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <HAL_MspInit+0x44>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	61d3      	str	r3, [r2, #28]
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_MspInit+0x44>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e6e:	2007      	movs	r0, #7
 8001e70:	f001 fcb8 	bl	80037e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000

08001e80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ea0:	d14c      	bne.n	8001f3c <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001ea2:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_ADC_MspInit+0xc4>)
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	4a27      	ldr	r2, [pc, #156]	; (8001f44 <HAL_ADC_MspInit+0xc4>)
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eac:	6153      	str	r3, [r2, #20]
 8001eae:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <HAL_ADC_MspInit+0xc4>)
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <HAL_ADC_MspInit+0xc4>)
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	4a21      	ldr	r2, [pc, #132]	; (8001f44 <HAL_ADC_MspInit+0xc4>)
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec4:	6153      	str	r3, [r2, #20]
 8001ec6:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <HAL_ADC_MspInit+0xc4>)
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee8:	f001 fee8 	bl	8003cbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001eec:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <HAL_ADC_MspInit+0xc8>)
 8001eee:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <HAL_ADC_MspInit+0xcc>)
 8001ef0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <HAL_ADC_MspInit+0xc8>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <HAL_ADC_MspInit+0xc8>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_ADC_MspInit+0xc8>)
 8001f00:	2280      	movs	r2, #128	; 0x80
 8001f02:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <HAL_ADC_MspInit+0xc8>)
 8001f06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f0a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_ADC_MspInit+0xc8>)
 8001f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f12:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <HAL_ADC_MspInit+0xc8>)
 8001f16:	2220      	movs	r2, #32
 8001f18:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_ADC_MspInit+0xc8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f20:	4809      	ldr	r0, [pc, #36]	; (8001f48 <HAL_ADC_MspInit+0xc8>)
 8001f22:	f001 fca0 	bl	8003866 <HAL_DMA_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001f2c:	f7ff ff7e 	bl	8001e2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a05      	ldr	r2, [pc, #20]	; (8001f48 <HAL_ADC_MspInit+0xc8>)
 8001f34:	639a      	str	r2, [r3, #56]	; 0x38
 8001f36:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <HAL_ADC_MspInit+0xc8>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f3c:	bf00      	nop
 8001f3e:	3728      	adds	r7, #40	; 0x28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000
 8001f48:	20000154 	.word	0x20000154
 8001f4c:	40020008 	.word	0x40020008

08001f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f60:	d10c      	bne.n	8001f7c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_TIM_Base_MspInit+0x80>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	4a1a      	ldr	r2, [pc, #104]	; (8001fd0 <HAL_TIM_Base_MspInit+0x80>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	61d3      	str	r3, [r2, #28]
 8001f6e:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <HAL_TIM_Base_MspInit+0x80>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f7a:	e022      	b.n	8001fc2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a14      	ldr	r2, [pc, #80]	; (8001fd4 <HAL_TIM_Base_MspInit+0x84>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d10c      	bne.n	8001fa0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_TIM_Base_MspInit+0x80>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4a11      	ldr	r2, [pc, #68]	; (8001fd0 <HAL_TIM_Base_MspInit+0x80>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	61d3      	str	r3, [r2, #28]
 8001f92:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <HAL_TIM_Base_MspInit+0x80>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
}
 8001f9e:	e010      	b.n	8001fc2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <HAL_TIM_Base_MspInit+0x88>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d10b      	bne.n	8001fc2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_TIM_Base_MspInit+0x80>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <HAL_TIM_Base_MspInit+0x80>)
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	61d3      	str	r3, [r2, #28]
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_TIM_Base_MspInit+0x80>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
}
 8001fc2:	bf00      	nop
 8001fc4:	371c      	adds	r7, #28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40000400 	.word	0x40000400
 8001fd8:	40000800 	.word	0x40000800

08001fdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	; 0x30
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffc:	d13a      	bne.n	8002074 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	4b42      	ldr	r3, [pc, #264]	; (8002108 <HAL_TIM_MspPostInit+0x12c>)
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	4a41      	ldr	r2, [pc, #260]	; (8002108 <HAL_TIM_MspPostInit+0x12c>)
 8002004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002008:	6153      	str	r3, [r2, #20]
 800200a:	4b3f      	ldr	r3, [pc, #252]	; (8002108 <HAL_TIM_MspPostInit+0x12c>)
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002016:	4b3c      	ldr	r3, [pc, #240]	; (8002108 <HAL_TIM_MspPostInit+0x12c>)
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	4a3b      	ldr	r2, [pc, #236]	; (8002108 <HAL_TIM_MspPostInit+0x12c>)
 800201c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002020:	6153      	str	r3, [r2, #20]
 8002022:	4b39      	ldr	r3, [pc, #228]	; (8002108 <HAL_TIM_MspPostInit+0x12c>)
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800202e:	2320      	movs	r3, #32
 8002030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800203e:	2301      	movs	r3, #1
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 031c 	add.w	r3, r7, #28
 8002046:	4619      	mov	r1, r3
 8002048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800204c:	f001 fe36 	bl	8003cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002050:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002062:	2301      	movs	r3, #1
 8002064:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002066:	f107 031c 	add.w	r3, r7, #28
 800206a:	4619      	mov	r1, r3
 800206c:	4827      	ldr	r0, [pc, #156]	; (800210c <HAL_TIM_MspPostInit+0x130>)
 800206e:	f001 fe25 	bl	8003cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002072:	e044      	b.n	80020fe <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM3)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a25      	ldr	r2, [pc, #148]	; (8002110 <HAL_TIM_MspPostInit+0x134>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d11c      	bne.n	80020b8 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207e:	4b22      	ldr	r3, [pc, #136]	; (8002108 <HAL_TIM_MspPostInit+0x12c>)
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	4a21      	ldr	r2, [pc, #132]	; (8002108 <HAL_TIM_MspPostInit+0x12c>)
 8002084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002088:	6153      	str	r3, [r2, #20]
 800208a:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <HAL_TIM_MspPostInit+0x12c>)
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002096:	2302      	movs	r3, #2
 8002098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020a6:	2302      	movs	r3, #2
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020aa:	f107 031c 	add.w	r3, r7, #28
 80020ae:	4619      	mov	r1, r3
 80020b0:	4816      	ldr	r0, [pc, #88]	; (800210c <HAL_TIM_MspPostInit+0x130>)
 80020b2:	f001 fe03 	bl	8003cbc <HAL_GPIO_Init>
}
 80020b6:	e022      	b.n	80020fe <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM4)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a15      	ldr	r2, [pc, #84]	; (8002114 <HAL_TIM_MspPostInit+0x138>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d11d      	bne.n	80020fe <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_TIM_MspPostInit+0x12c>)
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	4a10      	ldr	r2, [pc, #64]	; (8002108 <HAL_TIM_MspPostInit+0x12c>)
 80020c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020cc:	6153      	str	r3, [r2, #20]
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_TIM_MspPostInit+0x12c>)
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e8:	2300      	movs	r3, #0
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80020ec:	230a      	movs	r3, #10
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	4619      	mov	r1, r3
 80020f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fa:	f001 fddf 	bl	8003cbc <HAL_GPIO_Init>
}
 80020fe:	bf00      	nop
 8002100:	3730      	adds	r7, #48	; 0x30
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	48000400 	.word	0x48000400
 8002110:	40000400 	.word	0x40000400
 8002114:	40000800 	.word	0x40000800

08002118 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	; 0x28
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a1b      	ldr	r2, [pc, #108]	; (80021a4 <HAL_UART_MspInit+0x8c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d130      	bne.n	800219c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800213a:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <HAL_UART_MspInit+0x90>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	4a1a      	ldr	r2, [pc, #104]	; (80021a8 <HAL_UART_MspInit+0x90>)
 8002140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002144:	61d3      	str	r3, [r2, #28]
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <HAL_UART_MspInit+0x90>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <HAL_UART_MspInit+0x90>)
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	4a14      	ldr	r2, [pc, #80]	; (80021a8 <HAL_UART_MspInit+0x90>)
 8002158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215c:	6153      	str	r3, [r2, #20]
 800215e:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_UART_MspInit+0x90>)
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800216a:	230c      	movs	r3, #12
 800216c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	2300      	movs	r3, #0
 8002178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800217a:	2307      	movs	r3, #7
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002188:	f001 fd98 	bl	8003cbc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800218c:	2200      	movs	r2, #0
 800218e:	2100      	movs	r1, #0
 8002190:	2026      	movs	r0, #38	; 0x26
 8002192:	f001 fb32 	bl	80037fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002196:	2026      	movs	r0, #38	; 0x26
 8002198:	f001 fb4b 	bl	8003832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800219c:	bf00      	nop
 800219e:	3728      	adds	r7, #40	; 0x28
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40004400 	.word	0x40004400
 80021a8:	40021000 	.word	0x40021000

080021ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <NMI_Handler+0x4>

080021b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b6:	e7fe      	b.n	80021b6 <HardFault_Handler+0x4>

080021b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <MemManage_Handler+0x4>

080021be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <BusFault_Handler+0x4>

080021c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <UsageFault_Handler+0x4>

080021ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f8:	f000 f9a8 	bl	800254c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}

08002200 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <DMA1_Channel1_IRQHandler+0x10>)
 8002206:	f001 fc4b 	bl	8003aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000154 	.word	0x20000154

08002214 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 8002218:	4b64      	ldr	r3, [pc, #400]	; (80023ac <EXTI9_5_IRQHandler+0x198>)
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002220:	2b00      	cmp	r3, #0
 8002222:	d038      	beq.n	8002296 <EXTI9_5_IRQHandler+0x82>

		if(HAL_GetTick() - ticks_pressed >= 20){
 8002224:	f000 f9a6 	bl	8002574 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	4b61      	ldr	r3, [pc, #388]	; (80023b0 <EXTI9_5_IRQHandler+0x19c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b13      	cmp	r3, #19
 8002232:	d92c      	bls.n	800228e <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 8002234:	4b5f      	ldr	r3, [pc, #380]	; (80023b4 <EXTI9_5_IRQHandler+0x1a0>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d112      	bne.n	8002264 <EXTI9_5_IRQHandler+0x50>
 800223e:	2140      	movs	r1, #64	; 0x40
 8002240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002244:	f001 fec4 	bl	8003fd0 <HAL_GPIO_ReadPin>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10a      	bne.n	8002264 <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 800224e:	4b59      	ldr	r3, [pc, #356]	; (80023b4 <EXTI9_5_IRQHandler+0x1a0>)
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8002254:	f000 f98e 	bl	8002574 <HAL_GetTick>
 8002258:	4603      	mov	r3, r0
 800225a:	4a55      	ldr	r2, [pc, #340]	; (80023b0 <EXTI9_5_IRQHandler+0x19c>)
 800225c:	6013      	str	r3, [r2, #0]

				middle_button_pressed = 1;
 800225e:	4b56      	ldr	r3, [pc, #344]	; (80023b8 <EXTI9_5_IRQHandler+0x1a4>)
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 8002264:	4b53      	ldr	r3, [pc, #332]	; (80023b4 <EXTI9_5_IRQHandler+0x1a0>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10f      	bne.n	800228e <EXTI9_5_IRQHandler+0x7a>
 800226e:	2140      	movs	r1, #64	; 0x40
 8002270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002274:	f001 feac 	bl	8003fd0 <HAL_GPIO_ReadPin>
 8002278:	4603      	mov	r3, r0
 800227a:	2b01      	cmp	r3, #1
 800227c:	d107      	bne.n	800228e <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 800227e:	f000 f979 	bl	8002574 <HAL_GetTick>
 8002282:	4603      	mov	r3, r0
 8002284:	4a4a      	ldr	r2, [pc, #296]	; (80023b0 <EXTI9_5_IRQHandler+0x19c>)
 8002286:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8002288:	4b4a      	ldr	r3, [pc, #296]	; (80023b4 <EXTI9_5_IRQHandler+0x1a0>)
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 800228e:	4b47      	ldr	r3, [pc, #284]	; (80023ac <EXTI9_5_IRQHandler+0x198>)
 8002290:	2240      	movs	r2, #64	; 0x40
 8002292:	615a      	str	r2, [r3, #20]
 8002294:	e07d      	b.n	8002392 <EXTI9_5_IRQHandler+0x17e>
	}
	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8002296:	4b45      	ldr	r3, [pc, #276]	; (80023ac <EXTI9_5_IRQHandler+0x198>)
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d038      	beq.n	8002314 <EXTI9_5_IRQHandler+0x100>

			if(HAL_GetTick() - ticks_pressed >= 20){
 80022a2:	f000 f967 	bl	8002574 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	4b41      	ldr	r3, [pc, #260]	; (80023b0 <EXTI9_5_IRQHandler+0x19c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b13      	cmp	r3, #19
 80022b0:	d92c      	bls.n	800230c <EXTI9_5_IRQHandler+0xf8>
				// stable low state
				if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 80022b2:	4b40      	ldr	r3, [pc, #256]	; (80023b4 <EXTI9_5_IRQHandler+0x1a0>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d112      	bne.n	80022e2 <EXTI9_5_IRQHandler+0xce>
 80022bc:	2180      	movs	r1, #128	; 0x80
 80022be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c2:	f001 fe85 	bl	8003fd0 <HAL_GPIO_ReadPin>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10a      	bne.n	80022e2 <EXTI9_5_IRQHandler+0xce>
					button_state =0 ; // stable low reached
 80022cc:	4b39      	ldr	r3, [pc, #228]	; (80023b4 <EXTI9_5_IRQHandler+0x1a0>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
					ticks_pressed = HAL_GetTick() ;
 80022d2:	f000 f94f 	bl	8002574 <HAL_GetTick>
 80022d6:	4603      	mov	r3, r0
 80022d8:	4a35      	ldr	r2, [pc, #212]	; (80023b0 <EXTI9_5_IRQHandler+0x19c>)
 80022da:	6013      	str	r3, [r2, #0]

					right_button_pressed = 1;
 80022dc:	4b37      	ldr	r3, [pc, #220]	; (80023bc <EXTI9_5_IRQHandler+0x1a8>)
 80022de:	2201      	movs	r2, #1
 80022e0:	701a      	strb	r2, [r3, #0]
				}

				// stable high state
				if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 80022e2:	4b34      	ldr	r3, [pc, #208]	; (80023b4 <EXTI9_5_IRQHandler+0x1a0>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10f      	bne.n	800230c <EXTI9_5_IRQHandler+0xf8>
 80022ec:	2180      	movs	r1, #128	; 0x80
 80022ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022f2:	f001 fe6d 	bl	8003fd0 <HAL_GPIO_ReadPin>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d107      	bne.n	800230c <EXTI9_5_IRQHandler+0xf8>
					ticks_pressed = HAL_GetTick() ;
 80022fc:	f000 f93a 	bl	8002574 <HAL_GetTick>
 8002300:	4603      	mov	r3, r0
 8002302:	4a2b      	ldr	r2, [pc, #172]	; (80023b0 <EXTI9_5_IRQHandler+0x19c>)
 8002304:	6013      	str	r3, [r2, #0]
					button_state =1 ; // stable high state
 8002306:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <EXTI9_5_IRQHandler+0x1a0>)
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]

				}
			}


			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 800230c:	4b27      	ldr	r3, [pc, #156]	; (80023ac <EXTI9_5_IRQHandler+0x198>)
 800230e:	2280      	movs	r2, #128	; 0x80
 8002310:	615a      	str	r2, [r3, #20]
 8002312:	e03e      	b.n	8002392 <EXTI9_5_IRQHandler+0x17e>
	}
	else{
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 8002314:	4b25      	ldr	r3, [pc, #148]	; (80023ac <EXTI9_5_IRQHandler+0x198>)
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d038      	beq.n	8002392 <EXTI9_5_IRQHandler+0x17e>

				if(HAL_GetTick() - ticks_pressed >= 20){
 8002320:	f000 f928 	bl	8002574 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <EXTI9_5_IRQHandler+0x19c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b13      	cmp	r3, #19
 800232e:	d92c      	bls.n	800238a <EXTI9_5_IRQHandler+0x176>
					// stable low state
					if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 8002330:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <EXTI9_5_IRQHandler+0x1a0>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b01      	cmp	r3, #1
 8002338:	d112      	bne.n	8002360 <EXTI9_5_IRQHandler+0x14c>
 800233a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800233e:	4820      	ldr	r0, [pc, #128]	; (80023c0 <EXTI9_5_IRQHandler+0x1ac>)
 8002340:	f001 fe46 	bl	8003fd0 <HAL_GPIO_ReadPin>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10a      	bne.n	8002360 <EXTI9_5_IRQHandler+0x14c>
						button_state =0 ; // stable low reached
 800234a:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <EXTI9_5_IRQHandler+0x1a0>)
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
						ticks_pressed = HAL_GetTick() ;
 8002350:	f000 f910 	bl	8002574 <HAL_GetTick>
 8002354:	4603      	mov	r3, r0
 8002356:	4a16      	ldr	r2, [pc, #88]	; (80023b0 <EXTI9_5_IRQHandler+0x19c>)
 8002358:	6013      	str	r3, [r2, #0]

						left_button_pressed = 1;
 800235a:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <EXTI9_5_IRQHandler+0x1b0>)
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
					}

					// stable high state
					if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 8002360:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <EXTI9_5_IRQHandler+0x1a0>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10f      	bne.n	800238a <EXTI9_5_IRQHandler+0x176>
 800236a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800236e:	4814      	ldr	r0, [pc, #80]	; (80023c0 <EXTI9_5_IRQHandler+0x1ac>)
 8002370:	f001 fe2e 	bl	8003fd0 <HAL_GPIO_ReadPin>
 8002374:	4603      	mov	r3, r0
 8002376:	2b01      	cmp	r3, #1
 8002378:	d107      	bne.n	800238a <EXTI9_5_IRQHandler+0x176>
						ticks_pressed = HAL_GetTick() ;
 800237a:	f000 f8fb 	bl	8002574 <HAL_GetTick>
 800237e:	4603      	mov	r3, r0
 8002380:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <EXTI9_5_IRQHandler+0x19c>)
 8002382:	6013      	str	r3, [r2, #0]
						button_state =1 ; // stable high state
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <EXTI9_5_IRQHandler+0x1a0>)
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]

					}
				}
				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <EXTI9_5_IRQHandler+0x198>)
 800238c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002390:	615a      	str	r2, [r3, #20]
			}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002392:	2040      	movs	r0, #64	; 0x40
 8002394:	f001 fe4c 	bl	8004030 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002398:	2080      	movs	r0, #128	; 0x80
 800239a:	f001 fe49 	bl	8004030 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800239e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80023a2:	f001 fe45 	bl	8004030 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40010400 	.word	0x40010400
 80023b0:	20002354 	.word	0x20002354
 80023b4:	20000077 	.word	0x20000077
 80023b8:	20002358 	.word	0x20002358
 80023bc:	20002359 	.word	0x20002359
 80023c0:	48000400 	.word	0x48000400
 80023c4:	2000235a 	.word	0x2000235a

080023c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023cc:	4802      	ldr	r0, [pc, #8]	; (80023d8 <USART2_IRQHandler+0x10>)
 80023ce:	f004 fd07 	bl	8006de0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	2000027c 	.word	0x2000027c

080023dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e4:	4a14      	ldr	r2, [pc, #80]	; (8002438 <_sbrk+0x5c>)
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <_sbrk+0x60>)
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <_sbrk+0x64>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	; (8002444 <_sbrk+0x68>)
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <_sbrk+0x64>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	429a      	cmp	r2, r3
 800240a:	d207      	bcs.n	800241c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800240c:	f005 ff50 	bl	80082b0 <__errno>
 8002410:	4603      	mov	r3, r0
 8002412:	220c      	movs	r2, #12
 8002414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002416:	f04f 33ff 	mov.w	r3, #4294967295
 800241a:	e009      	b.n	8002430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	4a05      	ldr	r2, [pc, #20]	; (8002440 <_sbrk+0x64>)
 800242c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800242e:	68fb      	ldr	r3, [r7, #12]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20010000 	.word	0x20010000
 800243c:	00000400 	.word	0x00000400
 8002440:	2000235c 	.word	0x2000235c
 8002444:	20002378 	.word	0x20002378

08002448 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <SystemInit+0x20>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002452:	4a05      	ldr	r2, [pc, #20]	; (8002468 <SystemInit+0x20>)
 8002454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800246c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024a4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002470:	f7ff ffea 	bl	8002448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002474:	480c      	ldr	r0, [pc, #48]	; (80024a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002476:	490d      	ldr	r1, [pc, #52]	; (80024ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002478:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <LoopForever+0xe>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800247c:	e002      	b.n	8002484 <LoopCopyDataInit>

0800247e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002482:	3304      	adds	r3, #4

08002484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002488:	d3f9      	bcc.n	800247e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800248c:	4c0a      	ldr	r4, [pc, #40]	; (80024b8 <LoopForever+0x16>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002490:	e001      	b.n	8002496 <LoopFillZerobss>

08002492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002494:	3204      	adds	r2, #4

08002496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002498:	d3fb      	bcc.n	8002492 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800249a:	f005 ff0f 	bl	80082bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800249e:	f7fe fecf 	bl	8001240 <main>

080024a2 <LoopForever>:

LoopForever:
    b LoopForever
 80024a2:	e7fe      	b.n	80024a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80024a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ac:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 80024b0:	08009038 	.word	0x08009038
  ldr r2, =_sbss
 80024b4:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 80024b8:	20002374 	.word	0x20002374

080024bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024bc:	e7fe      	b.n	80024bc <ADC1_2_IRQHandler>
	...

080024c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_Init+0x28>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a07      	ldr	r2, [pc, #28]	; (80024e8 <HAL_Init+0x28>)
 80024ca:	f043 0310 	orr.w	r3, r3, #16
 80024ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d0:	2003      	movs	r0, #3
 80024d2:	f001 f987 	bl	80037e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024d6:	2000      	movs	r0, #0
 80024d8:	f000 f808 	bl	80024ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024dc:	f7ff fcac 	bl	8001e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40022000 	.word	0x40022000

080024ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_InitTick+0x54>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_InitTick+0x58>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	4619      	mov	r1, r3
 80024fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002502:	fbb3 f3f1 	udiv	r3, r3, r1
 8002506:	fbb2 f3f3 	udiv	r3, r2, r3
 800250a:	4618      	mov	r0, r3
 800250c:	f001 f99f 	bl	800384e <HAL_SYSTICK_Config>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e00e      	b.n	8002538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b0f      	cmp	r3, #15
 800251e:	d80a      	bhi.n	8002536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002520:	2200      	movs	r2, #0
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	f001 f967 	bl	80037fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800252c:	4a06      	ldr	r2, [pc, #24]	; (8002548 <HAL_InitTick+0x5c>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	e000      	b.n	8002538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000078 	.word	0x20000078
 8002544:	20000080 	.word	0x20000080
 8002548:	2000007c 	.word	0x2000007c

0800254c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_IncTick+0x20>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_IncTick+0x24>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4413      	add	r3, r2
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <HAL_IncTick+0x24>)
 800255e:	6013      	str	r3, [r2, #0]
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000080 	.word	0x20000080
 8002570:	20002360 	.word	0x20002360

08002574 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return uwTick;  
 8002578:	4b03      	ldr	r3, [pc, #12]	; (8002588 <HAL_GetTick+0x14>)
 800257a:	681b      	ldr	r3, [r3, #0]
}
 800257c:	4618      	mov	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	20002360 	.word	0x20002360

0800258c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002594:	f7ff ffee 	bl	8002574 <HAL_GetTick>
 8002598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d005      	beq.n	80025b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_Delay+0x44>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4413      	add	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80025b2:	bf00      	nop
 80025b4:	f7ff ffde 	bl	8002574 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d8f7      	bhi.n	80025b4 <HAL_Delay+0x28>
  {
  }
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000080 	.word	0x20000080

080025d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b09a      	sub	sp, #104	; 0x68
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e1e3      	b.n	80029e4 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	d176      	bne.n	800271c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d152      	bne.n	80026dc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff fc15 	bl	8001e80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d13b      	bne.n	80026dc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 ff87 	bl	8003578 <ADC_Disable>
 800266a:	4603      	mov	r3, r0
 800266c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	d12f      	bne.n	80026dc <HAL_ADC_Init+0xe0>
 800267c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002680:	2b00      	cmp	r3, #0
 8002682:	d12b      	bne.n	80026dc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800268c:	f023 0302 	bic.w	r3, r3, #2
 8002690:	f043 0202 	orr.w	r2, r3, #2
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026a6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026b6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026b8:	4b92      	ldr	r3, [pc, #584]	; (8002904 <HAL_ADC_Init+0x308>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a92      	ldr	r2, [pc, #584]	; (8002908 <HAL_ADC_Init+0x30c>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	0c9a      	lsrs	r2, r3, #18
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026ce:	e002      	b.n	80026d6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f9      	bne.n	80026d0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d007      	beq.n	80026fa <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026f8:	d110      	bne.n	800271c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f023 0312 	bic.w	r3, r3, #18
 8002702:	f043 0210 	orr.w	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	f040 8150 	bne.w	80029ca <HAL_ADC_Init+0x3ce>
 800272a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800272e:	2b00      	cmp	r3, #0
 8002730:	f040 814b 	bne.w	80029ca <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800273e:	2b00      	cmp	r3, #0
 8002740:	f040 8143 	bne.w	80029ca <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800274c:	f043 0202 	orr.w	r2, r3, #2
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800275c:	d004      	beq.n	8002768 <HAL_ADC_Init+0x16c>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a6a      	ldr	r2, [pc, #424]	; (800290c <HAL_ADC_Init+0x310>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d101      	bne.n	800276c <HAL_ADC_Init+0x170>
 8002768:	4b69      	ldr	r3, [pc, #420]	; (8002910 <HAL_ADC_Init+0x314>)
 800276a:	e000      	b.n	800276e <HAL_ADC_Init+0x172>
 800276c:	4b69      	ldr	r3, [pc, #420]	; (8002914 <HAL_ADC_Init+0x318>)
 800276e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002778:	d102      	bne.n	8002780 <HAL_ADC_Init+0x184>
 800277a:	4b64      	ldr	r3, [pc, #400]	; (800290c <HAL_ADC_Init+0x310>)
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	e01a      	b.n	80027b6 <HAL_ADC_Init+0x1ba>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a61      	ldr	r2, [pc, #388]	; (800290c <HAL_ADC_Init+0x310>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d103      	bne.n	8002792 <HAL_ADC_Init+0x196>
 800278a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	e011      	b.n	80027b6 <HAL_ADC_Init+0x1ba>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a60      	ldr	r2, [pc, #384]	; (8002918 <HAL_ADC_Init+0x31c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d102      	bne.n	80027a2 <HAL_ADC_Init+0x1a6>
 800279c:	4b5f      	ldr	r3, [pc, #380]	; (800291c <HAL_ADC_Init+0x320>)
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	e009      	b.n	80027b6 <HAL_ADC_Init+0x1ba>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a5d      	ldr	r2, [pc, #372]	; (800291c <HAL_ADC_Init+0x320>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d102      	bne.n	80027b2 <HAL_ADC_Init+0x1b6>
 80027ac:	4b5a      	ldr	r3, [pc, #360]	; (8002918 <HAL_ADC_Init+0x31c>)
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	e001      	b.n	80027b6 <HAL_ADC_Init+0x1ba>
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d108      	bne.n	80027d6 <HAL_ADC_Init+0x1da>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_ADC_Init+0x1da>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <HAL_ADC_Init+0x1dc>
 80027d6:	2300      	movs	r3, #0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d11c      	bne.n	8002816 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027dc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d010      	beq.n	8002804 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d107      	bne.n	80027fe <HAL_ADC_Init+0x202>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_ADC_Init+0x202>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_ADC_Init+0x204>
 80027fe:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002800:	2b00      	cmp	r3, #0
 8002802:	d108      	bne.n	8002816 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	431a      	orrs	r2, r3
 8002812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002814:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	7e5b      	ldrb	r3, [r3, #25]
 800281a:	035b      	lsls	r3, r3, #13
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002820:	2a01      	cmp	r2, #1
 8002822:	d002      	beq.n	800282a <HAL_ADC_Init+0x22e>
 8002824:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002828:	e000      	b.n	800282c <HAL_ADC_Init+0x230>
 800282a:	2200      	movs	r2, #0
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4313      	orrs	r3, r2
 800283a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800283c:	4313      	orrs	r3, r2
 800283e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d11b      	bne.n	8002882 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	7e5b      	ldrb	r3, [r3, #25]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	3b01      	subs	r3, #1
 8002858:	045a      	lsls	r2, r3, #17
 800285a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800285c:	4313      	orrs	r3, r2
 800285e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002862:	663b      	str	r3, [r7, #96]	; 0x60
 8002864:	e00d      	b.n	8002882 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800286e:	f043 0220 	orr.w	r2, r3, #32
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	2b01      	cmp	r3, #1
 8002888:	d054      	beq.n	8002934 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a22      	ldr	r2, [pc, #136]	; (8002918 <HAL_ADC_Init+0x31c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d004      	beq.n	800289e <HAL_ADC_Init+0x2a2>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a20      	ldr	r2, [pc, #128]	; (800291c <HAL_ADC_Init+0x320>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d140      	bne.n	8002920 <HAL_ADC_Init+0x324>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80028a6:	d02a      	beq.n	80028fe <HAL_ADC_Init+0x302>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028b0:	d022      	beq.n	80028f8 <HAL_ADC_Init+0x2fc>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80028ba:	d01a      	beq.n	80028f2 <HAL_ADC_Init+0x2f6>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80028c4:	d012      	beq.n	80028ec <HAL_ADC_Init+0x2f0>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80028ce:	d00a      	beq.n	80028e6 <HAL_ADC_Init+0x2ea>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80028d8:	d002      	beq.n	80028e0 <HAL_ADC_Init+0x2e4>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028de:	e023      	b.n	8002928 <HAL_ADC_Init+0x32c>
 80028e0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80028e4:	e020      	b.n	8002928 <HAL_ADC_Init+0x32c>
 80028e6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80028ea:	e01d      	b.n	8002928 <HAL_ADC_Init+0x32c>
 80028ec:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80028f0:	e01a      	b.n	8002928 <HAL_ADC_Init+0x32c>
 80028f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028f6:	e017      	b.n	8002928 <HAL_ADC_Init+0x32c>
 80028f8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80028fc:	e014      	b.n	8002928 <HAL_ADC_Init+0x32c>
 80028fe:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002902:	e011      	b.n	8002928 <HAL_ADC_Init+0x32c>
 8002904:	20000078 	.word	0x20000078
 8002908:	431bde83 	.word	0x431bde83
 800290c:	50000100 	.word	0x50000100
 8002910:	50000300 	.word	0x50000300
 8002914:	50000700 	.word	0x50000700
 8002918:	50000400 	.word	0x50000400
 800291c:	50000500 	.word	0x50000500
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800292c:	4313      	orrs	r3, r2
 800292e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002930:	4313      	orrs	r3, r2
 8002932:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b00      	cmp	r3, #0
 8002940:	d114      	bne.n	800296c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002950:	f023 0302 	bic.w	r3, r3, #2
 8002954:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7e1b      	ldrb	r3, [r3, #24]
 800295a:	039a      	lsls	r2, r3, #14
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4313      	orrs	r3, r2
 8002966:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002968:	4313      	orrs	r3, r2
 800296a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <HAL_ADC_Init+0x3f0>)
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800297c:	430b      	orrs	r3, r1
 800297e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d10c      	bne.n	80029a2 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f023 010f 	bic.w	r1, r3, #15
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	1e5a      	subs	r2, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
 80029a0:	e007      	b.n	80029b2 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 020f 	bic.w	r2, r2, #15
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f023 0303 	bic.w	r3, r3, #3
 80029c0:	f043 0201 	orr.w	r2, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40
 80029c8:	e00a      	b.n	80029e0 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f023 0312 	bic.w	r3, r3, #18
 80029d2:	f043 0210 	orr.w	r2, r3, #16
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80029da:	2301      	movs	r3, #1
 80029dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80029e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3768      	adds	r7, #104	; 0x68
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	fff0c007 	.word	0xfff0c007

080029f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f040 80f7 	bne.w	8002bfe <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_ADC_Start_DMA+0x2e>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e0f2      	b.n	8002c04 <HAL_ADC_Start_DMA+0x214>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a2e:	d004      	beq.n	8002a3a <HAL_ADC_Start_DMA+0x4a>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a75      	ldr	r2, [pc, #468]	; (8002c0c <HAL_ADC_Start_DMA+0x21c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d109      	bne.n	8002a4e <HAL_ADC_Start_DMA+0x5e>
 8002a3a:	4b75      	ldr	r3, [pc, #468]	; (8002c10 <HAL_ADC_Start_DMA+0x220>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	bf0c      	ite	eq
 8002a46:	2301      	moveq	r3, #1
 8002a48:	2300      	movne	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	e008      	b.n	8002a60 <HAL_ADC_Start_DMA+0x70>
 8002a4e:	4b71      	ldr	r3, [pc, #452]	; (8002c14 <HAL_ADC_Start_DMA+0x224>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	bf0c      	ite	eq
 8002a5a:	2301      	moveq	r3, #1
 8002a5c:	2300      	movne	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80c5 	beq.w	8002bf0 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 fd22 	bl	80034b0 <ADC_Enable>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002a70:	7dfb      	ldrb	r3, [r7, #23]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f040 80b7 	bne.w	8002be6 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a80:	f023 0301 	bic.w	r3, r3, #1
 8002a84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a94:	d004      	beq.n	8002aa0 <HAL_ADC_Start_DMA+0xb0>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a5c      	ldr	r2, [pc, #368]	; (8002c0c <HAL_ADC_Start_DMA+0x21c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d106      	bne.n	8002aae <HAL_ADC_Start_DMA+0xbe>
 8002aa0:	4b5b      	ldr	r3, [pc, #364]	; (8002c10 <HAL_ADC_Start_DMA+0x220>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d010      	beq.n	8002ace <HAL_ADC_Start_DMA+0xde>
 8002aac:	e005      	b.n	8002aba <HAL_ADC_Start_DMA+0xca>
 8002aae:	4b59      	ldr	r3, [pc, #356]	; (8002c14 <HAL_ADC_Start_DMA+0x224>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <HAL_ADC_Start_DMA+0xde>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ac2:	d004      	beq.n	8002ace <HAL_ADC_Start_DMA+0xde>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a53      	ldr	r2, [pc, #332]	; (8002c18 <HAL_ADC_Start_DMA+0x228>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d115      	bne.n	8002afa <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d036      	beq.n	8002b56 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002af0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002af8:	e02d      	b.n	8002b56 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b0e:	d004      	beq.n	8002b1a <HAL_ADC_Start_DMA+0x12a>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a3d      	ldr	r2, [pc, #244]	; (8002c0c <HAL_ADC_Start_DMA+0x21c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d10a      	bne.n	8002b30 <HAL_ADC_Start_DMA+0x140>
 8002b1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf14      	ite	ne
 8002b28:	2301      	movne	r3, #1
 8002b2a:	2300      	moveq	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	e008      	b.n	8002b42 <HAL_ADC_Start_DMA+0x152>
 8002b30:	4b39      	ldr	r3, [pc, #228]	; (8002c18 <HAL_ADC_Start_DMA+0x228>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	bf14      	ite	ne
 8002b3c:	2301      	movne	r3, #1
 8002b3e:	2300      	moveq	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d007      	beq.n	8002b56 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b62:	d106      	bne.n	8002b72 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b68:	f023 0206 	bic.w	r2, r3, #6
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	645a      	str	r2, [r3, #68]	; 0x44
 8002b70:	e002      	b.n	8002b78 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	4a25      	ldr	r2, [pc, #148]	; (8002c1c <HAL_ADC_Start_DMA+0x22c>)
 8002b86:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8c:	4a24      	ldr	r2, [pc, #144]	; (8002c20 <HAL_ADC_Start_DMA+0x230>)
 8002b8e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	4a23      	ldr	r2, [pc, #140]	; (8002c24 <HAL_ADC_Start_DMA+0x234>)
 8002b96:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	221c      	movs	r2, #28
 8002b9e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0210 	orr.w	r2, r2, #16
 8002bae:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3340      	adds	r3, #64	; 0x40
 8002bca:	4619      	mov	r1, r3
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f000 fe90 	bl	80038f4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0204 	orr.w	r2, r2, #4
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	e00d      	b.n	8002c02 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002bee:	e008      	b.n	8002c02 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002bfc:	e001      	b.n	8002c02 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	50000100 	.word	0x50000100
 8002c10:	50000300 	.word	0x50000300
 8002c14:	50000700 	.word	0x50000700
 8002c18:	50000400 	.word	0x50000400
 8002c1c:	080033e5 	.word	0x080033e5
 8002c20:	0800345f 	.word	0x0800345f
 8002c24:	0800347b 	.word	0x0800347b

08002c28 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b09b      	sub	sp, #108	; 0x6c
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x22>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e2ca      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x5b8>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f040 82ae 	bne.w	80031be <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d81c      	bhi.n	8002ca4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	231f      	movs	r3, #31
 8002c80:	4093      	lsls	r3, r2
 8002c82:	43db      	mvns	r3, r3
 8002c84:	4019      	ands	r1, r3
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	fa00 f203 	lsl.w	r2, r0, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ca2:	e063      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b09      	cmp	r3, #9
 8002caa:	d81e      	bhi.n	8002cea <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	4413      	add	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	3b1e      	subs	r3, #30
 8002cc0:	221f      	movs	r2, #31
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	4019      	ands	r1, r3
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	4413      	add	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	3b1e      	subs	r3, #30
 8002cdc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	635a      	str	r2, [r3, #52]	; 0x34
 8002ce8:	e040      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b0e      	cmp	r3, #14
 8002cf0:	d81e      	bhi.n	8002d30 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	3b3c      	subs	r3, #60	; 0x3c
 8002d06:	221f      	movs	r2, #31
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	4019      	ands	r1, r3
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	3b3c      	subs	r3, #60	; 0x3c
 8002d22:	fa00 f203 	lsl.w	r2, r0, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	639a      	str	r2, [r3, #56]	; 0x38
 8002d2e:	e01d      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4413      	add	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	3b5a      	subs	r3, #90	; 0x5a
 8002d44:	221f      	movs	r2, #31
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	4019      	ands	r1, r3
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	4613      	mov	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	4413      	add	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	3b5a      	subs	r3, #90	; 0x5a
 8002d60:	fa00 f203 	lsl.w	r2, r0, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f040 80e5 	bne.w	8002f46 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b09      	cmp	r3, #9
 8002d82:	d91c      	bls.n	8002dbe <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6999      	ldr	r1, [r3, #24]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	3b1e      	subs	r3, #30
 8002d96:	2207      	movs	r2, #7
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	4019      	ands	r1, r3
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	6898      	ldr	r0, [r3, #8]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	4413      	add	r3, r2
 8002dae:	3b1e      	subs	r3, #30
 8002db0:	fa00 f203 	lsl.w	r2, r0, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	619a      	str	r2, [r3, #24]
 8002dbc:	e019      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6959      	ldr	r1, [r3, #20]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4413      	add	r3, r2
 8002dce:	2207      	movs	r2, #7
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	4019      	ands	r1, r3
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	6898      	ldr	r0, [r3, #8]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	08db      	lsrs	r3, r3, #3
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d84f      	bhi.n	8002eb4 <HAL_ADC_ConfigChannel+0x28c>
 8002e14:	a201      	add	r2, pc, #4	; (adr r2, 8002e1c <HAL_ADC_ConfigChannel+0x1f4>)
 8002e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1a:	bf00      	nop
 8002e1c:	08002e2d 	.word	0x08002e2d
 8002e20:	08002e4f 	.word	0x08002e4f
 8002e24:	08002e71 	.word	0x08002e71
 8002e28:	08002e93 	.word	0x08002e93
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e32:	4b9a      	ldr	r3, [pc, #616]	; (800309c <HAL_ADC_ConfigChannel+0x474>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	0691      	lsls	r1, r2, #26
 8002e3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e4a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e4c:	e07e      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e54:	4b91      	ldr	r3, [pc, #580]	; (800309c <HAL_ADC_ConfigChannel+0x474>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	0691      	lsls	r1, r2, #26
 8002e5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e60:	430a      	orrs	r2, r1
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e6c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e6e:	e06d      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e76:	4b89      	ldr	r3, [pc, #548]	; (800309c <HAL_ADC_ConfigChannel+0x474>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	0691      	lsls	r1, r2, #26
 8002e80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e82:	430a      	orrs	r2, r1
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e8e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e90:	e05c      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e98:	4b80      	ldr	r3, [pc, #512]	; (800309c <HAL_ADC_ConfigChannel+0x474>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	0691      	lsls	r1, r2, #26
 8002ea2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002eb0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002eb2:	e04b      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	069b      	lsls	r3, r3, #26
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d107      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ed6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ede:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	069b      	lsls	r3, r3, #26
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d107      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002efa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	069b      	lsls	r3, r3, #26
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d107      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f1e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	069b      	lsls	r3, r3, #26
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d10a      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f42:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002f44:	e001      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002f46:	bf00      	nop
 8002f48:	e000      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x324>
      break;
 8002f4a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d108      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x344>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x344>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x346>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 8130 	bne.w	80031d4 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d00f      	beq.n	8002f9c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	400a      	ands	r2, r1
 8002f96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002f9a:	e049      	b.n	8003030 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	409a      	lsls	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b09      	cmp	r3, #9
 8002fbc:	d91c      	bls.n	8002ff8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6999      	ldr	r1, [r3, #24]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	3b1b      	subs	r3, #27
 8002fd0:	2207      	movs	r2, #7
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	4019      	ands	r1, r3
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6898      	ldr	r0, [r3, #8]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3b1b      	subs	r3, #27
 8002fea:	fa00 f203 	lsl.w	r2, r0, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	619a      	str	r2, [r3, #24]
 8002ff6:	e01b      	b.n	8003030 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6959      	ldr	r1, [r3, #20]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	4613      	mov	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4413      	add	r3, r2
 800300a:	2207      	movs	r2, #7
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	4019      	ands	r1, r3
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	6898      	ldr	r0, [r3, #8]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	fa00 f203 	lsl.w	r2, r0, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003038:	d004      	beq.n	8003044 <HAL_ADC_ConfigChannel+0x41c>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a18      	ldr	r2, [pc, #96]	; (80030a0 <HAL_ADC_ConfigChannel+0x478>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d101      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x420>
 8003044:	4b17      	ldr	r3, [pc, #92]	; (80030a4 <HAL_ADC_ConfigChannel+0x47c>)
 8003046:	e000      	b.n	800304a <HAL_ADC_ConfigChannel+0x422>
 8003048:	4b17      	ldr	r3, [pc, #92]	; (80030a8 <HAL_ADC_ConfigChannel+0x480>)
 800304a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b10      	cmp	r3, #16
 8003052:	d105      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800305c:	2b00      	cmp	r3, #0
 800305e:	d015      	beq.n	800308c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003064:	2b11      	cmp	r3, #17
 8003066:	d105      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00b      	beq.n	800308c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003078:	2b12      	cmp	r3, #18
 800307a:	f040 80ab 	bne.w	80031d4 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800307e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 80a4 	bne.w	80031d4 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003094:	d10a      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x484>
 8003096:	4b02      	ldr	r3, [pc, #8]	; (80030a0 <HAL_ADC_ConfigChannel+0x478>)
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	e022      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x4ba>
 800309c:	83fff000 	.word	0x83fff000
 80030a0:	50000100 	.word	0x50000100
 80030a4:	50000300 	.word	0x50000300
 80030a8:	50000700 	.word	0x50000700
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a4e      	ldr	r2, [pc, #312]	; (80031ec <HAL_ADC_ConfigChannel+0x5c4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d103      	bne.n	80030be <HAL_ADC_ConfigChannel+0x496>
 80030b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	e011      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x4ba>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a4b      	ldr	r2, [pc, #300]	; (80031f0 <HAL_ADC_ConfigChannel+0x5c8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d102      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x4a6>
 80030c8:	4b4a      	ldr	r3, [pc, #296]	; (80031f4 <HAL_ADC_ConfigChannel+0x5cc>)
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	e009      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x4ba>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a48      	ldr	r2, [pc, #288]	; (80031f4 <HAL_ADC_ConfigChannel+0x5cc>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d102      	bne.n	80030de <HAL_ADC_ConfigChannel+0x4b6>
 80030d8:	4b45      	ldr	r3, [pc, #276]	; (80031f0 <HAL_ADC_ConfigChannel+0x5c8>)
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	e001      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x4ba>
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d108      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x4da>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x4da>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <HAL_ADC_ConfigChannel+0x4dc>
 8003102:	2300      	movs	r3, #0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d150      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003108:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800310a:	2b00      	cmp	r3, #0
 800310c:	d010      	beq.n	8003130 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b01      	cmp	r3, #1
 8003118:	d107      	bne.n	800312a <HAL_ADC_ConfigChannel+0x502>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_ADC_ConfigChannel+0x502>
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <HAL_ADC_ConfigChannel+0x504>
 800312a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800312c:	2b00      	cmp	r3, #0
 800312e:	d13c      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b10      	cmp	r3, #16
 8003136:	d11d      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x54c>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003140:	d118      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800314a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800314c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800314e:	4b2a      	ldr	r3, [pc, #168]	; (80031f8 <HAL_ADC_ConfigChannel+0x5d0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a2a      	ldr	r2, [pc, #168]	; (80031fc <HAL_ADC_ConfigChannel+0x5d4>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	0c9a      	lsrs	r2, r3, #18
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003164:	e002      	b.n	800316c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	3b01      	subs	r3, #1
 800316a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f9      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003172:	e02e      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b11      	cmp	r3, #17
 800317a:	d10b      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x56c>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003184:	d106      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800318e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003190:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003192:	e01e      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b12      	cmp	r3, #18
 800319a:	d11a      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800319c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031a6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031a8:	e013      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f043 0220 	orr.w	r2, r3, #32
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80031bc:	e00a      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f043 0220 	orr.w	r2, r3, #32
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80031d0:	e000      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031d2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80031dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	376c      	adds	r7, #108	; 0x6c
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	50000100 	.word	0x50000100
 80031f0:	50000400 	.word	0x50000400
 80031f4:	50000500 	.word	0x50000500
 80031f8:	20000078 	.word	0x20000078
 80031fc:	431bde83 	.word	0x431bde83

08003200 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003200:	b480      	push	{r7}
 8003202:	b099      	sub	sp, #100	; 0x64
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003218:	d102      	bne.n	8003220 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800321a:	4b6d      	ldr	r3, [pc, #436]	; (80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	e01a      	b.n	8003256 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a6a      	ldr	r2, [pc, #424]	; (80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d103      	bne.n	8003232 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800322a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	e011      	b.n	8003256 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a67      	ldr	r2, [pc, #412]	; (80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d102      	bne.n	8003242 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800323c:	4b66      	ldr	r3, [pc, #408]	; (80033d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	e009      	b.n	8003256 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a64      	ldr	r2, [pc, #400]	; (80033d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d102      	bne.n	8003252 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800324c:	4b61      	ldr	r3, [pc, #388]	; (80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	e001      	b.n	8003256 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003252:	2300      	movs	r3, #0
 8003254:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0b0      	b.n	80033c2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800326a:	2302      	movs	r3, #2
 800326c:	e0a9      	b.n	80033c2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	f040 808d 	bne.w	80033a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b00      	cmp	r3, #0
 8003290:	f040 8086 	bne.w	80033a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800329c:	d004      	beq.n	80032a8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a4b      	ldr	r2, [pc, #300]	; (80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d101      	bne.n	80032ac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80032a8:	4b4c      	ldr	r3, [pc, #304]	; (80033dc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80032aa:	e000      	b.n	80032ae <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80032ac:	4b4c      	ldr	r3, [pc, #304]	; (80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80032ae:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d040      	beq.n	800333a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80032b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032ca:	035b      	lsls	r3, r3, #13
 80032cc:	430b      	orrs	r3, r1
 80032ce:	431a      	orrs	r2, r3
 80032d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d108      	bne.n	80032f4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80032f4:	2300      	movs	r3, #0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d15c      	bne.n	80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	2b01      	cmp	r3, #1
 8003304:	d107      	bne.n	8003316 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003316:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003318:	2b00      	cmp	r3, #0
 800331a:	d14b      	bne.n	80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800331c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003324:	f023 030f 	bic.w	r3, r3, #15
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	6811      	ldr	r1, [r2, #0]
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	6892      	ldr	r2, [r2, #8]
 8003330:	430a      	orrs	r2, r1
 8003332:	431a      	orrs	r2, r3
 8003334:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003336:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003338:	e03c      	b.n	80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800333a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003344:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d108      	bne.n	8003366 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003366:	2300      	movs	r3, #0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d123      	bne.n	80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d107      	bne.n	8003388 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003388:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800338a:	2b00      	cmp	r3, #0
 800338c:	d112      	bne.n	80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800338e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003396:	f023 030f 	bic.w	r3, r3, #15
 800339a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800339c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800339e:	e009      	b.n	80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80033b2:	e000      	b.n	80033b6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80033b4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80033be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80033c2:	4618      	mov	r0, r3
 80033c4:	3764      	adds	r7, #100	; 0x64
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	50000100 	.word	0x50000100
 80033d4:	50000400 	.word	0x50000400
 80033d8:	50000500 	.word	0x50000500
 80033dc:	50000300 	.word	0x50000300
 80033e0:	50000700 	.word	0x50000700

080033e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d126      	bne.n	800344c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003414:	2b00      	cmp	r3, #0
 8003416:	d115      	bne.n	8003444 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800341c:	2b00      	cmp	r3, #0
 800341e:	d111      	bne.n	8003444 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d105      	bne.n	8003444 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	f043 0201 	orr.w	r2, r3, #1
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f7fe fce1 	bl	8001e0c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800344a:	e004      	b.n	8003456 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	4798      	blx	r3
}
 8003456:	bf00      	nop
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f7ff f8b1 	bl	80025d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003472:	bf00      	nop
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003498:	f043 0204 	orr.w	r2, r3, #4
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f7ff f8a1 	bl	80025e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034a6:	bf00      	nop
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d108      	bne.n	80034dc <ADC_Enable+0x2c>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <ADC_Enable+0x2c>
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <ADC_Enable+0x2e>
 80034dc:	2300      	movs	r3, #0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d143      	bne.n	800356a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	4b22      	ldr	r3, [pc, #136]	; (8003574 <ADC_Enable+0xc4>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00d      	beq.n	800350c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	f043 0210 	orr.w	r2, r3, #16
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003500:	f043 0201 	orr.w	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e02f      	b.n	800356c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800351c:	f7ff f82a 	bl	8002574 <HAL_GetTick>
 8003520:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003522:	e01b      	b.n	800355c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003524:	f7ff f826 	bl	8002574 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d914      	bls.n	800355c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b01      	cmp	r3, #1
 800353e:	d00d      	beq.n	800355c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	f043 0210 	orr.w	r2, r3, #16
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	f043 0201 	orr.w	r2, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e007      	b.n	800356c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b01      	cmp	r3, #1
 8003568:	d1dc      	bne.n	8003524 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	8000003f 	.word	0x8000003f

08003578 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	2b01      	cmp	r3, #1
 8003590:	d108      	bne.n	80035a4 <ADC_Disable+0x2c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <ADC_Disable+0x2c>
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <ADC_Disable+0x2e>
 80035a4:	2300      	movs	r3, #0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d047      	beq.n	800363a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 030d 	and.w	r3, r3, #13
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d10f      	bne.n	80035d8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0202 	orr.w	r2, r2, #2
 80035c6:	609a      	str	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2203      	movs	r2, #3
 80035ce:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80035d0:	f7fe ffd0 	bl	8002574 <HAL_GetTick>
 80035d4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80035d6:	e029      	b.n	800362c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	f043 0210 	orr.w	r2, r3, #16
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e8:	f043 0201 	orr.w	r2, r3, #1
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e023      	b.n	800363c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035f4:	f7fe ffbe 	bl	8002574 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d914      	bls.n	800362c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d10d      	bne.n	800362c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	f043 0210 	orr.w	r2, r3, #16
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003620:	f043 0201 	orr.w	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e007      	b.n	800363c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b01      	cmp	r3, #1
 8003638:	d0dc      	beq.n	80035f4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003654:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <__NVIC_SetPriorityGrouping+0x44>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003660:	4013      	ands	r3, r2
 8003662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800366c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003676:	4a04      	ldr	r2, [pc, #16]	; (8003688 <__NVIC_SetPriorityGrouping+0x44>)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	60d3      	str	r3, [r2, #12]
}
 800367c:	bf00      	nop
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	e000ed00 	.word	0xe000ed00

0800368c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003690:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	0a1b      	lsrs	r3, r3, #8
 8003696:	f003 0307 	and.w	r3, r3, #7
}
 800369a:	4618      	mov	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	e000ed00 	.word	0xe000ed00

080036a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	db0b      	blt.n	80036d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	f003 021f 	and.w	r2, r3, #31
 80036c0:	4907      	ldr	r1, [pc, #28]	; (80036e0 <__NVIC_EnableIRQ+0x38>)
 80036c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	2001      	movs	r0, #1
 80036ca:	fa00 f202 	lsl.w	r2, r0, r2
 80036ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	e000e100 	.word	0xe000e100

080036e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	6039      	str	r1, [r7, #0]
 80036ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	db0a      	blt.n	800370e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	490c      	ldr	r1, [pc, #48]	; (8003730 <__NVIC_SetPriority+0x4c>)
 80036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003702:	0112      	lsls	r2, r2, #4
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	440b      	add	r3, r1
 8003708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800370c:	e00a      	b.n	8003724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	4908      	ldr	r1, [pc, #32]	; (8003734 <__NVIC_SetPriority+0x50>)
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	3b04      	subs	r3, #4
 800371c:	0112      	lsls	r2, r2, #4
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	440b      	add	r3, r1
 8003722:	761a      	strb	r2, [r3, #24]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	e000e100 	.word	0xe000e100
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003738:	b480      	push	{r7}
 800373a:	b089      	sub	sp, #36	; 0x24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f1c3 0307 	rsb	r3, r3, #7
 8003752:	2b04      	cmp	r3, #4
 8003754:	bf28      	it	cs
 8003756:	2304      	movcs	r3, #4
 8003758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3304      	adds	r3, #4
 800375e:	2b06      	cmp	r3, #6
 8003760:	d902      	bls.n	8003768 <NVIC_EncodePriority+0x30>
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3b03      	subs	r3, #3
 8003766:	e000      	b.n	800376a <NVIC_EncodePriority+0x32>
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800376c:	f04f 32ff 	mov.w	r2, #4294967295
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43da      	mvns	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	401a      	ands	r2, r3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003780:	f04f 31ff 	mov.w	r1, #4294967295
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	fa01 f303 	lsl.w	r3, r1, r3
 800378a:	43d9      	mvns	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003790:	4313      	orrs	r3, r2
         );
}
 8003792:	4618      	mov	r0, r3
 8003794:	3724      	adds	r7, #36	; 0x24
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037b0:	d301      	bcc.n	80037b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037b2:	2301      	movs	r3, #1
 80037b4:	e00f      	b.n	80037d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037b6:	4a0a      	ldr	r2, [pc, #40]	; (80037e0 <SysTick_Config+0x40>)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037be:	210f      	movs	r1, #15
 80037c0:	f04f 30ff 	mov.w	r0, #4294967295
 80037c4:	f7ff ff8e 	bl	80036e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <SysTick_Config+0x40>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ce:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <SysTick_Config+0x40>)
 80037d0:	2207      	movs	r2, #7
 80037d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	e000e010 	.word	0xe000e010

080037e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff ff29 	bl	8003644 <__NVIC_SetPriorityGrouping>
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b086      	sub	sp, #24
 80037fe:	af00      	add	r7, sp, #0
 8003800:	4603      	mov	r3, r0
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800380c:	f7ff ff3e 	bl	800368c <__NVIC_GetPriorityGrouping>
 8003810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	6978      	ldr	r0, [r7, #20]
 8003818:	f7ff ff8e 	bl	8003738 <NVIC_EncodePriority>
 800381c:	4602      	mov	r2, r0
 800381e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff ff5d 	bl	80036e4 <__NVIC_SetPriority>
}
 800382a:	bf00      	nop
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	4603      	mov	r3, r0
 800383a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800383c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff ff31 	bl	80036a8 <__NVIC_EnableIRQ>
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff ffa2 	bl	80037a0 <SysTick_Config>
 800385c:	4603      	mov	r3, r0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003866:	b580      	push	{r7, lr}
 8003868:	b084      	sub	sp, #16
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e037      	b.n	80038ec <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003892:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003896:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80038a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f9b8 	bl	8003c44 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}  
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_DMA_Start_IT+0x20>
 8003910:	2302      	movs	r3, #2
 8003912:	e04a      	b.n	80039aa <HAL_DMA_Start_IT+0xb6>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003922:	2b01      	cmp	r3, #1
 8003924:	d13a      	bne.n	800399c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2202      	movs	r2, #2
 800392a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f94b 	bl	8003be6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 020e 	orr.w	r2, r2, #14
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	e00f      	b.n	800398a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 020a 	orr.w	r2, r2, #10
 8003978:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0204 	bic.w	r2, r2, #4
 8003988:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 0201 	orr.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	e005      	b.n	80039a8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80039a4:	2302      	movs	r3, #2
 80039a6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80039a8:	7dfb      	ldrb	r3, [r7, #23]
} 
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d008      	beq.n	80039d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2204      	movs	r2, #4
 80039c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e020      	b.n	8003a18 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 020e 	bic.w	r2, r2, #14
 80039e4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0201 	bic.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fe:	2101      	movs	r1, #1
 8003a00:	fa01 f202 	lsl.w	r2, r1, r2
 8003a04:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d005      	beq.n	8003a46 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2204      	movs	r2, #4
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
 8003a44:	e027      	b.n	8003a96 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 020e 	bic.w	r2, r2, #14
 8003a54:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0201 	bic.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6e:	2101      	movs	r1, #1
 8003a70:	fa01 f202 	lsl.w	r2, r1, r2
 8003a74:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	4798      	blx	r3
    } 
  }
  return status;
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	2204      	movs	r2, #4
 8003abe:	409a      	lsls	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d024      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x72>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d01f      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d107      	bne.n	8003af0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0204 	bic.w	r2, r2, #4
 8003aee:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af8:	2104      	movs	r1, #4
 8003afa:	fa01 f202 	lsl.w	r2, r1, r2
 8003afe:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d06a      	beq.n	8003bde <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003b10:	e065      	b.n	8003bde <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	2202      	movs	r2, #2
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d02c      	beq.n	8003b7c <HAL_DMA_IRQHandler+0xdc>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d027      	beq.n	8003b7c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 020a 	bic.w	r2, r2, #10
 8003b48:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	2102      	movs	r1, #2
 8003b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b60:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d035      	beq.n	8003bde <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003b7a:	e030      	b.n	8003bde <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	2208      	movs	r2, #8
 8003b82:	409a      	lsls	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d028      	beq.n	8003bde <HAL_DMA_IRQHandler+0x13e>
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d023      	beq.n	8003bde <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 020e 	bic.w	r2, r2, #14
 8003ba4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bae:	2101      	movs	r1, #1
 8003bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d004      	beq.n	8003bde <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	4798      	blx	r3
    }
  }
}  
 8003bdc:	e7ff      	b.n	8003bde <HAL_DMA_IRQHandler+0x13e>
 8003bde:	bf00      	nop
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b085      	sub	sp, #20
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8003c02:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b10      	cmp	r3, #16
 8003c12:	d108      	bne.n	8003c26 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c24:	e007      	b.n	8003c36 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	60da      	str	r2, [r3, #12]
}
 8003c36:	bf00      	nop
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	4b14      	ldr	r3, [pc, #80]	; (8003ca4 <DMA_CalcBaseAndBitshift+0x60>)
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d80f      	bhi.n	8003c78 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4b12      	ldr	r3, [pc, #72]	; (8003ca8 <DMA_CalcBaseAndBitshift+0x64>)
 8003c60:	4413      	add	r3, r2
 8003c62:	4a12      	ldr	r2, [pc, #72]	; (8003cac <DMA_CalcBaseAndBitshift+0x68>)
 8003c64:	fba2 2303 	umull	r2, r3, r2, r3
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	009a      	lsls	r2, r3, #2
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a0f      	ldr	r2, [pc, #60]	; (8003cb0 <DMA_CalcBaseAndBitshift+0x6c>)
 8003c74:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003c76:	e00e      	b.n	8003c96 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <DMA_CalcBaseAndBitshift+0x70>)
 8003c80:	4413      	add	r3, r2
 8003c82:	4a0a      	ldr	r2, [pc, #40]	; (8003cac <DMA_CalcBaseAndBitshift+0x68>)
 8003c84:	fba2 2303 	umull	r2, r3, r2, r3
 8003c88:	091b      	lsrs	r3, r3, #4
 8003c8a:	009a      	lsls	r2, r3, #2
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <DMA_CalcBaseAndBitshift+0x74>)
 8003c94:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40020407 	.word	0x40020407
 8003ca8:	bffdfff8 	.word	0xbffdfff8
 8003cac:	cccccccd 	.word	0xcccccccd
 8003cb0:	40020000 	.word	0x40020000
 8003cb4:	bffdfbf8 	.word	0xbffdfbf8
 8003cb8:	40020400 	.word	0x40020400

08003cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cca:	e160      	b.n	8003f8e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd8:	4013      	ands	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 8152 	beq.w	8003f88 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d005      	beq.n	8003cfc <HAL_GPIO_Init+0x40>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d130      	bne.n	8003d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	2203      	movs	r2, #3
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4013      	ands	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d32:	2201      	movs	r2, #1
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	f003 0201 	and.w	r2, r3, #1
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d017      	beq.n	8003d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	2203      	movs	r2, #3
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d123      	bne.n	8003dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	08da      	lsrs	r2, r3, #3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3208      	adds	r2, #8
 8003dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	220f      	movs	r2, #15
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	08da      	lsrs	r2, r3, #3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3208      	adds	r2, #8
 8003de8:	6939      	ldr	r1, [r7, #16]
 8003dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	2203      	movs	r2, #3
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4013      	ands	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 0203 	and.w	r2, r3, #3
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 80ac 	beq.w	8003f88 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e30:	4b5e      	ldr	r3, [pc, #376]	; (8003fac <HAL_GPIO_Init+0x2f0>)
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	4a5d      	ldr	r2, [pc, #372]	; (8003fac <HAL_GPIO_Init+0x2f0>)
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	6193      	str	r3, [r2, #24]
 8003e3c:	4b5b      	ldr	r3, [pc, #364]	; (8003fac <HAL_GPIO_Init+0x2f0>)
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e48:	4a59      	ldr	r2, [pc, #356]	; (8003fb0 <HAL_GPIO_Init+0x2f4>)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	089b      	lsrs	r3, r3, #2
 8003e4e:	3302      	adds	r3, #2
 8003e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	220f      	movs	r2, #15
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	43db      	mvns	r3, r3
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e72:	d025      	beq.n	8003ec0 <HAL_GPIO_Init+0x204>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a4f      	ldr	r2, [pc, #316]	; (8003fb4 <HAL_GPIO_Init+0x2f8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d01f      	beq.n	8003ebc <HAL_GPIO_Init+0x200>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a4e      	ldr	r2, [pc, #312]	; (8003fb8 <HAL_GPIO_Init+0x2fc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d019      	beq.n	8003eb8 <HAL_GPIO_Init+0x1fc>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a4d      	ldr	r2, [pc, #308]	; (8003fbc <HAL_GPIO_Init+0x300>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d013      	beq.n	8003eb4 <HAL_GPIO_Init+0x1f8>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a4c      	ldr	r2, [pc, #304]	; (8003fc0 <HAL_GPIO_Init+0x304>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00d      	beq.n	8003eb0 <HAL_GPIO_Init+0x1f4>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a4b      	ldr	r2, [pc, #300]	; (8003fc4 <HAL_GPIO_Init+0x308>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d007      	beq.n	8003eac <HAL_GPIO_Init+0x1f0>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a4a      	ldr	r2, [pc, #296]	; (8003fc8 <HAL_GPIO_Init+0x30c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d101      	bne.n	8003ea8 <HAL_GPIO_Init+0x1ec>
 8003ea4:	2306      	movs	r3, #6
 8003ea6:	e00c      	b.n	8003ec2 <HAL_GPIO_Init+0x206>
 8003ea8:	2307      	movs	r3, #7
 8003eaa:	e00a      	b.n	8003ec2 <HAL_GPIO_Init+0x206>
 8003eac:	2305      	movs	r3, #5
 8003eae:	e008      	b.n	8003ec2 <HAL_GPIO_Init+0x206>
 8003eb0:	2304      	movs	r3, #4
 8003eb2:	e006      	b.n	8003ec2 <HAL_GPIO_Init+0x206>
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e004      	b.n	8003ec2 <HAL_GPIO_Init+0x206>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e002      	b.n	8003ec2 <HAL_GPIO_Init+0x206>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <HAL_GPIO_Init+0x206>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	f002 0203 	and.w	r2, r2, #3
 8003ec8:	0092      	lsls	r2, r2, #2
 8003eca:	4093      	lsls	r3, r2
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ed2:	4937      	ldr	r1, [pc, #220]	; (8003fb0 <HAL_GPIO_Init+0x2f4>)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	089b      	lsrs	r3, r3, #2
 8003ed8:	3302      	adds	r3, #2
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ee0:	4b3a      	ldr	r3, [pc, #232]	; (8003fcc <HAL_GPIO_Init+0x310>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4013      	ands	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f04:	4a31      	ldr	r2, [pc, #196]	; (8003fcc <HAL_GPIO_Init+0x310>)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f0a:	4b30      	ldr	r3, [pc, #192]	; (8003fcc <HAL_GPIO_Init+0x310>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	43db      	mvns	r3, r3
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4013      	ands	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f2e:	4a27      	ldr	r2, [pc, #156]	; (8003fcc <HAL_GPIO_Init+0x310>)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f34:	4b25      	ldr	r3, [pc, #148]	; (8003fcc <HAL_GPIO_Init+0x310>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4013      	ands	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f58:	4a1c      	ldr	r2, [pc, #112]	; (8003fcc <HAL_GPIO_Init+0x310>)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f5e:	4b1b      	ldr	r3, [pc, #108]	; (8003fcc <HAL_GPIO_Init+0x310>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	43db      	mvns	r3, r3
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f82:	4a12      	ldr	r2, [pc, #72]	; (8003fcc <HAL_GPIO_Init+0x310>)
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	fa22 f303 	lsr.w	r3, r2, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f47f ae97 	bne.w	8003ccc <HAL_GPIO_Init+0x10>
  }
}
 8003f9e:	bf00      	nop
 8003fa0:	bf00      	nop
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	40010000 	.word	0x40010000
 8003fb4:	48000400 	.word	0x48000400
 8003fb8:	48000800 	.word	0x48000800
 8003fbc:	48000c00 	.word	0x48000c00
 8003fc0:	48001000 	.word	0x48001000
 8003fc4:	48001400 	.word	0x48001400
 8003fc8:	48001800 	.word	0x48001800
 8003fcc:	40010400 	.word	0x40010400

08003fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	887b      	ldrh	r3, [r7, #2]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	73fb      	strb	r3, [r7, #15]
 8003fec:	e001      	b.n	8003ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	460b      	mov	r3, r1
 800400a:	807b      	strh	r3, [r7, #2]
 800400c:	4613      	mov	r3, r2
 800400e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004010:	787b      	ldrb	r3, [r7, #1]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004016:	887a      	ldrh	r2, [r7, #2]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800401c:	e002      	b.n	8004024 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800401e:	887a      	ldrh	r2, [r7, #2]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800403a:	4b08      	ldr	r3, [pc, #32]	; (800405c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	4013      	ands	r3, r2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d006      	beq.n	8004054 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004046:	4a05      	ldr	r2, [pc, #20]	; (800405c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004048:	88fb      	ldrh	r3, [r7, #6]
 800404a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	4618      	mov	r0, r3
 8004050:	f000 f806 	bl	8004060 <HAL_GPIO_EXTI_Callback>
  }
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40010400 	.word	0x40010400

08004060 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
	...

08004078 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800407e:	af00      	add	r7, sp, #0
 8004080:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004084:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004088:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800408a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800408e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d102      	bne.n	800409e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	f001 b83a 	b.w	8005112 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800409e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 816f 	beq.w	8004392 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80040b4:	4bb5      	ldr	r3, [pc, #724]	; (800438c <HAL_RCC_OscConfig+0x314>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 030c 	and.w	r3, r3, #12
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d00c      	beq.n	80040da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040c0:	4bb2      	ldr	r3, [pc, #712]	; (800438c <HAL_RCC_OscConfig+0x314>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 030c 	and.w	r3, r3, #12
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d15c      	bne.n	8004186 <HAL_RCC_OscConfig+0x10e>
 80040cc:	4baf      	ldr	r3, [pc, #700]	; (800438c <HAL_RCC_OscConfig+0x314>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80040d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d8:	d155      	bne.n	8004186 <HAL_RCC_OscConfig+0x10e>
 80040da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040de:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80040e6:	fa93 f3a3 	rbit	r3, r3
 80040ea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b01      	cmp	r3, #1
 8004104:	d102      	bne.n	800410c <HAL_RCC_OscConfig+0x94>
 8004106:	4ba1      	ldr	r3, [pc, #644]	; (800438c <HAL_RCC_OscConfig+0x314>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	e015      	b.n	8004138 <HAL_RCC_OscConfig+0xc0>
 800410c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004110:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004114:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004118:	fa93 f3a3 	rbit	r3, r3
 800411c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004120:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004124:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004128:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800412c:	fa93 f3a3 	rbit	r3, r3
 8004130:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004134:	4b95      	ldr	r3, [pc, #596]	; (800438c <HAL_RCC_OscConfig+0x314>)
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800413c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004140:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004144:	fa92 f2a2 	rbit	r2, r2
 8004148:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800414c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004150:	fab2 f282 	clz	r2, r2
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	f042 0220 	orr.w	r2, r2, #32
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	f002 021f 	and.w	r2, r2, #31
 8004160:	2101      	movs	r1, #1
 8004162:	fa01 f202 	lsl.w	r2, r1, r2
 8004166:	4013      	ands	r3, r2
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 8111 	beq.w	8004390 <HAL_RCC_OscConfig+0x318>
 800416e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004172:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	f040 8108 	bne.w	8004390 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	f000 bfc6 	b.w	8005112 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004186:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800418a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004196:	d106      	bne.n	80041a6 <HAL_RCC_OscConfig+0x12e>
 8004198:	4b7c      	ldr	r3, [pc, #496]	; (800438c <HAL_RCC_OscConfig+0x314>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a7b      	ldr	r2, [pc, #492]	; (800438c <HAL_RCC_OscConfig+0x314>)
 800419e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	e036      	b.n	8004214 <HAL_RCC_OscConfig+0x19c>
 80041a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10c      	bne.n	80041d0 <HAL_RCC_OscConfig+0x158>
 80041b6:	4b75      	ldr	r3, [pc, #468]	; (800438c <HAL_RCC_OscConfig+0x314>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a74      	ldr	r2, [pc, #464]	; (800438c <HAL_RCC_OscConfig+0x314>)
 80041bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	4b72      	ldr	r3, [pc, #456]	; (800438c <HAL_RCC_OscConfig+0x314>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a71      	ldr	r2, [pc, #452]	; (800438c <HAL_RCC_OscConfig+0x314>)
 80041c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	e021      	b.n	8004214 <HAL_RCC_OscConfig+0x19c>
 80041d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041e0:	d10c      	bne.n	80041fc <HAL_RCC_OscConfig+0x184>
 80041e2:	4b6a      	ldr	r3, [pc, #424]	; (800438c <HAL_RCC_OscConfig+0x314>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a69      	ldr	r2, [pc, #420]	; (800438c <HAL_RCC_OscConfig+0x314>)
 80041e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	4b67      	ldr	r3, [pc, #412]	; (800438c <HAL_RCC_OscConfig+0x314>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a66      	ldr	r2, [pc, #408]	; (800438c <HAL_RCC_OscConfig+0x314>)
 80041f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e00b      	b.n	8004214 <HAL_RCC_OscConfig+0x19c>
 80041fc:	4b63      	ldr	r3, [pc, #396]	; (800438c <HAL_RCC_OscConfig+0x314>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a62      	ldr	r2, [pc, #392]	; (800438c <HAL_RCC_OscConfig+0x314>)
 8004202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	4b60      	ldr	r3, [pc, #384]	; (800438c <HAL_RCC_OscConfig+0x314>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a5f      	ldr	r2, [pc, #380]	; (800438c <HAL_RCC_OscConfig+0x314>)
 800420e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004212:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004214:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004218:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d059      	beq.n	80042d8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004224:	f7fe f9a6 	bl	8002574 <HAL_GetTick>
 8004228:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422c:	e00a      	b.n	8004244 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800422e:	f7fe f9a1 	bl	8002574 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	; 0x64
 800423c:	d902      	bls.n	8004244 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	f000 bf67 	b.w	8005112 <HAL_RCC_OscConfig+0x109a>
 8004244:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004248:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004250:	fa93 f3a3 	rbit	r3, r3
 8004254:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004258:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425c:	fab3 f383 	clz	r3, r3
 8004260:	b2db      	uxtb	r3, r3
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	b2db      	uxtb	r3, r3
 8004266:	f043 0301 	orr.w	r3, r3, #1
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b01      	cmp	r3, #1
 800426e:	d102      	bne.n	8004276 <HAL_RCC_OscConfig+0x1fe>
 8004270:	4b46      	ldr	r3, [pc, #280]	; (800438c <HAL_RCC_OscConfig+0x314>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	e015      	b.n	80042a2 <HAL_RCC_OscConfig+0x22a>
 8004276:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800427a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004282:	fa93 f3a3 	rbit	r3, r3
 8004286:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800428a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800428e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004292:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004296:	fa93 f3a3 	rbit	r3, r3
 800429a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800429e:	4b3b      	ldr	r3, [pc, #236]	; (800438c <HAL_RCC_OscConfig+0x314>)
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042a6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80042aa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80042ae:	fa92 f2a2 	rbit	r2, r2
 80042b2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80042b6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80042ba:	fab2 f282 	clz	r2, r2
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	f042 0220 	orr.w	r2, r2, #32
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	f002 021f 	and.w	r2, r2, #31
 80042ca:	2101      	movs	r1, #1
 80042cc:	fa01 f202 	lsl.w	r2, r1, r2
 80042d0:	4013      	ands	r3, r2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0ab      	beq.n	800422e <HAL_RCC_OscConfig+0x1b6>
 80042d6:	e05c      	b.n	8004392 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d8:	f7fe f94c 	bl	8002574 <HAL_GetTick>
 80042dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e0:	e00a      	b.n	80042f8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042e2:	f7fe f947 	bl	8002574 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d902      	bls.n	80042f8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	f000 bf0d 	b.w	8005112 <HAL_RCC_OscConfig+0x109a>
 80042f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042fc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004304:	fa93 f3a3 	rbit	r3, r3
 8004308:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800430c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004310:	fab3 f383 	clz	r3, r3
 8004314:	b2db      	uxtb	r3, r3
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	b2db      	uxtb	r3, r3
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b01      	cmp	r3, #1
 8004322:	d102      	bne.n	800432a <HAL_RCC_OscConfig+0x2b2>
 8004324:	4b19      	ldr	r3, [pc, #100]	; (800438c <HAL_RCC_OscConfig+0x314>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	e015      	b.n	8004356 <HAL_RCC_OscConfig+0x2de>
 800432a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800432e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004332:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004336:	fa93 f3a3 	rbit	r3, r3
 800433a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800433e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004342:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004346:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800434a:	fa93 f3a3 	rbit	r3, r3
 800434e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004352:	4b0e      	ldr	r3, [pc, #56]	; (800438c <HAL_RCC_OscConfig+0x314>)
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800435a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800435e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004362:	fa92 f2a2 	rbit	r2, r2
 8004366:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800436a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800436e:	fab2 f282 	clz	r2, r2
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	f042 0220 	orr.w	r2, r2, #32
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	f002 021f 	and.w	r2, r2, #31
 800437e:	2101      	movs	r1, #1
 8004380:	fa01 f202 	lsl.w	r2, r1, r2
 8004384:	4013      	ands	r3, r2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1ab      	bne.n	80042e2 <HAL_RCC_OscConfig+0x26a>
 800438a:	e002      	b.n	8004392 <HAL_RCC_OscConfig+0x31a>
 800438c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004392:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004396:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 817f 	beq.w	80046a6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80043a8:	4ba7      	ldr	r3, [pc, #668]	; (8004648 <HAL_RCC_OscConfig+0x5d0>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f003 030c 	and.w	r3, r3, #12
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00c      	beq.n	80043ce <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80043b4:	4ba4      	ldr	r3, [pc, #656]	; (8004648 <HAL_RCC_OscConfig+0x5d0>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f003 030c 	and.w	r3, r3, #12
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d173      	bne.n	80044a8 <HAL_RCC_OscConfig+0x430>
 80043c0:	4ba1      	ldr	r3, [pc, #644]	; (8004648 <HAL_RCC_OscConfig+0x5d0>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80043c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043cc:	d16c      	bne.n	80044a8 <HAL_RCC_OscConfig+0x430>
 80043ce:	2302      	movs	r3, #2
 80043d0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80043d8:	fa93 f3a3 	rbit	r3, r3
 80043dc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80043e0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e4:	fab3 f383 	clz	r3, r3
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f043 0301 	orr.w	r3, r3, #1
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d102      	bne.n	80043fe <HAL_RCC_OscConfig+0x386>
 80043f8:	4b93      	ldr	r3, [pc, #588]	; (8004648 <HAL_RCC_OscConfig+0x5d0>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	e013      	b.n	8004426 <HAL_RCC_OscConfig+0x3ae>
 80043fe:	2302      	movs	r3, #2
 8004400:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004404:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004408:	fa93 f3a3 	rbit	r3, r3
 800440c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004410:	2302      	movs	r3, #2
 8004412:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004416:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800441a:	fa93 f3a3 	rbit	r3, r3
 800441e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004422:	4b89      	ldr	r3, [pc, #548]	; (8004648 <HAL_RCC_OscConfig+0x5d0>)
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	2202      	movs	r2, #2
 8004428:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800442c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004430:	fa92 f2a2 	rbit	r2, r2
 8004434:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004438:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800443c:	fab2 f282 	clz	r2, r2
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	f042 0220 	orr.w	r2, r2, #32
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	f002 021f 	and.w	r2, r2, #31
 800444c:	2101      	movs	r1, #1
 800444e:	fa01 f202 	lsl.w	r2, r1, r2
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <HAL_RCC_OscConfig+0x3f6>
 8004458:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800445c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d002      	beq.n	800446e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	f000 be52 	b.w	8005112 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800446e:	4b76      	ldr	r3, [pc, #472]	; (8004648 <HAL_RCC_OscConfig+0x5d0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800447a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	21f8      	movs	r1, #248	; 0xf8
 8004484:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004488:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800448c:	fa91 f1a1 	rbit	r1, r1
 8004490:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004494:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004498:	fab1 f181 	clz	r1, r1
 800449c:	b2c9      	uxtb	r1, r1
 800449e:	408b      	lsls	r3, r1
 80044a0:	4969      	ldr	r1, [pc, #420]	; (8004648 <HAL_RCC_OscConfig+0x5d0>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a6:	e0fe      	b.n	80046a6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8088 	beq.w	80045ca <HAL_RCC_OscConfig+0x552>
 80044ba:	2301      	movs	r3, #1
 80044bc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80044c4:	fa93 f3a3 	rbit	r3, r3
 80044c8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80044cc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044d0:	fab3 f383 	clz	r3, r3
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	461a      	mov	r2, r3
 80044e2:	2301      	movs	r3, #1
 80044e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e6:	f7fe f845 	bl	8002574 <HAL_GetTick>
 80044ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ee:	e00a      	b.n	8004506 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044f0:	f7fe f840 	bl	8002574 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d902      	bls.n	8004506 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	f000 be06 	b.w	8005112 <HAL_RCC_OscConfig+0x109a>
 8004506:	2302      	movs	r3, #2
 8004508:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004510:	fa93 f3a3 	rbit	r3, r3
 8004514:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004518:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800451c:	fab3 f383 	clz	r3, r3
 8004520:	b2db      	uxtb	r3, r3
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d102      	bne.n	8004536 <HAL_RCC_OscConfig+0x4be>
 8004530:	4b45      	ldr	r3, [pc, #276]	; (8004648 <HAL_RCC_OscConfig+0x5d0>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	e013      	b.n	800455e <HAL_RCC_OscConfig+0x4e6>
 8004536:	2302      	movs	r3, #2
 8004538:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004540:	fa93 f3a3 	rbit	r3, r3
 8004544:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004548:	2302      	movs	r3, #2
 800454a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800454e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004552:	fa93 f3a3 	rbit	r3, r3
 8004556:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800455a:	4b3b      	ldr	r3, [pc, #236]	; (8004648 <HAL_RCC_OscConfig+0x5d0>)
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	2202      	movs	r2, #2
 8004560:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004564:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004568:	fa92 f2a2 	rbit	r2, r2
 800456c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004570:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004574:	fab2 f282 	clz	r2, r2
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	f042 0220 	orr.w	r2, r2, #32
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	f002 021f 	and.w	r2, r2, #31
 8004584:	2101      	movs	r1, #1
 8004586:	fa01 f202 	lsl.w	r2, r1, r2
 800458a:	4013      	ands	r3, r2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0af      	beq.n	80044f0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004590:	4b2d      	ldr	r3, [pc, #180]	; (8004648 <HAL_RCC_OscConfig+0x5d0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004598:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800459c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	21f8      	movs	r1, #248	; 0xf8
 80045a6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045aa:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80045ae:	fa91 f1a1 	rbit	r1, r1
 80045b2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80045b6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80045ba:	fab1 f181 	clz	r1, r1
 80045be:	b2c9      	uxtb	r1, r1
 80045c0:	408b      	lsls	r3, r1
 80045c2:	4921      	ldr	r1, [pc, #132]	; (8004648 <HAL_RCC_OscConfig+0x5d0>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	600b      	str	r3, [r1, #0]
 80045c8:	e06d      	b.n	80046a6 <HAL_RCC_OscConfig+0x62e>
 80045ca:	2301      	movs	r3, #1
 80045cc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80045d4:	fa93 f3a3 	rbit	r3, r3
 80045d8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80045dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e0:	fab3 f383 	clz	r3, r3
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80045ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	461a      	mov	r2, r3
 80045f2:	2300      	movs	r3, #0
 80045f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f6:	f7fd ffbd 	bl	8002574 <HAL_GetTick>
 80045fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004600:	f7fd ffb8 	bl	8002574 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d902      	bls.n	8004616 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	f000 bd7e 	b.w	8005112 <HAL_RCC_OscConfig+0x109a>
 8004616:	2302      	movs	r3, #2
 8004618:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004620:	fa93 f3a3 	rbit	r3, r3
 8004624:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004628:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800462c:	fab3 f383 	clz	r3, r3
 8004630:	b2db      	uxtb	r3, r3
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	b2db      	uxtb	r3, r3
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b01      	cmp	r3, #1
 800463e:	d105      	bne.n	800464c <HAL_RCC_OscConfig+0x5d4>
 8004640:	4b01      	ldr	r3, [pc, #4]	; (8004648 <HAL_RCC_OscConfig+0x5d0>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	e016      	b.n	8004674 <HAL_RCC_OscConfig+0x5fc>
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000
 800464c:	2302      	movs	r3, #2
 800464e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004656:	fa93 f3a3 	rbit	r3, r3
 800465a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800465e:	2302      	movs	r3, #2
 8004660:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004664:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004668:	fa93 f3a3 	rbit	r3, r3
 800466c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004670:	4bbf      	ldr	r3, [pc, #764]	; (8004970 <HAL_RCC_OscConfig+0x8f8>)
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	2202      	movs	r2, #2
 8004676:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800467a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800467e:	fa92 f2a2 	rbit	r2, r2
 8004682:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004686:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800468a:	fab2 f282 	clz	r2, r2
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	f042 0220 	orr.w	r2, r2, #32
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	f002 021f 	and.w	r2, r2, #31
 800469a:	2101      	movs	r1, #1
 800469c:	fa01 f202 	lsl.w	r2, r1, r2
 80046a0:	4013      	ands	r3, r2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1ac      	bne.n	8004600 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 8113 	beq.w	80048e2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d07c      	beq.n	80047c6 <HAL_RCC_OscConfig+0x74e>
 80046cc:	2301      	movs	r3, #1
 80046ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d6:	fa93 f3a3 	rbit	r3, r3
 80046da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80046de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046e2:	fab3 f383 	clz	r3, r3
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	4ba2      	ldr	r3, [pc, #648]	; (8004974 <HAL_RCC_OscConfig+0x8fc>)
 80046ec:	4413      	add	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	461a      	mov	r2, r3
 80046f2:	2301      	movs	r3, #1
 80046f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f6:	f7fd ff3d 	bl	8002574 <HAL_GetTick>
 80046fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046fe:	e00a      	b.n	8004716 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004700:	f7fd ff38 	bl	8002574 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d902      	bls.n	8004716 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	f000 bcfe 	b.w	8005112 <HAL_RCC_OscConfig+0x109a>
 8004716:	2302      	movs	r3, #2
 8004718:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004720:	fa93 f2a3 	rbit	r2, r3
 8004724:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004728:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004732:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004736:	2202      	movs	r2, #2
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800473e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	fa93 f2a3 	rbit	r2, r3
 8004748:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800474c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004756:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800475a:	2202      	movs	r2, #2
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004762:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	fa93 f2a3 	rbit	r2, r3
 800476c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004770:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004774:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004776:	4b7e      	ldr	r3, [pc, #504]	; (8004970 <HAL_RCC_OscConfig+0x8f8>)
 8004778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800477a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800477e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004782:	2102      	movs	r1, #2
 8004784:	6019      	str	r1, [r3, #0]
 8004786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800478a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	fa93 f1a3 	rbit	r1, r3
 8004794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004798:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800479c:	6019      	str	r1, [r3, #0]
  return result;
 800479e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047a2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	fab3 f383 	clz	r3, r3
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	f003 031f 	and.w	r3, r3, #31
 80047b8:	2101      	movs	r1, #1
 80047ba:	fa01 f303 	lsl.w	r3, r1, r3
 80047be:	4013      	ands	r3, r2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d09d      	beq.n	8004700 <HAL_RCC_OscConfig+0x688>
 80047c4:	e08d      	b.n	80048e2 <HAL_RCC_OscConfig+0x86a>
 80047c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80047ce:	2201      	movs	r2, #1
 80047d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	fa93 f2a3 	rbit	r2, r3
 80047e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047e4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80047e8:	601a      	str	r2, [r3, #0]
  return result;
 80047ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80047f2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047f4:	fab3 f383 	clz	r3, r3
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	461a      	mov	r2, r3
 80047fc:	4b5d      	ldr	r3, [pc, #372]	; (8004974 <HAL_RCC_OscConfig+0x8fc>)
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	461a      	mov	r2, r3
 8004804:	2300      	movs	r3, #0
 8004806:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004808:	f7fd feb4 	bl	8002574 <HAL_GetTick>
 800480c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004810:	e00a      	b.n	8004828 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004812:	f7fd feaf 	bl	8002574 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d902      	bls.n	8004828 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	f000 bc75 	b.w	8005112 <HAL_RCC_OscConfig+0x109a>
 8004828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800482c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004830:	2202      	movs	r2, #2
 8004832:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004838:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	fa93 f2a3 	rbit	r2, r3
 8004842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004846:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004850:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004854:	2202      	movs	r2, #2
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800485c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	fa93 f2a3 	rbit	r2, r3
 8004866:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800486a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004874:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004878:	2202      	movs	r2, #2
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004880:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	fa93 f2a3 	rbit	r2, r3
 800488a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800488e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004892:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004894:	4b36      	ldr	r3, [pc, #216]	; (8004970 <HAL_RCC_OscConfig+0x8f8>)
 8004896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004898:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800489c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80048a0:	2102      	movs	r1, #2
 80048a2:	6019      	str	r1, [r3, #0]
 80048a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	fa93 f1a3 	rbit	r1, r3
 80048b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048b6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80048ba:	6019      	str	r1, [r3, #0]
  return result;
 80048bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	fab3 f383 	clz	r3, r3
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	f003 031f 	and.w	r3, r3, #31
 80048d6:	2101      	movs	r1, #1
 80048d8:	fa01 f303 	lsl.w	r3, r1, r3
 80048dc:	4013      	ands	r3, r2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d197      	bne.n	8004812 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 81a5 	beq.w	8004c42 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f8:	2300      	movs	r3, #0
 80048fa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048fe:	4b1c      	ldr	r3, [pc, #112]	; (8004970 <HAL_RCC_OscConfig+0x8f8>)
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d116      	bne.n	8004938 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800490a:	4b19      	ldr	r3, [pc, #100]	; (8004970 <HAL_RCC_OscConfig+0x8f8>)
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	4a18      	ldr	r2, [pc, #96]	; (8004970 <HAL_RCC_OscConfig+0x8f8>)
 8004910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004914:	61d3      	str	r3, [r2, #28]
 8004916:	4b16      	ldr	r3, [pc, #88]	; (8004970 <HAL_RCC_OscConfig+0x8f8>)
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800491e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004922:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800492c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004930:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004932:	2301      	movs	r3, #1
 8004934:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004938:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <HAL_RCC_OscConfig+0x900>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004940:	2b00      	cmp	r3, #0
 8004942:	d121      	bne.n	8004988 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004944:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <HAL_RCC_OscConfig+0x900>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a0b      	ldr	r2, [pc, #44]	; (8004978 <HAL_RCC_OscConfig+0x900>)
 800494a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800494e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004950:	f7fd fe10 	bl	8002574 <HAL_GetTick>
 8004954:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004958:	e010      	b.n	800497c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800495a:	f7fd fe0b 	bl	8002574 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b64      	cmp	r3, #100	; 0x64
 8004968:	d908      	bls.n	800497c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e3d1      	b.n	8005112 <HAL_RCC_OscConfig+0x109a>
 800496e:	bf00      	nop
 8004970:	40021000 	.word	0x40021000
 8004974:	10908120 	.word	0x10908120
 8004978:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800497c:	4b8d      	ldr	r3, [pc, #564]	; (8004bb4 <HAL_RCC_OscConfig+0xb3c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0e8      	beq.n	800495a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800498c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d106      	bne.n	80049a6 <HAL_RCC_OscConfig+0x92e>
 8004998:	4b87      	ldr	r3, [pc, #540]	; (8004bb8 <HAL_RCC_OscConfig+0xb40>)
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	4a86      	ldr	r2, [pc, #536]	; (8004bb8 <HAL_RCC_OscConfig+0xb40>)
 800499e:	f043 0301 	orr.w	r3, r3, #1
 80049a2:	6213      	str	r3, [r2, #32]
 80049a4:	e035      	b.n	8004a12 <HAL_RCC_OscConfig+0x99a>
 80049a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10c      	bne.n	80049d0 <HAL_RCC_OscConfig+0x958>
 80049b6:	4b80      	ldr	r3, [pc, #512]	; (8004bb8 <HAL_RCC_OscConfig+0xb40>)
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	4a7f      	ldr	r2, [pc, #508]	; (8004bb8 <HAL_RCC_OscConfig+0xb40>)
 80049bc:	f023 0301 	bic.w	r3, r3, #1
 80049c0:	6213      	str	r3, [r2, #32]
 80049c2:	4b7d      	ldr	r3, [pc, #500]	; (8004bb8 <HAL_RCC_OscConfig+0xb40>)
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	4a7c      	ldr	r2, [pc, #496]	; (8004bb8 <HAL_RCC_OscConfig+0xb40>)
 80049c8:	f023 0304 	bic.w	r3, r3, #4
 80049cc:	6213      	str	r3, [r2, #32]
 80049ce:	e020      	b.n	8004a12 <HAL_RCC_OscConfig+0x99a>
 80049d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b05      	cmp	r3, #5
 80049de:	d10c      	bne.n	80049fa <HAL_RCC_OscConfig+0x982>
 80049e0:	4b75      	ldr	r3, [pc, #468]	; (8004bb8 <HAL_RCC_OscConfig+0xb40>)
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	4a74      	ldr	r2, [pc, #464]	; (8004bb8 <HAL_RCC_OscConfig+0xb40>)
 80049e6:	f043 0304 	orr.w	r3, r3, #4
 80049ea:	6213      	str	r3, [r2, #32]
 80049ec:	4b72      	ldr	r3, [pc, #456]	; (8004bb8 <HAL_RCC_OscConfig+0xb40>)
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	4a71      	ldr	r2, [pc, #452]	; (8004bb8 <HAL_RCC_OscConfig+0xb40>)
 80049f2:	f043 0301 	orr.w	r3, r3, #1
 80049f6:	6213      	str	r3, [r2, #32]
 80049f8:	e00b      	b.n	8004a12 <HAL_RCC_OscConfig+0x99a>
 80049fa:	4b6f      	ldr	r3, [pc, #444]	; (8004bb8 <HAL_RCC_OscConfig+0xb40>)
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	4a6e      	ldr	r2, [pc, #440]	; (8004bb8 <HAL_RCC_OscConfig+0xb40>)
 8004a00:	f023 0301 	bic.w	r3, r3, #1
 8004a04:	6213      	str	r3, [r2, #32]
 8004a06:	4b6c      	ldr	r3, [pc, #432]	; (8004bb8 <HAL_RCC_OscConfig+0xb40>)
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	4a6b      	ldr	r2, [pc, #428]	; (8004bb8 <HAL_RCC_OscConfig+0xb40>)
 8004a0c:	f023 0304 	bic.w	r3, r3, #4
 8004a10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 8081 	beq.w	8004b26 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a24:	f7fd fda6 	bl	8002574 <HAL_GetTick>
 8004a28:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2c:	e00b      	b.n	8004a46 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a2e:	f7fd fda1 	bl	8002574 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e365      	b.n	8005112 <HAL_RCC_OscConfig+0x109a>
 8004a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a4a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004a4e:	2202      	movs	r2, #2
 8004a50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a56:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	fa93 f2a3 	rbit	r2, r3
 8004a60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a64:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a6e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004a72:	2202      	movs	r2, #2
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a7a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	fa93 f2a3 	rbit	r2, r3
 8004a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a88:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004a8c:	601a      	str	r2, [r3, #0]
  return result;
 8004a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a92:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004a96:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a98:	fab3 f383 	clz	r3, r3
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f043 0302 	orr.w	r3, r3, #2
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d102      	bne.n	8004ab2 <HAL_RCC_OscConfig+0xa3a>
 8004aac:	4b42      	ldr	r3, [pc, #264]	; (8004bb8 <HAL_RCC_OscConfig+0xb40>)
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	e013      	b.n	8004ada <HAL_RCC_OscConfig+0xa62>
 8004ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ab6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004aba:	2202      	movs	r2, #2
 8004abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ac2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	fa93 f2a3 	rbit	r2, r3
 8004acc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ad0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	4b38      	ldr	r3, [pc, #224]	; (8004bb8 <HAL_RCC_OscConfig+0xb40>)
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ade:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004ae2:	2102      	movs	r1, #2
 8004ae4:	6011      	str	r1, [r2, #0]
 8004ae6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004aea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004aee:	6812      	ldr	r2, [r2, #0]
 8004af0:	fa92 f1a2 	rbit	r1, r2
 8004af4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004af8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004afc:	6011      	str	r1, [r2, #0]
  return result;
 8004afe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b02:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004b06:	6812      	ldr	r2, [r2, #0]
 8004b08:	fab2 f282 	clz	r2, r2
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	f002 021f 	and.w	r2, r2, #31
 8004b18:	2101      	movs	r1, #1
 8004b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b1e:	4013      	ands	r3, r2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d084      	beq.n	8004a2e <HAL_RCC_OscConfig+0x9b6>
 8004b24:	e083      	b.n	8004c2e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b26:	f7fd fd25 	bl	8002574 <HAL_GetTick>
 8004b2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b2e:	e00b      	b.n	8004b48 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b30:	f7fd fd20 	bl	8002574 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e2e4      	b.n	8005112 <HAL_RCC_OscConfig+0x109a>
 8004b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b4c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004b50:	2202      	movs	r2, #2
 8004b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b58:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	fa93 f2a3 	rbit	r2, r3
 8004b62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b66:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b70:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004b74:	2202      	movs	r2, #2
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b7c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	fa93 f2a3 	rbit	r2, r3
 8004b86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b8a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004b8e:	601a      	str	r2, [r3, #0]
  return result;
 8004b90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b94:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004b98:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b9a:	fab3 f383 	clz	r3, r3
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	095b      	lsrs	r3, r3, #5
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	f043 0302 	orr.w	r3, r3, #2
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d106      	bne.n	8004bbc <HAL_RCC_OscConfig+0xb44>
 8004bae:	4b02      	ldr	r3, [pc, #8]	; (8004bb8 <HAL_RCC_OscConfig+0xb40>)
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	e017      	b.n	8004be4 <HAL_RCC_OscConfig+0xb6c>
 8004bb4:	40007000 	.word	0x40007000
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bc0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bcc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	fa93 f2a3 	rbit	r2, r3
 8004bd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bda:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	4bb3      	ldr	r3, [pc, #716]	; (8004eb0 <HAL_RCC_OscConfig+0xe38>)
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004be8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004bec:	2102      	movs	r1, #2
 8004bee:	6011      	str	r1, [r2, #0]
 8004bf0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004bf4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004bf8:	6812      	ldr	r2, [r2, #0]
 8004bfa:	fa92 f1a2 	rbit	r1, r2
 8004bfe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c02:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004c06:	6011      	str	r1, [r2, #0]
  return result;
 8004c08:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c0c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004c10:	6812      	ldr	r2, [r2, #0]
 8004c12:	fab2 f282 	clz	r2, r2
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	f002 021f 	and.w	r2, r2, #31
 8004c22:	2101      	movs	r1, #1
 8004c24:	fa01 f202 	lsl.w	r2, r1, r2
 8004c28:	4013      	ands	r3, r2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d180      	bne.n	8004b30 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c2e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d105      	bne.n	8004c42 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c36:	4b9e      	ldr	r3, [pc, #632]	; (8004eb0 <HAL_RCC_OscConfig+0xe38>)
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	4a9d      	ldr	r2, [pc, #628]	; (8004eb0 <HAL_RCC_OscConfig+0xe38>)
 8004c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c40:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 825e 	beq.w	8005110 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c54:	4b96      	ldr	r3, [pc, #600]	; (8004eb0 <HAL_RCC_OscConfig+0xe38>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 030c 	and.w	r3, r3, #12
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	f000 821f 	beq.w	80050a0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	f040 8170 	bne.w	8004f54 <HAL_RCC_OscConfig+0xedc>
 8004c74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c78:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004c7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c86:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	fa93 f2a3 	rbit	r2, r3
 8004c90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c94:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004c98:	601a      	str	r2, [r3, #0]
  return result;
 8004c9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c9e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004ca2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca4:	fab3 f383 	clz	r3, r3
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cba:	f7fd fc5b 	bl	8002574 <HAL_GetTick>
 8004cbe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cc2:	e009      	b.n	8004cd8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc4:	f7fd fc56 	bl	8002574 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e21c      	b.n	8005112 <HAL_RCC_OscConfig+0x109a>
 8004cd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cdc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004ce0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	fa93 f2a3 	rbit	r2, r3
 8004cf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cf8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004cfc:	601a      	str	r2, [r3, #0]
  return result;
 8004cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d02:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004d06:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d08:	fab3 f383 	clz	r3, r3
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	f043 0301 	orr.w	r3, r3, #1
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d102      	bne.n	8004d22 <HAL_RCC_OscConfig+0xcaa>
 8004d1c:	4b64      	ldr	r3, [pc, #400]	; (8004eb0 <HAL_RCC_OscConfig+0xe38>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	e027      	b.n	8004d72 <HAL_RCC_OscConfig+0xcfa>
 8004d22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d26:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004d2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d34:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	fa93 f2a3 	rbit	r2, r3
 8004d3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d42:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d4c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004d50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d5a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	fa93 f2a3 	rbit	r2, r3
 8004d64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d68:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	4b50      	ldr	r3, [pc, #320]	; (8004eb0 <HAL_RCC_OscConfig+0xe38>)
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d76:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004d7a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004d7e:	6011      	str	r1, [r2, #0]
 8004d80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d84:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004d88:	6812      	ldr	r2, [r2, #0]
 8004d8a:	fa92 f1a2 	rbit	r1, r2
 8004d8e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d92:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004d96:	6011      	str	r1, [r2, #0]
  return result;
 8004d98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d9c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004da0:	6812      	ldr	r2, [r2, #0]
 8004da2:	fab2 f282 	clz	r2, r2
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	f042 0220 	orr.w	r2, r2, #32
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	f002 021f 	and.w	r2, r2, #31
 8004db2:	2101      	movs	r1, #1
 8004db4:	fa01 f202 	lsl.w	r2, r1, r2
 8004db8:	4013      	ands	r3, r2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d182      	bne.n	8004cc4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dbe:	4b3c      	ldr	r3, [pc, #240]	; (8004eb0 <HAL_RCC_OscConfig+0xe38>)
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	f023 020f 	bic.w	r2, r3, #15
 8004dc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	4937      	ldr	r1, [pc, #220]	; (8004eb0 <HAL_RCC_OscConfig+0xe38>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004dd8:	4b35      	ldr	r3, [pc, #212]	; (8004eb0 <HAL_RCC_OscConfig+0xe38>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004de0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004de4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6a19      	ldr	r1, [r3, #32]
 8004dec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004df0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	492d      	ldr	r1, [pc, #180]	; (8004eb0 <HAL_RCC_OscConfig+0xe38>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	604b      	str	r3, [r1, #4]
 8004e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e04:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004e08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e12:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	fa93 f2a3 	rbit	r2, r3
 8004e1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e20:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004e24:	601a      	str	r2, [r3, #0]
  return result;
 8004e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e2a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004e2e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e30:	fab3 f383 	clz	r3, r3
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	461a      	mov	r2, r3
 8004e42:	2301      	movs	r3, #1
 8004e44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e46:	f7fd fb95 	bl	8002574 <HAL_GetTick>
 8004e4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e4e:	e009      	b.n	8004e64 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e50:	f7fd fb90 	bl	8002574 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e156      	b.n	8005112 <HAL_RCC_OscConfig+0x109a>
 8004e64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e68:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004e6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e76:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	fa93 f2a3 	rbit	r2, r3
 8004e80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e84:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004e88:	601a      	str	r2, [r3, #0]
  return result;
 8004e8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e8e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004e92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e94:	fab3 f383 	clz	r3, r3
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	f043 0301 	orr.w	r3, r3, #1
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d105      	bne.n	8004eb4 <HAL_RCC_OscConfig+0xe3c>
 8004ea8:	4b01      	ldr	r3, [pc, #4]	; (8004eb0 <HAL_RCC_OscConfig+0xe38>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	e02a      	b.n	8004f04 <HAL_RCC_OscConfig+0xe8c>
 8004eae:	bf00      	nop
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eb8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004ebc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ec0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ec6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	fa93 f2a3 	rbit	r2, r3
 8004ed0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ed4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ede:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004ee2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eec:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	fa93 f2a3 	rbit	r2, r3
 8004ef6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004efa:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	4b86      	ldr	r3, [pc, #536]	; (800511c <HAL_RCC_OscConfig+0x10a4>)
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f08:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004f0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f10:	6011      	str	r1, [r2, #0]
 8004f12:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f16:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004f1a:	6812      	ldr	r2, [r2, #0]
 8004f1c:	fa92 f1a2 	rbit	r1, r2
 8004f20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f24:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004f28:	6011      	str	r1, [r2, #0]
  return result;
 8004f2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f2e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	fab2 f282 	clz	r2, r2
 8004f38:	b2d2      	uxtb	r2, r2
 8004f3a:	f042 0220 	orr.w	r2, r2, #32
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	f002 021f 	and.w	r2, r2, #31
 8004f44:	2101      	movs	r1, #1
 8004f46:	fa01 f202 	lsl.w	r2, r1, r2
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f43f af7f 	beq.w	8004e50 <HAL_RCC_OscConfig+0xdd8>
 8004f52:	e0dd      	b.n	8005110 <HAL_RCC_OscConfig+0x1098>
 8004f54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f58:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004f5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f66:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	fa93 f2a3 	rbit	r2, r3
 8004f70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f74:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004f78:	601a      	str	r2, [r3, #0]
  return result;
 8004f7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f7e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004f82:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f84:	fab3 f383 	clz	r3, r3
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	461a      	mov	r2, r3
 8004f96:	2300      	movs	r3, #0
 8004f98:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9a:	f7fd faeb 	bl	8002574 <HAL_GetTick>
 8004f9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fa2:	e009      	b.n	8004fb8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa4:	f7fd fae6 	bl	8002574 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e0ac      	b.n	8005112 <HAL_RCC_OscConfig+0x109a>
 8004fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fbc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004fc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	fa93 f2a3 	rbit	r2, r3
 8004fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fd8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004fdc:	601a      	str	r2, [r3, #0]
  return result;
 8004fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fe2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004fe6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fe8:	fab3 f383 	clz	r3, r3
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	f043 0301 	orr.w	r3, r3, #1
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d102      	bne.n	8005002 <HAL_RCC_OscConfig+0xf8a>
 8004ffc:	4b47      	ldr	r3, [pc, #284]	; (800511c <HAL_RCC_OscConfig+0x10a4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	e027      	b.n	8005052 <HAL_RCC_OscConfig+0xfda>
 8005002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005006:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800500a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800500e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005010:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005014:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	fa93 f2a3 	rbit	r2, r3
 800501e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005022:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800502c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005030:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800503a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	fa93 f2a3 	rbit	r2, r3
 8005044:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005048:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	4b33      	ldr	r3, [pc, #204]	; (800511c <HAL_RCC_OscConfig+0x10a4>)
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005056:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800505a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800505e:	6011      	str	r1, [r2, #0]
 8005060:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005064:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	fa92 f1a2 	rbit	r1, r2
 800506e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005072:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005076:	6011      	str	r1, [r2, #0]
  return result;
 8005078:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800507c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005080:	6812      	ldr	r2, [r2, #0]
 8005082:	fab2 f282 	clz	r2, r2
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	f042 0220 	orr.w	r2, r2, #32
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	f002 021f 	and.w	r2, r2, #31
 8005092:	2101      	movs	r1, #1
 8005094:	fa01 f202 	lsl.w	r2, r1, r2
 8005098:	4013      	ands	r3, r2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d182      	bne.n	8004fa4 <HAL_RCC_OscConfig+0xf2c>
 800509e:	e037      	b.n	8005110 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e02e      	b.n	8005112 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80050b4:	4b19      	ldr	r3, [pc, #100]	; (800511c <HAL_RCC_OscConfig+0x10a4>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80050bc:	4b17      	ldr	r3, [pc, #92]	; (800511c <HAL_RCC_OscConfig+0x10a4>)
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80050c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80050c8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80050cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d117      	bne.n	800510c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80050dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80050e0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80050e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d10b      	bne.n	800510c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80050f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050f8:	f003 020f 	and.w	r2, r3, #15
 80050fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005100:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005108:	429a      	cmp	r2, r3
 800510a:	d001      	beq.n	8005110 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40021000 	.word	0x40021000

08005120 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b09e      	sub	sp, #120	; 0x78
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e162      	b.n	80053fe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005138:	4b90      	ldr	r3, [pc, #576]	; (800537c <HAL_RCC_ClockConfig+0x25c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d910      	bls.n	8005168 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005146:	4b8d      	ldr	r3, [pc, #564]	; (800537c <HAL_RCC_ClockConfig+0x25c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f023 0207 	bic.w	r2, r3, #7
 800514e:	498b      	ldr	r1, [pc, #556]	; (800537c <HAL_RCC_ClockConfig+0x25c>)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	4313      	orrs	r3, r2
 8005154:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005156:	4b89      	ldr	r3, [pc, #548]	; (800537c <HAL_RCC_ClockConfig+0x25c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d001      	beq.n	8005168 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e14a      	b.n	80053fe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d008      	beq.n	8005186 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005174:	4b82      	ldr	r3, [pc, #520]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	497f      	ldr	r1, [pc, #508]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 8005182:	4313      	orrs	r3, r2
 8005184:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 80dc 	beq.w	800534c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d13c      	bne.n	8005216 <HAL_RCC_ClockConfig+0xf6>
 800519c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051a4:	fa93 f3a3 	rbit	r3, r3
 80051a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80051aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ac:	fab3 f383 	clz	r3, r3
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	f043 0301 	orr.w	r3, r3, #1
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d102      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xa6>
 80051c0:	4b6f      	ldr	r3, [pc, #444]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	e00f      	b.n	80051e6 <HAL_RCC_ClockConfig+0xc6>
 80051c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051ce:	fa93 f3a3 	rbit	r3, r3
 80051d2:	667b      	str	r3, [r7, #100]	; 0x64
 80051d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051d8:	663b      	str	r3, [r7, #96]	; 0x60
 80051da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051dc:	fa93 f3a3 	rbit	r3, r3
 80051e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051e2:	4b67      	ldr	r3, [pc, #412]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80051ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051ee:	fa92 f2a2 	rbit	r2, r2
 80051f2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80051f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051f6:	fab2 f282 	clz	r2, r2
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	f042 0220 	orr.w	r2, r2, #32
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	f002 021f 	and.w	r2, r2, #31
 8005206:	2101      	movs	r1, #1
 8005208:	fa01 f202 	lsl.w	r2, r1, r2
 800520c:	4013      	ands	r3, r2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d17b      	bne.n	800530a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e0f3      	b.n	80053fe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d13c      	bne.n	8005298 <HAL_RCC_ClockConfig+0x178>
 800521e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005222:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005226:	fa93 f3a3 	rbit	r3, r3
 800522a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800522c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800522e:	fab3 f383 	clz	r3, r3
 8005232:	b2db      	uxtb	r3, r3
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f043 0301 	orr.w	r3, r3, #1
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	d102      	bne.n	8005248 <HAL_RCC_ClockConfig+0x128>
 8005242:	4b4f      	ldr	r3, [pc, #316]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	e00f      	b.n	8005268 <HAL_RCC_ClockConfig+0x148>
 8005248:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800524c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005250:	fa93 f3a3 	rbit	r3, r3
 8005254:	647b      	str	r3, [r7, #68]	; 0x44
 8005256:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800525a:	643b      	str	r3, [r7, #64]	; 0x40
 800525c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800525e:	fa93 f3a3 	rbit	r3, r3
 8005262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005264:	4b46      	ldr	r3, [pc, #280]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800526c:	63ba      	str	r2, [r7, #56]	; 0x38
 800526e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005270:	fa92 f2a2 	rbit	r2, r2
 8005274:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005278:	fab2 f282 	clz	r2, r2
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	f042 0220 	orr.w	r2, r2, #32
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	f002 021f 	and.w	r2, r2, #31
 8005288:	2101      	movs	r1, #1
 800528a:	fa01 f202 	lsl.w	r2, r1, r2
 800528e:	4013      	ands	r3, r2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d13a      	bne.n	800530a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e0b2      	b.n	80053fe <HAL_RCC_ClockConfig+0x2de>
 8005298:	2302      	movs	r3, #2
 800529a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	fa93 f3a3 	rbit	r3, r3
 80052a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80052a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a6:	fab3 f383 	clz	r3, r3
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	095b      	lsrs	r3, r3, #5
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	f043 0301 	orr.w	r3, r3, #1
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d102      	bne.n	80052c0 <HAL_RCC_ClockConfig+0x1a0>
 80052ba:	4b31      	ldr	r3, [pc, #196]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	e00d      	b.n	80052dc <HAL_RCC_ClockConfig+0x1bc>
 80052c0:	2302      	movs	r3, #2
 80052c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	fa93 f3a3 	rbit	r3, r3
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
 80052cc:	2302      	movs	r3, #2
 80052ce:	623b      	str	r3, [r7, #32]
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	fa93 f3a3 	rbit	r3, r3
 80052d6:	61fb      	str	r3, [r7, #28]
 80052d8:	4b29      	ldr	r3, [pc, #164]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	2202      	movs	r2, #2
 80052de:	61ba      	str	r2, [r7, #24]
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	fa92 f2a2 	rbit	r2, r2
 80052e6:	617a      	str	r2, [r7, #20]
  return result;
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	fab2 f282 	clz	r2, r2
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	f042 0220 	orr.w	r2, r2, #32
 80052f4:	b2d2      	uxtb	r2, r2
 80052f6:	f002 021f 	and.w	r2, r2, #31
 80052fa:	2101      	movs	r1, #1
 80052fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005300:	4013      	ands	r3, r2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e079      	b.n	80053fe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800530a:	4b1d      	ldr	r3, [pc, #116]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f023 0203 	bic.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	491a      	ldr	r1, [pc, #104]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 8005318:	4313      	orrs	r3, r2
 800531a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800531c:	f7fd f92a 	bl	8002574 <HAL_GetTick>
 8005320:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005322:	e00a      	b.n	800533a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005324:	f7fd f926 	bl	8002574 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e061      	b.n	80053fe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533a:	4b11      	ldr	r3, [pc, #68]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f003 020c 	and.w	r2, r3, #12
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	429a      	cmp	r2, r3
 800534a:	d1eb      	bne.n	8005324 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800534c:	4b0b      	ldr	r3, [pc, #44]	; (800537c <HAL_RCC_ClockConfig+0x25c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d214      	bcs.n	8005384 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535a:	4b08      	ldr	r3, [pc, #32]	; (800537c <HAL_RCC_ClockConfig+0x25c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f023 0207 	bic.w	r2, r3, #7
 8005362:	4906      	ldr	r1, [pc, #24]	; (800537c <HAL_RCC_ClockConfig+0x25c>)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	4313      	orrs	r3, r2
 8005368:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800536a:	4b04      	ldr	r3, [pc, #16]	; (800537c <HAL_RCC_ClockConfig+0x25c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d005      	beq.n	8005384 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e040      	b.n	80053fe <HAL_RCC_ClockConfig+0x2de>
 800537c:	40022000 	.word	0x40022000
 8005380:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d008      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005390:	4b1d      	ldr	r3, [pc, #116]	; (8005408 <HAL_RCC_ClockConfig+0x2e8>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	491a      	ldr	r1, [pc, #104]	; (8005408 <HAL_RCC_ClockConfig+0x2e8>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d009      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ae:	4b16      	ldr	r3, [pc, #88]	; (8005408 <HAL_RCC_ClockConfig+0x2e8>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	4912      	ldr	r1, [pc, #72]	; (8005408 <HAL_RCC_ClockConfig+0x2e8>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80053c2:	f000 f829 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 80053c6:	4601      	mov	r1, r0
 80053c8:	4b0f      	ldr	r3, [pc, #60]	; (8005408 <HAL_RCC_ClockConfig+0x2e8>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053d0:	22f0      	movs	r2, #240	; 0xf0
 80053d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	fa92 f2a2 	rbit	r2, r2
 80053da:	60fa      	str	r2, [r7, #12]
  return result;
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	fab2 f282 	clz	r2, r2
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	40d3      	lsrs	r3, r2
 80053e6:	4a09      	ldr	r2, [pc, #36]	; (800540c <HAL_RCC_ClockConfig+0x2ec>)
 80053e8:	5cd3      	ldrb	r3, [r2, r3]
 80053ea:	fa21 f303 	lsr.w	r3, r1, r3
 80053ee:	4a08      	ldr	r2, [pc, #32]	; (8005410 <HAL_RCC_ClockConfig+0x2f0>)
 80053f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80053f2:	4b08      	ldr	r3, [pc, #32]	; (8005414 <HAL_RCC_ClockConfig+0x2f4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fd f878 	bl	80024ec <HAL_InitTick>
  
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3778      	adds	r7, #120	; 0x78
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40021000 	.word	0x40021000
 800540c:	08008ec4 	.word	0x08008ec4
 8005410:	20000078 	.word	0x20000078
 8005414:	2000007c 	.word	0x2000007c

08005418 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005418:	b480      	push	{r7}
 800541a:	b08b      	sub	sp, #44	; 0x2c
 800541c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	61fb      	str	r3, [r7, #28]
 8005422:	2300      	movs	r3, #0
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	2300      	movs	r3, #0
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
 800542a:	2300      	movs	r3, #0
 800542c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005432:	4b2a      	ldr	r3, [pc, #168]	; (80054dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f003 030c 	and.w	r3, r3, #12
 800543e:	2b04      	cmp	r3, #4
 8005440:	d002      	beq.n	8005448 <HAL_RCC_GetSysClockFreq+0x30>
 8005442:	2b08      	cmp	r3, #8
 8005444:	d003      	beq.n	800544e <HAL_RCC_GetSysClockFreq+0x36>
 8005446:	e03f      	b.n	80054c8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005448:	4b25      	ldr	r3, [pc, #148]	; (80054e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800544a:	623b      	str	r3, [r7, #32]
      break;
 800544c:	e03f      	b.n	80054ce <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005454:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005458:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	fa92 f2a2 	rbit	r2, r2
 8005460:	607a      	str	r2, [r7, #4]
  return result;
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	fab2 f282 	clz	r2, r2
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	40d3      	lsrs	r3, r2
 800546c:	4a1d      	ldr	r2, [pc, #116]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800546e:	5cd3      	ldrb	r3, [r2, r3]
 8005470:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005472:	4b1a      	ldr	r3, [pc, #104]	; (80054dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	220f      	movs	r2, #15
 800547c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	fa92 f2a2 	rbit	r2, r2
 8005484:	60fa      	str	r2, [r7, #12]
  return result;
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	fab2 f282 	clz	r2, r2
 800548c:	b2d2      	uxtb	r2, r2
 800548e:	40d3      	lsrs	r3, r2
 8005490:	4a15      	ldr	r2, [pc, #84]	; (80054e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005492:	5cd3      	ldrb	r3, [r2, r3]
 8005494:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d008      	beq.n	80054b2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80054a0:	4a0f      	ldr	r2, [pc, #60]	; (80054e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	fb02 f303 	mul.w	r3, r2, r3
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
 80054b0:	e007      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80054b2:	4a0b      	ldr	r2, [pc, #44]	; (80054e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	fb02 f303 	mul.w	r3, r2, r3
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	623b      	str	r3, [r7, #32]
      break;
 80054c6:	e002      	b.n	80054ce <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054c8:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80054ca:	623b      	str	r3, [r7, #32]
      break;
 80054cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ce:	6a3b      	ldr	r3, [r7, #32]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	372c      	adds	r7, #44	; 0x2c
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	40021000 	.word	0x40021000
 80054e0:	007a1200 	.word	0x007a1200
 80054e4:	08008edc 	.word	0x08008edc
 80054e8:	08008eec 	.word	0x08008eec

080054ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054f0:	4b03      	ldr	r3, [pc, #12]	; (8005500 <HAL_RCC_GetHCLKFreq+0x14>)
 80054f2:	681b      	ldr	r3, [r3, #0]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20000078 	.word	0x20000078

08005504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800550a:	f7ff ffef 	bl	80054ec <HAL_RCC_GetHCLKFreq>
 800550e:	4601      	mov	r1, r0
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005518:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800551c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	fa92 f2a2 	rbit	r2, r2
 8005524:	603a      	str	r2, [r7, #0]
  return result;
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	fab2 f282 	clz	r2, r2
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	40d3      	lsrs	r3, r2
 8005530:	4a04      	ldr	r2, [pc, #16]	; (8005544 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005532:	5cd3      	ldrb	r3, [r2, r3]
 8005534:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005538:	4618      	mov	r0, r3
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40021000 	.word	0x40021000
 8005544:	08008ed4 	.word	0x08008ed4

08005548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800554e:	f7ff ffcd 	bl	80054ec <HAL_RCC_GetHCLKFreq>
 8005552:	4601      	mov	r1, r0
 8005554:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800555c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005560:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	fa92 f2a2 	rbit	r2, r2
 8005568:	603a      	str	r2, [r7, #0]
  return result;
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	fab2 f282 	clz	r2, r2
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	40d3      	lsrs	r3, r2
 8005574:	4a04      	ldr	r2, [pc, #16]	; (8005588 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005576:	5cd3      	ldrb	r3, [r2, r3]
 8005578:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40021000 	.word	0x40021000
 8005588:	08008ed4 	.word	0x08008ed4

0800558c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b092      	sub	sp, #72	; 0x48
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800559c:	2300      	movs	r3, #0
 800559e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 80d4 	beq.w	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055b0:	4b4e      	ldr	r3, [pc, #312]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10e      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055bc:	4b4b      	ldr	r3, [pc, #300]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	4a4a      	ldr	r2, [pc, #296]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c6:	61d3      	str	r3, [r2, #28]
 80055c8:	4b48      	ldr	r3, [pc, #288]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d0:	60bb      	str	r3, [r7, #8]
 80055d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055d4:	2301      	movs	r3, #1
 80055d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055da:	4b45      	ldr	r3, [pc, #276]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d118      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055e6:	4b42      	ldr	r3, [pc, #264]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a41      	ldr	r2, [pc, #260]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055f2:	f7fc ffbf 	bl	8002574 <HAL_GetTick>
 80055f6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f8:	e008      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055fa:	f7fc ffbb 	bl	8002574 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b64      	cmp	r3, #100	; 0x64
 8005606:	d901      	bls.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e1d6      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800560c:	4b38      	ldr	r3, [pc, #224]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0f0      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005618:	4b34      	ldr	r3, [pc, #208]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005620:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 8084 	beq.w	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005632:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005634:	429a      	cmp	r2, r3
 8005636:	d07c      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005638:	4b2c      	ldr	r3, [pc, #176]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005642:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005646:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564a:	fa93 f3a3 	rbit	r3, r3
 800564e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005652:	fab3 f383 	clz	r3, r3
 8005656:	b2db      	uxtb	r3, r3
 8005658:	461a      	mov	r2, r3
 800565a:	4b26      	ldr	r3, [pc, #152]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	461a      	mov	r2, r3
 8005662:	2301      	movs	r3, #1
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800566a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566e:	fa93 f3a3 	rbit	r3, r3
 8005672:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005676:	fab3 f383 	clz	r3, r3
 800567a:	b2db      	uxtb	r3, r3
 800567c:	461a      	mov	r2, r3
 800567e:	4b1d      	ldr	r3, [pc, #116]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005680:	4413      	add	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	461a      	mov	r2, r3
 8005686:	2300      	movs	r3, #0
 8005688:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800568a:	4a18      	ldr	r2, [pc, #96]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800568e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d04b      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800569a:	f7fc ff6b 	bl	8002574 <HAL_GetTick>
 800569e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a0:	e00a      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a2:	f7fc ff67 	bl	8002574 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e180      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80056b8:	2302      	movs	r3, #2
 80056ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	fa93 f3a3 	rbit	r3, r3
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
 80056c4:	2302      	movs	r3, #2
 80056c6:	623b      	str	r3, [r7, #32]
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	fa93 f3a3 	rbit	r3, r3
 80056ce:	61fb      	str	r3, [r7, #28]
  return result;
 80056d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d2:	fab3 f383 	clz	r3, r3
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	095b      	lsrs	r3, r3, #5
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	f043 0302 	orr.w	r3, r3, #2
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d108      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80056e6:	4b01      	ldr	r3, [pc, #4]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	e00d      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80056ec:	40021000 	.word	0x40021000
 80056f0:	40007000 	.word	0x40007000
 80056f4:	10908100 	.word	0x10908100
 80056f8:	2302      	movs	r3, #2
 80056fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	fa93 f3a3 	rbit	r3, r3
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	4b9a      	ldr	r3, [pc, #616]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	2202      	movs	r2, #2
 800570a:	613a      	str	r2, [r7, #16]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	fa92 f2a2 	rbit	r2, r2
 8005712:	60fa      	str	r2, [r7, #12]
  return result;
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	fab2 f282 	clz	r2, r2
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	f002 021f 	and.w	r2, r2, #31
 8005726:	2101      	movs	r1, #1
 8005728:	fa01 f202 	lsl.w	r2, r1, r2
 800572c:	4013      	ands	r3, r2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0b7      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005732:	4b8f      	ldr	r3, [pc, #572]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	498c      	ldr	r1, [pc, #560]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005740:	4313      	orrs	r3, r2
 8005742:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005744:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005748:	2b01      	cmp	r3, #1
 800574a:	d105      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800574c:	4b88      	ldr	r3, [pc, #544]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	4a87      	ldr	r2, [pc, #540]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005756:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b00      	cmp	r3, #0
 8005762:	d008      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005764:	4b82      	ldr	r3, [pc, #520]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	f023 0203 	bic.w	r2, r3, #3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	497f      	ldr	r1, [pc, #508]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005772:	4313      	orrs	r3, r2
 8005774:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d008      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005782:	4b7b      	ldr	r3, [pc, #492]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005786:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	4978      	ldr	r1, [pc, #480]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005790:	4313      	orrs	r3, r2
 8005792:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d008      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057a0:	4b73      	ldr	r3, [pc, #460]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	4970      	ldr	r1, [pc, #448]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0320 	and.w	r3, r3, #32
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d008      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057be:	4b6c      	ldr	r3, [pc, #432]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	f023 0210 	bic.w	r2, r3, #16
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	4969      	ldr	r1, [pc, #420]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80057dc:	4b64      	ldr	r3, [pc, #400]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e8:	4961      	ldr	r1, [pc, #388]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d008      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057fa:	4b5d      	ldr	r3, [pc, #372]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fe:	f023 0220 	bic.w	r2, r3, #32
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	495a      	ldr	r1, [pc, #360]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005808:	4313      	orrs	r3, r2
 800580a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d008      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005818:	4b55      	ldr	r3, [pc, #340]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	4952      	ldr	r1, [pc, #328]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005826:	4313      	orrs	r3, r2
 8005828:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0308 	and.w	r3, r3, #8
 8005832:	2b00      	cmp	r3, #0
 8005834:	d008      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005836:	4b4e      	ldr	r3, [pc, #312]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	494b      	ldr	r1, [pc, #300]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005844:	4313      	orrs	r3, r2
 8005846:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0310 	and.w	r3, r3, #16
 8005850:	2b00      	cmp	r3, #0
 8005852:	d008      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005854:	4b46      	ldr	r3, [pc, #280]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005858:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	4943      	ldr	r1, [pc, #268]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005862:	4313      	orrs	r3, r2
 8005864:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800586e:	2b00      	cmp	r3, #0
 8005870:	d008      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005872:	4b3f      	ldr	r3, [pc, #252]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587e:	493c      	ldr	r1, [pc, #240]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005880:	4313      	orrs	r3, r2
 8005882:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588c:	2b00      	cmp	r3, #0
 800588e:	d008      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005890:	4b37      	ldr	r3, [pc, #220]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589c:	4934      	ldr	r1, [pc, #208]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d008      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80058ae:	4b30      	ldr	r3, [pc, #192]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	492d      	ldr	r1, [pc, #180]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d008      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80058cc:	4b28      	ldr	r3, [pc, #160]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d8:	4925      	ldr	r1, [pc, #148]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d008      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80058ea:	4b21      	ldr	r3, [pc, #132]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	491e      	ldr	r1, [pc, #120]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d008      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005908:	4b19      	ldr	r3, [pc, #100]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800590a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	4916      	ldr	r1, [pc, #88]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005916:	4313      	orrs	r3, r2
 8005918:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d008      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005926:	4b12      	ldr	r3, [pc, #72]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	490f      	ldr	r1, [pc, #60]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005934:	4313      	orrs	r3, r2
 8005936:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d008      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005944:	4b0a      	ldr	r3, [pc, #40]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005948:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005950:	4907      	ldr	r1, [pc, #28]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005952:	4313      	orrs	r3, r2
 8005954:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00c      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005962:	4b03      	ldr	r3, [pc, #12]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005966:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	e002      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800596e:	bf00      	nop
 8005970:	40021000 	.word	0x40021000
 8005974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005976:	4913      	ldr	r1, [pc, #76]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005978:	4313      	orrs	r3, r2
 800597a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d008      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005988:	4b0e      	ldr	r3, [pc, #56]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800598a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005994:	490b      	ldr	r1, [pc, #44]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005996:	4313      	orrs	r3, r2
 8005998:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d008      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80059a6:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b2:	4904      	ldr	r1, [pc, #16]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3748      	adds	r7, #72	; 0x48
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	40021000 	.word	0x40021000

080059c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e049      	b.n	8005a6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fc faae 	bl	8001f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4619      	mov	r1, r3
 8005a06:	4610      	mov	r0, r2
 8005a08:	f000 fb80 	bl	800610c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b082      	sub	sp, #8
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e049      	b.n	8005b1c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d106      	bne.n	8005aa2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f841 	bl	8005b24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	f000 fb29 	bl	800610c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d109      	bne.n	8005b5c <HAL_TIM_PWM_Start+0x24>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	bf14      	ite	ne
 8005b54:	2301      	movne	r3, #1
 8005b56:	2300      	moveq	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	e03c      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x9e>
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d109      	bne.n	8005b76 <HAL_TIM_PWM_Start+0x3e>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	bf14      	ite	ne
 8005b6e:	2301      	movne	r3, #1
 8005b70:	2300      	moveq	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	e02f      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x9e>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d109      	bne.n	8005b90 <HAL_TIM_PWM_Start+0x58>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	bf14      	ite	ne
 8005b88:	2301      	movne	r3, #1
 8005b8a:	2300      	moveq	r3, #0
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	e022      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x9e>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b0c      	cmp	r3, #12
 8005b94:	d109      	bne.n	8005baa <HAL_TIM_PWM_Start+0x72>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	bf14      	ite	ne
 8005ba2:	2301      	movne	r3, #1
 8005ba4:	2300      	moveq	r3, #0
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	e015      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x9e>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b10      	cmp	r3, #16
 8005bae:	d109      	bne.n	8005bc4 <HAL_TIM_PWM_Start+0x8c>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	bf14      	ite	ne
 8005bbc:	2301      	movne	r3, #1
 8005bbe:	2300      	moveq	r3, #0
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	e008      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x9e>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	bf14      	ite	ne
 8005bd0:	2301      	movne	r3, #1
 8005bd2:	2300      	moveq	r3, #0
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e0a1      	b.n	8005d22 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d104      	bne.n	8005bee <HAL_TIM_PWM_Start+0xb6>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bec:	e023      	b.n	8005c36 <HAL_TIM_PWM_Start+0xfe>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d104      	bne.n	8005bfe <HAL_TIM_PWM_Start+0xc6>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bfc:	e01b      	b.n	8005c36 <HAL_TIM_PWM_Start+0xfe>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d104      	bne.n	8005c0e <HAL_TIM_PWM_Start+0xd6>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c0c:	e013      	b.n	8005c36 <HAL_TIM_PWM_Start+0xfe>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b0c      	cmp	r3, #12
 8005c12:	d104      	bne.n	8005c1e <HAL_TIM_PWM_Start+0xe6>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c1c:	e00b      	b.n	8005c36 <HAL_TIM_PWM_Start+0xfe>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b10      	cmp	r3, #16
 8005c22:	d104      	bne.n	8005c2e <HAL_TIM_PWM_Start+0xf6>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c2c:	e003      	b.n	8005c36 <HAL_TIM_PWM_Start+0xfe>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2202      	movs	r2, #2
 8005c32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	6839      	ldr	r1, [r7, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fea2 	bl	8006988 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a38      	ldr	r2, [pc, #224]	; (8005d2c <HAL_TIM_PWM_Start+0x1f4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d018      	beq.n	8005c80 <HAL_TIM_PWM_Start+0x148>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a37      	ldr	r2, [pc, #220]	; (8005d30 <HAL_TIM_PWM_Start+0x1f8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d013      	beq.n	8005c80 <HAL_TIM_PWM_Start+0x148>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a35      	ldr	r2, [pc, #212]	; (8005d34 <HAL_TIM_PWM_Start+0x1fc>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00e      	beq.n	8005c80 <HAL_TIM_PWM_Start+0x148>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a34      	ldr	r2, [pc, #208]	; (8005d38 <HAL_TIM_PWM_Start+0x200>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d009      	beq.n	8005c80 <HAL_TIM_PWM_Start+0x148>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a32      	ldr	r2, [pc, #200]	; (8005d3c <HAL_TIM_PWM_Start+0x204>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d004      	beq.n	8005c80 <HAL_TIM_PWM_Start+0x148>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a31      	ldr	r2, [pc, #196]	; (8005d40 <HAL_TIM_PWM_Start+0x208>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d101      	bne.n	8005c84 <HAL_TIM_PWM_Start+0x14c>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <HAL_TIM_PWM_Start+0x14e>
 8005c84:	2300      	movs	r3, #0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d007      	beq.n	8005c9a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a23      	ldr	r2, [pc, #140]	; (8005d2c <HAL_TIM_PWM_Start+0x1f4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d01d      	beq.n	8005ce0 <HAL_TIM_PWM_Start+0x1a8>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cac:	d018      	beq.n	8005ce0 <HAL_TIM_PWM_Start+0x1a8>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a24      	ldr	r2, [pc, #144]	; (8005d44 <HAL_TIM_PWM_Start+0x20c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d013      	beq.n	8005ce0 <HAL_TIM_PWM_Start+0x1a8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a22      	ldr	r2, [pc, #136]	; (8005d48 <HAL_TIM_PWM_Start+0x210>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00e      	beq.n	8005ce0 <HAL_TIM_PWM_Start+0x1a8>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a1a      	ldr	r2, [pc, #104]	; (8005d30 <HAL_TIM_PWM_Start+0x1f8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d009      	beq.n	8005ce0 <HAL_TIM_PWM_Start+0x1a8>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a18      	ldr	r2, [pc, #96]	; (8005d34 <HAL_TIM_PWM_Start+0x1fc>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d004      	beq.n	8005ce0 <HAL_TIM_PWM_Start+0x1a8>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a19      	ldr	r2, [pc, #100]	; (8005d40 <HAL_TIM_PWM_Start+0x208>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d115      	bne.n	8005d0c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	4b19      	ldr	r3, [pc, #100]	; (8005d4c <HAL_TIM_PWM_Start+0x214>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b06      	cmp	r3, #6
 8005cf0:	d015      	beq.n	8005d1e <HAL_TIM_PWM_Start+0x1e6>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf8:	d011      	beq.n	8005d1e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 0201 	orr.w	r2, r2, #1
 8005d08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0a:	e008      	b.n	8005d1e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	e000      	b.n	8005d20 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	40012c00 	.word	0x40012c00
 8005d30:	40013400 	.word	0x40013400
 8005d34:	40014000 	.word	0x40014000
 8005d38:	40014400 	.word	0x40014400
 8005d3c:	40014800 	.word	0x40014800
 8005d40:	40015000 	.word	0x40015000
 8005d44:	40000400 	.word	0x40000400
 8005d48:	40000800 	.word	0x40000800
 8005d4c:	00010007 	.word	0x00010007

08005d50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	e0ff      	b.n	8005f6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b14      	cmp	r3, #20
 8005d7a:	f200 80f0 	bhi.w	8005f5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d7e:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005dd9 	.word	0x08005dd9
 8005d88:	08005f5f 	.word	0x08005f5f
 8005d8c:	08005f5f 	.word	0x08005f5f
 8005d90:	08005f5f 	.word	0x08005f5f
 8005d94:	08005e19 	.word	0x08005e19
 8005d98:	08005f5f 	.word	0x08005f5f
 8005d9c:	08005f5f 	.word	0x08005f5f
 8005da0:	08005f5f 	.word	0x08005f5f
 8005da4:	08005e5b 	.word	0x08005e5b
 8005da8:	08005f5f 	.word	0x08005f5f
 8005dac:	08005f5f 	.word	0x08005f5f
 8005db0:	08005f5f 	.word	0x08005f5f
 8005db4:	08005e9b 	.word	0x08005e9b
 8005db8:	08005f5f 	.word	0x08005f5f
 8005dbc:	08005f5f 	.word	0x08005f5f
 8005dc0:	08005f5f 	.word	0x08005f5f
 8005dc4:	08005edd 	.word	0x08005edd
 8005dc8:	08005f5f 	.word	0x08005f5f
 8005dcc:	08005f5f 	.word	0x08005f5f
 8005dd0:	08005f5f 	.word	0x08005f5f
 8005dd4:	08005f1d 	.word	0x08005f1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fa32 	bl	8006248 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0208 	orr.w	r2, r2, #8
 8005df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0204 	bic.w	r2, r2, #4
 8005e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6999      	ldr	r1, [r3, #24]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	691a      	ldr	r2, [r3, #16]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	619a      	str	r2, [r3, #24]
      break;
 8005e16:	e0a5      	b.n	8005f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 faac 	bl	800637c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6999      	ldr	r1, [r3, #24]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	021a      	lsls	r2, r3, #8
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	619a      	str	r2, [r3, #24]
      break;
 8005e58:	e084      	b.n	8005f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 fb1f 	bl	80064a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69da      	ldr	r2, [r3, #28]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0208 	orr.w	r2, r2, #8
 8005e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69da      	ldr	r2, [r3, #28]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0204 	bic.w	r2, r2, #4
 8005e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69d9      	ldr	r1, [r3, #28]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	61da      	str	r2, [r3, #28]
      break;
 8005e98:	e064      	b.n	8005f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68b9      	ldr	r1, [r7, #8]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 fb91 	bl	80065c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69da      	ldr	r2, [r3, #28]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69da      	ldr	r2, [r3, #28]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69d9      	ldr	r1, [r3, #28]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	021a      	lsls	r2, r3, #8
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	61da      	str	r2, [r3, #28]
      break;
 8005eda:	e043      	b.n	8005f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fbe0 	bl	80066a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0208 	orr.w	r2, r2, #8
 8005ef6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0204 	bic.w	r2, r2, #4
 8005f06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	691a      	ldr	r2, [r3, #16]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f1a:	e023      	b.n	8005f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68b9      	ldr	r1, [r7, #8]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fc2a 	bl	800677c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	021a      	lsls	r2, r3, #8
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f5c:	e002      	b.n	8005f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	75fb      	strb	r3, [r7, #23]
      break;
 8005f62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop

08005f78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d101      	bne.n	8005f94 <HAL_TIM_ConfigClockSource+0x1c>
 8005f90:	2302      	movs	r3, #2
 8005f92:	e0b6      	b.n	8006102 <HAL_TIM_ConfigClockSource+0x18a>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd0:	d03e      	beq.n	8006050 <HAL_TIM_ConfigClockSource+0xd8>
 8005fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd6:	f200 8087 	bhi.w	80060e8 <HAL_TIM_ConfigClockSource+0x170>
 8005fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fde:	f000 8086 	beq.w	80060ee <HAL_TIM_ConfigClockSource+0x176>
 8005fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe6:	d87f      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x170>
 8005fe8:	2b70      	cmp	r3, #112	; 0x70
 8005fea:	d01a      	beq.n	8006022 <HAL_TIM_ConfigClockSource+0xaa>
 8005fec:	2b70      	cmp	r3, #112	; 0x70
 8005fee:	d87b      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x170>
 8005ff0:	2b60      	cmp	r3, #96	; 0x60
 8005ff2:	d050      	beq.n	8006096 <HAL_TIM_ConfigClockSource+0x11e>
 8005ff4:	2b60      	cmp	r3, #96	; 0x60
 8005ff6:	d877      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x170>
 8005ff8:	2b50      	cmp	r3, #80	; 0x50
 8005ffa:	d03c      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0xfe>
 8005ffc:	2b50      	cmp	r3, #80	; 0x50
 8005ffe:	d873      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x170>
 8006000:	2b40      	cmp	r3, #64	; 0x40
 8006002:	d058      	beq.n	80060b6 <HAL_TIM_ConfigClockSource+0x13e>
 8006004:	2b40      	cmp	r3, #64	; 0x40
 8006006:	d86f      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x170>
 8006008:	2b30      	cmp	r3, #48	; 0x30
 800600a:	d064      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x15e>
 800600c:	2b30      	cmp	r3, #48	; 0x30
 800600e:	d86b      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x170>
 8006010:	2b20      	cmp	r3, #32
 8006012:	d060      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x15e>
 8006014:	2b20      	cmp	r3, #32
 8006016:	d867      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x170>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d05c      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x15e>
 800601c:	2b10      	cmp	r3, #16
 800601e:	d05a      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x15e>
 8006020:	e062      	b.n	80060e8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	6899      	ldr	r1, [r3, #8]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f000 fc89 	bl	8006948 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006044:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	609a      	str	r2, [r3, #8]
      break;
 800604e:	e04f      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	6899      	ldr	r1, [r3, #8]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f000 fc72 	bl	8006948 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006072:	609a      	str	r2, [r3, #8]
      break;
 8006074:	e03c      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6818      	ldr	r0, [r3, #0]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6859      	ldr	r1, [r3, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	461a      	mov	r2, r3
 8006084:	f000 fbe6 	bl	8006854 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2150      	movs	r1, #80	; 0x50
 800608e:	4618      	mov	r0, r3
 8006090:	f000 fc3f 	bl	8006912 <TIM_ITRx_SetConfig>
      break;
 8006094:	e02c      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	6859      	ldr	r1, [r3, #4]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	461a      	mov	r2, r3
 80060a4:	f000 fc05 	bl	80068b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2160      	movs	r1, #96	; 0x60
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fc2f 	bl	8006912 <TIM_ITRx_SetConfig>
      break;
 80060b4:	e01c      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6818      	ldr	r0, [r3, #0]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	6859      	ldr	r1, [r3, #4]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	461a      	mov	r2, r3
 80060c4:	f000 fbc6 	bl	8006854 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2140      	movs	r1, #64	; 0x40
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 fc1f 	bl	8006912 <TIM_ITRx_SetConfig>
      break;
 80060d4:	e00c      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4619      	mov	r1, r3
 80060e0:	4610      	mov	r0, r2
 80060e2:	f000 fc16 	bl	8006912 <TIM_ITRx_SetConfig>
      break;
 80060e6:	e003      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	73fb      	strb	r3, [r7, #15]
      break;
 80060ec:	e000      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80060ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006100:	7bfb      	ldrb	r3, [r7, #15]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a42      	ldr	r2, [pc, #264]	; (8006228 <TIM_Base_SetConfig+0x11c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d013      	beq.n	800614c <TIM_Base_SetConfig+0x40>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612a:	d00f      	beq.n	800614c <TIM_Base_SetConfig+0x40>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a3f      	ldr	r2, [pc, #252]	; (800622c <TIM_Base_SetConfig+0x120>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00b      	beq.n	800614c <TIM_Base_SetConfig+0x40>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a3e      	ldr	r2, [pc, #248]	; (8006230 <TIM_Base_SetConfig+0x124>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d007      	beq.n	800614c <TIM_Base_SetConfig+0x40>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a3d      	ldr	r2, [pc, #244]	; (8006234 <TIM_Base_SetConfig+0x128>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d003      	beq.n	800614c <TIM_Base_SetConfig+0x40>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a3c      	ldr	r2, [pc, #240]	; (8006238 <TIM_Base_SetConfig+0x12c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d108      	bne.n	800615e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a31      	ldr	r2, [pc, #196]	; (8006228 <TIM_Base_SetConfig+0x11c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d01f      	beq.n	80061a6 <TIM_Base_SetConfig+0x9a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616c:	d01b      	beq.n	80061a6 <TIM_Base_SetConfig+0x9a>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a2e      	ldr	r2, [pc, #184]	; (800622c <TIM_Base_SetConfig+0x120>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d017      	beq.n	80061a6 <TIM_Base_SetConfig+0x9a>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a2d      	ldr	r2, [pc, #180]	; (8006230 <TIM_Base_SetConfig+0x124>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d013      	beq.n	80061a6 <TIM_Base_SetConfig+0x9a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a2c      	ldr	r2, [pc, #176]	; (8006234 <TIM_Base_SetConfig+0x128>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d00f      	beq.n	80061a6 <TIM_Base_SetConfig+0x9a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a2c      	ldr	r2, [pc, #176]	; (800623c <TIM_Base_SetConfig+0x130>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00b      	beq.n	80061a6 <TIM_Base_SetConfig+0x9a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a2b      	ldr	r2, [pc, #172]	; (8006240 <TIM_Base_SetConfig+0x134>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d007      	beq.n	80061a6 <TIM_Base_SetConfig+0x9a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a2a      	ldr	r2, [pc, #168]	; (8006244 <TIM_Base_SetConfig+0x138>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d003      	beq.n	80061a6 <TIM_Base_SetConfig+0x9a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a25      	ldr	r2, [pc, #148]	; (8006238 <TIM_Base_SetConfig+0x12c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d108      	bne.n	80061b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a12      	ldr	r2, [pc, #72]	; (8006228 <TIM_Base_SetConfig+0x11c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d013      	beq.n	800620c <TIM_Base_SetConfig+0x100>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a13      	ldr	r2, [pc, #76]	; (8006234 <TIM_Base_SetConfig+0x128>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d00f      	beq.n	800620c <TIM_Base_SetConfig+0x100>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a13      	ldr	r2, [pc, #76]	; (800623c <TIM_Base_SetConfig+0x130>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d00b      	beq.n	800620c <TIM_Base_SetConfig+0x100>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a12      	ldr	r2, [pc, #72]	; (8006240 <TIM_Base_SetConfig+0x134>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d007      	beq.n	800620c <TIM_Base_SetConfig+0x100>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a11      	ldr	r2, [pc, #68]	; (8006244 <TIM_Base_SetConfig+0x138>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d003      	beq.n	800620c <TIM_Base_SetConfig+0x100>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a0c      	ldr	r2, [pc, #48]	; (8006238 <TIM_Base_SetConfig+0x12c>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d103      	bne.n	8006214 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	691a      	ldr	r2, [r3, #16]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	615a      	str	r2, [r3, #20]
}
 800621a:	bf00      	nop
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	40012c00 	.word	0x40012c00
 800622c:	40000400 	.word	0x40000400
 8006230:	40000800 	.word	0x40000800
 8006234:	40013400 	.word	0x40013400
 8006238:	40015000 	.word	0x40015000
 800623c:	40014000 	.word	0x40014000
 8006240:	40014400 	.word	0x40014400
 8006244:	40014800 	.word	0x40014800

08006248 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	f023 0201 	bic.w	r2, r3, #1
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 0303 	bic.w	r3, r3, #3
 8006282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f023 0302 	bic.w	r3, r3, #2
 8006294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	4313      	orrs	r3, r2
 800629e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a30      	ldr	r2, [pc, #192]	; (8006364 <TIM_OC1_SetConfig+0x11c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d013      	beq.n	80062d0 <TIM_OC1_SetConfig+0x88>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a2f      	ldr	r2, [pc, #188]	; (8006368 <TIM_OC1_SetConfig+0x120>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00f      	beq.n	80062d0 <TIM_OC1_SetConfig+0x88>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a2e      	ldr	r2, [pc, #184]	; (800636c <TIM_OC1_SetConfig+0x124>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00b      	beq.n	80062d0 <TIM_OC1_SetConfig+0x88>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a2d      	ldr	r2, [pc, #180]	; (8006370 <TIM_OC1_SetConfig+0x128>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d007      	beq.n	80062d0 <TIM_OC1_SetConfig+0x88>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a2c      	ldr	r2, [pc, #176]	; (8006374 <TIM_OC1_SetConfig+0x12c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d003      	beq.n	80062d0 <TIM_OC1_SetConfig+0x88>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a2b      	ldr	r2, [pc, #172]	; (8006378 <TIM_OC1_SetConfig+0x130>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d10c      	bne.n	80062ea <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f023 0308 	bic.w	r3, r3, #8
 80062d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f023 0304 	bic.w	r3, r3, #4
 80062e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a1d      	ldr	r2, [pc, #116]	; (8006364 <TIM_OC1_SetConfig+0x11c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d013      	beq.n	800631a <TIM_OC1_SetConfig+0xd2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a1c      	ldr	r2, [pc, #112]	; (8006368 <TIM_OC1_SetConfig+0x120>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d00f      	beq.n	800631a <TIM_OC1_SetConfig+0xd2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a1b      	ldr	r2, [pc, #108]	; (800636c <TIM_OC1_SetConfig+0x124>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00b      	beq.n	800631a <TIM_OC1_SetConfig+0xd2>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a1a      	ldr	r2, [pc, #104]	; (8006370 <TIM_OC1_SetConfig+0x128>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d007      	beq.n	800631a <TIM_OC1_SetConfig+0xd2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a19      	ldr	r2, [pc, #100]	; (8006374 <TIM_OC1_SetConfig+0x12c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d003      	beq.n	800631a <TIM_OC1_SetConfig+0xd2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a18      	ldr	r2, [pc, #96]	; (8006378 <TIM_OC1_SetConfig+0x130>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d111      	bne.n	800633e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4313      	orrs	r3, r2
 8006332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4313      	orrs	r3, r2
 800633c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	621a      	str	r2, [r3, #32]
}
 8006358:	bf00      	nop
 800635a:	371c      	adds	r7, #28
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	40012c00 	.word	0x40012c00
 8006368:	40013400 	.word	0x40013400
 800636c:	40014000 	.word	0x40014000
 8006370:	40014400 	.word	0x40014400
 8006374:	40014800 	.word	0x40014800
 8006378:	40015000 	.word	0x40015000

0800637c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	f023 0210 	bic.w	r2, r3, #16
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f023 0320 	bic.w	r3, r3, #32
 80063ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	011b      	lsls	r3, r3, #4
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a2c      	ldr	r2, [pc, #176]	; (800648c <TIM_OC2_SetConfig+0x110>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d007      	beq.n	80063f0 <TIM_OC2_SetConfig+0x74>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a2b      	ldr	r2, [pc, #172]	; (8006490 <TIM_OC2_SetConfig+0x114>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d003      	beq.n	80063f0 <TIM_OC2_SetConfig+0x74>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a2a      	ldr	r2, [pc, #168]	; (8006494 <TIM_OC2_SetConfig+0x118>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d10d      	bne.n	800640c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800640a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a1f      	ldr	r2, [pc, #124]	; (800648c <TIM_OC2_SetConfig+0x110>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d013      	beq.n	800643c <TIM_OC2_SetConfig+0xc0>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a1e      	ldr	r2, [pc, #120]	; (8006490 <TIM_OC2_SetConfig+0x114>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d00f      	beq.n	800643c <TIM_OC2_SetConfig+0xc0>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a1e      	ldr	r2, [pc, #120]	; (8006498 <TIM_OC2_SetConfig+0x11c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d00b      	beq.n	800643c <TIM_OC2_SetConfig+0xc0>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a1d      	ldr	r2, [pc, #116]	; (800649c <TIM_OC2_SetConfig+0x120>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d007      	beq.n	800643c <TIM_OC2_SetConfig+0xc0>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a1c      	ldr	r2, [pc, #112]	; (80064a0 <TIM_OC2_SetConfig+0x124>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d003      	beq.n	800643c <TIM_OC2_SetConfig+0xc0>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a17      	ldr	r2, [pc, #92]	; (8006494 <TIM_OC2_SetConfig+0x118>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d113      	bne.n	8006464 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006442:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800644a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	4313      	orrs	r3, r2
 8006456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	621a      	str	r2, [r3, #32]
}
 800647e:	bf00      	nop
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40012c00 	.word	0x40012c00
 8006490:	40013400 	.word	0x40013400
 8006494:	40015000 	.word	0x40015000
 8006498:	40014000 	.word	0x40014000
 800649c:	40014400 	.word	0x40014400
 80064a0:	40014800 	.word	0x40014800

080064a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0303 	bic.w	r3, r3, #3
 80064de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a2b      	ldr	r2, [pc, #172]	; (80065b0 <TIM_OC3_SetConfig+0x10c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d007      	beq.n	8006516 <TIM_OC3_SetConfig+0x72>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a2a      	ldr	r2, [pc, #168]	; (80065b4 <TIM_OC3_SetConfig+0x110>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d003      	beq.n	8006516 <TIM_OC3_SetConfig+0x72>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a29      	ldr	r2, [pc, #164]	; (80065b8 <TIM_OC3_SetConfig+0x114>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d10d      	bne.n	8006532 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800651c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	021b      	lsls	r3, r3, #8
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4313      	orrs	r3, r2
 8006528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006530:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a1e      	ldr	r2, [pc, #120]	; (80065b0 <TIM_OC3_SetConfig+0x10c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d013      	beq.n	8006562 <TIM_OC3_SetConfig+0xbe>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a1d      	ldr	r2, [pc, #116]	; (80065b4 <TIM_OC3_SetConfig+0x110>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00f      	beq.n	8006562 <TIM_OC3_SetConfig+0xbe>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a1d      	ldr	r2, [pc, #116]	; (80065bc <TIM_OC3_SetConfig+0x118>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d00b      	beq.n	8006562 <TIM_OC3_SetConfig+0xbe>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a1c      	ldr	r2, [pc, #112]	; (80065c0 <TIM_OC3_SetConfig+0x11c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d007      	beq.n	8006562 <TIM_OC3_SetConfig+0xbe>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a1b      	ldr	r2, [pc, #108]	; (80065c4 <TIM_OC3_SetConfig+0x120>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d003      	beq.n	8006562 <TIM_OC3_SetConfig+0xbe>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a16      	ldr	r2, [pc, #88]	; (80065b8 <TIM_OC3_SetConfig+0x114>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d113      	bne.n	800658a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	011b      	lsls	r3, r3, #4
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	4313      	orrs	r3, r2
 800657c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	011b      	lsls	r3, r3, #4
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	621a      	str	r2, [r3, #32]
}
 80065a4:	bf00      	nop
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	40012c00 	.word	0x40012c00
 80065b4:	40013400 	.word	0x40013400
 80065b8:	40015000 	.word	0x40015000
 80065bc:	40014000 	.word	0x40014000
 80065c0:	40014400 	.word	0x40014400
 80065c4:	40014800 	.word	0x40014800

080065c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	021b      	lsls	r3, r3, #8
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	4313      	orrs	r3, r2
 800660e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006616:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	031b      	lsls	r3, r3, #12
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	4313      	orrs	r3, r2
 8006622:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a1a      	ldr	r2, [pc, #104]	; (8006690 <TIM_OC4_SetConfig+0xc8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d013      	beq.n	8006654 <TIM_OC4_SetConfig+0x8c>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a19      	ldr	r2, [pc, #100]	; (8006694 <TIM_OC4_SetConfig+0xcc>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00f      	beq.n	8006654 <TIM_OC4_SetConfig+0x8c>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a18      	ldr	r2, [pc, #96]	; (8006698 <TIM_OC4_SetConfig+0xd0>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00b      	beq.n	8006654 <TIM_OC4_SetConfig+0x8c>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a17      	ldr	r2, [pc, #92]	; (800669c <TIM_OC4_SetConfig+0xd4>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d007      	beq.n	8006654 <TIM_OC4_SetConfig+0x8c>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a16      	ldr	r2, [pc, #88]	; (80066a0 <TIM_OC4_SetConfig+0xd8>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d003      	beq.n	8006654 <TIM_OC4_SetConfig+0x8c>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a15      	ldr	r2, [pc, #84]	; (80066a4 <TIM_OC4_SetConfig+0xdc>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d109      	bne.n	8006668 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800665a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	019b      	lsls	r3, r3, #6
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	4313      	orrs	r3, r2
 8006666:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	621a      	str	r2, [r3, #32]
}
 8006682:	bf00      	nop
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	40012c00 	.word	0x40012c00
 8006694:	40013400 	.word	0x40013400
 8006698:	40014000 	.word	0x40014000
 800669c:	40014400 	.word	0x40014400
 80066a0:	40014800 	.word	0x40014800
 80066a4:	40015000 	.word	0x40015000

080066a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80066ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	041b      	lsls	r3, r3, #16
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a19      	ldr	r2, [pc, #100]	; (8006764 <TIM_OC5_SetConfig+0xbc>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d013      	beq.n	800672a <TIM_OC5_SetConfig+0x82>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a18      	ldr	r2, [pc, #96]	; (8006768 <TIM_OC5_SetConfig+0xc0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00f      	beq.n	800672a <TIM_OC5_SetConfig+0x82>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a17      	ldr	r2, [pc, #92]	; (800676c <TIM_OC5_SetConfig+0xc4>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00b      	beq.n	800672a <TIM_OC5_SetConfig+0x82>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a16      	ldr	r2, [pc, #88]	; (8006770 <TIM_OC5_SetConfig+0xc8>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d007      	beq.n	800672a <TIM_OC5_SetConfig+0x82>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a15      	ldr	r2, [pc, #84]	; (8006774 <TIM_OC5_SetConfig+0xcc>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d003      	beq.n	800672a <TIM_OC5_SetConfig+0x82>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a14      	ldr	r2, [pc, #80]	; (8006778 <TIM_OC5_SetConfig+0xd0>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d109      	bne.n	800673e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006730:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	021b      	lsls	r3, r3, #8
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	4313      	orrs	r3, r2
 800673c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	621a      	str	r2, [r3, #32]
}
 8006758:	bf00      	nop
 800675a:	371c      	adds	r7, #28
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	40012c00 	.word	0x40012c00
 8006768:	40013400 	.word	0x40013400
 800676c:	40014000 	.word	0x40014000
 8006770:	40014400 	.word	0x40014400
 8006774:	40014800 	.word	0x40014800
 8006778:	40015000 	.word	0x40015000

0800677c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	021b      	lsls	r3, r3, #8
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	051b      	lsls	r3, r3, #20
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a1a      	ldr	r2, [pc, #104]	; (800683c <TIM_OC6_SetConfig+0xc0>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d013      	beq.n	8006800 <TIM_OC6_SetConfig+0x84>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a19      	ldr	r2, [pc, #100]	; (8006840 <TIM_OC6_SetConfig+0xc4>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00f      	beq.n	8006800 <TIM_OC6_SetConfig+0x84>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a18      	ldr	r2, [pc, #96]	; (8006844 <TIM_OC6_SetConfig+0xc8>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00b      	beq.n	8006800 <TIM_OC6_SetConfig+0x84>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a17      	ldr	r2, [pc, #92]	; (8006848 <TIM_OC6_SetConfig+0xcc>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d007      	beq.n	8006800 <TIM_OC6_SetConfig+0x84>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a16      	ldr	r2, [pc, #88]	; (800684c <TIM_OC6_SetConfig+0xd0>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_OC6_SetConfig+0x84>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a15      	ldr	r2, [pc, #84]	; (8006850 <TIM_OC6_SetConfig+0xd4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d109      	bne.n	8006814 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006806:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	029b      	lsls	r3, r3, #10
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4313      	orrs	r3, r2
 8006812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	621a      	str	r2, [r3, #32]
}
 800682e:	bf00      	nop
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	40012c00 	.word	0x40012c00
 8006840:	40013400 	.word	0x40013400
 8006844:	40014000 	.word	0x40014000
 8006848:	40014400 	.word	0x40014400
 800684c:	40014800 	.word	0x40014800
 8006850:	40015000 	.word	0x40015000

08006854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	f023 0201 	bic.w	r2, r3, #1
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800687e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	4313      	orrs	r3, r2
 8006888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f023 030a 	bic.w	r3, r3, #10
 8006890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	4313      	orrs	r3, r2
 8006898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	621a      	str	r2, [r3, #32]
}
 80068a6:	bf00      	nop
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b087      	sub	sp, #28
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	f023 0210 	bic.w	r2, r3, #16
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	031b      	lsls	r3, r3, #12
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	621a      	str	r2, [r3, #32]
}
 8006906:	bf00      	nop
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006912:	b480      	push	{r7}
 8006914:	b085      	sub	sp, #20
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006928:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4313      	orrs	r3, r2
 8006930:	f043 0307 	orr.w	r3, r3, #7
 8006934:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	609a      	str	r2, [r3, #8]
}
 800693c:	bf00      	nop
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006962:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	021a      	lsls	r2, r3, #8
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	431a      	orrs	r2, r3
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4313      	orrs	r3, r2
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	4313      	orrs	r3, r2
 8006974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	609a      	str	r2, [r3, #8]
}
 800697c:	bf00      	nop
 800697e:	371c      	adds	r7, #28
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f003 031f 	and.w	r3, r3, #31
 800699a:	2201      	movs	r2, #1
 800699c:	fa02 f303 	lsl.w	r3, r2, r3
 80069a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6a1a      	ldr	r2, [r3, #32]
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	43db      	mvns	r3, r3
 80069aa:	401a      	ands	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6a1a      	ldr	r2, [r3, #32]
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f003 031f 	and.w	r3, r3, #31
 80069ba:	6879      	ldr	r1, [r7, #4]
 80069bc:	fa01 f303 	lsl.w	r3, r1, r3
 80069c0:	431a      	orrs	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	621a      	str	r2, [r3, #32]
}
 80069c6:	bf00      	nop
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
	...

080069d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d101      	bne.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069e8:	2302      	movs	r3, #2
 80069ea:	e06d      	b.n	8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a30      	ldr	r2, [pc, #192]	; (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d009      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a2f      	ldr	r2, [pc, #188]	; (8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d004      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a2d      	ldr	r2, [pc, #180]	; (8006adc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d108      	bne.n	8006a3c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1e      	ldr	r2, [pc, #120]	; (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d01d      	beq.n	8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a68:	d018      	beq.n	8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a1c      	ldr	r2, [pc, #112]	; (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d013      	beq.n	8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a1a      	ldr	r2, [pc, #104]	; (8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d00e      	beq.n	8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a15      	ldr	r2, [pc, #84]	; (8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d009      	beq.n	8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a16      	ldr	r2, [pc, #88]	; (8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d004      	beq.n	8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a11      	ldr	r2, [pc, #68]	; (8006adc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d10c      	bne.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aa2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	40012c00 	.word	0x40012c00
 8006ad8:	40013400 	.word	0x40013400
 8006adc:	40015000 	.word	0x40015000
 8006ae0:	40000400 	.word	0x40000400
 8006ae4:	40000800 	.word	0x40000800
 8006ae8:	40014000 	.word	0x40014000

08006aec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e040      	b.n	8006b80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d106      	bne.n	8006b14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7fb fb02 	bl	8002118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2224      	movs	r2, #36	; 0x24
 8006b18:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0201 	bic.w	r2, r2, #1
 8006b28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fc5e 	bl	80073ec <UART_SetConfig>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d101      	bne.n	8006b3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e022      	b.n	8006b80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fe26 	bl	8007794 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0201 	orr.w	r2, r2, #1
 8006b76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fead 	bl	80078d8 <UART_CheckIdleState>
 8006b7e:	4603      	mov	r3, r0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08a      	sub	sp, #40	; 0x28
 8006b8c:	af02      	add	r7, sp, #8
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	603b      	str	r3, [r7, #0]
 8006b94:	4613      	mov	r3, r2
 8006b96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b9c:	2b20      	cmp	r3, #32
 8006b9e:	d178      	bne.n	8006c92 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <HAL_UART_Transmit+0x24>
 8006ba6:	88fb      	ldrh	r3, [r7, #6]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e071      	b.n	8006c94 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2221      	movs	r2, #33	; 0x21
 8006bbc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bbe:	f7fb fcd9 	bl	8002574 <HAL_GetTick>
 8006bc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	88fa      	ldrh	r2, [r7, #6]
 8006bc8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	88fa      	ldrh	r2, [r7, #6]
 8006bd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bdc:	d108      	bne.n	8006bf0 <HAL_UART_Transmit+0x68>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d104      	bne.n	8006bf0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006be6:	2300      	movs	r3, #0
 8006be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	61bb      	str	r3, [r7, #24]
 8006bee:	e003      	b.n	8006bf8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006bf8:	e030      	b.n	8006c5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2200      	movs	r2, #0
 8006c02:	2180      	movs	r1, #128	; 0x80
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 ff0f 	bl	8007a28 <UART_WaitOnFlagUntilTimeout>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d004      	beq.n	8006c1a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2220      	movs	r2, #32
 8006c14:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e03c      	b.n	8006c94 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10b      	bne.n	8006c38 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	881a      	ldrh	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c2c:	b292      	uxth	r2, r2
 8006c2e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	3302      	adds	r3, #2
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	e008      	b.n	8006c4a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	781a      	ldrb	r2, [r3, #0]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	b292      	uxth	r2, r2
 8006c42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	3301      	adds	r3, #1
 8006c48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	3b01      	subs	r3, #1
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1c8      	bne.n	8006bfa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2140      	movs	r1, #64	; 0x40
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 fed8 	bl	8007a28 <UART_WaitOnFlagUntilTimeout>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d004      	beq.n	8006c88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2220      	movs	r2, #32
 8006c82:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e005      	b.n	8006c94 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	e000      	b.n	8006c94 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006c92:	2302      	movs	r3, #2
  }
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3720      	adds	r7, #32
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b08b      	sub	sp, #44	; 0x2c
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	d147      	bne.n	8006d42 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <HAL_UART_Transmit_IT+0x22>
 8006cb8:	88fb      	ldrh	r3, [r7, #6]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e040      	b.n	8006d44 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	88fa      	ldrh	r2, [r7, #6]
 8006ccc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	88fa      	ldrh	r2, [r7, #6]
 8006cd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2221      	movs	r2, #33	; 0x21
 8006cea:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf4:	d107      	bne.n	8006d06 <HAL_UART_Transmit_IT+0x6a>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d103      	bne.n	8006d06 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4a13      	ldr	r2, [pc, #76]	; (8006d50 <HAL_UART_Transmit_IT+0xb4>)
 8006d02:	66da      	str	r2, [r3, #108]	; 0x6c
 8006d04:	e002      	b.n	8006d0c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4a12      	ldr	r2, [pc, #72]	; (8006d54 <HAL_UART_Transmit_IT+0xb8>)
 8006d0a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	613b      	str	r3, [r7, #16]
   return(result);
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	461a      	mov	r2, r3
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	623b      	str	r3, [r7, #32]
 8006d2c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	69f9      	ldr	r1, [r7, #28]
 8006d30:	6a3a      	ldr	r2, [r7, #32]
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e6      	bne.n	8006d0c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	e000      	b.n	8006d44 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006d42:	2302      	movs	r3, #2
  }
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	372c      	adds	r7, #44	; 0x2c
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	08007e31 	.word	0x08007e31
 8006d54:	08007d79 	.word	0x08007d79

08006d58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b08a      	sub	sp, #40	; 0x28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	4613      	mov	r3, r2
 8006d64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d132      	bne.n	8006dd6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <HAL_UART_Receive_IT+0x24>
 8006d76:	88fb      	ldrh	r3, [r7, #6]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e02b      	b.n	8006dd8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d018      	beq.n	8006dc6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	e853 3f00 	ldrex	r3, [r3]
 8006da0:	613b      	str	r3, [r7, #16]
   return(result);
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006da8:	627b      	str	r3, [r7, #36]	; 0x24
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	461a      	mov	r2, r3
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	623b      	str	r3, [r7, #32]
 8006db4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	69f9      	ldr	r1, [r7, #28]
 8006db8:	6a3a      	ldr	r2, [r7, #32]
 8006dba:	e841 2300 	strex	r3, r2, [r1]
 8006dbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1e6      	bne.n	8006d94 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006dc6:	88fb      	ldrh	r3, [r7, #6]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	68b9      	ldr	r1, [r7, #8]
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 fe93 	bl	8007af8 <UART_Start_Receive_IT>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	e000      	b.n	8006dd8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006dd6:	2302      	movs	r3, #2
  }
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3728      	adds	r7, #40	; 0x28
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b0ba      	sub	sp, #232	; 0xe8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006e0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e0e:	4013      	ands	r3, r2
 8006e10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006e14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d115      	bne.n	8006e48 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e20:	f003 0320 	and.w	r3, r3, #32
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00f      	beq.n	8006e48 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e2c:	f003 0320 	and.w	r3, r3, #32
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d009      	beq.n	8006e48 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 82ab 	beq.w	8007394 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	4798      	blx	r3
      }
      return;
 8006e46:	e2a5      	b.n	8007394 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 8117 	beq.w	8007080 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d106      	bne.n	8006e6c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006e5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006e62:	4b85      	ldr	r3, [pc, #532]	; (8007078 <HAL_UART_IRQHandler+0x298>)
 8006e64:	4013      	ands	r3, r2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 810a 	beq.w	8007080 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d011      	beq.n	8006e9c <HAL_UART_IRQHandler+0xbc>
 8006e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00b      	beq.n	8006e9c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e92:	f043 0201 	orr.w	r2, r3, #1
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d011      	beq.n	8006ecc <HAL_UART_IRQHandler+0xec>
 8006ea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00b      	beq.n	8006ecc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2202      	movs	r2, #2
 8006eba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ec2:	f043 0204 	orr.w	r2, r3, #4
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d011      	beq.n	8006efc <HAL_UART_IRQHandler+0x11c>
 8006ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00b      	beq.n	8006efc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2204      	movs	r2, #4
 8006eea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ef2:	f043 0202 	orr.w	r2, r3, #2
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f00:	f003 0308 	and.w	r3, r3, #8
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d017      	beq.n	8006f38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f0c:	f003 0320 	and.w	r3, r3, #32
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d105      	bne.n	8006f20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00b      	beq.n	8006f38 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2208      	movs	r2, #8
 8006f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f2e:	f043 0208 	orr.w	r2, r3, #8
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d012      	beq.n	8006f6a <HAL_UART_IRQHandler+0x18a>
 8006f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00c      	beq.n	8006f6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f60:	f043 0220 	orr.w	r2, r3, #32
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f000 8211 	beq.w	8007398 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f7a:	f003 0320 	and.w	r3, r3, #32
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00d      	beq.n	8006f9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f86:	f003 0320 	and.w	r3, r3, #32
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d007      	beq.n	8006f9e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb2:	2b40      	cmp	r3, #64	; 0x40
 8006fb4:	d005      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d04f      	beq.n	8007062 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fe5e 	bl	8007c84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd2:	2b40      	cmp	r3, #64	; 0x40
 8006fd4:	d141      	bne.n	800705a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	3308      	adds	r3, #8
 8006fdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fe4:	e853 3f00 	ldrex	r3, [r3]
 8006fe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3308      	adds	r3, #8
 8006ffe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007002:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007006:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800700e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800701a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1d9      	bne.n	8006fd6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007026:	2b00      	cmp	r3, #0
 8007028:	d013      	beq.n	8007052 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800702e:	4a13      	ldr	r2, [pc, #76]	; (800707c <HAL_UART_IRQHandler+0x29c>)
 8007030:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007036:	4618      	mov	r0, r3
 8007038:	f7fc fcf4 	bl	8003a24 <HAL_DMA_Abort_IT>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d017      	beq.n	8007072 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800704c:	4610      	mov	r0, r2
 800704e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007050:	e00f      	b.n	8007072 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f9b4 	bl	80073c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007058:	e00b      	b.n	8007072 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f9b0 	bl	80073c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007060:	e007      	b.n	8007072 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f9ac 	bl	80073c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007070:	e192      	b.n	8007398 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007072:	bf00      	nop
    return;
 8007074:	e190      	b.n	8007398 <HAL_UART_IRQHandler+0x5b8>
 8007076:	bf00      	nop
 8007078:	04000120 	.word	0x04000120
 800707c:	08007d4d 	.word	0x08007d4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007084:	2b01      	cmp	r3, #1
 8007086:	f040 814b 	bne.w	8007320 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800708a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800708e:	f003 0310 	and.w	r3, r3, #16
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 8144 	beq.w	8007320 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800709c:	f003 0310 	and.w	r3, r3, #16
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f000 813d 	beq.w	8007320 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2210      	movs	r2, #16
 80070ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b8:	2b40      	cmp	r3, #64	; 0x40
 80070ba:	f040 80b5 	bne.w	8007228 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f000 8164 	beq.w	800739c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070de:	429a      	cmp	r2, r3
 80070e0:	f080 815c 	bcs.w	800739c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	2b20      	cmp	r3, #32
 80070f6:	f000 8086 	beq.w	8007206 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007102:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007106:	e853 3f00 	ldrex	r3, [r3]
 800710a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800710e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007112:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007116:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007124:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007128:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007130:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007134:	e841 2300 	strex	r3, r2, [r1]
 8007138:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800713c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1da      	bne.n	80070fa <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3308      	adds	r3, #8
 800714a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800714e:	e853 3f00 	ldrex	r3, [r3]
 8007152:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007154:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007156:	f023 0301 	bic.w	r3, r3, #1
 800715a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3308      	adds	r3, #8
 8007164:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007168:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800716c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007170:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800717a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e1      	bne.n	8007144 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3308      	adds	r3, #8
 8007186:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007196:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3308      	adds	r3, #8
 80071a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80071a4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80071a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071ac:	e841 2300 	strex	r3, r2, [r1]
 80071b0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80071b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1e3      	bne.n	8007180 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2220      	movs	r2, #32
 80071bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ce:	e853 3f00 	ldrex	r3, [r3]
 80071d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071d6:	f023 0310 	bic.w	r3, r3, #16
 80071da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80071ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071f0:	e841 2300 	strex	r3, r2, [r1]
 80071f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1e4      	bne.n	80071c6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007200:	4618      	mov	r0, r3
 8007202:	f7fc fbd6 	bl	80039b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2202      	movs	r2, #2
 800720a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007218:	b29b      	uxth	r3, r3
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	b29b      	uxth	r3, r3
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f8d7 	bl	80073d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007226:	e0b9      	b.n	800739c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007234:	b29b      	uxth	r3, r3
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007242:	b29b      	uxth	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 80ab 	beq.w	80073a0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800724a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 80a6 	beq.w	80073a0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725c:	e853 3f00 	ldrex	r3, [r3]
 8007260:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007264:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007268:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	461a      	mov	r2, r3
 8007272:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007276:	647b      	str	r3, [r7, #68]	; 0x44
 8007278:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800727c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800727e:	e841 2300 	strex	r3, r2, [r1]
 8007282:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1e4      	bne.n	8007254 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3308      	adds	r3, #8
 8007290:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	e853 3f00 	ldrex	r3, [r3]
 8007298:	623b      	str	r3, [r7, #32]
   return(result);
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	f023 0301 	bic.w	r3, r3, #1
 80072a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3308      	adds	r3, #8
 80072aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80072ae:	633a      	str	r2, [r7, #48]	; 0x30
 80072b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1e3      	bne.n	800728a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	e853 3f00 	ldrex	r3, [r3]
 80072e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 0310 	bic.w	r3, r3, #16
 80072ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	461a      	mov	r2, r3
 80072f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072f8:	61fb      	str	r3, [r7, #28]
 80072fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fc:	69b9      	ldr	r1, [r7, #24]
 80072fe:	69fa      	ldr	r2, [r7, #28]
 8007300:	e841 2300 	strex	r3, r2, [r1]
 8007304:	617b      	str	r3, [r7, #20]
   return(result);
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1e4      	bne.n	80072d6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007312:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f85b 	bl	80073d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800731e:	e03f      	b.n	80073a0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00e      	beq.n	800734a <HAL_UART_IRQHandler+0x56a>
 800732c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d008      	beq.n	800734a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007340:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 ffa6 	bl	8008294 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007348:	e02d      	b.n	80073a6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800734a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800734e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00e      	beq.n	8007374 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800735a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800735e:	2b00      	cmp	r3, #0
 8007360:	d008      	beq.n	8007374 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007366:	2b00      	cmp	r3, #0
 8007368:	d01c      	beq.n	80073a4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	4798      	blx	r3
    }
    return;
 8007372:	e017      	b.n	80073a4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737c:	2b00      	cmp	r3, #0
 800737e:	d012      	beq.n	80073a6 <HAL_UART_IRQHandler+0x5c6>
 8007380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00c      	beq.n	80073a6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fdaf 	bl	8007ef0 <UART_EndTransmit_IT>
    return;
 8007392:	e008      	b.n	80073a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007394:	bf00      	nop
 8007396:	e006      	b.n	80073a6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007398:	bf00      	nop
 800739a:	e004      	b.n	80073a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 800739c:	bf00      	nop
 800739e:	e002      	b.n	80073a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80073a0:	bf00      	nop
 80073a2:	e000      	b.n	80073a6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80073a4:	bf00      	nop
  }

}
 80073a6:	37e8      	adds	r7, #232	; 0xe8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b088      	sub	sp, #32
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	431a      	orrs	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	431a      	orrs	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	69db      	ldr	r3, [r3, #28]
 800740c:	4313      	orrs	r3, r2
 800740e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	4b92      	ldr	r3, [pc, #584]	; (8007660 <UART_SetConfig+0x274>)
 8007418:	4013      	ands	r3, r2
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	6812      	ldr	r2, [r2, #0]
 800741e:	6979      	ldr	r1, [r7, #20]
 8007420:	430b      	orrs	r3, r1
 8007422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	4313      	orrs	r3, r2
 8007448:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	430a      	orrs	r2, r1
 800745c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a80      	ldr	r2, [pc, #512]	; (8007664 <UART_SetConfig+0x278>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d120      	bne.n	80074aa <UART_SetConfig+0xbe>
 8007468:	4b7f      	ldr	r3, [pc, #508]	; (8007668 <UART_SetConfig+0x27c>)
 800746a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746c:	f003 0303 	and.w	r3, r3, #3
 8007470:	2b03      	cmp	r3, #3
 8007472:	d817      	bhi.n	80074a4 <UART_SetConfig+0xb8>
 8007474:	a201      	add	r2, pc, #4	; (adr r2, 800747c <UART_SetConfig+0x90>)
 8007476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747a:	bf00      	nop
 800747c:	0800748d 	.word	0x0800748d
 8007480:	08007499 	.word	0x08007499
 8007484:	0800749f 	.word	0x0800749f
 8007488:	08007493 	.word	0x08007493
 800748c:	2301      	movs	r3, #1
 800748e:	77fb      	strb	r3, [r7, #31]
 8007490:	e0b5      	b.n	80075fe <UART_SetConfig+0x212>
 8007492:	2302      	movs	r3, #2
 8007494:	77fb      	strb	r3, [r7, #31]
 8007496:	e0b2      	b.n	80075fe <UART_SetConfig+0x212>
 8007498:	2304      	movs	r3, #4
 800749a:	77fb      	strb	r3, [r7, #31]
 800749c:	e0af      	b.n	80075fe <UART_SetConfig+0x212>
 800749e:	2308      	movs	r3, #8
 80074a0:	77fb      	strb	r3, [r7, #31]
 80074a2:	e0ac      	b.n	80075fe <UART_SetConfig+0x212>
 80074a4:	2310      	movs	r3, #16
 80074a6:	77fb      	strb	r3, [r7, #31]
 80074a8:	e0a9      	b.n	80075fe <UART_SetConfig+0x212>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a6f      	ldr	r2, [pc, #444]	; (800766c <UART_SetConfig+0x280>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d124      	bne.n	80074fe <UART_SetConfig+0x112>
 80074b4:	4b6c      	ldr	r3, [pc, #432]	; (8007668 <UART_SetConfig+0x27c>)
 80074b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80074bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074c0:	d011      	beq.n	80074e6 <UART_SetConfig+0xfa>
 80074c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074c6:	d817      	bhi.n	80074f8 <UART_SetConfig+0x10c>
 80074c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074cc:	d011      	beq.n	80074f2 <UART_SetConfig+0x106>
 80074ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074d2:	d811      	bhi.n	80074f8 <UART_SetConfig+0x10c>
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d003      	beq.n	80074e0 <UART_SetConfig+0xf4>
 80074d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074dc:	d006      	beq.n	80074ec <UART_SetConfig+0x100>
 80074de:	e00b      	b.n	80074f8 <UART_SetConfig+0x10c>
 80074e0:	2300      	movs	r3, #0
 80074e2:	77fb      	strb	r3, [r7, #31]
 80074e4:	e08b      	b.n	80075fe <UART_SetConfig+0x212>
 80074e6:	2302      	movs	r3, #2
 80074e8:	77fb      	strb	r3, [r7, #31]
 80074ea:	e088      	b.n	80075fe <UART_SetConfig+0x212>
 80074ec:	2304      	movs	r3, #4
 80074ee:	77fb      	strb	r3, [r7, #31]
 80074f0:	e085      	b.n	80075fe <UART_SetConfig+0x212>
 80074f2:	2308      	movs	r3, #8
 80074f4:	77fb      	strb	r3, [r7, #31]
 80074f6:	e082      	b.n	80075fe <UART_SetConfig+0x212>
 80074f8:	2310      	movs	r3, #16
 80074fa:	77fb      	strb	r3, [r7, #31]
 80074fc:	e07f      	b.n	80075fe <UART_SetConfig+0x212>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a5b      	ldr	r2, [pc, #364]	; (8007670 <UART_SetConfig+0x284>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d124      	bne.n	8007552 <UART_SetConfig+0x166>
 8007508:	4b57      	ldr	r3, [pc, #348]	; (8007668 <UART_SetConfig+0x27c>)
 800750a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007510:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007514:	d011      	beq.n	800753a <UART_SetConfig+0x14e>
 8007516:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800751a:	d817      	bhi.n	800754c <UART_SetConfig+0x160>
 800751c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007520:	d011      	beq.n	8007546 <UART_SetConfig+0x15a>
 8007522:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007526:	d811      	bhi.n	800754c <UART_SetConfig+0x160>
 8007528:	2b00      	cmp	r3, #0
 800752a:	d003      	beq.n	8007534 <UART_SetConfig+0x148>
 800752c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007530:	d006      	beq.n	8007540 <UART_SetConfig+0x154>
 8007532:	e00b      	b.n	800754c <UART_SetConfig+0x160>
 8007534:	2300      	movs	r3, #0
 8007536:	77fb      	strb	r3, [r7, #31]
 8007538:	e061      	b.n	80075fe <UART_SetConfig+0x212>
 800753a:	2302      	movs	r3, #2
 800753c:	77fb      	strb	r3, [r7, #31]
 800753e:	e05e      	b.n	80075fe <UART_SetConfig+0x212>
 8007540:	2304      	movs	r3, #4
 8007542:	77fb      	strb	r3, [r7, #31]
 8007544:	e05b      	b.n	80075fe <UART_SetConfig+0x212>
 8007546:	2308      	movs	r3, #8
 8007548:	77fb      	strb	r3, [r7, #31]
 800754a:	e058      	b.n	80075fe <UART_SetConfig+0x212>
 800754c:	2310      	movs	r3, #16
 800754e:	77fb      	strb	r3, [r7, #31]
 8007550:	e055      	b.n	80075fe <UART_SetConfig+0x212>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a47      	ldr	r2, [pc, #284]	; (8007674 <UART_SetConfig+0x288>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d124      	bne.n	80075a6 <UART_SetConfig+0x1ba>
 800755c:	4b42      	ldr	r3, [pc, #264]	; (8007668 <UART_SetConfig+0x27c>)
 800755e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007560:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007564:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007568:	d011      	beq.n	800758e <UART_SetConfig+0x1a2>
 800756a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800756e:	d817      	bhi.n	80075a0 <UART_SetConfig+0x1b4>
 8007570:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007574:	d011      	beq.n	800759a <UART_SetConfig+0x1ae>
 8007576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800757a:	d811      	bhi.n	80075a0 <UART_SetConfig+0x1b4>
 800757c:	2b00      	cmp	r3, #0
 800757e:	d003      	beq.n	8007588 <UART_SetConfig+0x19c>
 8007580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007584:	d006      	beq.n	8007594 <UART_SetConfig+0x1a8>
 8007586:	e00b      	b.n	80075a0 <UART_SetConfig+0x1b4>
 8007588:	2300      	movs	r3, #0
 800758a:	77fb      	strb	r3, [r7, #31]
 800758c:	e037      	b.n	80075fe <UART_SetConfig+0x212>
 800758e:	2302      	movs	r3, #2
 8007590:	77fb      	strb	r3, [r7, #31]
 8007592:	e034      	b.n	80075fe <UART_SetConfig+0x212>
 8007594:	2304      	movs	r3, #4
 8007596:	77fb      	strb	r3, [r7, #31]
 8007598:	e031      	b.n	80075fe <UART_SetConfig+0x212>
 800759a:	2308      	movs	r3, #8
 800759c:	77fb      	strb	r3, [r7, #31]
 800759e:	e02e      	b.n	80075fe <UART_SetConfig+0x212>
 80075a0:	2310      	movs	r3, #16
 80075a2:	77fb      	strb	r3, [r7, #31]
 80075a4:	e02b      	b.n	80075fe <UART_SetConfig+0x212>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a33      	ldr	r2, [pc, #204]	; (8007678 <UART_SetConfig+0x28c>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d124      	bne.n	80075fa <UART_SetConfig+0x20e>
 80075b0:	4b2d      	ldr	r3, [pc, #180]	; (8007668 <UART_SetConfig+0x27c>)
 80075b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80075b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80075bc:	d011      	beq.n	80075e2 <UART_SetConfig+0x1f6>
 80075be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80075c2:	d817      	bhi.n	80075f4 <UART_SetConfig+0x208>
 80075c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075c8:	d011      	beq.n	80075ee <UART_SetConfig+0x202>
 80075ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075ce:	d811      	bhi.n	80075f4 <UART_SetConfig+0x208>
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d003      	beq.n	80075dc <UART_SetConfig+0x1f0>
 80075d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075d8:	d006      	beq.n	80075e8 <UART_SetConfig+0x1fc>
 80075da:	e00b      	b.n	80075f4 <UART_SetConfig+0x208>
 80075dc:	2300      	movs	r3, #0
 80075de:	77fb      	strb	r3, [r7, #31]
 80075e0:	e00d      	b.n	80075fe <UART_SetConfig+0x212>
 80075e2:	2302      	movs	r3, #2
 80075e4:	77fb      	strb	r3, [r7, #31]
 80075e6:	e00a      	b.n	80075fe <UART_SetConfig+0x212>
 80075e8:	2304      	movs	r3, #4
 80075ea:	77fb      	strb	r3, [r7, #31]
 80075ec:	e007      	b.n	80075fe <UART_SetConfig+0x212>
 80075ee:	2308      	movs	r3, #8
 80075f0:	77fb      	strb	r3, [r7, #31]
 80075f2:	e004      	b.n	80075fe <UART_SetConfig+0x212>
 80075f4:	2310      	movs	r3, #16
 80075f6:	77fb      	strb	r3, [r7, #31]
 80075f8:	e001      	b.n	80075fe <UART_SetConfig+0x212>
 80075fa:	2310      	movs	r3, #16
 80075fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007606:	d16b      	bne.n	80076e0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007608:	7ffb      	ldrb	r3, [r7, #31]
 800760a:	2b08      	cmp	r3, #8
 800760c:	d838      	bhi.n	8007680 <UART_SetConfig+0x294>
 800760e:	a201      	add	r2, pc, #4	; (adr r2, 8007614 <UART_SetConfig+0x228>)
 8007610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007614:	08007639 	.word	0x08007639
 8007618:	08007641 	.word	0x08007641
 800761c:	08007649 	.word	0x08007649
 8007620:	08007681 	.word	0x08007681
 8007624:	0800764f 	.word	0x0800764f
 8007628:	08007681 	.word	0x08007681
 800762c:	08007681 	.word	0x08007681
 8007630:	08007681 	.word	0x08007681
 8007634:	08007657 	.word	0x08007657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007638:	f7fd ff64 	bl	8005504 <HAL_RCC_GetPCLK1Freq>
 800763c:	61b8      	str	r0, [r7, #24]
        break;
 800763e:	e024      	b.n	800768a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007640:	f7fd ff82 	bl	8005548 <HAL_RCC_GetPCLK2Freq>
 8007644:	61b8      	str	r0, [r7, #24]
        break;
 8007646:	e020      	b.n	800768a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007648:	4b0c      	ldr	r3, [pc, #48]	; (800767c <UART_SetConfig+0x290>)
 800764a:	61bb      	str	r3, [r7, #24]
        break;
 800764c:	e01d      	b.n	800768a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800764e:	f7fd fee3 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 8007652:	61b8      	str	r0, [r7, #24]
        break;
 8007654:	e019      	b.n	800768a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800765a:	61bb      	str	r3, [r7, #24]
        break;
 800765c:	e015      	b.n	800768a <UART_SetConfig+0x29e>
 800765e:	bf00      	nop
 8007660:	efff69f3 	.word	0xefff69f3
 8007664:	40013800 	.word	0x40013800
 8007668:	40021000 	.word	0x40021000
 800766c:	40004400 	.word	0x40004400
 8007670:	40004800 	.word	0x40004800
 8007674:	40004c00 	.word	0x40004c00
 8007678:	40005000 	.word	0x40005000
 800767c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	77bb      	strb	r3, [r7, #30]
        break;
 8007688:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d073      	beq.n	8007778 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	005a      	lsls	r2, r3, #1
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	085b      	lsrs	r3, r3, #1
 800769a:	441a      	add	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	2b0f      	cmp	r3, #15
 80076aa:	d916      	bls.n	80076da <UART_SetConfig+0x2ee>
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b2:	d212      	bcs.n	80076da <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	f023 030f 	bic.w	r3, r3, #15
 80076bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	085b      	lsrs	r3, r3, #1
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	f003 0307 	and.w	r3, r3, #7
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	89fb      	ldrh	r3, [r7, #14]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	89fa      	ldrh	r2, [r7, #14]
 80076d6:	60da      	str	r2, [r3, #12]
 80076d8:	e04e      	b.n	8007778 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	77bb      	strb	r3, [r7, #30]
 80076de:	e04b      	b.n	8007778 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076e0:	7ffb      	ldrb	r3, [r7, #31]
 80076e2:	2b08      	cmp	r3, #8
 80076e4:	d827      	bhi.n	8007736 <UART_SetConfig+0x34a>
 80076e6:	a201      	add	r2, pc, #4	; (adr r2, 80076ec <UART_SetConfig+0x300>)
 80076e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ec:	08007711 	.word	0x08007711
 80076f0:	08007719 	.word	0x08007719
 80076f4:	08007721 	.word	0x08007721
 80076f8:	08007737 	.word	0x08007737
 80076fc:	08007727 	.word	0x08007727
 8007700:	08007737 	.word	0x08007737
 8007704:	08007737 	.word	0x08007737
 8007708:	08007737 	.word	0x08007737
 800770c:	0800772f 	.word	0x0800772f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007710:	f7fd fef8 	bl	8005504 <HAL_RCC_GetPCLK1Freq>
 8007714:	61b8      	str	r0, [r7, #24]
        break;
 8007716:	e013      	b.n	8007740 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007718:	f7fd ff16 	bl	8005548 <HAL_RCC_GetPCLK2Freq>
 800771c:	61b8      	str	r0, [r7, #24]
        break;
 800771e:	e00f      	b.n	8007740 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007720:	4b1b      	ldr	r3, [pc, #108]	; (8007790 <UART_SetConfig+0x3a4>)
 8007722:	61bb      	str	r3, [r7, #24]
        break;
 8007724:	e00c      	b.n	8007740 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007726:	f7fd fe77 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 800772a:	61b8      	str	r0, [r7, #24]
        break;
 800772c:	e008      	b.n	8007740 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800772e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007732:	61bb      	str	r3, [r7, #24]
        break;
 8007734:	e004      	b.n	8007740 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	77bb      	strb	r3, [r7, #30]
        break;
 800773e:	bf00      	nop
    }

    if (pclk != 0U)
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d018      	beq.n	8007778 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	085a      	lsrs	r2, r3, #1
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	441a      	add	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	fbb2 f3f3 	udiv	r3, r2, r3
 8007758:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	2b0f      	cmp	r3, #15
 800775e:	d909      	bls.n	8007774 <UART_SetConfig+0x388>
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007766:	d205      	bcs.n	8007774 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	b29a      	uxth	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	60da      	str	r2, [r3, #12]
 8007772:	e001      	b.n	8007778 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007784:	7fbb      	ldrb	r3, [r7, #30]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3720      	adds	r7, #32
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	007a1200 	.word	0x007a1200

08007794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00a      	beq.n	80077be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00a      	beq.n	80077e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	430a      	orrs	r2, r1
 80077de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e4:	f003 0304 	and.w	r3, r3, #4
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00a      	beq.n	8007802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	430a      	orrs	r2, r1
 8007800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	f003 0308 	and.w	r3, r3, #8
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00a      	beq.n	8007824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	f003 0310 	and.w	r3, r3, #16
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00a      	beq.n	8007846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	430a      	orrs	r2, r1
 8007844:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00a      	beq.n	8007868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	430a      	orrs	r2, r1
 8007866:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007870:	2b00      	cmp	r3, #0
 8007872:	d01a      	beq.n	80078aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	430a      	orrs	r2, r1
 8007888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007892:	d10a      	bne.n	80078aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	430a      	orrs	r2, r1
 80078a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	430a      	orrs	r2, r1
 80078ca:	605a      	str	r2, [r3, #4]
  }
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b098      	sub	sp, #96	; 0x60
 80078dc:	af02      	add	r7, sp, #8
 80078de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078e8:	f7fa fe44 	bl	8002574 <HAL_GetTick>
 80078ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0308 	and.w	r3, r3, #8
 80078f8:	2b08      	cmp	r3, #8
 80078fa:	d12e      	bne.n	800795a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007904:	2200      	movs	r2, #0
 8007906:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f88c 	bl	8007a28 <UART_WaitOnFlagUntilTimeout>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d021      	beq.n	800795a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791e:	e853 3f00 	ldrex	r3, [r3]
 8007922:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800792a:	653b      	str	r3, [r7, #80]	; 0x50
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	461a      	mov	r2, r3
 8007932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007934:	647b      	str	r3, [r7, #68]	; 0x44
 8007936:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007938:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800793a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800793c:	e841 2300 	strex	r3, r2, [r1]
 8007940:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1e6      	bne.n	8007916 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2220      	movs	r2, #32
 800794c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e062      	b.n	8007a20 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0304 	and.w	r3, r3, #4
 8007964:	2b04      	cmp	r3, #4
 8007966:	d149      	bne.n	80079fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007970:	2200      	movs	r2, #0
 8007972:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f856 	bl	8007a28 <UART_WaitOnFlagUntilTimeout>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d03c      	beq.n	80079fc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	e853 3f00 	ldrex	r3, [r3]
 800798e:	623b      	str	r3, [r7, #32]
   return(result);
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	461a      	mov	r2, r3
 800799e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079a0:	633b      	str	r3, [r7, #48]	; 0x30
 80079a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a8:	e841 2300 	strex	r3, r2, [r1]
 80079ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1e6      	bne.n	8007982 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3308      	adds	r3, #8
 80079ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	e853 3f00 	ldrex	r3, [r3]
 80079c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 0301 	bic.w	r3, r3, #1
 80079ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3308      	adds	r3, #8
 80079d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079d4:	61fa      	str	r2, [r7, #28]
 80079d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	69b9      	ldr	r1, [r7, #24]
 80079da:	69fa      	ldr	r2, [r7, #28]
 80079dc:	e841 2300 	strex	r3, r2, [r1]
 80079e0:	617b      	str	r3, [r7, #20]
   return(result);
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e5      	bne.n	80079b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2220      	movs	r2, #32
 80079ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e011      	b.n	8007a20 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2220      	movs	r2, #32
 8007a00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2220      	movs	r2, #32
 8007a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3758      	adds	r7, #88	; 0x58
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	603b      	str	r3, [r7, #0]
 8007a34:	4613      	mov	r3, r2
 8007a36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a38:	e049      	b.n	8007ace <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a40:	d045      	beq.n	8007ace <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a42:	f7fa fd97 	bl	8002574 <HAL_GetTick>
 8007a46:	4602      	mov	r2, r0
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d302      	bcc.n	8007a58 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e048      	b.n	8007aee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0304 	and.w	r3, r3, #4
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d031      	beq.n	8007ace <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	69db      	ldr	r3, [r3, #28]
 8007a70:	f003 0308 	and.w	r3, r3, #8
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	d110      	bne.n	8007a9a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2208      	movs	r2, #8
 8007a7e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 f8ff 	bl	8007c84 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2208      	movs	r2, #8
 8007a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e029      	b.n	8007aee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aa8:	d111      	bne.n	8007ace <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f000 f8e5 	bl	8007c84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2220      	movs	r2, #32
 8007abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e00f      	b.n	8007aee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	69da      	ldr	r2, [r3, #28]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	bf0c      	ite	eq
 8007ade:	2301      	moveq	r3, #1
 8007ae0:	2300      	movne	r3, #0
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	79fb      	ldrb	r3, [r7, #7]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d0a6      	beq.n	8007a3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
	...

08007af8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b097      	sub	sp, #92	; 0x5c
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	4613      	mov	r3, r2
 8007b04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	88fa      	ldrh	r2, [r7, #6]
 8007b10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	88fa      	ldrh	r2, [r7, #6]
 8007b18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b2a:	d10e      	bne.n	8007b4a <UART_Start_Receive_IT+0x52>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d105      	bne.n	8007b40 <UART_Start_Receive_IT+0x48>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007b3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b3e:	e02d      	b.n	8007b9c <UART_Start_Receive_IT+0xa4>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	22ff      	movs	r2, #255	; 0xff
 8007b44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b48:	e028      	b.n	8007b9c <UART_Start_Receive_IT+0xa4>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10d      	bne.n	8007b6e <UART_Start_Receive_IT+0x76>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d104      	bne.n	8007b64 <UART_Start_Receive_IT+0x6c>
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	22ff      	movs	r2, #255	; 0xff
 8007b5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b62:	e01b      	b.n	8007b9c <UART_Start_Receive_IT+0xa4>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	227f      	movs	r2, #127	; 0x7f
 8007b68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b6c:	e016      	b.n	8007b9c <UART_Start_Receive_IT+0xa4>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b76:	d10d      	bne.n	8007b94 <UART_Start_Receive_IT+0x9c>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d104      	bne.n	8007b8a <UART_Start_Receive_IT+0x92>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	227f      	movs	r2, #127	; 0x7f
 8007b84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b88:	e008      	b.n	8007b9c <UART_Start_Receive_IT+0xa4>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	223f      	movs	r2, #63	; 0x3f
 8007b8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b92:	e003      	b.n	8007b9c <UART_Start_Receive_IT+0xa4>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2222      	movs	r2, #34	; 0x22
 8007ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3308      	adds	r3, #8
 8007bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bb6:	e853 3f00 	ldrex	r3, [r3]
 8007bba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbe:	f043 0301 	orr.w	r3, r3, #1
 8007bc2:	657b      	str	r3, [r7, #84]	; 0x54
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3308      	adds	r3, #8
 8007bca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007bcc:	64ba      	str	r2, [r7, #72]	; 0x48
 8007bce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007bd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bd4:	e841 2300 	strex	r3, r2, [r1]
 8007bd8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1e5      	bne.n	8007bac <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007be8:	d107      	bne.n	8007bfa <UART_Start_Receive_IT+0x102>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d103      	bne.n	8007bfa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	4a21      	ldr	r2, [pc, #132]	; (8007c7c <UART_Start_Receive_IT+0x184>)
 8007bf6:	669a      	str	r2, [r3, #104]	; 0x68
 8007bf8:	e002      	b.n	8007c00 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4a20      	ldr	r2, [pc, #128]	; (8007c80 <UART_Start_Receive_IT+0x188>)
 8007bfe:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d019      	beq.n	8007c3c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c26:	637b      	str	r3, [r7, #52]	; 0x34
 8007c28:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e6      	bne.n	8007c08 <UART_Start_Receive_IT+0x110>
 8007c3a:	e018      	b.n	8007c6e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	e853 3f00 	ldrex	r3, [r3]
 8007c48:	613b      	str	r3, [r7, #16]
   return(result);
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f043 0320 	orr.w	r3, r3, #32
 8007c50:	653b      	str	r3, [r7, #80]	; 0x50
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	461a      	mov	r2, r3
 8007c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c5a:	623b      	str	r3, [r7, #32]
 8007c5c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5e:	69f9      	ldr	r1, [r7, #28]
 8007c60:	6a3a      	ldr	r2, [r7, #32]
 8007c62:	e841 2300 	strex	r3, r2, [r1]
 8007c66:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1e6      	bne.n	8007c3c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	375c      	adds	r7, #92	; 0x5c
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	080080ed 	.word	0x080080ed
 8007c80:	08007f45 	.word	0x08007f45

08007c84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b095      	sub	sp, #84	; 0x54
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007caa:	643b      	str	r3, [r7, #64]	; 0x40
 8007cac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e6      	bne.n	8007c8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3308      	adds	r3, #8
 8007cc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	e853 3f00 	ldrex	r3, [r3]
 8007ccc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	f023 0301 	bic.w	r3, r3, #1
 8007cd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3308      	adds	r3, #8
 8007cdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ce0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ce6:	e841 2300 	strex	r3, r2, [r1]
 8007cea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1e5      	bne.n	8007cbe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d118      	bne.n	8007d2c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	e853 3f00 	ldrex	r3, [r3]
 8007d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f023 0310 	bic.w	r3, r3, #16
 8007d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	461a      	mov	r2, r3
 8007d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d18:	61bb      	str	r3, [r7, #24]
 8007d1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1c:	6979      	ldr	r1, [r7, #20]
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	e841 2300 	strex	r3, r2, [r1]
 8007d24:	613b      	str	r3, [r7, #16]
   return(result);
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1e6      	bne.n	8007cfa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2220      	movs	r2, #32
 8007d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007d40:	bf00      	nop
 8007d42:	3754      	adds	r7, #84	; 0x54
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f7ff fb28 	bl	80073c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d70:	bf00      	nop
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b08f      	sub	sp, #60	; 0x3c
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d84:	2b21      	cmp	r3, #33	; 0x21
 8007d86:	d14d      	bne.n	8007e24 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d132      	bne.n	8007dfa <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	e853 3f00 	ldrex	r3, [r3]
 8007da0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007da8:	637b      	str	r3, [r7, #52]	; 0x34
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	461a      	mov	r2, r3
 8007db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007db4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dba:	e841 2300 	strex	r3, r2, [r1]
 8007dbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1e6      	bne.n	8007d94 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	e853 3f00 	ldrex	r3, [r3]
 8007dd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dda:	633b      	str	r3, [r7, #48]	; 0x30
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	461a      	mov	r2, r3
 8007de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de4:	61bb      	str	r3, [r7, #24]
 8007de6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de8:	6979      	ldr	r1, [r7, #20]
 8007dea:	69ba      	ldr	r2, [r7, #24]
 8007dec:	e841 2300 	strex	r3, r2, [r1]
 8007df0:	613b      	str	r3, [r7, #16]
   return(result);
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1e6      	bne.n	8007dc6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007df8:	e014      	b.n	8007e24 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dfe:	781a      	ldrb	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	b292      	uxth	r2, r2
 8007e06:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e0c:	1c5a      	adds	r2, r3, #1
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007e24:	bf00      	nop
 8007e26:	373c      	adds	r7, #60	; 0x3c
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b091      	sub	sp, #68	; 0x44
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e3c:	2b21      	cmp	r3, #33	; 0x21
 8007e3e:	d151      	bne.n	8007ee4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d132      	bne.n	8007eb2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	623b      	str	r3, [r7, #32]
   return(result);
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e60:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6a:	633b      	str	r3, [r7, #48]	; 0x30
 8007e6c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e72:	e841 2300 	strex	r3, r2, [r1]
 8007e76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1e6      	bne.n	8007e4c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	e853 3f00 	ldrex	r3, [r3]
 8007e8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e92:	637b      	str	r3, [r7, #52]	; 0x34
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e9c:	61fb      	str	r3, [r7, #28]
 8007e9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea0:	69b9      	ldr	r1, [r7, #24]
 8007ea2:	69fa      	ldr	r2, [r7, #28]
 8007ea4:	e841 2300 	strex	r3, r2, [r1]
 8007ea8:	617b      	str	r3, [r7, #20]
   return(result);
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1e6      	bne.n	8007e7e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007eb0:	e018      	b.n	8007ee4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eba:	881a      	ldrh	r2, [r3, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ec4:	b292      	uxth	r2, r2
 8007ec6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ecc:	1c9a      	adds	r2, r3, #2
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	3b01      	subs	r3, #1
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007ee4:	bf00      	nop
 8007ee6:	3744      	adds	r7, #68	; 0x44
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b088      	sub	sp, #32
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	e853 3f00 	ldrex	r3, [r3]
 8007f04:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f0c:	61fb      	str	r3, [r7, #28]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	461a      	mov	r2, r3
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	61bb      	str	r3, [r7, #24]
 8007f18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1a:	6979      	ldr	r1, [r7, #20]
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	e841 2300 	strex	r3, r2, [r1]
 8007f22:	613b      	str	r3, [r7, #16]
   return(result);
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1e6      	bne.n	8007ef8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7ff fa38 	bl	80073ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f3c:	bf00      	nop
 8007f3e:	3720      	adds	r7, #32
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b09c      	sub	sp, #112	; 0x70
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f52:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f5c:	2b22      	cmp	r3, #34	; 0x22
 8007f5e:	f040 80b9 	bne.w	80080d4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007f68:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007f70:	b2d9      	uxtb	r1, r3
 8007f72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f7c:	400a      	ands	r2, r1
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f86:	1c5a      	adds	r2, r3, #1
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	3b01      	subs	r3, #1
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f040 809c 	bne.w	80080e4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fb4:	e853 3f00 	ldrex	r3, [r3]
 8007fb8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fca:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fcc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fd2:	e841 2300 	strex	r3, r2, [r1]
 8007fd6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1e6      	bne.n	8007fac <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe8:	e853 3f00 	ldrex	r3, [r3]
 8007fec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff0:	f023 0301 	bic.w	r3, r3, #1
 8007ff4:	667b      	str	r3, [r7, #100]	; 0x64
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3308      	adds	r3, #8
 8007ffc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007ffe:	647a      	str	r2, [r7, #68]	; 0x44
 8008000:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008002:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008004:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008006:	e841 2300 	strex	r3, r2, [r1]
 800800a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800800c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1e5      	bne.n	8007fde <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2220      	movs	r2, #32
 8008016:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d018      	beq.n	8008066 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	623b      	str	r3, [r7, #32]
   return(result);
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008048:	663b      	str	r3, [r7, #96]	; 0x60
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	461a      	mov	r2, r3
 8008050:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008052:	633b      	str	r3, [r7, #48]	; 0x30
 8008054:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008056:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800805a:	e841 2300 	strex	r3, r2, [r1]
 800805e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1e6      	bne.n	8008034 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800806a:	2b01      	cmp	r3, #1
 800806c:	d12e      	bne.n	80080cc <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	60fb      	str	r3, [r7, #12]
   return(result);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f023 0310 	bic.w	r3, r3, #16
 8008088:	65fb      	str	r3, [r7, #92]	; 0x5c
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	461a      	mov	r2, r3
 8008090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008092:	61fb      	str	r3, [r7, #28]
 8008094:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008096:	69b9      	ldr	r1, [r7, #24]
 8008098:	69fa      	ldr	r2, [r7, #28]
 800809a:	e841 2300 	strex	r3, r2, [r1]
 800809e:	617b      	str	r3, [r7, #20]
   return(result);
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1e6      	bne.n	8008074 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	69db      	ldr	r3, [r3, #28]
 80080ac:	f003 0310 	and.w	r3, r3, #16
 80080b0:	2b10      	cmp	r3, #16
 80080b2:	d103      	bne.n	80080bc <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2210      	movs	r2, #16
 80080ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7ff f985 	bl	80073d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080ca:	e00b      	b.n	80080e4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7f8 fbf5 	bl	80008bc <HAL_UART_RxCpltCallback>
}
 80080d2:	e007      	b.n	80080e4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	699a      	ldr	r2, [r3, #24]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f042 0208 	orr.w	r2, r2, #8
 80080e2:	619a      	str	r2, [r3, #24]
}
 80080e4:	bf00      	nop
 80080e6:	3770      	adds	r7, #112	; 0x70
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b09c      	sub	sp, #112	; 0x70
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080fa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008104:	2b22      	cmp	r3, #34	; 0x22
 8008106:	f040 80b9 	bne.w	800827c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008110:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008118:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800811a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800811e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008122:	4013      	ands	r3, r2
 8008124:	b29a      	uxth	r2, r3
 8008126:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008128:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800812e:	1c9a      	adds	r2, r3, #2
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800813a:	b29b      	uxth	r3, r3
 800813c:	3b01      	subs	r3, #1
 800813e:	b29a      	uxth	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800814c:	b29b      	uxth	r3, r3
 800814e:	2b00      	cmp	r3, #0
 8008150:	f040 809c 	bne.w	800828c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800815c:	e853 3f00 	ldrex	r3, [r3]
 8008160:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008168:	667b      	str	r3, [r7, #100]	; 0x64
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008172:	657b      	str	r3, [r7, #84]	; 0x54
 8008174:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008176:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008178:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800817a:	e841 2300 	strex	r3, r2, [r1]
 800817e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1e6      	bne.n	8008154 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3308      	adds	r3, #8
 800818c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008190:	e853 3f00 	ldrex	r3, [r3]
 8008194:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008198:	f023 0301 	bic.w	r3, r3, #1
 800819c:	663b      	str	r3, [r7, #96]	; 0x60
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3308      	adds	r3, #8
 80081a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081a6:	643a      	str	r2, [r7, #64]	; 0x40
 80081a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081ae:	e841 2300 	strex	r3, r2, [r1]
 80081b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1e5      	bne.n	8008186 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2220      	movs	r2, #32
 80081be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d018      	beq.n	800820e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e2:	6a3b      	ldr	r3, [r7, #32]
 80081e4:	e853 3f00 	ldrex	r3, [r3]
 80081e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80081f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	461a      	mov	r2, r3
 80081f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081fc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008202:	e841 2300 	strex	r3, r2, [r1]
 8008206:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1e6      	bne.n	80081dc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008212:	2b01      	cmp	r3, #1
 8008214:	d12e      	bne.n	8008274 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	e853 3f00 	ldrex	r3, [r3]
 8008228:	60bb      	str	r3, [r7, #8]
   return(result);
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f023 0310 	bic.w	r3, r3, #16
 8008230:	65bb      	str	r3, [r7, #88]	; 0x58
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	461a      	mov	r2, r3
 8008238:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800823a:	61bb      	str	r3, [r7, #24]
 800823c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823e:	6979      	ldr	r1, [r7, #20]
 8008240:	69ba      	ldr	r2, [r7, #24]
 8008242:	e841 2300 	strex	r3, r2, [r1]
 8008246:	613b      	str	r3, [r7, #16]
   return(result);
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1e6      	bne.n	800821c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	f003 0310 	and.w	r3, r3, #16
 8008258:	2b10      	cmp	r3, #16
 800825a:	d103      	bne.n	8008264 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2210      	movs	r2, #16
 8008262:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f7ff f8b1 	bl	80073d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008272:	e00b      	b.n	800828c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f7f8 fb21 	bl	80008bc <HAL_UART_RxCpltCallback>
}
 800827a:	e007      	b.n	800828c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	699a      	ldr	r2, [r3, #24]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f042 0208 	orr.w	r2, r2, #8
 800828a:	619a      	str	r2, [r3, #24]
}
 800828c:	bf00      	nop
 800828e:	3770      	adds	r7, #112	; 0x70
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <atoi>:
 80082a8:	220a      	movs	r2, #10
 80082aa:	2100      	movs	r1, #0
 80082ac:	f000 b8dc 	b.w	8008468 <strtol>

080082b0 <__errno>:
 80082b0:	4b01      	ldr	r3, [pc, #4]	; (80082b8 <__errno+0x8>)
 80082b2:	6818      	ldr	r0, [r3, #0]
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	20000084 	.word	0x20000084

080082bc <__libc_init_array>:
 80082bc:	b570      	push	{r4, r5, r6, lr}
 80082be:	4d0d      	ldr	r5, [pc, #52]	; (80082f4 <__libc_init_array+0x38>)
 80082c0:	4c0d      	ldr	r4, [pc, #52]	; (80082f8 <__libc_init_array+0x3c>)
 80082c2:	1b64      	subs	r4, r4, r5
 80082c4:	10a4      	asrs	r4, r4, #2
 80082c6:	2600      	movs	r6, #0
 80082c8:	42a6      	cmp	r6, r4
 80082ca:	d109      	bne.n	80082e0 <__libc_init_array+0x24>
 80082cc:	4d0b      	ldr	r5, [pc, #44]	; (80082fc <__libc_init_array+0x40>)
 80082ce:	4c0c      	ldr	r4, [pc, #48]	; (8008300 <__libc_init_array+0x44>)
 80082d0:	f000 fd22 	bl	8008d18 <_init>
 80082d4:	1b64      	subs	r4, r4, r5
 80082d6:	10a4      	asrs	r4, r4, #2
 80082d8:	2600      	movs	r6, #0
 80082da:	42a6      	cmp	r6, r4
 80082dc:	d105      	bne.n	80082ea <__libc_init_array+0x2e>
 80082de:	bd70      	pop	{r4, r5, r6, pc}
 80082e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80082e4:	4798      	blx	r3
 80082e6:	3601      	adds	r6, #1
 80082e8:	e7ee      	b.n	80082c8 <__libc_init_array+0xc>
 80082ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ee:	4798      	blx	r3
 80082f0:	3601      	adds	r6, #1
 80082f2:	e7f2      	b.n	80082da <__libc_init_array+0x1e>
 80082f4:	08009030 	.word	0x08009030
 80082f8:	08009030 	.word	0x08009030
 80082fc:	08009030 	.word	0x08009030
 8008300:	08009034 	.word	0x08009034

08008304 <memset>:
 8008304:	4402      	add	r2, r0
 8008306:	4603      	mov	r3, r0
 8008308:	4293      	cmp	r3, r2
 800830a:	d100      	bne.n	800830e <memset+0xa>
 800830c:	4770      	bx	lr
 800830e:	f803 1b01 	strb.w	r1, [r3], #1
 8008312:	e7f9      	b.n	8008308 <memset+0x4>

08008314 <siprintf>:
 8008314:	b40e      	push	{r1, r2, r3}
 8008316:	b500      	push	{lr}
 8008318:	b09c      	sub	sp, #112	; 0x70
 800831a:	ab1d      	add	r3, sp, #116	; 0x74
 800831c:	9002      	str	r0, [sp, #8]
 800831e:	9006      	str	r0, [sp, #24]
 8008320:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008324:	4809      	ldr	r0, [pc, #36]	; (800834c <siprintf+0x38>)
 8008326:	9107      	str	r1, [sp, #28]
 8008328:	9104      	str	r1, [sp, #16]
 800832a:	4909      	ldr	r1, [pc, #36]	; (8008350 <siprintf+0x3c>)
 800832c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008330:	9105      	str	r1, [sp, #20]
 8008332:	6800      	ldr	r0, [r0, #0]
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	a902      	add	r1, sp, #8
 8008338:	f000 f8fc 	bl	8008534 <_svfiprintf_r>
 800833c:	9b02      	ldr	r3, [sp, #8]
 800833e:	2200      	movs	r2, #0
 8008340:	701a      	strb	r2, [r3, #0]
 8008342:	b01c      	add	sp, #112	; 0x70
 8008344:	f85d eb04 	ldr.w	lr, [sp], #4
 8008348:	b003      	add	sp, #12
 800834a:	4770      	bx	lr
 800834c:	20000084 	.word	0x20000084
 8008350:	ffff0208 	.word	0xffff0208

08008354 <strcpy>:
 8008354:	4603      	mov	r3, r0
 8008356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800835a:	f803 2b01 	strb.w	r2, [r3], #1
 800835e:	2a00      	cmp	r2, #0
 8008360:	d1f9      	bne.n	8008356 <strcpy+0x2>
 8008362:	4770      	bx	lr

08008364 <_strtol_l.constprop.0>:
 8008364:	2b01      	cmp	r3, #1
 8008366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800836a:	d001      	beq.n	8008370 <_strtol_l.constprop.0+0xc>
 800836c:	2b24      	cmp	r3, #36	; 0x24
 800836e:	d906      	bls.n	800837e <_strtol_l.constprop.0+0x1a>
 8008370:	f7ff ff9e 	bl	80082b0 <__errno>
 8008374:	2316      	movs	r3, #22
 8008376:	6003      	str	r3, [r0, #0]
 8008378:	2000      	movs	r0, #0
 800837a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800837e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008464 <_strtol_l.constprop.0+0x100>
 8008382:	460d      	mov	r5, r1
 8008384:	462e      	mov	r6, r5
 8008386:	f815 4b01 	ldrb.w	r4, [r5], #1
 800838a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800838e:	f017 0708 	ands.w	r7, r7, #8
 8008392:	d1f7      	bne.n	8008384 <_strtol_l.constprop.0+0x20>
 8008394:	2c2d      	cmp	r4, #45	; 0x2d
 8008396:	d132      	bne.n	80083fe <_strtol_l.constprop.0+0x9a>
 8008398:	782c      	ldrb	r4, [r5, #0]
 800839a:	2701      	movs	r7, #1
 800839c:	1cb5      	adds	r5, r6, #2
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d05b      	beq.n	800845a <_strtol_l.constprop.0+0xf6>
 80083a2:	2b10      	cmp	r3, #16
 80083a4:	d109      	bne.n	80083ba <_strtol_l.constprop.0+0x56>
 80083a6:	2c30      	cmp	r4, #48	; 0x30
 80083a8:	d107      	bne.n	80083ba <_strtol_l.constprop.0+0x56>
 80083aa:	782c      	ldrb	r4, [r5, #0]
 80083ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80083b0:	2c58      	cmp	r4, #88	; 0x58
 80083b2:	d14d      	bne.n	8008450 <_strtol_l.constprop.0+0xec>
 80083b4:	786c      	ldrb	r4, [r5, #1]
 80083b6:	2310      	movs	r3, #16
 80083b8:	3502      	adds	r5, #2
 80083ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80083be:	f108 38ff 	add.w	r8, r8, #4294967295
 80083c2:	f04f 0c00 	mov.w	ip, #0
 80083c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80083ca:	4666      	mov	r6, ip
 80083cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80083d0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80083d4:	f1be 0f09 	cmp.w	lr, #9
 80083d8:	d816      	bhi.n	8008408 <_strtol_l.constprop.0+0xa4>
 80083da:	4674      	mov	r4, lr
 80083dc:	42a3      	cmp	r3, r4
 80083de:	dd24      	ble.n	800842a <_strtol_l.constprop.0+0xc6>
 80083e0:	f1bc 0f00 	cmp.w	ip, #0
 80083e4:	db1e      	blt.n	8008424 <_strtol_l.constprop.0+0xc0>
 80083e6:	45b1      	cmp	r9, r6
 80083e8:	d31c      	bcc.n	8008424 <_strtol_l.constprop.0+0xc0>
 80083ea:	d101      	bne.n	80083f0 <_strtol_l.constprop.0+0x8c>
 80083ec:	45a2      	cmp	sl, r4
 80083ee:	db19      	blt.n	8008424 <_strtol_l.constprop.0+0xc0>
 80083f0:	fb06 4603 	mla	r6, r6, r3, r4
 80083f4:	f04f 0c01 	mov.w	ip, #1
 80083f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083fc:	e7e8      	b.n	80083d0 <_strtol_l.constprop.0+0x6c>
 80083fe:	2c2b      	cmp	r4, #43	; 0x2b
 8008400:	bf04      	itt	eq
 8008402:	782c      	ldrbeq	r4, [r5, #0]
 8008404:	1cb5      	addeq	r5, r6, #2
 8008406:	e7ca      	b.n	800839e <_strtol_l.constprop.0+0x3a>
 8008408:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800840c:	f1be 0f19 	cmp.w	lr, #25
 8008410:	d801      	bhi.n	8008416 <_strtol_l.constprop.0+0xb2>
 8008412:	3c37      	subs	r4, #55	; 0x37
 8008414:	e7e2      	b.n	80083dc <_strtol_l.constprop.0+0x78>
 8008416:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800841a:	f1be 0f19 	cmp.w	lr, #25
 800841e:	d804      	bhi.n	800842a <_strtol_l.constprop.0+0xc6>
 8008420:	3c57      	subs	r4, #87	; 0x57
 8008422:	e7db      	b.n	80083dc <_strtol_l.constprop.0+0x78>
 8008424:	f04f 3cff 	mov.w	ip, #4294967295
 8008428:	e7e6      	b.n	80083f8 <_strtol_l.constprop.0+0x94>
 800842a:	f1bc 0f00 	cmp.w	ip, #0
 800842e:	da05      	bge.n	800843c <_strtol_l.constprop.0+0xd8>
 8008430:	2322      	movs	r3, #34	; 0x22
 8008432:	6003      	str	r3, [r0, #0]
 8008434:	4646      	mov	r6, r8
 8008436:	b942      	cbnz	r2, 800844a <_strtol_l.constprop.0+0xe6>
 8008438:	4630      	mov	r0, r6
 800843a:	e79e      	b.n	800837a <_strtol_l.constprop.0+0x16>
 800843c:	b107      	cbz	r7, 8008440 <_strtol_l.constprop.0+0xdc>
 800843e:	4276      	negs	r6, r6
 8008440:	2a00      	cmp	r2, #0
 8008442:	d0f9      	beq.n	8008438 <_strtol_l.constprop.0+0xd4>
 8008444:	f1bc 0f00 	cmp.w	ip, #0
 8008448:	d000      	beq.n	800844c <_strtol_l.constprop.0+0xe8>
 800844a:	1e69      	subs	r1, r5, #1
 800844c:	6011      	str	r1, [r2, #0]
 800844e:	e7f3      	b.n	8008438 <_strtol_l.constprop.0+0xd4>
 8008450:	2430      	movs	r4, #48	; 0x30
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1b1      	bne.n	80083ba <_strtol_l.constprop.0+0x56>
 8008456:	2308      	movs	r3, #8
 8008458:	e7af      	b.n	80083ba <_strtol_l.constprop.0+0x56>
 800845a:	2c30      	cmp	r4, #48	; 0x30
 800845c:	d0a5      	beq.n	80083aa <_strtol_l.constprop.0+0x46>
 800845e:	230a      	movs	r3, #10
 8008460:	e7ab      	b.n	80083ba <_strtol_l.constprop.0+0x56>
 8008462:	bf00      	nop
 8008464:	08008efd 	.word	0x08008efd

08008468 <strtol>:
 8008468:	4613      	mov	r3, r2
 800846a:	460a      	mov	r2, r1
 800846c:	4601      	mov	r1, r0
 800846e:	4802      	ldr	r0, [pc, #8]	; (8008478 <strtol+0x10>)
 8008470:	6800      	ldr	r0, [r0, #0]
 8008472:	f7ff bf77 	b.w	8008364 <_strtol_l.constprop.0>
 8008476:	bf00      	nop
 8008478:	20000084 	.word	0x20000084

0800847c <__ssputs_r>:
 800847c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008480:	688e      	ldr	r6, [r1, #8]
 8008482:	429e      	cmp	r6, r3
 8008484:	4682      	mov	sl, r0
 8008486:	460c      	mov	r4, r1
 8008488:	4690      	mov	r8, r2
 800848a:	461f      	mov	r7, r3
 800848c:	d838      	bhi.n	8008500 <__ssputs_r+0x84>
 800848e:	898a      	ldrh	r2, [r1, #12]
 8008490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008494:	d032      	beq.n	80084fc <__ssputs_r+0x80>
 8008496:	6825      	ldr	r5, [r4, #0]
 8008498:	6909      	ldr	r1, [r1, #16]
 800849a:	eba5 0901 	sub.w	r9, r5, r1
 800849e:	6965      	ldr	r5, [r4, #20]
 80084a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084a8:	3301      	adds	r3, #1
 80084aa:	444b      	add	r3, r9
 80084ac:	106d      	asrs	r5, r5, #1
 80084ae:	429d      	cmp	r5, r3
 80084b0:	bf38      	it	cc
 80084b2:	461d      	movcc	r5, r3
 80084b4:	0553      	lsls	r3, r2, #21
 80084b6:	d531      	bpl.n	800851c <__ssputs_r+0xa0>
 80084b8:	4629      	mov	r1, r5
 80084ba:	f000 fb63 	bl	8008b84 <_malloc_r>
 80084be:	4606      	mov	r6, r0
 80084c0:	b950      	cbnz	r0, 80084d8 <__ssputs_r+0x5c>
 80084c2:	230c      	movs	r3, #12
 80084c4:	f8ca 3000 	str.w	r3, [sl]
 80084c8:	89a3      	ldrh	r3, [r4, #12]
 80084ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ce:	81a3      	strh	r3, [r4, #12]
 80084d0:	f04f 30ff 	mov.w	r0, #4294967295
 80084d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d8:	6921      	ldr	r1, [r4, #16]
 80084da:	464a      	mov	r2, r9
 80084dc:	f000 fabe 	bl	8008a5c <memcpy>
 80084e0:	89a3      	ldrh	r3, [r4, #12]
 80084e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ea:	81a3      	strh	r3, [r4, #12]
 80084ec:	6126      	str	r6, [r4, #16]
 80084ee:	6165      	str	r5, [r4, #20]
 80084f0:	444e      	add	r6, r9
 80084f2:	eba5 0509 	sub.w	r5, r5, r9
 80084f6:	6026      	str	r6, [r4, #0]
 80084f8:	60a5      	str	r5, [r4, #8]
 80084fa:	463e      	mov	r6, r7
 80084fc:	42be      	cmp	r6, r7
 80084fe:	d900      	bls.n	8008502 <__ssputs_r+0x86>
 8008500:	463e      	mov	r6, r7
 8008502:	6820      	ldr	r0, [r4, #0]
 8008504:	4632      	mov	r2, r6
 8008506:	4641      	mov	r1, r8
 8008508:	f000 fab6 	bl	8008a78 <memmove>
 800850c:	68a3      	ldr	r3, [r4, #8]
 800850e:	1b9b      	subs	r3, r3, r6
 8008510:	60a3      	str	r3, [r4, #8]
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	4433      	add	r3, r6
 8008516:	6023      	str	r3, [r4, #0]
 8008518:	2000      	movs	r0, #0
 800851a:	e7db      	b.n	80084d4 <__ssputs_r+0x58>
 800851c:	462a      	mov	r2, r5
 800851e:	f000 fba5 	bl	8008c6c <_realloc_r>
 8008522:	4606      	mov	r6, r0
 8008524:	2800      	cmp	r0, #0
 8008526:	d1e1      	bne.n	80084ec <__ssputs_r+0x70>
 8008528:	6921      	ldr	r1, [r4, #16]
 800852a:	4650      	mov	r0, sl
 800852c:	f000 fabe 	bl	8008aac <_free_r>
 8008530:	e7c7      	b.n	80084c2 <__ssputs_r+0x46>
	...

08008534 <_svfiprintf_r>:
 8008534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008538:	4698      	mov	r8, r3
 800853a:	898b      	ldrh	r3, [r1, #12]
 800853c:	061b      	lsls	r3, r3, #24
 800853e:	b09d      	sub	sp, #116	; 0x74
 8008540:	4607      	mov	r7, r0
 8008542:	460d      	mov	r5, r1
 8008544:	4614      	mov	r4, r2
 8008546:	d50e      	bpl.n	8008566 <_svfiprintf_r+0x32>
 8008548:	690b      	ldr	r3, [r1, #16]
 800854a:	b963      	cbnz	r3, 8008566 <_svfiprintf_r+0x32>
 800854c:	2140      	movs	r1, #64	; 0x40
 800854e:	f000 fb19 	bl	8008b84 <_malloc_r>
 8008552:	6028      	str	r0, [r5, #0]
 8008554:	6128      	str	r0, [r5, #16]
 8008556:	b920      	cbnz	r0, 8008562 <_svfiprintf_r+0x2e>
 8008558:	230c      	movs	r3, #12
 800855a:	603b      	str	r3, [r7, #0]
 800855c:	f04f 30ff 	mov.w	r0, #4294967295
 8008560:	e0d1      	b.n	8008706 <_svfiprintf_r+0x1d2>
 8008562:	2340      	movs	r3, #64	; 0x40
 8008564:	616b      	str	r3, [r5, #20]
 8008566:	2300      	movs	r3, #0
 8008568:	9309      	str	r3, [sp, #36]	; 0x24
 800856a:	2320      	movs	r3, #32
 800856c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008570:	f8cd 800c 	str.w	r8, [sp, #12]
 8008574:	2330      	movs	r3, #48	; 0x30
 8008576:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008720 <_svfiprintf_r+0x1ec>
 800857a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800857e:	f04f 0901 	mov.w	r9, #1
 8008582:	4623      	mov	r3, r4
 8008584:	469a      	mov	sl, r3
 8008586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800858a:	b10a      	cbz	r2, 8008590 <_svfiprintf_r+0x5c>
 800858c:	2a25      	cmp	r2, #37	; 0x25
 800858e:	d1f9      	bne.n	8008584 <_svfiprintf_r+0x50>
 8008590:	ebba 0b04 	subs.w	fp, sl, r4
 8008594:	d00b      	beq.n	80085ae <_svfiprintf_r+0x7a>
 8008596:	465b      	mov	r3, fp
 8008598:	4622      	mov	r2, r4
 800859a:	4629      	mov	r1, r5
 800859c:	4638      	mov	r0, r7
 800859e:	f7ff ff6d 	bl	800847c <__ssputs_r>
 80085a2:	3001      	adds	r0, #1
 80085a4:	f000 80aa 	beq.w	80086fc <_svfiprintf_r+0x1c8>
 80085a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085aa:	445a      	add	r2, fp
 80085ac:	9209      	str	r2, [sp, #36]	; 0x24
 80085ae:	f89a 3000 	ldrb.w	r3, [sl]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 80a2 	beq.w	80086fc <_svfiprintf_r+0x1c8>
 80085b8:	2300      	movs	r3, #0
 80085ba:	f04f 32ff 	mov.w	r2, #4294967295
 80085be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085c2:	f10a 0a01 	add.w	sl, sl, #1
 80085c6:	9304      	str	r3, [sp, #16]
 80085c8:	9307      	str	r3, [sp, #28]
 80085ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085ce:	931a      	str	r3, [sp, #104]	; 0x68
 80085d0:	4654      	mov	r4, sl
 80085d2:	2205      	movs	r2, #5
 80085d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085d8:	4851      	ldr	r0, [pc, #324]	; (8008720 <_svfiprintf_r+0x1ec>)
 80085da:	f7f7 fe19 	bl	8000210 <memchr>
 80085de:	9a04      	ldr	r2, [sp, #16]
 80085e0:	b9d8      	cbnz	r0, 800861a <_svfiprintf_r+0xe6>
 80085e2:	06d0      	lsls	r0, r2, #27
 80085e4:	bf44      	itt	mi
 80085e6:	2320      	movmi	r3, #32
 80085e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085ec:	0711      	lsls	r1, r2, #28
 80085ee:	bf44      	itt	mi
 80085f0:	232b      	movmi	r3, #43	; 0x2b
 80085f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085f6:	f89a 3000 	ldrb.w	r3, [sl]
 80085fa:	2b2a      	cmp	r3, #42	; 0x2a
 80085fc:	d015      	beq.n	800862a <_svfiprintf_r+0xf6>
 80085fe:	9a07      	ldr	r2, [sp, #28]
 8008600:	4654      	mov	r4, sl
 8008602:	2000      	movs	r0, #0
 8008604:	f04f 0c0a 	mov.w	ip, #10
 8008608:	4621      	mov	r1, r4
 800860a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800860e:	3b30      	subs	r3, #48	; 0x30
 8008610:	2b09      	cmp	r3, #9
 8008612:	d94e      	bls.n	80086b2 <_svfiprintf_r+0x17e>
 8008614:	b1b0      	cbz	r0, 8008644 <_svfiprintf_r+0x110>
 8008616:	9207      	str	r2, [sp, #28]
 8008618:	e014      	b.n	8008644 <_svfiprintf_r+0x110>
 800861a:	eba0 0308 	sub.w	r3, r0, r8
 800861e:	fa09 f303 	lsl.w	r3, r9, r3
 8008622:	4313      	orrs	r3, r2
 8008624:	9304      	str	r3, [sp, #16]
 8008626:	46a2      	mov	sl, r4
 8008628:	e7d2      	b.n	80085d0 <_svfiprintf_r+0x9c>
 800862a:	9b03      	ldr	r3, [sp, #12]
 800862c:	1d19      	adds	r1, r3, #4
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	9103      	str	r1, [sp, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	bfbb      	ittet	lt
 8008636:	425b      	neglt	r3, r3
 8008638:	f042 0202 	orrlt.w	r2, r2, #2
 800863c:	9307      	strge	r3, [sp, #28]
 800863e:	9307      	strlt	r3, [sp, #28]
 8008640:	bfb8      	it	lt
 8008642:	9204      	strlt	r2, [sp, #16]
 8008644:	7823      	ldrb	r3, [r4, #0]
 8008646:	2b2e      	cmp	r3, #46	; 0x2e
 8008648:	d10c      	bne.n	8008664 <_svfiprintf_r+0x130>
 800864a:	7863      	ldrb	r3, [r4, #1]
 800864c:	2b2a      	cmp	r3, #42	; 0x2a
 800864e:	d135      	bne.n	80086bc <_svfiprintf_r+0x188>
 8008650:	9b03      	ldr	r3, [sp, #12]
 8008652:	1d1a      	adds	r2, r3, #4
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	9203      	str	r2, [sp, #12]
 8008658:	2b00      	cmp	r3, #0
 800865a:	bfb8      	it	lt
 800865c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008660:	3402      	adds	r4, #2
 8008662:	9305      	str	r3, [sp, #20]
 8008664:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008730 <_svfiprintf_r+0x1fc>
 8008668:	7821      	ldrb	r1, [r4, #0]
 800866a:	2203      	movs	r2, #3
 800866c:	4650      	mov	r0, sl
 800866e:	f7f7 fdcf 	bl	8000210 <memchr>
 8008672:	b140      	cbz	r0, 8008686 <_svfiprintf_r+0x152>
 8008674:	2340      	movs	r3, #64	; 0x40
 8008676:	eba0 000a 	sub.w	r0, r0, sl
 800867a:	fa03 f000 	lsl.w	r0, r3, r0
 800867e:	9b04      	ldr	r3, [sp, #16]
 8008680:	4303      	orrs	r3, r0
 8008682:	3401      	adds	r4, #1
 8008684:	9304      	str	r3, [sp, #16]
 8008686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800868a:	4826      	ldr	r0, [pc, #152]	; (8008724 <_svfiprintf_r+0x1f0>)
 800868c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008690:	2206      	movs	r2, #6
 8008692:	f7f7 fdbd 	bl	8000210 <memchr>
 8008696:	2800      	cmp	r0, #0
 8008698:	d038      	beq.n	800870c <_svfiprintf_r+0x1d8>
 800869a:	4b23      	ldr	r3, [pc, #140]	; (8008728 <_svfiprintf_r+0x1f4>)
 800869c:	bb1b      	cbnz	r3, 80086e6 <_svfiprintf_r+0x1b2>
 800869e:	9b03      	ldr	r3, [sp, #12]
 80086a0:	3307      	adds	r3, #7
 80086a2:	f023 0307 	bic.w	r3, r3, #7
 80086a6:	3308      	adds	r3, #8
 80086a8:	9303      	str	r3, [sp, #12]
 80086aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ac:	4433      	add	r3, r6
 80086ae:	9309      	str	r3, [sp, #36]	; 0x24
 80086b0:	e767      	b.n	8008582 <_svfiprintf_r+0x4e>
 80086b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80086b6:	460c      	mov	r4, r1
 80086b8:	2001      	movs	r0, #1
 80086ba:	e7a5      	b.n	8008608 <_svfiprintf_r+0xd4>
 80086bc:	2300      	movs	r3, #0
 80086be:	3401      	adds	r4, #1
 80086c0:	9305      	str	r3, [sp, #20]
 80086c2:	4619      	mov	r1, r3
 80086c4:	f04f 0c0a 	mov.w	ip, #10
 80086c8:	4620      	mov	r0, r4
 80086ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086ce:	3a30      	subs	r2, #48	; 0x30
 80086d0:	2a09      	cmp	r2, #9
 80086d2:	d903      	bls.n	80086dc <_svfiprintf_r+0x1a8>
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d0c5      	beq.n	8008664 <_svfiprintf_r+0x130>
 80086d8:	9105      	str	r1, [sp, #20]
 80086da:	e7c3      	b.n	8008664 <_svfiprintf_r+0x130>
 80086dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80086e0:	4604      	mov	r4, r0
 80086e2:	2301      	movs	r3, #1
 80086e4:	e7f0      	b.n	80086c8 <_svfiprintf_r+0x194>
 80086e6:	ab03      	add	r3, sp, #12
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	462a      	mov	r2, r5
 80086ec:	4b0f      	ldr	r3, [pc, #60]	; (800872c <_svfiprintf_r+0x1f8>)
 80086ee:	a904      	add	r1, sp, #16
 80086f0:	4638      	mov	r0, r7
 80086f2:	f3af 8000 	nop.w
 80086f6:	1c42      	adds	r2, r0, #1
 80086f8:	4606      	mov	r6, r0
 80086fa:	d1d6      	bne.n	80086aa <_svfiprintf_r+0x176>
 80086fc:	89ab      	ldrh	r3, [r5, #12]
 80086fe:	065b      	lsls	r3, r3, #25
 8008700:	f53f af2c 	bmi.w	800855c <_svfiprintf_r+0x28>
 8008704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008706:	b01d      	add	sp, #116	; 0x74
 8008708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800870c:	ab03      	add	r3, sp, #12
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	462a      	mov	r2, r5
 8008712:	4b06      	ldr	r3, [pc, #24]	; (800872c <_svfiprintf_r+0x1f8>)
 8008714:	a904      	add	r1, sp, #16
 8008716:	4638      	mov	r0, r7
 8008718:	f000 f87a 	bl	8008810 <_printf_i>
 800871c:	e7eb      	b.n	80086f6 <_svfiprintf_r+0x1c2>
 800871e:	bf00      	nop
 8008720:	08008ffd 	.word	0x08008ffd
 8008724:	08009007 	.word	0x08009007
 8008728:	00000000 	.word	0x00000000
 800872c:	0800847d 	.word	0x0800847d
 8008730:	08009003 	.word	0x08009003

08008734 <_printf_common>:
 8008734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008738:	4616      	mov	r6, r2
 800873a:	4699      	mov	r9, r3
 800873c:	688a      	ldr	r2, [r1, #8]
 800873e:	690b      	ldr	r3, [r1, #16]
 8008740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008744:	4293      	cmp	r3, r2
 8008746:	bfb8      	it	lt
 8008748:	4613      	movlt	r3, r2
 800874a:	6033      	str	r3, [r6, #0]
 800874c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008750:	4607      	mov	r7, r0
 8008752:	460c      	mov	r4, r1
 8008754:	b10a      	cbz	r2, 800875a <_printf_common+0x26>
 8008756:	3301      	adds	r3, #1
 8008758:	6033      	str	r3, [r6, #0]
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	0699      	lsls	r1, r3, #26
 800875e:	bf42      	ittt	mi
 8008760:	6833      	ldrmi	r3, [r6, #0]
 8008762:	3302      	addmi	r3, #2
 8008764:	6033      	strmi	r3, [r6, #0]
 8008766:	6825      	ldr	r5, [r4, #0]
 8008768:	f015 0506 	ands.w	r5, r5, #6
 800876c:	d106      	bne.n	800877c <_printf_common+0x48>
 800876e:	f104 0a19 	add.w	sl, r4, #25
 8008772:	68e3      	ldr	r3, [r4, #12]
 8008774:	6832      	ldr	r2, [r6, #0]
 8008776:	1a9b      	subs	r3, r3, r2
 8008778:	42ab      	cmp	r3, r5
 800877a:	dc26      	bgt.n	80087ca <_printf_common+0x96>
 800877c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008780:	1e13      	subs	r3, r2, #0
 8008782:	6822      	ldr	r2, [r4, #0]
 8008784:	bf18      	it	ne
 8008786:	2301      	movne	r3, #1
 8008788:	0692      	lsls	r2, r2, #26
 800878a:	d42b      	bmi.n	80087e4 <_printf_common+0xb0>
 800878c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008790:	4649      	mov	r1, r9
 8008792:	4638      	mov	r0, r7
 8008794:	47c0      	blx	r8
 8008796:	3001      	adds	r0, #1
 8008798:	d01e      	beq.n	80087d8 <_printf_common+0xa4>
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	68e5      	ldr	r5, [r4, #12]
 800879e:	6832      	ldr	r2, [r6, #0]
 80087a0:	f003 0306 	and.w	r3, r3, #6
 80087a4:	2b04      	cmp	r3, #4
 80087a6:	bf08      	it	eq
 80087a8:	1aad      	subeq	r5, r5, r2
 80087aa:	68a3      	ldr	r3, [r4, #8]
 80087ac:	6922      	ldr	r2, [r4, #16]
 80087ae:	bf0c      	ite	eq
 80087b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087b4:	2500      	movne	r5, #0
 80087b6:	4293      	cmp	r3, r2
 80087b8:	bfc4      	itt	gt
 80087ba:	1a9b      	subgt	r3, r3, r2
 80087bc:	18ed      	addgt	r5, r5, r3
 80087be:	2600      	movs	r6, #0
 80087c0:	341a      	adds	r4, #26
 80087c2:	42b5      	cmp	r5, r6
 80087c4:	d11a      	bne.n	80087fc <_printf_common+0xc8>
 80087c6:	2000      	movs	r0, #0
 80087c8:	e008      	b.n	80087dc <_printf_common+0xa8>
 80087ca:	2301      	movs	r3, #1
 80087cc:	4652      	mov	r2, sl
 80087ce:	4649      	mov	r1, r9
 80087d0:	4638      	mov	r0, r7
 80087d2:	47c0      	blx	r8
 80087d4:	3001      	adds	r0, #1
 80087d6:	d103      	bne.n	80087e0 <_printf_common+0xac>
 80087d8:	f04f 30ff 	mov.w	r0, #4294967295
 80087dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e0:	3501      	adds	r5, #1
 80087e2:	e7c6      	b.n	8008772 <_printf_common+0x3e>
 80087e4:	18e1      	adds	r1, r4, r3
 80087e6:	1c5a      	adds	r2, r3, #1
 80087e8:	2030      	movs	r0, #48	; 0x30
 80087ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087ee:	4422      	add	r2, r4
 80087f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087f8:	3302      	adds	r3, #2
 80087fa:	e7c7      	b.n	800878c <_printf_common+0x58>
 80087fc:	2301      	movs	r3, #1
 80087fe:	4622      	mov	r2, r4
 8008800:	4649      	mov	r1, r9
 8008802:	4638      	mov	r0, r7
 8008804:	47c0      	blx	r8
 8008806:	3001      	adds	r0, #1
 8008808:	d0e6      	beq.n	80087d8 <_printf_common+0xa4>
 800880a:	3601      	adds	r6, #1
 800880c:	e7d9      	b.n	80087c2 <_printf_common+0x8e>
	...

08008810 <_printf_i>:
 8008810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008814:	7e0f      	ldrb	r7, [r1, #24]
 8008816:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008818:	2f78      	cmp	r7, #120	; 0x78
 800881a:	4691      	mov	r9, r2
 800881c:	4680      	mov	r8, r0
 800881e:	460c      	mov	r4, r1
 8008820:	469a      	mov	sl, r3
 8008822:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008826:	d807      	bhi.n	8008838 <_printf_i+0x28>
 8008828:	2f62      	cmp	r7, #98	; 0x62
 800882a:	d80a      	bhi.n	8008842 <_printf_i+0x32>
 800882c:	2f00      	cmp	r7, #0
 800882e:	f000 80d8 	beq.w	80089e2 <_printf_i+0x1d2>
 8008832:	2f58      	cmp	r7, #88	; 0x58
 8008834:	f000 80a3 	beq.w	800897e <_printf_i+0x16e>
 8008838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800883c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008840:	e03a      	b.n	80088b8 <_printf_i+0xa8>
 8008842:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008846:	2b15      	cmp	r3, #21
 8008848:	d8f6      	bhi.n	8008838 <_printf_i+0x28>
 800884a:	a101      	add	r1, pc, #4	; (adr r1, 8008850 <_printf_i+0x40>)
 800884c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008850:	080088a9 	.word	0x080088a9
 8008854:	080088bd 	.word	0x080088bd
 8008858:	08008839 	.word	0x08008839
 800885c:	08008839 	.word	0x08008839
 8008860:	08008839 	.word	0x08008839
 8008864:	08008839 	.word	0x08008839
 8008868:	080088bd 	.word	0x080088bd
 800886c:	08008839 	.word	0x08008839
 8008870:	08008839 	.word	0x08008839
 8008874:	08008839 	.word	0x08008839
 8008878:	08008839 	.word	0x08008839
 800887c:	080089c9 	.word	0x080089c9
 8008880:	080088ed 	.word	0x080088ed
 8008884:	080089ab 	.word	0x080089ab
 8008888:	08008839 	.word	0x08008839
 800888c:	08008839 	.word	0x08008839
 8008890:	080089eb 	.word	0x080089eb
 8008894:	08008839 	.word	0x08008839
 8008898:	080088ed 	.word	0x080088ed
 800889c:	08008839 	.word	0x08008839
 80088a0:	08008839 	.word	0x08008839
 80088a4:	080089b3 	.word	0x080089b3
 80088a8:	682b      	ldr	r3, [r5, #0]
 80088aa:	1d1a      	adds	r2, r3, #4
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	602a      	str	r2, [r5, #0]
 80088b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088b8:	2301      	movs	r3, #1
 80088ba:	e0a3      	b.n	8008a04 <_printf_i+0x1f4>
 80088bc:	6820      	ldr	r0, [r4, #0]
 80088be:	6829      	ldr	r1, [r5, #0]
 80088c0:	0606      	lsls	r6, r0, #24
 80088c2:	f101 0304 	add.w	r3, r1, #4
 80088c6:	d50a      	bpl.n	80088de <_printf_i+0xce>
 80088c8:	680e      	ldr	r6, [r1, #0]
 80088ca:	602b      	str	r3, [r5, #0]
 80088cc:	2e00      	cmp	r6, #0
 80088ce:	da03      	bge.n	80088d8 <_printf_i+0xc8>
 80088d0:	232d      	movs	r3, #45	; 0x2d
 80088d2:	4276      	negs	r6, r6
 80088d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088d8:	485e      	ldr	r0, [pc, #376]	; (8008a54 <_printf_i+0x244>)
 80088da:	230a      	movs	r3, #10
 80088dc:	e019      	b.n	8008912 <_printf_i+0x102>
 80088de:	680e      	ldr	r6, [r1, #0]
 80088e0:	602b      	str	r3, [r5, #0]
 80088e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088e6:	bf18      	it	ne
 80088e8:	b236      	sxthne	r6, r6
 80088ea:	e7ef      	b.n	80088cc <_printf_i+0xbc>
 80088ec:	682b      	ldr	r3, [r5, #0]
 80088ee:	6820      	ldr	r0, [r4, #0]
 80088f0:	1d19      	adds	r1, r3, #4
 80088f2:	6029      	str	r1, [r5, #0]
 80088f4:	0601      	lsls	r1, r0, #24
 80088f6:	d501      	bpl.n	80088fc <_printf_i+0xec>
 80088f8:	681e      	ldr	r6, [r3, #0]
 80088fa:	e002      	b.n	8008902 <_printf_i+0xf2>
 80088fc:	0646      	lsls	r6, r0, #25
 80088fe:	d5fb      	bpl.n	80088f8 <_printf_i+0xe8>
 8008900:	881e      	ldrh	r6, [r3, #0]
 8008902:	4854      	ldr	r0, [pc, #336]	; (8008a54 <_printf_i+0x244>)
 8008904:	2f6f      	cmp	r7, #111	; 0x6f
 8008906:	bf0c      	ite	eq
 8008908:	2308      	moveq	r3, #8
 800890a:	230a      	movne	r3, #10
 800890c:	2100      	movs	r1, #0
 800890e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008912:	6865      	ldr	r5, [r4, #4]
 8008914:	60a5      	str	r5, [r4, #8]
 8008916:	2d00      	cmp	r5, #0
 8008918:	bfa2      	ittt	ge
 800891a:	6821      	ldrge	r1, [r4, #0]
 800891c:	f021 0104 	bicge.w	r1, r1, #4
 8008920:	6021      	strge	r1, [r4, #0]
 8008922:	b90e      	cbnz	r6, 8008928 <_printf_i+0x118>
 8008924:	2d00      	cmp	r5, #0
 8008926:	d04d      	beq.n	80089c4 <_printf_i+0x1b4>
 8008928:	4615      	mov	r5, r2
 800892a:	fbb6 f1f3 	udiv	r1, r6, r3
 800892e:	fb03 6711 	mls	r7, r3, r1, r6
 8008932:	5dc7      	ldrb	r7, [r0, r7]
 8008934:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008938:	4637      	mov	r7, r6
 800893a:	42bb      	cmp	r3, r7
 800893c:	460e      	mov	r6, r1
 800893e:	d9f4      	bls.n	800892a <_printf_i+0x11a>
 8008940:	2b08      	cmp	r3, #8
 8008942:	d10b      	bne.n	800895c <_printf_i+0x14c>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	07de      	lsls	r6, r3, #31
 8008948:	d508      	bpl.n	800895c <_printf_i+0x14c>
 800894a:	6923      	ldr	r3, [r4, #16]
 800894c:	6861      	ldr	r1, [r4, #4]
 800894e:	4299      	cmp	r1, r3
 8008950:	bfde      	ittt	le
 8008952:	2330      	movle	r3, #48	; 0x30
 8008954:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008958:	f105 35ff 	addle.w	r5, r5, #4294967295
 800895c:	1b52      	subs	r2, r2, r5
 800895e:	6122      	str	r2, [r4, #16]
 8008960:	f8cd a000 	str.w	sl, [sp]
 8008964:	464b      	mov	r3, r9
 8008966:	aa03      	add	r2, sp, #12
 8008968:	4621      	mov	r1, r4
 800896a:	4640      	mov	r0, r8
 800896c:	f7ff fee2 	bl	8008734 <_printf_common>
 8008970:	3001      	adds	r0, #1
 8008972:	d14c      	bne.n	8008a0e <_printf_i+0x1fe>
 8008974:	f04f 30ff 	mov.w	r0, #4294967295
 8008978:	b004      	add	sp, #16
 800897a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800897e:	4835      	ldr	r0, [pc, #212]	; (8008a54 <_printf_i+0x244>)
 8008980:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008984:	6829      	ldr	r1, [r5, #0]
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	f851 6b04 	ldr.w	r6, [r1], #4
 800898c:	6029      	str	r1, [r5, #0]
 800898e:	061d      	lsls	r5, r3, #24
 8008990:	d514      	bpl.n	80089bc <_printf_i+0x1ac>
 8008992:	07df      	lsls	r7, r3, #31
 8008994:	bf44      	itt	mi
 8008996:	f043 0320 	orrmi.w	r3, r3, #32
 800899a:	6023      	strmi	r3, [r4, #0]
 800899c:	b91e      	cbnz	r6, 80089a6 <_printf_i+0x196>
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	f023 0320 	bic.w	r3, r3, #32
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	2310      	movs	r3, #16
 80089a8:	e7b0      	b.n	800890c <_printf_i+0xfc>
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	f043 0320 	orr.w	r3, r3, #32
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	2378      	movs	r3, #120	; 0x78
 80089b4:	4828      	ldr	r0, [pc, #160]	; (8008a58 <_printf_i+0x248>)
 80089b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089ba:	e7e3      	b.n	8008984 <_printf_i+0x174>
 80089bc:	0659      	lsls	r1, r3, #25
 80089be:	bf48      	it	mi
 80089c0:	b2b6      	uxthmi	r6, r6
 80089c2:	e7e6      	b.n	8008992 <_printf_i+0x182>
 80089c4:	4615      	mov	r5, r2
 80089c6:	e7bb      	b.n	8008940 <_printf_i+0x130>
 80089c8:	682b      	ldr	r3, [r5, #0]
 80089ca:	6826      	ldr	r6, [r4, #0]
 80089cc:	6961      	ldr	r1, [r4, #20]
 80089ce:	1d18      	adds	r0, r3, #4
 80089d0:	6028      	str	r0, [r5, #0]
 80089d2:	0635      	lsls	r5, r6, #24
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	d501      	bpl.n	80089dc <_printf_i+0x1cc>
 80089d8:	6019      	str	r1, [r3, #0]
 80089da:	e002      	b.n	80089e2 <_printf_i+0x1d2>
 80089dc:	0670      	lsls	r0, r6, #25
 80089de:	d5fb      	bpl.n	80089d8 <_printf_i+0x1c8>
 80089e0:	8019      	strh	r1, [r3, #0]
 80089e2:	2300      	movs	r3, #0
 80089e4:	6123      	str	r3, [r4, #16]
 80089e6:	4615      	mov	r5, r2
 80089e8:	e7ba      	b.n	8008960 <_printf_i+0x150>
 80089ea:	682b      	ldr	r3, [r5, #0]
 80089ec:	1d1a      	adds	r2, r3, #4
 80089ee:	602a      	str	r2, [r5, #0]
 80089f0:	681d      	ldr	r5, [r3, #0]
 80089f2:	6862      	ldr	r2, [r4, #4]
 80089f4:	2100      	movs	r1, #0
 80089f6:	4628      	mov	r0, r5
 80089f8:	f7f7 fc0a 	bl	8000210 <memchr>
 80089fc:	b108      	cbz	r0, 8008a02 <_printf_i+0x1f2>
 80089fe:	1b40      	subs	r0, r0, r5
 8008a00:	6060      	str	r0, [r4, #4]
 8008a02:	6863      	ldr	r3, [r4, #4]
 8008a04:	6123      	str	r3, [r4, #16]
 8008a06:	2300      	movs	r3, #0
 8008a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a0c:	e7a8      	b.n	8008960 <_printf_i+0x150>
 8008a0e:	6923      	ldr	r3, [r4, #16]
 8008a10:	462a      	mov	r2, r5
 8008a12:	4649      	mov	r1, r9
 8008a14:	4640      	mov	r0, r8
 8008a16:	47d0      	blx	sl
 8008a18:	3001      	adds	r0, #1
 8008a1a:	d0ab      	beq.n	8008974 <_printf_i+0x164>
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	079b      	lsls	r3, r3, #30
 8008a20:	d413      	bmi.n	8008a4a <_printf_i+0x23a>
 8008a22:	68e0      	ldr	r0, [r4, #12]
 8008a24:	9b03      	ldr	r3, [sp, #12]
 8008a26:	4298      	cmp	r0, r3
 8008a28:	bfb8      	it	lt
 8008a2a:	4618      	movlt	r0, r3
 8008a2c:	e7a4      	b.n	8008978 <_printf_i+0x168>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	4632      	mov	r2, r6
 8008a32:	4649      	mov	r1, r9
 8008a34:	4640      	mov	r0, r8
 8008a36:	47d0      	blx	sl
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d09b      	beq.n	8008974 <_printf_i+0x164>
 8008a3c:	3501      	adds	r5, #1
 8008a3e:	68e3      	ldr	r3, [r4, #12]
 8008a40:	9903      	ldr	r1, [sp, #12]
 8008a42:	1a5b      	subs	r3, r3, r1
 8008a44:	42ab      	cmp	r3, r5
 8008a46:	dcf2      	bgt.n	8008a2e <_printf_i+0x21e>
 8008a48:	e7eb      	b.n	8008a22 <_printf_i+0x212>
 8008a4a:	2500      	movs	r5, #0
 8008a4c:	f104 0619 	add.w	r6, r4, #25
 8008a50:	e7f5      	b.n	8008a3e <_printf_i+0x22e>
 8008a52:	bf00      	nop
 8008a54:	0800900e 	.word	0x0800900e
 8008a58:	0800901f 	.word	0x0800901f

08008a5c <memcpy>:
 8008a5c:	440a      	add	r2, r1
 8008a5e:	4291      	cmp	r1, r2
 8008a60:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a64:	d100      	bne.n	8008a68 <memcpy+0xc>
 8008a66:	4770      	bx	lr
 8008a68:	b510      	push	{r4, lr}
 8008a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a72:	4291      	cmp	r1, r2
 8008a74:	d1f9      	bne.n	8008a6a <memcpy+0xe>
 8008a76:	bd10      	pop	{r4, pc}

08008a78 <memmove>:
 8008a78:	4288      	cmp	r0, r1
 8008a7a:	b510      	push	{r4, lr}
 8008a7c:	eb01 0402 	add.w	r4, r1, r2
 8008a80:	d902      	bls.n	8008a88 <memmove+0x10>
 8008a82:	4284      	cmp	r4, r0
 8008a84:	4623      	mov	r3, r4
 8008a86:	d807      	bhi.n	8008a98 <memmove+0x20>
 8008a88:	1e43      	subs	r3, r0, #1
 8008a8a:	42a1      	cmp	r1, r4
 8008a8c:	d008      	beq.n	8008aa0 <memmove+0x28>
 8008a8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a96:	e7f8      	b.n	8008a8a <memmove+0x12>
 8008a98:	4402      	add	r2, r0
 8008a9a:	4601      	mov	r1, r0
 8008a9c:	428a      	cmp	r2, r1
 8008a9e:	d100      	bne.n	8008aa2 <memmove+0x2a>
 8008aa0:	bd10      	pop	{r4, pc}
 8008aa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008aa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008aaa:	e7f7      	b.n	8008a9c <memmove+0x24>

08008aac <_free_r>:
 8008aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008aae:	2900      	cmp	r1, #0
 8008ab0:	d044      	beq.n	8008b3c <_free_r+0x90>
 8008ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ab6:	9001      	str	r0, [sp, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f1a1 0404 	sub.w	r4, r1, #4
 8008abe:	bfb8      	it	lt
 8008ac0:	18e4      	addlt	r4, r4, r3
 8008ac2:	f000 f913 	bl	8008cec <__malloc_lock>
 8008ac6:	4a1e      	ldr	r2, [pc, #120]	; (8008b40 <_free_r+0x94>)
 8008ac8:	9801      	ldr	r0, [sp, #4]
 8008aca:	6813      	ldr	r3, [r2, #0]
 8008acc:	b933      	cbnz	r3, 8008adc <_free_r+0x30>
 8008ace:	6063      	str	r3, [r4, #4]
 8008ad0:	6014      	str	r4, [r2, #0]
 8008ad2:	b003      	add	sp, #12
 8008ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ad8:	f000 b90e 	b.w	8008cf8 <__malloc_unlock>
 8008adc:	42a3      	cmp	r3, r4
 8008ade:	d908      	bls.n	8008af2 <_free_r+0x46>
 8008ae0:	6825      	ldr	r5, [r4, #0]
 8008ae2:	1961      	adds	r1, r4, r5
 8008ae4:	428b      	cmp	r3, r1
 8008ae6:	bf01      	itttt	eq
 8008ae8:	6819      	ldreq	r1, [r3, #0]
 8008aea:	685b      	ldreq	r3, [r3, #4]
 8008aec:	1949      	addeq	r1, r1, r5
 8008aee:	6021      	streq	r1, [r4, #0]
 8008af0:	e7ed      	b.n	8008ace <_free_r+0x22>
 8008af2:	461a      	mov	r2, r3
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	b10b      	cbz	r3, 8008afc <_free_r+0x50>
 8008af8:	42a3      	cmp	r3, r4
 8008afa:	d9fa      	bls.n	8008af2 <_free_r+0x46>
 8008afc:	6811      	ldr	r1, [r2, #0]
 8008afe:	1855      	adds	r5, r2, r1
 8008b00:	42a5      	cmp	r5, r4
 8008b02:	d10b      	bne.n	8008b1c <_free_r+0x70>
 8008b04:	6824      	ldr	r4, [r4, #0]
 8008b06:	4421      	add	r1, r4
 8008b08:	1854      	adds	r4, r2, r1
 8008b0a:	42a3      	cmp	r3, r4
 8008b0c:	6011      	str	r1, [r2, #0]
 8008b0e:	d1e0      	bne.n	8008ad2 <_free_r+0x26>
 8008b10:	681c      	ldr	r4, [r3, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	6053      	str	r3, [r2, #4]
 8008b16:	4421      	add	r1, r4
 8008b18:	6011      	str	r1, [r2, #0]
 8008b1a:	e7da      	b.n	8008ad2 <_free_r+0x26>
 8008b1c:	d902      	bls.n	8008b24 <_free_r+0x78>
 8008b1e:	230c      	movs	r3, #12
 8008b20:	6003      	str	r3, [r0, #0]
 8008b22:	e7d6      	b.n	8008ad2 <_free_r+0x26>
 8008b24:	6825      	ldr	r5, [r4, #0]
 8008b26:	1961      	adds	r1, r4, r5
 8008b28:	428b      	cmp	r3, r1
 8008b2a:	bf04      	itt	eq
 8008b2c:	6819      	ldreq	r1, [r3, #0]
 8008b2e:	685b      	ldreq	r3, [r3, #4]
 8008b30:	6063      	str	r3, [r4, #4]
 8008b32:	bf04      	itt	eq
 8008b34:	1949      	addeq	r1, r1, r5
 8008b36:	6021      	streq	r1, [r4, #0]
 8008b38:	6054      	str	r4, [r2, #4]
 8008b3a:	e7ca      	b.n	8008ad2 <_free_r+0x26>
 8008b3c:	b003      	add	sp, #12
 8008b3e:	bd30      	pop	{r4, r5, pc}
 8008b40:	20002364 	.word	0x20002364

08008b44 <sbrk_aligned>:
 8008b44:	b570      	push	{r4, r5, r6, lr}
 8008b46:	4e0e      	ldr	r6, [pc, #56]	; (8008b80 <sbrk_aligned+0x3c>)
 8008b48:	460c      	mov	r4, r1
 8008b4a:	6831      	ldr	r1, [r6, #0]
 8008b4c:	4605      	mov	r5, r0
 8008b4e:	b911      	cbnz	r1, 8008b56 <sbrk_aligned+0x12>
 8008b50:	f000 f8bc 	bl	8008ccc <_sbrk_r>
 8008b54:	6030      	str	r0, [r6, #0]
 8008b56:	4621      	mov	r1, r4
 8008b58:	4628      	mov	r0, r5
 8008b5a:	f000 f8b7 	bl	8008ccc <_sbrk_r>
 8008b5e:	1c43      	adds	r3, r0, #1
 8008b60:	d00a      	beq.n	8008b78 <sbrk_aligned+0x34>
 8008b62:	1cc4      	adds	r4, r0, #3
 8008b64:	f024 0403 	bic.w	r4, r4, #3
 8008b68:	42a0      	cmp	r0, r4
 8008b6a:	d007      	beq.n	8008b7c <sbrk_aligned+0x38>
 8008b6c:	1a21      	subs	r1, r4, r0
 8008b6e:	4628      	mov	r0, r5
 8008b70:	f000 f8ac 	bl	8008ccc <_sbrk_r>
 8008b74:	3001      	adds	r0, #1
 8008b76:	d101      	bne.n	8008b7c <sbrk_aligned+0x38>
 8008b78:	f04f 34ff 	mov.w	r4, #4294967295
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	bd70      	pop	{r4, r5, r6, pc}
 8008b80:	20002368 	.word	0x20002368

08008b84 <_malloc_r>:
 8008b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b88:	1ccd      	adds	r5, r1, #3
 8008b8a:	f025 0503 	bic.w	r5, r5, #3
 8008b8e:	3508      	adds	r5, #8
 8008b90:	2d0c      	cmp	r5, #12
 8008b92:	bf38      	it	cc
 8008b94:	250c      	movcc	r5, #12
 8008b96:	2d00      	cmp	r5, #0
 8008b98:	4607      	mov	r7, r0
 8008b9a:	db01      	blt.n	8008ba0 <_malloc_r+0x1c>
 8008b9c:	42a9      	cmp	r1, r5
 8008b9e:	d905      	bls.n	8008bac <_malloc_r+0x28>
 8008ba0:	230c      	movs	r3, #12
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	2600      	movs	r6, #0
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bac:	4e2e      	ldr	r6, [pc, #184]	; (8008c68 <_malloc_r+0xe4>)
 8008bae:	f000 f89d 	bl	8008cec <__malloc_lock>
 8008bb2:	6833      	ldr	r3, [r6, #0]
 8008bb4:	461c      	mov	r4, r3
 8008bb6:	bb34      	cbnz	r4, 8008c06 <_malloc_r+0x82>
 8008bb8:	4629      	mov	r1, r5
 8008bba:	4638      	mov	r0, r7
 8008bbc:	f7ff ffc2 	bl	8008b44 <sbrk_aligned>
 8008bc0:	1c43      	adds	r3, r0, #1
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	d14d      	bne.n	8008c62 <_malloc_r+0xde>
 8008bc6:	6834      	ldr	r4, [r6, #0]
 8008bc8:	4626      	mov	r6, r4
 8008bca:	2e00      	cmp	r6, #0
 8008bcc:	d140      	bne.n	8008c50 <_malloc_r+0xcc>
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	4631      	mov	r1, r6
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	eb04 0803 	add.w	r8, r4, r3
 8008bd8:	f000 f878 	bl	8008ccc <_sbrk_r>
 8008bdc:	4580      	cmp	r8, r0
 8008bde:	d13a      	bne.n	8008c56 <_malloc_r+0xd2>
 8008be0:	6821      	ldr	r1, [r4, #0]
 8008be2:	3503      	adds	r5, #3
 8008be4:	1a6d      	subs	r5, r5, r1
 8008be6:	f025 0503 	bic.w	r5, r5, #3
 8008bea:	3508      	adds	r5, #8
 8008bec:	2d0c      	cmp	r5, #12
 8008bee:	bf38      	it	cc
 8008bf0:	250c      	movcc	r5, #12
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	4638      	mov	r0, r7
 8008bf6:	f7ff ffa5 	bl	8008b44 <sbrk_aligned>
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	d02b      	beq.n	8008c56 <_malloc_r+0xd2>
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	442b      	add	r3, r5
 8008c02:	6023      	str	r3, [r4, #0]
 8008c04:	e00e      	b.n	8008c24 <_malloc_r+0xa0>
 8008c06:	6822      	ldr	r2, [r4, #0]
 8008c08:	1b52      	subs	r2, r2, r5
 8008c0a:	d41e      	bmi.n	8008c4a <_malloc_r+0xc6>
 8008c0c:	2a0b      	cmp	r2, #11
 8008c0e:	d916      	bls.n	8008c3e <_malloc_r+0xba>
 8008c10:	1961      	adds	r1, r4, r5
 8008c12:	42a3      	cmp	r3, r4
 8008c14:	6025      	str	r5, [r4, #0]
 8008c16:	bf18      	it	ne
 8008c18:	6059      	strne	r1, [r3, #4]
 8008c1a:	6863      	ldr	r3, [r4, #4]
 8008c1c:	bf08      	it	eq
 8008c1e:	6031      	streq	r1, [r6, #0]
 8008c20:	5162      	str	r2, [r4, r5]
 8008c22:	604b      	str	r3, [r1, #4]
 8008c24:	4638      	mov	r0, r7
 8008c26:	f104 060b 	add.w	r6, r4, #11
 8008c2a:	f000 f865 	bl	8008cf8 <__malloc_unlock>
 8008c2e:	f026 0607 	bic.w	r6, r6, #7
 8008c32:	1d23      	adds	r3, r4, #4
 8008c34:	1af2      	subs	r2, r6, r3
 8008c36:	d0b6      	beq.n	8008ba6 <_malloc_r+0x22>
 8008c38:	1b9b      	subs	r3, r3, r6
 8008c3a:	50a3      	str	r3, [r4, r2]
 8008c3c:	e7b3      	b.n	8008ba6 <_malloc_r+0x22>
 8008c3e:	6862      	ldr	r2, [r4, #4]
 8008c40:	42a3      	cmp	r3, r4
 8008c42:	bf0c      	ite	eq
 8008c44:	6032      	streq	r2, [r6, #0]
 8008c46:	605a      	strne	r2, [r3, #4]
 8008c48:	e7ec      	b.n	8008c24 <_malloc_r+0xa0>
 8008c4a:	4623      	mov	r3, r4
 8008c4c:	6864      	ldr	r4, [r4, #4]
 8008c4e:	e7b2      	b.n	8008bb6 <_malloc_r+0x32>
 8008c50:	4634      	mov	r4, r6
 8008c52:	6876      	ldr	r6, [r6, #4]
 8008c54:	e7b9      	b.n	8008bca <_malloc_r+0x46>
 8008c56:	230c      	movs	r3, #12
 8008c58:	603b      	str	r3, [r7, #0]
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	f000 f84c 	bl	8008cf8 <__malloc_unlock>
 8008c60:	e7a1      	b.n	8008ba6 <_malloc_r+0x22>
 8008c62:	6025      	str	r5, [r4, #0]
 8008c64:	e7de      	b.n	8008c24 <_malloc_r+0xa0>
 8008c66:	bf00      	nop
 8008c68:	20002364 	.word	0x20002364

08008c6c <_realloc_r>:
 8008c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c70:	4680      	mov	r8, r0
 8008c72:	4614      	mov	r4, r2
 8008c74:	460e      	mov	r6, r1
 8008c76:	b921      	cbnz	r1, 8008c82 <_realloc_r+0x16>
 8008c78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	f7ff bf81 	b.w	8008b84 <_malloc_r>
 8008c82:	b92a      	cbnz	r2, 8008c90 <_realloc_r+0x24>
 8008c84:	f7ff ff12 	bl	8008aac <_free_r>
 8008c88:	4625      	mov	r5, r4
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c90:	f000 f838 	bl	8008d04 <_malloc_usable_size_r>
 8008c94:	4284      	cmp	r4, r0
 8008c96:	4607      	mov	r7, r0
 8008c98:	d802      	bhi.n	8008ca0 <_realloc_r+0x34>
 8008c9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c9e:	d812      	bhi.n	8008cc6 <_realloc_r+0x5a>
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	4640      	mov	r0, r8
 8008ca4:	f7ff ff6e 	bl	8008b84 <_malloc_r>
 8008ca8:	4605      	mov	r5, r0
 8008caa:	2800      	cmp	r0, #0
 8008cac:	d0ed      	beq.n	8008c8a <_realloc_r+0x1e>
 8008cae:	42bc      	cmp	r4, r7
 8008cb0:	4622      	mov	r2, r4
 8008cb2:	4631      	mov	r1, r6
 8008cb4:	bf28      	it	cs
 8008cb6:	463a      	movcs	r2, r7
 8008cb8:	f7ff fed0 	bl	8008a5c <memcpy>
 8008cbc:	4631      	mov	r1, r6
 8008cbe:	4640      	mov	r0, r8
 8008cc0:	f7ff fef4 	bl	8008aac <_free_r>
 8008cc4:	e7e1      	b.n	8008c8a <_realloc_r+0x1e>
 8008cc6:	4635      	mov	r5, r6
 8008cc8:	e7df      	b.n	8008c8a <_realloc_r+0x1e>
	...

08008ccc <_sbrk_r>:
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	4d06      	ldr	r5, [pc, #24]	; (8008ce8 <_sbrk_r+0x1c>)
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	4608      	mov	r0, r1
 8008cd6:	602b      	str	r3, [r5, #0]
 8008cd8:	f7f9 fb80 	bl	80023dc <_sbrk>
 8008cdc:	1c43      	adds	r3, r0, #1
 8008cde:	d102      	bne.n	8008ce6 <_sbrk_r+0x1a>
 8008ce0:	682b      	ldr	r3, [r5, #0]
 8008ce2:	b103      	cbz	r3, 8008ce6 <_sbrk_r+0x1a>
 8008ce4:	6023      	str	r3, [r4, #0]
 8008ce6:	bd38      	pop	{r3, r4, r5, pc}
 8008ce8:	2000236c 	.word	0x2000236c

08008cec <__malloc_lock>:
 8008cec:	4801      	ldr	r0, [pc, #4]	; (8008cf4 <__malloc_lock+0x8>)
 8008cee:	f000 b811 	b.w	8008d14 <__retarget_lock_acquire_recursive>
 8008cf2:	bf00      	nop
 8008cf4:	20002370 	.word	0x20002370

08008cf8 <__malloc_unlock>:
 8008cf8:	4801      	ldr	r0, [pc, #4]	; (8008d00 <__malloc_unlock+0x8>)
 8008cfa:	f000 b80c 	b.w	8008d16 <__retarget_lock_release_recursive>
 8008cfe:	bf00      	nop
 8008d00:	20002370 	.word	0x20002370

08008d04 <_malloc_usable_size_r>:
 8008d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d08:	1f18      	subs	r0, r3, #4
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	bfbc      	itt	lt
 8008d0e:	580b      	ldrlt	r3, [r1, r0]
 8008d10:	18c0      	addlt	r0, r0, r3
 8008d12:	4770      	bx	lr

08008d14 <__retarget_lock_acquire_recursive>:
 8008d14:	4770      	bx	lr

08008d16 <__retarget_lock_release_recursive>:
 8008d16:	4770      	bx	lr

08008d18 <_init>:
 8008d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1a:	bf00      	nop
 8008d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d1e:	bc08      	pop	{r3}
 8008d20:	469e      	mov	lr, r3
 8008d22:	4770      	bx	lr

08008d24 <_fini>:
 8008d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d26:	bf00      	nop
 8008d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d2a:	bc08      	pop	{r3}
 8008d2c:	469e      	mov	lr, r3
 8008d2e:	4770      	bx	lr


Multi-Functional Light-Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  080090a8  080090a8  000190a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093a4  080093a4  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  080093a4  080093a4  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093a4  080093a4  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093a4  080093a4  000193a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093a8  080093a8  000193a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  080093ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d4  2**0
                  CONTENTS
 10 .bss          00002290  200000d4  200000d4  000200d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002364  20002364  000200d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000137df  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025fb  00000000  00000000  000338e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd0  00000000  00000000  00035ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ee8  00000000  00000000  00036eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022051  00000000  00000000  00037d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b62  00000000  00000000  00059de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d40c2  00000000  00000000  0006e94b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142a0d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004864  00000000  00000000  00142a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d4 	.word	0x200000d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009090 	.word	0x08009090

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d8 	.word	0x200000d8
 80001dc:	08009090 	.word	0x08009090

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

	// store recieved characters one at at time
	set_or_ret_sys_state[num_characters] = recvd_char[0] ;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <HAL_UART_RxCpltCallback+0x80>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <HAL_UART_RxCpltCallback+0x84>)
 80008bc:	7819      	ldrb	r1, [r3, #0]
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <HAL_UART_RxCpltCallback+0x88>)
 80008c0:	5499      	strb	r1, [r3, r2]

	num_characters++ ;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <HAL_UART_RxCpltCallback+0x80>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	3301      	adds	r3, #1
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <HAL_UART_RxCpltCallback+0x80>)
 80008cc:	701a      	strb	r2, [r3, #0]

	if(recvd_char[0] == '\n'){
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <HAL_UART_RxCpltCallback+0x84>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b0a      	cmp	r3, #10
 80008d4:	d121      	bne.n	800091a <HAL_UART_RxCpltCallback+0x6e>
		if(num_characters == 19){
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_UART_RxCpltCallback+0x80>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b13      	cmp	r3, #19
 80008dc:	d108      	bne.n	80008f0 <HAL_UART_RxCpltCallback+0x44>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"set mode\n",9 ) ;
 80008de:	2209      	movs	r2, #9
 80008e0:	4915      	ldr	r1, [pc, #84]	; (8000938 <HAL_UART_RxCpltCallback+0x8c>)
 80008e2:	4816      	ldr	r0, [pc, #88]	; (800093c <HAL_UART_RxCpltCallback+0x90>)
 80008e4:	f006 fb9e 	bl	8007024 <HAL_UART_Transmit_IT>
			UART_set_syst_state = 1 ;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_UART_RxCpltCallback+0x94>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	701a      	strb	r2, [r3, #0]
 80008ee:	e011      	b.n	8000914 <HAL_UART_RxCpltCallback+0x68>
		}else if( num_characters == 7){
 80008f0:	4b0e      	ldr	r3, [pc, #56]	; (800092c <HAL_UART_RxCpltCallback+0x80>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b07      	cmp	r3, #7
 80008f6:	d108      	bne.n	800090a <HAL_UART_RxCpltCallback+0x5e>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"request mode\n", 13) ;
 80008f8:	220d      	movs	r2, #13
 80008fa:	4912      	ldr	r1, [pc, #72]	; (8000944 <HAL_UART_RxCpltCallback+0x98>)
 80008fc:	480f      	ldr	r0, [pc, #60]	; (800093c <HAL_UART_RxCpltCallback+0x90>)
 80008fe:	f006 fb91 	bl	8007024 <HAL_UART_Transmit_IT>
			UART_ret_sys_state = 1 ;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_UART_RxCpltCallback+0x9c>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	e004      	b.n	8000914 <HAL_UART_RxCpltCallback+0x68>
		}else{
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Incorrect status request size\n", 30) ;
 800090a:	221e      	movs	r2, #30
 800090c:	490f      	ldr	r1, [pc, #60]	; (800094c <HAL_UART_RxCpltCallback+0xa0>)
 800090e:	480b      	ldr	r0, [pc, #44]	; (800093c <HAL_UART_RxCpltCallback+0x90>)
 8000910:	f006 fb88 	bl	8007024 <HAL_UART_Transmit_IT>
		}

		num_characters =  0;
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <HAL_UART_RxCpltCallback+0x80>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]

	}
	// recieve character - re-prime receiver to receive single characters at a time
	HAL_UART_Receive_IT(&huart2, (uint8_t*)recvd_char, 1);
 800091a:	2201      	movs	r2, #1
 800091c:	4904      	ldr	r1, [pc, #16]	; (8000930 <HAL_UART_RxCpltCallback+0x84>)
 800091e:	4807      	ldr	r0, [pc, #28]	; (800093c <HAL_UART_RxCpltCallback+0x90>)
 8000920:	f006 fbde 	bl	80070e0 <HAL_UART_Receive_IT>
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20002315 	.word	0x20002315
 8000930:	20002314 	.word	0x20002314
 8000934:	2000002c 	.word	0x2000002c
 8000938:	080091d8 	.word	0x080091d8
 800093c:	20000268 	.word	0x20000268
 8000940:	20002316 	.word	0x20002316
 8000944:	080091e4 	.word	0x080091e4
 8000948:	20002317 	.word	0x20002317
 800094c:	080091f4 	.word	0x080091f4

08000950 <adc_dma_val_processing>:

/**
 * scale up transmit ADC values
 */

void adc_dma_val_processing(){
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0

	if(adc_conv_complete == 1){
 8000956:	4b3c      	ldr	r3, [pc, #240]	; (8000a48 <adc_dma_val_processing+0xf8>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d142      	bne.n	80009e4 <adc_dma_val_processing+0x94>

		adc_conv_complete =0  ;
 800095e:	4b3a      	ldr	r3, [pc, #232]	; (8000a48 <adc_dma_val_processing+0xf8>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
		sum = 0 ;
 8000964:	4b39      	ldr	r3, [pc, #228]	; (8000a4c <adc_dma_val_processing+0xfc>)
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
		for(int i = 0 ; i < adc_buf_len ; i++){
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	e00c      	b.n	800098a <adc_dma_val_processing+0x3a>
			sum += adc_buf[i] ;
 8000970:	4a37      	ldr	r2, [pc, #220]	; (8000a50 <adc_dma_val_processing+0x100>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000978:	461a      	mov	r2, r3
 800097a:	4b34      	ldr	r3, [pc, #208]	; (8000a4c <adc_dma_val_processing+0xfc>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4413      	add	r3, r2
 8000980:	4a32      	ldr	r2, [pc, #200]	; (8000a4c <adc_dma_val_processing+0xfc>)
 8000982:	6013      	str	r3, [r2, #0]
		for(int i = 0 ; i < adc_buf_len ; i++){
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3301      	adds	r3, #1
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000990:	dbee      	blt.n	8000970 <adc_dma_val_processing+0x20>
		}
		raw_adc_dma_val =(uint16_t)(sum/adc_buf_len) ;
 8000992:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <adc_dma_val_processing+0xfc>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	da01      	bge.n	800099e <adc_dma_val_processing+0x4e>
 800099a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800099e:	131b      	asrs	r3, r3, #12
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <adc_dma_val_processing+0x104>)
 80009a4:	801a      	strh	r2, [r3, #0]

		scaled_adc_val = (uint16_t)raw_adc_dma_val*adc_scale_up ; //adc scaled to max =4095
 80009a6:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <adc_dma_val_processing+0x104>)
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fef4 	bl	8000798 <__aeabi_i2d>
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <adc_dma_val_processing+0x108>)
 80009b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b6:	f7ff fc73 	bl	80002a0 <__aeabi_dmul>
 80009ba:	4602      	mov	r2, r0
 80009bc:	460b      	mov	r3, r1
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	f7ff ff53 	bl	800086c <__aeabi_d2uiz>
 80009c6:	4603      	mov	r3, r0
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <adc_dma_val_processing+0x10c>)
 80009cc:	801a      	strh	r2, [r3, #0]

		//capture previous adc cal
		if(adc_val_capture == 1){
 80009ce:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <adc_dma_val_processing+0x110>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d106      	bne.n	80009e4 <adc_dma_val_processing+0x94>
			adc_val_snapshot = scaled_adc_val ;
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <adc_dma_val_processing+0x10c>)
 80009d8:	881a      	ldrh	r2, [r3, #0]
 80009da:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <adc_dma_val_processing+0x114>)
 80009dc:	801a      	strh	r2, [r3, #0]
			adc_val_capture = 0 ;
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <adc_dma_val_processing+0x110>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
		}
	}

	// if ADC movement significant update LED intensity
	if(abs(scaled_adc_val - adc_val_snapshot) >15){
 80009e4:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <adc_dma_val_processing+0x10c>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <adc_dma_val_processing+0x114>)
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	bfb8      	it	lt
 80009f4:	425b      	neglt	r3, r3
 80009f6:	2b0f      	cmp	r3, #15
 80009f8:	dd02      	ble.n	8000a00 <adc_dma_val_processing+0xb0>
	  update_led_via_ADC = 1 ;
 80009fa:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <adc_dma_val_processing+0x118>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	701a      	strb	r2, [r3, #0]
	}

//	 WHITE LED intensity
	LED_intensity =(float)(scaled_adc_val)*(512.0/4095.0)  ;
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <adc_dma_val_processing+0x10c>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	ee07 3a90 	vmov	s15, r3
 8000a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a0c:	ee17 0a90 	vmov	r0, s15
 8000a10:	f7ff fed4 	bl	80007bc <__aeabi_f2d>
 8000a14:	a30a      	add	r3, pc, #40	; (adr r3, 8000a40 <adc_dma_val_processing+0xf0>)
 8000a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a1a:	f7ff fc41 	bl	80002a0 <__aeabi_dmul>
 8000a1e:	4602      	mov	r2, r0
 8000a20:	460b      	mov	r3, r1
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	f7ff ff21 	bl	800086c <__aeabi_d2uiz>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <adc_dma_val_processing+0x11c>)
 8000a30:	801a      	strh	r2, [r3, #0]
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	f3af 8000 	nop.w
 8000a40:	10010010 	.word	0x10010010
 8000a44:	3fc00100 	.word	0x3fc00100
 8000a48:	20002302 	.word	0x20002302
 8000a4c:	200022fc 	.word	0x200022fc
 8000a50:	200002f8 	.word	0x200002f8
 8000a54:	200022f8 	.word	0x200022f8
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	20002304 	.word	0x20002304
 8000a60:	20000002 	.word	0x20000002
 8000a64:	20002300 	.word	0x20002300
 8000a68:	20002306 	.word	0x20002306
 8000a6c:	20000010 	.word	0x20000010

08000a70 <system_state_update>:

/**
 * Depending on input recvd system changes to specified state
 */
void system_state_update(){
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
	// button system state update
	 if(left_button_pressed ==1 && UART_set_syst_state == 0 && UART_ret_sys_state == 0 ){
 8000a74:	4b44      	ldr	r3, [pc, #272]	; (8000b88 <system_state_update+0x118>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d12d      	bne.n	8000ad8 <system_state_update+0x68>
 8000a7c:	4b43      	ldr	r3, [pc, #268]	; (8000b8c <system_state_update+0x11c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d129      	bne.n	8000ad8 <system_state_update+0x68>
 8000a84:	4b42      	ldr	r3, [pc, #264]	; (8000b90 <system_state_update+0x120>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d125      	bne.n	8000ad8 <system_state_update+0x68>

		 button_count++ ;
 8000a8c:	4b41      	ldr	r3, [pc, #260]	; (8000b94 <system_state_update+0x124>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	4a40      	ldr	r2, [pc, #256]	; (8000b94 <system_state_update+0x124>)
 8000a94:	6013      	str	r3, [r2, #0]
		 if(button_count > 2){
 8000a96:	4b3f      	ldr	r3, [pc, #252]	; (8000b94 <system_state_update+0x124>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	dd02      	ble.n	8000aa4 <system_state_update+0x34>
			 button_count = 0 ;
 8000a9e:	4b3d      	ldr	r3, [pc, #244]	; (8000b94 <system_state_update+0x124>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
		 }
		 update_led_via_ADC =  0 ; // don't read ADC by default in next state
 8000aa4:	4b3c      	ldr	r3, [pc, #240]	; (8000b98 <system_state_update+0x128>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
		 // snapshot of ADC taken in next state
		 if(adc_conv_complete == 1){
 8000aaa:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <system_state_update+0x12c>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d102      	bne.n	8000ab8 <system_state_update+0x48>
			 adc_val_capture =1  ; // capture ADC value
 8000ab2:	4b3b      	ldr	r3, [pc, #236]	; (8000ba0 <system_state_update+0x130>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
		 }

		 // Emergency MODE DEFAULT
		 if(button_count != 1){
 8000ab8:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <system_state_update+0x124>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d007      	beq.n	8000ad0 <system_state_update+0x60>
			 strobe_led_Intensity = 256 ;
 8000ac0:	4b38      	ldr	r3, [pc, #224]	; (8000ba4 <system_state_update+0x134>)
 8000ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac6:	801a      	strh	r2, [r3, #0]
			 strobe_delay = 512;
 8000ac8:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <system_state_update+0x138>)
 8000aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ace:	801a      	strh	r2, [r3, #0]
		 }

		 left_button_pressed = 0 ;
 8000ad0:	4b2d      	ldr	r3, [pc, #180]	; (8000b88 <system_state_update+0x118>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	e051      	b.n	8000b7c <system_state_update+0x10c>

	 }
	 // UART system state update
	 else if( left_button_pressed ==0 && UART_set_syst_state == 1 && UART_ret_sys_state == 0){ // System state update to come from only one source
 8000ad8:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <system_state_update+0x118>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d12f      	bne.n	8000b40 <system_state_update+0xd0>
 8000ae0:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <system_state_update+0x11c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d12b      	bne.n	8000b40 <system_state_update+0xd0>
 8000ae8:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <system_state_update+0x120>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d127      	bne.n	8000b40 <system_state_update+0xd0>
		 UART_set_syst_state = 0;
 8000af0:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <system_state_update+0x11c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
		// stop reading ADC when UART set command  received
		if(adc_conv_complete == 1){
 8000af6:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <system_state_update+0x12c>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d105      	bne.n	8000b0a <system_state_update+0x9a>
			adc_val_capture = 1 ; // capture slider value
 8000afe:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <system_state_update+0x130>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	701a      	strb	r2, [r3, #0]
			update_led_via_ADC = 0 ; // dont read until slider moved
 8000b04:	4b24      	ldr	r3, [pc, #144]	; (8000b98 <system_state_update+0x128>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
		}

		 UART_state_update =1;
 8000b0a:	4b28      	ldr	r3, [pc, #160]	; (8000bac <system_state_update+0x13c>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]

		 if(set_or_ret_sys_state[3] == 'F'){
 8000b10:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <system_state_update+0x140>)
 8000b12:	78db      	ldrb	r3, [r3, #3]
 8000b14:	2b46      	cmp	r3, #70	; 0x46
 8000b16:	d103      	bne.n	8000b20 <system_state_update+0xb0>
			 button_count =0 ;
 8000b18:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <system_state_update+0x124>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
		 if(set_or_ret_sys_state[3] == 'F'){
 8000b1e:	e02c      	b.n	8000b7a <system_state_update+0x10a>
		 }
		 else if(set_or_ret_sys_state[3] =='E'){
 8000b20:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <system_state_update+0x140>)
 8000b22:	78db      	ldrb	r3, [r3, #3]
 8000b24:	2b45      	cmp	r3, #69	; 0x45
 8000b26:	d103      	bne.n	8000b30 <system_state_update+0xc0>
			 button_count =1;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <system_state_update+0x124>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	601a      	str	r2, [r3, #0]
		 if(set_or_ret_sys_state[3] == 'F'){
 8000b2e:	e024      	b.n	8000b7a <system_state_update+0x10a>

		 }else{
			 if(set_or_ret_sys_state[3] == 'M'){
 8000b30:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <system_state_update+0x140>)
 8000b32:	78db      	ldrb	r3, [r3, #3]
 8000b34:	2b4d      	cmp	r3, #77	; 0x4d
 8000b36:	d120      	bne.n	8000b7a <system_state_update+0x10a>
				 button_count =2 ;
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <system_state_update+0x124>)
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	601a      	str	r2, [r3, #0]
		 if(set_or_ret_sys_state[3] == 'F'){
 8000b3e:	e01c      	b.n	8000b7a <system_state_update+0x10a>
			 }
		 }
	 }
	 // read system state
	 else{ //dont update the system in any way - read current and previous states
		 if( left_button_pressed ==0 && UART_set_syst_state == 0 && UART_ret_sys_state == 1){
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <system_state_update+0x118>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d119      	bne.n	8000b7c <system_state_update+0x10c>
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <system_state_update+0x11c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d115      	bne.n	8000b7c <system_state_update+0x10c>
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <system_state_update+0x120>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d111      	bne.n	8000b7c <system_state_update+0x10c>

			 // stop reading adc
			if(adc_conv_complete == 1){
 8000b58:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <system_state_update+0x12c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d105      	bne.n	8000b6c <system_state_update+0xfc>
				adc_val_capture = 1 ; // capture slider value
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <system_state_update+0x130>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
				update_led_via_ADC = 0 ; // dont read until slider moved
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <system_state_update+0x128>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
			}

			 UART_ret_sys_state = 0;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <system_state_update+0x120>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
			 READ_SYS =1;
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <system_state_update+0x144>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]

		 }
	 }
}
 8000b78:	e000      	b.n	8000b7c <system_state_update+0x10c>
		 if(set_or_ret_sys_state[3] == 'F'){
 8000b7a:	bf00      	nop
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	2000234a 	.word	0x2000234a
 8000b8c:	20002316 	.word	0x20002316
 8000b90:	20002317 	.word	0x20002317
 8000b94:	200002f0 	.word	0x200002f0
 8000b98:	20002306 	.word	0x20002306
 8000b9c:	20002302 	.word	0x20002302
 8000ba0:	20000002 	.word	0x20000002
 8000ba4:	20000014 	.word	0x20000014
 8000ba8:	20000012 	.word	0x20000012
 8000bac:	20002318 	.word	0x20002318
 8000bb0:	2000002c 	.word	0x2000002c
 8000bb4:	20002320 	.word	0x20002320

08000bb8 <right_button_state_update>:

/**
 * Updates system state after right button pressed in emergency mode
 */
void right_button_state_update(){
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
	if(button_count == 1){
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <right_button_state_update+0x5c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d117      	bne.n	8000bf4 <right_button_state_update+0x3c>
		if(right_button_pressed){
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <right_button_state_update+0x60>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d01e      	beq.n	8000c0a <right_button_state_update+0x52>
			right_button_pressed = 0 ;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <right_button_state_update+0x60>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]

			update_led_via_ADC = 0 ; // dont read adc by default in next state
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <right_button_state_update+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]

			 em_count++ ;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <right_button_state_update+0x68>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <right_button_state_update+0x68>)
 8000be2:	701a      	strb	r2, [r3, #0]

			 if(em_count>2){
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <right_button_state_update+0x68>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d90e      	bls.n	8000c0a <right_button_state_update+0x52>
				 em_count = 0;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <right_button_state_update+0x68>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
		}
	}else if( button_count != 1 && right_button_pressed){
		right_button_pressed = 0; //do not read right button presses triggered
								  // in other states except emergency mode
	}
}
 8000bf2:	e00a      	b.n	8000c0a <right_button_state_update+0x52>
	}else if( button_count != 1 && right_button_pressed){
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <right_button_state_update+0x5c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d006      	beq.n	8000c0a <right_button_state_update+0x52>
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <right_button_state_update+0x60>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <right_button_state_update+0x52>
		right_button_pressed = 0; //do not read right button presses triggered
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <right_button_state_update+0x60>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	200002f0 	.word	0x200002f0
 8000c18:	20002349 	.word	0x20002349
 8000c1c:	20002306 	.word	0x20002306
 8000c20:	200002f4 	.word	0x200002f4

08000c24 <TURN_LED_ON_OFF>:

/**
 * Middle button press turns LED ON/OFF
 */
void TURN_LED_ON_OFF(){
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
	if(middle_button_pressed == 1 && UART_set_syst_state == 0){
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <TURN_LED_ON_OFF+0x84>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d122      	bne.n	8000c76 <TURN_LED_ON_OFF+0x52>
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <TURN_LED_ON_OFF+0x88>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d11e      	bne.n	8000c76 <TURN_LED_ON_OFF+0x52>
		 LED_ON = !LED_ON ;  // turns the LED on OR off
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <TURN_LED_ON_OFF+0x8c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	bf0c      	ite	eq
 8000c40:	2301      	moveq	r3, #1
 8000c42:	2300      	movne	r3, #0
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <TURN_LED_ON_OFF+0x8c>)
 8000c4a:	701a      	strb	r2, [r3, #0]

		 // Middle button press -> LED ON / OFF
		 if(LED_ON == 1){
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <TURN_LED_ON_OFF+0x8c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d104      	bne.n	8000c5e <TURN_LED_ON_OFF+0x3a>
			 htim2.Instance->CCR1 = 1 ; // LED ON
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <TURN_LED_ON_OFF+0x90>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	635a      	str	r2, [r3, #52]	; 0x34
 8000c5c:	e007      	b.n	8000c6e <TURN_LED_ON_OFF+0x4a>
		 }else if(LED_ON ==0){
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <TURN_LED_ON_OFF+0x8c>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d103      	bne.n	8000c6e <TURN_LED_ON_OFF+0x4a>
			 htim2.Instance->CCR1 = 0 ; //LED OFFS
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <TURN_LED_ON_OFF+0x90>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	635a      	str	r2, [r3, #52]	; 0x34
		 }

		 middle_button_pressed = 0 ;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <TURN_LED_ON_OFF+0x84>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
			LED_ON  = 1 ;
		}else{
			LED_ON = 0 ;
		}
	}
}
 8000c74:	e012      	b.n	8000c9c <TURN_LED_ON_OFF+0x78>
	else if(middle_button_pressed == 0 && UART_state_update == 1  ){
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <TURN_LED_ON_OFF+0x84>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d10e      	bne.n	8000c9c <TURN_LED_ON_OFF+0x78>
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <TURN_LED_ON_OFF+0x94>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d10a      	bne.n	8000c9c <TURN_LED_ON_OFF+0x78>
		if( state>0){
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <TURN_LED_ON_OFF+0x98>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <TURN_LED_ON_OFF+0x72>
			LED_ON  = 1 ;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <TURN_LED_ON_OFF+0x8c>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
}
 8000c94:	e002      	b.n	8000c9c <TURN_LED_ON_OFF+0x78>
			LED_ON = 0 ;
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <TURN_LED_ON_OFF+0x8c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20002348 	.word	0x20002348
 8000cac:	20002316 	.word	0x20002316
 8000cb0:	20002307 	.word	0x20002307
 8000cb4:	20000184 	.word	0x20000184
 8000cb8:	20002318 	.word	0x20002318
 8000cbc:	2000231a 	.word	0x2000231a

08000cc0 <EM_mode_Strobe>:

/**
 * LED strobed with provided number of ms
 */
void EM_mode_Strobe(uint16_t strobe_delay){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]

	 // default delay 512ms
	 timePassed =HAL_GetTick() - strobe_ticks ;
 8000cca:	f001 fe17 	bl	80028fc <HAL_GetTick>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <EM_mode_Strobe+0x84>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	4a1c      	ldr	r2, [pc, #112]	; (8000d48 <EM_mode_Strobe+0x88>)
 8000cd8:	6013      	str	r3, [r2, #0]
	 // time passed >512
	 if( timePassed >= strobe_delay && led_strobe_on == 0){
 8000cda:	88fa      	ldrh	r2, [r7, #6]
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <EM_mode_Strobe+0x88>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d80a      	bhi.n	8000cfa <EM_mode_Strobe+0x3a>
 8000ce4:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <EM_mode_Strobe+0x8c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d106      	bne.n	8000cfa <EM_mode_Strobe+0x3a>
		 led_strobe_on =1 ;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <EM_mode_Strobe+0x8c>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
		 htim2.Instance->CCR1 = 0 ;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <EM_mode_Strobe+0x90>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	635a      	str	r2, [r3, #52]	; 0x34
	 }
	 // time Passed > 1024
	 if(timePassed >= 1024 && led_strobe_on == 1){
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <EM_mode_Strobe+0x88>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d02:	d31a      	bcc.n	8000d3a <EM_mode_Strobe+0x7a>
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <EM_mode_Strobe+0x8c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d116      	bne.n	8000d3a <EM_mode_Strobe+0x7a>
		 strobe_ticks =  HAL_GetTick() ; // update current time
 8000d0c:	f001 fdf6 	bl	80028fc <HAL_GetTick>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4a0c      	ldr	r2, [pc, #48]	; (8000d44 <EM_mode_Strobe+0x84>)
 8000d14:	6013      	str	r3, [r2, #0]
		 led_strobe_on = 0 ;
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <EM_mode_Strobe+0x8c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]

		 if(update_led_via_ADC ==1){ // update LED intensity if the slider moved
 8000d1c:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <EM_mode_Strobe+0x94>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d105      	bne.n	8000d30 <EM_mode_Strobe+0x70>
			 htim2.Instance->CCR1 = LED_intensity ;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <EM_mode_Strobe+0x98>)
 8000d26:	881a      	ldrh	r2, [r3, #0]
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <EM_mode_Strobe+0x90>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	635a      	str	r2, [r3, #52]	; 0x34
		 }else{ // if no slider movement strobe with default intensity
			 htim2.Instance->CCR1 = strobe_led_Intensity;
		 }
	 }

}
 8000d2e:	e004      	b.n	8000d3a <EM_mode_Strobe+0x7a>
			 htim2.Instance->CCR1 = strobe_led_Intensity;
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <EM_mode_Strobe+0x9c>)
 8000d32:	881a      	ldrh	r2, [r3, #0]
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <EM_mode_Strobe+0x90>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20002308 	.word	0x20002308
 8000d48:	20002310 	.word	0x20002310
 8000d4c:	2000230c 	.word	0x2000230c
 8000d50:	20000184 	.word	0x20000184
 8000d54:	20002306 	.word	0x20002306
 8000d58:	20000010 	.word	0x20000010
 8000d5c:	20000014 	.word	0x20000014

08000d60 <convert_UART_state_params_to_Int>:
void convert_UART_state_params_to_Int(){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
	if(UART_set_syst_state) {
 8000d66:	4b76      	ldr	r3, [pc, #472]	; (8000f40 <convert_UART_state_params_to_Int+0x1e0>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 80e4 	beq.w	8000f38 <convert_UART_state_params_to_Int+0x1d8>
		for(int i = 0; i < 19 ; i++){
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	e05f      	b.n	8000e36 <convert_UART_state_params_to_Int+0xd6>
			switch(i){
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3b05      	subs	r3, #5
 8000d7a:	2b0a      	cmp	r3, #10
 8000d7c:	d857      	bhi.n	8000e2e <convert_UART_state_params_to_Int+0xce>
 8000d7e:	a201      	add	r2, pc, #4	; (adr r2, 8000d84 <convert_UART_state_params_to_Int+0x24>)
 8000d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d84:	08000db1 	.word	0x08000db1
 8000d88:	08000dbf 	.word	0x08000dbf
 8000d8c:	08000dcd 	.word	0x08000dcd
 8000d90:	08000e2f 	.word	0x08000e2f
 8000d94:	08000ddb 	.word	0x08000ddb
 8000d98:	08000de9 	.word	0x08000de9
 8000d9c:	08000df7 	.word	0x08000df7
 8000da0:	08000e2f 	.word	0x08000e2f
 8000da4:	08000e05 	.word	0x08000e05
 8000da8:	08000e13 	.word	0x08000e13
 8000dac:	08000e21 	.word	0x08000e21
			case 5:
				STATE[0]= set_or_ret_sys_state[i] ;
 8000db0:	4a64      	ldr	r2, [pc, #400]	; (8000f44 <convert_UART_state_params_to_Int+0x1e4>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	781a      	ldrb	r2, [r3, #0]
 8000db8:	4b63      	ldr	r3, [pc, #396]	; (8000f48 <convert_UART_state_params_to_Int+0x1e8>)
 8000dba:	701a      	strb	r2, [r3, #0]
				break;
 8000dbc:	e038      	b.n	8000e30 <convert_UART_state_params_to_Int+0xd0>
			case 6:
				STATE[1]= set_or_ret_sys_state[i] ;
 8000dbe:	4a61      	ldr	r2, [pc, #388]	; (8000f44 <convert_UART_state_params_to_Int+0x1e4>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	781a      	ldrb	r2, [r3, #0]
 8000dc6:	4b60      	ldr	r3, [pc, #384]	; (8000f48 <convert_UART_state_params_to_Int+0x1e8>)
 8000dc8:	705a      	strb	r2, [r3, #1]
				break;
 8000dca:	e031      	b.n	8000e30 <convert_UART_state_params_to_Int+0xd0>
			case 7:
				STATE[2] = set_or_ret_sys_state[i] ;
 8000dcc:	4a5d      	ldr	r2, [pc, #372]	; (8000f44 <convert_UART_state_params_to_Int+0x1e4>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	781a      	ldrb	r2, [r3, #0]
 8000dd4:	4b5c      	ldr	r3, [pc, #368]	; (8000f48 <convert_UART_state_params_to_Int+0x1e8>)
 8000dd6:	709a      	strb	r2, [r3, #2]
				break;
 8000dd8:	e02a      	b.n	8000e30 <convert_UART_state_params_to_Int+0xd0>

			case 9:
				PARAM1[0] = set_or_ret_sys_state[i];
 8000dda:	4a5a      	ldr	r2, [pc, #360]	; (8000f44 <convert_UART_state_params_to_Int+0x1e4>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4413      	add	r3, r2
 8000de0:	781a      	ldrb	r2, [r3, #0]
 8000de2:	4b5a      	ldr	r3, [pc, #360]	; (8000f4c <convert_UART_state_params_to_Int+0x1ec>)
 8000de4:	701a      	strb	r2, [r3, #0]
				break;
 8000de6:	e023      	b.n	8000e30 <convert_UART_state_params_to_Int+0xd0>
			case 10:
				PARAM1[1] = set_or_ret_sys_state[i] ;
 8000de8:	4a56      	ldr	r2, [pc, #344]	; (8000f44 <convert_UART_state_params_to_Int+0x1e4>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	781a      	ldrb	r2, [r3, #0]
 8000df0:	4b56      	ldr	r3, [pc, #344]	; (8000f4c <convert_UART_state_params_to_Int+0x1ec>)
 8000df2:	705a      	strb	r2, [r3, #1]
				break;
 8000df4:	e01c      	b.n	8000e30 <convert_UART_state_params_to_Int+0xd0>
			case 11:
				PARAM1[2] = set_or_ret_sys_state[i] ;
 8000df6:	4a53      	ldr	r2, [pc, #332]	; (8000f44 <convert_UART_state_params_to_Int+0x1e4>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	781a      	ldrb	r2, [r3, #0]
 8000dfe:	4b53      	ldr	r3, [pc, #332]	; (8000f4c <convert_UART_state_params_to_Int+0x1ec>)
 8000e00:	709a      	strb	r2, [r3, #2]
				break ;
 8000e02:	e015      	b.n	8000e30 <convert_UART_state_params_to_Int+0xd0>
			case 13:
				PARAM2[0] = set_or_ret_sys_state[i] ;
 8000e04:	4a4f      	ldr	r2, [pc, #316]	; (8000f44 <convert_UART_state_params_to_Int+0x1e4>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	781a      	ldrb	r2, [r3, #0]
 8000e0c:	4b50      	ldr	r3, [pc, #320]	; (8000f50 <convert_UART_state_params_to_Int+0x1f0>)
 8000e0e:	701a      	strb	r2, [r3, #0]
				break;
 8000e10:	e00e      	b.n	8000e30 <convert_UART_state_params_to_Int+0xd0>
			case 14:
				PARAM2[1] = set_or_ret_sys_state[i] ;
 8000e12:	4a4c      	ldr	r2, [pc, #304]	; (8000f44 <convert_UART_state_params_to_Int+0x1e4>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4413      	add	r3, r2
 8000e18:	781a      	ldrb	r2, [r3, #0]
 8000e1a:	4b4d      	ldr	r3, [pc, #308]	; (8000f50 <convert_UART_state_params_to_Int+0x1f0>)
 8000e1c:	705a      	strb	r2, [r3, #1]
				break;
 8000e1e:	e007      	b.n	8000e30 <convert_UART_state_params_to_Int+0xd0>
			case 15:
				PARAM2[2] = set_or_ret_sys_state[i ];
 8000e20:	4a48      	ldr	r2, [pc, #288]	; (8000f44 <convert_UART_state_params_to_Int+0x1e4>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	781a      	ldrb	r2, [r3, #0]
 8000e28:	4b49      	ldr	r3, [pc, #292]	; (8000f50 <convert_UART_state_params_to_Int+0x1f0>)
 8000e2a:	709a      	strb	r2, [r3, #2]
				break;
 8000e2c:	e000      	b.n	8000e30 <convert_UART_state_params_to_Int+0xd0>

			default:
				break ;
 8000e2e:	bf00      	nop
		for(int i = 0; i < 19 ; i++){
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3301      	adds	r3, #1
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b12      	cmp	r3, #18
 8000e3a:	dd9c      	ble.n	8000d76 <convert_UART_state_params_to_Int+0x16>
			}

		}

		state = atoi(STATE) ;
 8000e3c:	4842      	ldr	r0, [pc, #264]	; (8000f48 <convert_UART_state_params_to_Int+0x1e8>)
 8000e3e:	f007 fbf7 	bl	8008630 <atoi>
 8000e42:	4603      	mov	r3, r0
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	4b43      	ldr	r3, [pc, #268]	; (8000f54 <convert_UART_state_params_to_Int+0x1f4>)
 8000e48:	801a      	strh	r2, [r3, #0]
		param1 = atoi(PARAM1);
 8000e4a:	4840      	ldr	r0, [pc, #256]	; (8000f4c <convert_UART_state_params_to_Int+0x1ec>)
 8000e4c:	f007 fbf0 	bl	8008630 <atoi>
 8000e50:	4603      	mov	r3, r0
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	4b40      	ldr	r3, [pc, #256]	; (8000f58 <convert_UART_state_params_to_Int+0x1f8>)
 8000e56:	801a      	strh	r2, [r3, #0]
		// problem - perform check for if non integer characters are passed!
		if(strcmp(PARAM2, "000") == 0 ){
 8000e58:	4940      	ldr	r1, [pc, #256]	; (8000f5c <convert_UART_state_params_to_Int+0x1fc>)
 8000e5a:	483d      	ldr	r0, [pc, #244]	; (8000f50 <convert_UART_state_params_to_Int+0x1f0>)
 8000e5c:	f7ff f9c0 	bl	80001e0 <strcmp>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d146      	bne.n	8000ef4 <convert_UART_state_params_to_Int+0x194>

			param2 = atoi(PARAM2) ;  // SOS MORSE OUTPUT
 8000e66:	483a      	ldr	r0, [pc, #232]	; (8000f50 <convert_UART_state_params_to_Int+0x1f0>)
 8000e68:	f007 fbe2 	bl	8008630 <atoi>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	4b3b      	ldr	r3, [pc, #236]	; (8000f60 <convert_UART_state_params_to_Int+0x200>)
 8000e72:	801a      	strh	r2, [r3, #0]

			ME_param2[0] = param2/100 + 48;
 8000e74:	4b3a      	ldr	r3, [pc, #232]	; (8000f60 <convert_UART_state_params_to_Int+0x200>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	4a3a      	ldr	r2, [pc, #232]	; (8000f64 <convert_UART_state_params_to_Int+0x204>)
 8000e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7e:	095b      	lsrs	r3, r3, #5
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	3330      	adds	r3, #48	; 0x30
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <convert_UART_state_params_to_Int+0x208>)
 8000e8a:	701a      	strb	r2, [r3, #0]
			ME_param2[1] = (param2  -(param2/100)*100)/10 +48 ;
 8000e8c:	4b34      	ldr	r3, [pc, #208]	; (8000f60 <convert_UART_state_params_to_Int+0x200>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	4b33      	ldr	r3, [pc, #204]	; (8000f60 <convert_UART_state_params_to_Int+0x200>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	4a33      	ldr	r2, [pc, #204]	; (8000f64 <convert_UART_state_params_to_Int+0x204>)
 8000e98:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9c:	095b      	lsrs	r3, r3, #5
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8000ea6:	fb02 f303 	mul.w	r3, r2, r3
 8000eaa:	440b      	add	r3, r1
 8000eac:	4a2f      	ldr	r2, [pc, #188]	; (8000f6c <convert_UART_state_params_to_Int+0x20c>)
 8000eae:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb2:	1092      	asrs	r2, r2, #2
 8000eb4:	17db      	asrs	r3, r3, #31
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	3330      	adds	r3, #48	; 0x30
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <convert_UART_state_params_to_Int+0x208>)
 8000ec0:	705a      	strb	r2, [r3, #1]
			ME_param2[2] = (param2 - (param2/10)*10) + 48 ;
 8000ec2:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <convert_UART_state_params_to_Int+0x200>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b25      	ldr	r3, [pc, #148]	; (8000f60 <convert_UART_state_params_to_Int+0x200>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	4928      	ldr	r1, [pc, #160]	; (8000f70 <convert_UART_state_params_to_Int+0x210>)
 8000ece:	fba1 1303 	umull	r1, r3, r1, r3
 8000ed2:	08db      	lsrs	r3, r3, #3
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4619      	mov	r1, r3
 8000eda:	0149      	lsls	r1, r1, #5
 8000edc:	1ac9      	subs	r1, r1, r3
 8000ede:	0089      	lsls	r1, r1, #2
 8000ee0:	1acb      	subs	r3, r1, r3
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	4413      	add	r3, r2
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	3330      	adds	r3, #48	; 0x30
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <convert_UART_state_params_to_Int+0x208>)
 8000ef0:	709a      	strb	r2, [r3, #2]
			custom_morse_msg_rcvd = 1;
		}


	}
}
 8000ef2:	e021      	b.n	8000f38 <convert_UART_state_params_to_Int+0x1d8>
		else if( strcmp(PARAM2, "000") != 0 ){
 8000ef4:	4919      	ldr	r1, [pc, #100]	; (8000f5c <convert_UART_state_params_to_Int+0x1fc>)
 8000ef6:	4816      	ldr	r0, [pc, #88]	; (8000f50 <convert_UART_state_params_to_Int+0x1f0>)
 8000ef8:	f7ff f972 	bl	80001e0 <strcmp>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d01a      	beq.n	8000f38 <convert_UART_state_params_to_Int+0x1d8>
			Custom_Morse_Msg[0] = PARAM2[0] ; // CUSTOM MORSE output - declare variable to store the output
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <convert_UART_state_params_to_Int+0x1f0>)
 8000f04:	781a      	ldrb	r2, [r3, #0]
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <convert_UART_state_params_to_Int+0x214>)
 8000f08:	701a      	strb	r2, [r3, #0]
			Custom_Morse_Msg[1] = PARAM2[1] ;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <convert_UART_state_params_to_Int+0x1f0>)
 8000f0c:	785a      	ldrb	r2, [r3, #1]
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <convert_UART_state_params_to_Int+0x214>)
 8000f10:	705a      	strb	r2, [r3, #1]
			Custom_Morse_Msg[2] = PARAM2[2] ;
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <convert_UART_state_params_to_Int+0x1f0>)
 8000f14:	789a      	ldrb	r2, [r3, #2]
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <convert_UART_state_params_to_Int+0x214>)
 8000f18:	709a      	strb	r2, [r3, #2]
			ME_param2[0] = Custom_Morse_Msg[0];
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <convert_UART_state_params_to_Int+0x214>)
 8000f1c:	781a      	ldrb	r2, [r3, #0]
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <convert_UART_state_params_to_Int+0x208>)
 8000f20:	701a      	strb	r2, [r3, #0]
			ME_param2[1] = Custom_Morse_Msg[1] ;
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <convert_UART_state_params_to_Int+0x214>)
 8000f24:	785a      	ldrb	r2, [r3, #1]
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <convert_UART_state_params_to_Int+0x208>)
 8000f28:	705a      	strb	r2, [r3, #1]
			ME_param2[2] = Custom_Morse_Msg[2] ;
 8000f2a:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <convert_UART_state_params_to_Int+0x214>)
 8000f2c:	789a      	ldrb	r2, [r3, #2]
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <convert_UART_state_params_to_Int+0x208>)
 8000f30:	709a      	strb	r2, [r3, #2]
			custom_morse_msg_rcvd = 1;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <convert_UART_state_params_to_Int+0x218>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20002316 	.word	0x20002316
 8000f44:	2000002c 	.word	0x2000002c
 8000f48:	20000040 	.word	0x20000040
 8000f4c:	20000044 	.word	0x20000044
 8000f50:	20000048 	.word	0x20000048
 8000f54:	2000231a 	.word	0x2000231a
 8000f58:	2000231c 	.word	0x2000231c
 8000f5c:	08009214 	.word	0x08009214
 8000f60:	2000231e 	.word	0x2000231e
 8000f64:	51eb851f 	.word	0x51eb851f
 8000f68:	20000054 	.word	0x20000054
 8000f6c:	66666667 	.word	0x66666667
 8000f70:	cccccccd 	.word	0xcccccccd
 8000f74:	2000004c 	.word	0x2000004c
 8000f78:	20002319 	.word	0x20002319

08000f7c <Emergency_Mode_State_Update>:

/**
 * Function updates the necessary states/ values when UART command reached to
 * update the system state
 */
void Emergency_Mode_State_Update(){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0

	if(UART_state_update == 1 && state > 0 && set_or_ret_sys_state[3] =='E'){
 8000f80:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <Emergency_Mode_State_Update+0xbc>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d14c      	bne.n	8001022 <Emergency_Mode_State_Update+0xa6>
 8000f88:	4b2c      	ldr	r3, [pc, #176]	; (800103c <Emergency_Mode_State_Update+0xc0>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d048      	beq.n	8001022 <Emergency_Mode_State_Update+0xa6>
 8000f90:	4b2b      	ldr	r3, [pc, #172]	; (8001040 <Emergency_Mode_State_Update+0xc4>)
 8000f92:	78db      	ldrb	r3, [r3, #3]
 8000f94:	2b45      	cmp	r3, #69	; 0x45
 8000f96:	d144      	bne.n	8001022 <Emergency_Mode_State_Update+0xa6>
		// Dont read ADC
		if(adc_conv_complete == 1){
 8000f98:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <Emergency_Mode_State_Update+0xc8>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d105      	bne.n	8000fac <Emergency_Mode_State_Update+0x30>
			adc_val_capture = 1 ; // capture slider value
 8000fa0:	4b29      	ldr	r3, [pc, #164]	; (8001048 <Emergency_Mode_State_Update+0xcc>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
			update_led_via_ADC = 0 ; // dont read until slider moved
 8000fa6:	4b29      	ldr	r3, [pc, #164]	; (800104c <Emergency_Mode_State_Update+0xd0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
		}

		//update LED intensity
		strobe_led_Intensity = state;
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <Emergency_Mode_State_Update+0xc0>)
 8000fae:	881a      	ldrh	r2, [r3, #0]
 8000fb0:	4b27      	ldr	r3, [pc, #156]	; (8001050 <Emergency_Mode_State_Update+0xd4>)
 8000fb2:	801a      	strh	r2, [r3, #0]

		// strobe
		if(param1 > 0 ){
 8000fb4:	4b27      	ldr	r3, [pc, #156]	; (8001054 <Emergency_Mode_State_Update+0xd8>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d007      	beq.n	8000fcc <Emergency_Mode_State_Update+0x50>
			em_count = 0 ;
 8000fbc:	4b26      	ldr	r3, [pc, #152]	; (8001058 <Emergency_Mode_State_Update+0xdc>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
			strobe_delay = param1 ;  // update the ON/off time of strobe
 8000fc2:	4b24      	ldr	r3, [pc, #144]	; (8001054 <Emergency_Mode_State_Update+0xd8>)
 8000fc4:	881a      	ldrh	r2, [r3, #0]
 8000fc6:	4b25      	ldr	r3, [pc, #148]	; (800105c <Emergency_Mode_State_Update+0xe0>)
 8000fc8:	801a      	strh	r2, [r3, #0]
 8000fca:	e027      	b.n	800101c <Emergency_Mode_State_Update+0xa0>

		}
		// SOS output
		else if(param1 == 0 && param2 == 0 && custom_morse_msg_rcvd == 0 ){
 8000fcc:	4b21      	ldr	r3, [pc, #132]	; (8001054 <Emergency_Mode_State_Update+0xd8>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d110      	bne.n	8000ff6 <Emergency_Mode_State_Update+0x7a>
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <Emergency_Mode_State_Update+0xe4>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10c      	bne.n	8000ff6 <Emergency_Mode_State_Update+0x7a>
 8000fdc:	4b21      	ldr	r3, [pc, #132]	; (8001064 <Emergency_Mode_State_Update+0xe8>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d108      	bne.n	8000ff6 <Emergency_Mode_State_Update+0x7a>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"SOS MORSE\n", 10) ;
 8000fe4:	220a      	movs	r2, #10
 8000fe6:	4920      	ldr	r1, [pc, #128]	; (8001068 <Emergency_Mode_State_Update+0xec>)
 8000fe8:	4820      	ldr	r0, [pc, #128]	; (800106c <Emergency_Mode_State_Update+0xf0>)
 8000fea:	f006 f81b 	bl	8007024 <HAL_UART_Transmit_IT>
			em_count =1 ; // SOS mode
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <Emergency_Mode_State_Update+0xdc>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	e012      	b.n	800101c <Emergency_Mode_State_Update+0xa0>
		}
		// CUSTOM morse msg received
		else{
			if(param1 == 0 && custom_morse_msg_rcvd ==1 ){
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <Emergency_Mode_State_Update+0xd8>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10e      	bne.n	800101c <Emergency_Mode_State_Update+0xa0>
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <Emergency_Mode_State_Update+0xe8>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d10a      	bne.n	800101c <Emergency_Mode_State_Update+0xa0>
				custom_morse_msg_rcvd = 0;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <Emergency_Mode_State_Update+0xe8>)
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart2, (uint8_t*)"CUSTOM MORSE\n", 13) ;
 800100c:	220d      	movs	r2, #13
 800100e:	4918      	ldr	r1, [pc, #96]	; (8001070 <Emergency_Mode_State_Update+0xf4>)
 8001010:	4816      	ldr	r0, [pc, #88]	; (800106c <Emergency_Mode_State_Update+0xf0>)
 8001012:	f006 f807 	bl	8007024 <HAL_UART_Transmit_IT>
				em_count = 2 ; // CUSTOM MORSE
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <Emergency_Mode_State_Update+0xdc>)
 8001018:	2202      	movs	r2, #2
 800101a:	701a      	strb	r2, [r3, #0]

			}
		}


		UART_state_update = 0;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <Emergency_Mode_State_Update+0xbc>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
	}
	 // copy previous states information
		 ME_state = strobe_led_Intensity ;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <Emergency_Mode_State_Update+0xd4>)
 8001024:	881a      	ldrh	r2, [r3, #0]
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <Emergency_Mode_State_Update+0xf8>)
 8001028:	801a      	strh	r2, [r3, #0]
		 ME_param1 =  strobe_delay;
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <Emergency_Mode_State_Update+0xe0>)
 800102c:	881a      	ldrh	r2, [r3, #0]
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <Emergency_Mode_State_Update+0xfc>)
 8001030:	801a      	strh	r2, [r3, #0]
//			ME_param2[1] = Custom_Morse_Msg[1] ;
//			ME_param2[2] = Custom_Morse_Msg[2] ;
//		}


}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20002318 	.word	0x20002318
 800103c:	2000231a 	.word	0x2000231a
 8001040:	2000002c 	.word	0x2000002c
 8001044:	20002302 	.word	0x20002302
 8001048:	20000002 	.word	0x20000002
 800104c:	20002306 	.word	0x20002306
 8001050:	20000014 	.word	0x20000014
 8001054:	2000231c 	.word	0x2000231c
 8001058:	200002f4 	.word	0x200002f4
 800105c:	20000012 	.word	0x20000012
 8001060:	2000231e 	.word	0x2000231e
 8001064:	20002319 	.word	0x20002319
 8001068:	08009218 	.word	0x08009218
 800106c:	20000268 	.word	0x20000268
 8001070:	08009224 	.word	0x08009224
 8001074:	20002326 	.word	0x20002326
 8001078:	20002328 	.word	0x20002328

0800107c <Mood_Mode_State_Update>:

void Mood_Mode_State_Update(){
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	if(UART_state_update ==1  && set_or_ret_sys_state[3] == 'M'){
 8001080:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <Mood_Mode_State_Update+0x3c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d112      	bne.n	80010ae <Mood_Mode_State_Update+0x32>
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <Mood_Mode_State_Update+0x40>)
 800108a:	78db      	ldrb	r3, [r3, #3]
 800108c:	2b4d      	cmp	r3, #77	; 0x4d
 800108e:	d10e      	bne.n	80010ae <Mood_Mode_State_Update+0x32>

		// set R channel intensity
		R_channel_Intensity = state ;
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <Mood_Mode_State_Update+0x44>)
 8001092:	881a      	ldrh	r2, [r3, #0]
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <Mood_Mode_State_Update+0x48>)
 8001096:	801a      	strh	r2, [r3, #0]
		// set G channel intensity
		G_channel_Intensity = param1 ;
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <Mood_Mode_State_Update+0x4c>)
 800109a:	881a      	ldrh	r2, [r3, #0]
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <Mood_Mode_State_Update+0x50>)
 800109e:	801a      	strh	r2, [r3, #0]
		// set B channel intensity
		B_channel_Intensity = param2 ;
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <Mood_Mode_State_Update+0x54>)
 80010a2:	881a      	ldrh	r2, [r3, #0]
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <Mood_Mode_State_Update+0x58>)
 80010a6:	801a      	strh	r2, [r3, #0]

		UART_state_update = 0;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <Mood_Mode_State_Update+0x3c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
	}
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	20002318 	.word	0x20002318
 80010bc:	2000002c 	.word	0x2000002c
 80010c0:	2000231a 	.word	0x2000231a
 80010c4:	20000016 	.word	0x20000016
 80010c8:	2000231c 	.word	0x2000231c
 80010cc:	20000018 	.word	0x20000018
 80010d0:	2000231e 	.word	0x2000231e
 80010d4:	2000001a 	.word	0x2000001a

080010d8 <Request_return_system_state>:

void Request_return_system_state(){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
	if(READ_SYS ==1 ){
 80010de:	4b6c      	ldr	r3, [pc, #432]	; (8001290 <Request_return_system_state+0x1b8>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	f040 8348 	bne.w	8001778 <Request_return_system_state+0x6a0>
		// flash light mode
		if(set_or_ret_sys_state[3] == 'F'){
 80010e8:	4b6a      	ldr	r3, [pc, #424]	; (8001294 <Request_return_system_state+0x1bc>)
 80010ea:	78db      	ldrb	r3, [r3, #3]
 80010ec:	2b46      	cmp	r3, #70	; 0x46
 80010ee:	f040 80e9 	bne.w	80012c4 <Request_return_system_state+0x1ec>
			/* here manual copy*/
			ret_state[0] = MF_state/100 + 48 ; // hundred
 80010f2:	4b69      	ldr	r3, [pc, #420]	; (8001298 <Request_return_system_state+0x1c0>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	4a69      	ldr	r2, [pc, #420]	; (800129c <Request_return_system_state+0x1c4>)
 80010f8:	fba2 2303 	umull	r2, r3, r2, r3
 80010fc:	095b      	lsrs	r3, r3, #5
 80010fe:	b29b      	uxth	r3, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	3330      	adds	r3, #48	; 0x30
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b66      	ldr	r3, [pc, #408]	; (80012a0 <Request_return_system_state+0x1c8>)
 8001108:	701a      	strb	r2, [r3, #0]
			ret_state[1] = (MF_state -(MF_state/100)*100)/10 + 48 ; //tens
 800110a:	4b63      	ldr	r3, [pc, #396]	; (8001298 <Request_return_system_state+0x1c0>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	4619      	mov	r1, r3
 8001110:	4b61      	ldr	r3, [pc, #388]	; (8001298 <Request_return_system_state+0x1c0>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	4a61      	ldr	r2, [pc, #388]	; (800129c <Request_return_system_state+0x1c4>)
 8001116:	fba2 2303 	umull	r2, r3, r2, r3
 800111a:	095b      	lsrs	r3, r3, #5
 800111c:	b29b      	uxth	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001124:	fb02 f303 	mul.w	r3, r2, r3
 8001128:	440b      	add	r3, r1
 800112a:	4a5e      	ldr	r2, [pc, #376]	; (80012a4 <Request_return_system_state+0x1cc>)
 800112c:	fb82 1203 	smull	r1, r2, r2, r3
 8001130:	1092      	asrs	r2, r2, #2
 8001132:	17db      	asrs	r3, r3, #31
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	3330      	adds	r3, #48	; 0x30
 800113a:	b2da      	uxtb	r2, r3
 800113c:	4b58      	ldr	r3, [pc, #352]	; (80012a0 <Request_return_system_state+0x1c8>)
 800113e:	705a      	strb	r2, [r3, #1]
			ret_state[2] = (MF_state - (MF_state/10)*10) + 48 ;  //units
 8001140:	4b55      	ldr	r3, [pc, #340]	; (8001298 <Request_return_system_state+0x1c0>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b54      	ldr	r3, [pc, #336]	; (8001298 <Request_return_system_state+0x1c0>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	4957      	ldr	r1, [pc, #348]	; (80012a8 <Request_return_system_state+0x1d0>)
 800114c:	fba1 1303 	umull	r1, r3, r1, r3
 8001150:	08db      	lsrs	r3, r3, #3
 8001152:	b29b      	uxth	r3, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	4619      	mov	r1, r3
 8001158:	0149      	lsls	r1, r1, #5
 800115a:	1ac9      	subs	r1, r1, r3
 800115c:	0089      	lsls	r1, r1, #2
 800115e:	1acb      	subs	r3, r1, r3
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	4413      	add	r3, r2
 8001166:	b2db      	uxtb	r3, r3
 8001168:	3330      	adds	r3, #48	; 0x30
 800116a:	b2da      	uxtb	r2, r3
 800116c:	4b4c      	ldr	r3, [pc, #304]	; (80012a0 <Request_return_system_state+0x1c8>)
 800116e:	709a      	strb	r2, [r3, #2]

			ret_param1[0] = MF_param1/100 + 48 ; // hundred
 8001170:	4b4e      	ldr	r3, [pc, #312]	; (80012ac <Request_return_system_state+0x1d4>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	4a49      	ldr	r2, [pc, #292]	; (800129c <Request_return_system_state+0x1c4>)
 8001176:	fba2 2303 	umull	r2, r3, r2, r3
 800117a:	095b      	lsrs	r3, r3, #5
 800117c:	b29b      	uxth	r3, r3
 800117e:	b2db      	uxtb	r3, r3
 8001180:	3330      	adds	r3, #48	; 0x30
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b4a      	ldr	r3, [pc, #296]	; (80012b0 <Request_return_system_state+0x1d8>)
 8001186:	701a      	strb	r2, [r3, #0]
			ret_param1[1] = (MF_param1 -(MF_param1/100)*100)/10 + 48 ; //tens
 8001188:	4b48      	ldr	r3, [pc, #288]	; (80012ac <Request_return_system_state+0x1d4>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	4b47      	ldr	r3, [pc, #284]	; (80012ac <Request_return_system_state+0x1d4>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	4a42      	ldr	r2, [pc, #264]	; (800129c <Request_return_system_state+0x1c4>)
 8001194:	fba2 2303 	umull	r2, r3, r2, r3
 8001198:	095b      	lsrs	r3, r3, #5
 800119a:	b29b      	uxth	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80011a2:	fb02 f303 	mul.w	r3, r2, r3
 80011a6:	440b      	add	r3, r1
 80011a8:	4a3e      	ldr	r2, [pc, #248]	; (80012a4 <Request_return_system_state+0x1cc>)
 80011aa:	fb82 1203 	smull	r1, r2, r2, r3
 80011ae:	1092      	asrs	r2, r2, #2
 80011b0:	17db      	asrs	r3, r3, #31
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	3330      	adds	r3, #48	; 0x30
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <Request_return_system_state+0x1d8>)
 80011bc:	705a      	strb	r2, [r3, #1]
			ret_param1[2] = (MF_param1 - (MF_param1/10)*10) + 48 ;  //units
 80011be:	4b3b      	ldr	r3, [pc, #236]	; (80012ac <Request_return_system_state+0x1d4>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	4b39      	ldr	r3, [pc, #228]	; (80012ac <Request_return_system_state+0x1d4>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	4937      	ldr	r1, [pc, #220]	; (80012a8 <Request_return_system_state+0x1d0>)
 80011ca:	fba1 1303 	umull	r1, r3, r1, r3
 80011ce:	08db      	lsrs	r3, r3, #3
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	4619      	mov	r1, r3
 80011d6:	0149      	lsls	r1, r1, #5
 80011d8:	1ac9      	subs	r1, r1, r3
 80011da:	0089      	lsls	r1, r1, #2
 80011dc:	1acb      	subs	r3, r1, r3
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	4413      	add	r3, r2
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	3330      	adds	r3, #48	; 0x30
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <Request_return_system_state+0x1d8>)
 80011ec:	709a      	strb	r2, [r3, #2]

			if(custom_morse_msg_rcvd == 1){
 80011ee:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <Request_return_system_state+0x1dc>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d10c      	bne.n	8001210 <Request_return_system_state+0x138>
				ret_param2[0] = MF_param2[0]; // hundred
 80011f6:	4b30      	ldr	r3, [pc, #192]	; (80012b8 <Request_return_system_state+0x1e0>)
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	4b30      	ldr	r3, [pc, #192]	; (80012bc <Request_return_system_state+0x1e4>)
 80011fc:	701a      	strb	r2, [r3, #0]
				ret_param2[1] = MF_param2[1] ; //tens
 80011fe:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <Request_return_system_state+0x1e0>)
 8001200:	785a      	ldrb	r2, [r3, #1]
 8001202:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <Request_return_system_state+0x1e4>)
 8001204:	705a      	strb	r2, [r3, #1]
				ret_param2[2] = MF_param2[2] ; //units
 8001206:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <Request_return_system_state+0x1e0>)
 8001208:	789a      	ldrb	r2, [r3, #2]
 800120a:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <Request_return_system_state+0x1e4>)
 800120c:	709a      	strb	r2, [r3, #2]
 800120e:	e1d7      	b.n	80015c0 <Request_return_system_state+0x4e8>
			}else{
				ret_param2[0] = param2/100 + 48;  // hundred
 8001210:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <Request_return_system_state+0x1e8>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	4a21      	ldr	r2, [pc, #132]	; (800129c <Request_return_system_state+0x1c4>)
 8001216:	fba2 2303 	umull	r2, r3, r2, r3
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	b29b      	uxth	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	3330      	adds	r3, #48	; 0x30
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b25      	ldr	r3, [pc, #148]	; (80012bc <Request_return_system_state+0x1e4>)
 8001226:	701a      	strb	r2, [r3, #0]
				ret_param2[1] =	(param2 -(param2/100)*100)/10 + 48 ; //tens
 8001228:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <Request_return_system_state+0x1e8>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <Request_return_system_state+0x1e8>)
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	4a1a      	ldr	r2, [pc, #104]	; (800129c <Request_return_system_state+0x1c4>)
 8001234:	fba2 2303 	umull	r2, r3, r2, r3
 8001238:	095b      	lsrs	r3, r3, #5
 800123a:	b29b      	uxth	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001242:	fb02 f303 	mul.w	r3, r2, r3
 8001246:	440b      	add	r3, r1
 8001248:	4a16      	ldr	r2, [pc, #88]	; (80012a4 <Request_return_system_state+0x1cc>)
 800124a:	fb82 1203 	smull	r1, r2, r2, r3
 800124e:	1092      	asrs	r2, r2, #2
 8001250:	17db      	asrs	r3, r3, #31
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	3330      	adds	r3, #48	; 0x30
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <Request_return_system_state+0x1e4>)
 800125c:	705a      	strb	r2, [r3, #1]
				ret_param2[2] = (param2 - (param2/10)*10) + 48 ; //units
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <Request_return_system_state+0x1e8>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <Request_return_system_state+0x1e8>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	490f      	ldr	r1, [pc, #60]	; (80012a8 <Request_return_system_state+0x1d0>)
 800126a:	fba1 1303 	umull	r1, r3, r1, r3
 800126e:	08db      	lsrs	r3, r3, #3
 8001270:	b29b      	uxth	r3, r3
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4619      	mov	r1, r3
 8001276:	0149      	lsls	r1, r1, #5
 8001278:	1ac9      	subs	r1, r1, r3
 800127a:	0089      	lsls	r1, r1, #2
 800127c:	1acb      	subs	r3, r1, r3
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4413      	add	r3, r2
 8001284:	b2db      	uxtb	r3, r3
 8001286:	3330      	adds	r3, #48	; 0x30
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <Request_return_system_state+0x1e4>)
 800128c:	709a      	strb	r2, [r3, #2]
 800128e:	e197      	b.n	80015c0 <Request_return_system_state+0x4e8>
 8001290:	20002320 	.word	0x20002320
 8001294:	2000002c 	.word	0x2000002c
 8001298:	20002322 	.word	0x20002322
 800129c:	51eb851f 	.word	0x51eb851f
 80012a0:	20000058 	.word	0x20000058
 80012a4:	66666667 	.word	0x66666667
 80012a8:	cccccccd 	.word	0xcccccccd
 80012ac:	20002324 	.word	0x20002324
 80012b0:	2000005c 	.word	0x2000005c
 80012b4:	20002319 	.word	0x20002319
 80012b8:	20000050 	.word	0x20000050
 80012bc:	20000060 	.word	0x20000060
 80012c0:	2000231e 	.word	0x2000231e
			}


		}
		// emergency mode
		else if(set_or_ret_sys_state[3] == 'E'){
 80012c4:	4b51      	ldr	r3, [pc, #324]	; (800140c <Request_return_system_state+0x334>)
 80012c6:	78db      	ldrb	r3, [r3, #3]
 80012c8:	2b45      	cmp	r3, #69	; 0x45
 80012ca:	f040 80b7 	bne.w	800143c <Request_return_system_state+0x364>
			/* here manual copy*/
			ret_state[0] = ME_state/100 + 48 ; // hundred
 80012ce:	4b50      	ldr	r3, [pc, #320]	; (8001410 <Request_return_system_state+0x338>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	4a50      	ldr	r2, [pc, #320]	; (8001414 <Request_return_system_state+0x33c>)
 80012d4:	fba2 2303 	umull	r2, r3, r2, r3
 80012d8:	095b      	lsrs	r3, r3, #5
 80012da:	b29b      	uxth	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	3330      	adds	r3, #48	; 0x30
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4b4d      	ldr	r3, [pc, #308]	; (8001418 <Request_return_system_state+0x340>)
 80012e4:	701a      	strb	r2, [r3, #0]
			ret_state[1] = (ME_state -(ME_state/100)*100)/10 + 48 ; //tens
 80012e6:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <Request_return_system_state+0x338>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	4619      	mov	r1, r3
 80012ec:	4b48      	ldr	r3, [pc, #288]	; (8001410 <Request_return_system_state+0x338>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	4a48      	ldr	r2, [pc, #288]	; (8001414 <Request_return_system_state+0x33c>)
 80012f2:	fba2 2303 	umull	r2, r3, r2, r3
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	461a      	mov	r2, r3
 80012fc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	440b      	add	r3, r1
 8001306:	4a45      	ldr	r2, [pc, #276]	; (800141c <Request_return_system_state+0x344>)
 8001308:	fb82 1203 	smull	r1, r2, r2, r3
 800130c:	1092      	asrs	r2, r2, #2
 800130e:	17db      	asrs	r3, r3, #31
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	3330      	adds	r3, #48	; 0x30
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4b3f      	ldr	r3, [pc, #252]	; (8001418 <Request_return_system_state+0x340>)
 800131a:	705a      	strb	r2, [r3, #1]
			ret_state[2] = (ME_state - (ME_state/10)*10) + 48 ;  //units
 800131c:	4b3c      	ldr	r3, [pc, #240]	; (8001410 <Request_return_system_state+0x338>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <Request_return_system_state+0x338>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	493e      	ldr	r1, [pc, #248]	; (8001420 <Request_return_system_state+0x348>)
 8001328:	fba1 1303 	umull	r1, r3, r1, r3
 800132c:	08db      	lsrs	r3, r3, #3
 800132e:	b29b      	uxth	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	4619      	mov	r1, r3
 8001334:	0149      	lsls	r1, r1, #5
 8001336:	1ac9      	subs	r1, r1, r3
 8001338:	0089      	lsls	r1, r1, #2
 800133a:	1acb      	subs	r3, r1, r3
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4413      	add	r3, r2
 8001342:	b2db      	uxtb	r3, r3
 8001344:	3330      	adds	r3, #48	; 0x30
 8001346:	b2da      	uxtb	r2, r3
 8001348:	4b33      	ldr	r3, [pc, #204]	; (8001418 <Request_return_system_state+0x340>)
 800134a:	709a      	strb	r2, [r3, #2]

			ret_param1[0] = ME_param1/100 + 48 ; // hundred
 800134c:	4b35      	ldr	r3, [pc, #212]	; (8001424 <Request_return_system_state+0x34c>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	4a30      	ldr	r2, [pc, #192]	; (8001414 <Request_return_system_state+0x33c>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	b29b      	uxth	r3, r3
 800135a:	b2db      	uxtb	r3, r3
 800135c:	3330      	adds	r3, #48	; 0x30
 800135e:	b2da      	uxtb	r2, r3
 8001360:	4b31      	ldr	r3, [pc, #196]	; (8001428 <Request_return_system_state+0x350>)
 8001362:	701a      	strb	r2, [r3, #0]
			ret_param1[1] = (ME_param1 -(ME_param1/100)*100)/10 + 48 ; //tens
 8001364:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <Request_return_system_state+0x34c>)
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <Request_return_system_state+0x34c>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	4a29      	ldr	r2, [pc, #164]	; (8001414 <Request_return_system_state+0x33c>)
 8001370:	fba2 2303 	umull	r2, r3, r2, r3
 8001374:	095b      	lsrs	r3, r3, #5
 8001376:	b29b      	uxth	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	440b      	add	r3, r1
 8001384:	4a25      	ldr	r2, [pc, #148]	; (800141c <Request_return_system_state+0x344>)
 8001386:	fb82 1203 	smull	r1, r2, r2, r3
 800138a:	1092      	asrs	r2, r2, #2
 800138c:	17db      	asrs	r3, r3, #31
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	b2db      	uxtb	r3, r3
 8001392:	3330      	adds	r3, #48	; 0x30
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b24      	ldr	r3, [pc, #144]	; (8001428 <Request_return_system_state+0x350>)
 8001398:	705a      	strb	r2, [r3, #1]
			ret_param1[2] = (ME_param1 - (ME_param1/10)*10) + 48 ;  //units
 800139a:	4b22      	ldr	r3, [pc, #136]	; (8001424 <Request_return_system_state+0x34c>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b20      	ldr	r3, [pc, #128]	; (8001424 <Request_return_system_state+0x34c>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	491e      	ldr	r1, [pc, #120]	; (8001420 <Request_return_system_state+0x348>)
 80013a6:	fba1 1303 	umull	r1, r3, r1, r3
 80013aa:	08db      	lsrs	r3, r3, #3
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	0149      	lsls	r1, r1, #5
 80013b4:	1ac9      	subs	r1, r1, r3
 80013b6:	0089      	lsls	r1, r1, #2
 80013b8:	1acb      	subs	r3, r1, r3
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4413      	add	r3, r2
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	3330      	adds	r3, #48	; 0x30
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <Request_return_system_state+0x350>)
 80013c8:	709a      	strb	r2, [r3, #2]

			// check whether param2 was 0 OR CUSTOM morse message recvd
			if(strcmp(ME_param2, "000") == 0){
 80013ca:	4918      	ldr	r1, [pc, #96]	; (800142c <Request_return_system_state+0x354>)
 80013cc:	4818      	ldr	r0, [pc, #96]	; (8001430 <Request_return_system_state+0x358>)
 80013ce:	f7fe ff07 	bl	80001e0 <strcmp>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10c      	bne.n	80013f2 <Request_return_system_state+0x31a>

//				strcpy(ret_param2, ME_param2) ;
				ret_param2[0] = ME_param2[0];
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <Request_return_system_state+0x358>)
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <Request_return_system_state+0x35c>)
 80013de:	701a      	strb	r2, [r3, #0]
				ret_param2[1] = ME_param2[1] ;
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <Request_return_system_state+0x358>)
 80013e2:	785a      	ldrb	r2, [r3, #1]
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <Request_return_system_state+0x35c>)
 80013e6:	705a      	strb	r2, [r3, #1]
				ret_param2[2] = ME_param2[2] ;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <Request_return_system_state+0x358>)
 80013ea:	789a      	ldrb	r2, [r3, #2]
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <Request_return_system_state+0x35c>)
 80013ee:	709a      	strb	r2, [r3, #2]
 80013f0:	e0e6      	b.n	80015c0 <Request_return_system_state+0x4e8>

			}else{
				ret_param2[0] = Custom_Morse_Msg[0];
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <Request_return_system_state+0x360>)
 80013f4:	781a      	ldrb	r2, [r3, #0]
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <Request_return_system_state+0x35c>)
 80013f8:	701a      	strb	r2, [r3, #0]
				ret_param2[1] = Custom_Morse_Msg[1] ;
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <Request_return_system_state+0x360>)
 80013fc:	785a      	ldrb	r2, [r3, #1]
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <Request_return_system_state+0x35c>)
 8001400:	705a      	strb	r2, [r3, #1]
				ret_param2[2] = Custom_Morse_Msg[2] ;
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <Request_return_system_state+0x360>)
 8001404:	789a      	ldrb	r2, [r3, #2]
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <Request_return_system_state+0x35c>)
 8001408:	709a      	strb	r2, [r3, #2]
 800140a:	e0d9      	b.n	80015c0 <Request_return_system_state+0x4e8>
 800140c:	2000002c 	.word	0x2000002c
 8001410:	20002326 	.word	0x20002326
 8001414:	51eb851f 	.word	0x51eb851f
 8001418:	20000058 	.word	0x20000058
 800141c:	66666667 	.word	0x66666667
 8001420:	cccccccd 	.word	0xcccccccd
 8001424:	20002328 	.word	0x20002328
 8001428:	2000005c 	.word	0x2000005c
 800142c:	08009214 	.word	0x08009214
 8001430:	20000054 	.word	0x20000054
 8001434:	20000060 	.word	0x20000060
 8001438:	2000004c 	.word	0x2000004c
			}

		}
		// mood mode
		else{
			if(set_or_ret_sys_state[3] == 'M'){
 800143c:	4baa      	ldr	r3, [pc, #680]	; (80016e8 <Request_return_system_state+0x610>)
 800143e:	78db      	ldrb	r3, [r3, #3]
 8001440:	2b4d      	cmp	r3, #77	; 0x4d
 8001442:	f040 80bd 	bne.w	80015c0 <Request_return_system_state+0x4e8>
				/* here manual copy*/
				ret_state[0] = MM_state/100 + 48 ; // hundred
 8001446:	4ba9      	ldr	r3, [pc, #676]	; (80016ec <Request_return_system_state+0x614>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	4aa9      	ldr	r2, [pc, #676]	; (80016f0 <Request_return_system_state+0x618>)
 800144c:	fba2 2303 	umull	r2, r3, r2, r3
 8001450:	095b      	lsrs	r3, r3, #5
 8001452:	b29b      	uxth	r3, r3
 8001454:	b2db      	uxtb	r3, r3
 8001456:	3330      	adds	r3, #48	; 0x30
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4ba6      	ldr	r3, [pc, #664]	; (80016f4 <Request_return_system_state+0x61c>)
 800145c:	701a      	strb	r2, [r3, #0]
				ret_state[1] = (MM_state -(MM_state/100)*100)/10 + 48 ; //tens
 800145e:	4ba3      	ldr	r3, [pc, #652]	; (80016ec <Request_return_system_state+0x614>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	4619      	mov	r1, r3
 8001464:	4ba1      	ldr	r3, [pc, #644]	; (80016ec <Request_return_system_state+0x614>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	4aa1      	ldr	r2, [pc, #644]	; (80016f0 <Request_return_system_state+0x618>)
 800146a:	fba2 2303 	umull	r2, r3, r2, r3
 800146e:	095b      	lsrs	r3, r3, #5
 8001470:	b29b      	uxth	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001478:	fb02 f303 	mul.w	r3, r2, r3
 800147c:	440b      	add	r3, r1
 800147e:	4a9e      	ldr	r2, [pc, #632]	; (80016f8 <Request_return_system_state+0x620>)
 8001480:	fb82 1203 	smull	r1, r2, r2, r3
 8001484:	1092      	asrs	r2, r2, #2
 8001486:	17db      	asrs	r3, r3, #31
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	b2db      	uxtb	r3, r3
 800148c:	3330      	adds	r3, #48	; 0x30
 800148e:	b2da      	uxtb	r2, r3
 8001490:	4b98      	ldr	r3, [pc, #608]	; (80016f4 <Request_return_system_state+0x61c>)
 8001492:	705a      	strb	r2, [r3, #1]
				ret_state[2] = (MM_state - (MM_state/10)*10) + 48 ;  //units
 8001494:	4b95      	ldr	r3, [pc, #596]	; (80016ec <Request_return_system_state+0x614>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b94      	ldr	r3, [pc, #592]	; (80016ec <Request_return_system_state+0x614>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	4997      	ldr	r1, [pc, #604]	; (80016fc <Request_return_system_state+0x624>)
 80014a0:	fba1 1303 	umull	r1, r3, r1, r3
 80014a4:	08db      	lsrs	r3, r3, #3
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4619      	mov	r1, r3
 80014ac:	0149      	lsls	r1, r1, #5
 80014ae:	1ac9      	subs	r1, r1, r3
 80014b0:	0089      	lsls	r1, r1, #2
 80014b2:	1acb      	subs	r3, r1, r3
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	4413      	add	r3, r2
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	3330      	adds	r3, #48	; 0x30
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	4b8c      	ldr	r3, [pc, #560]	; (80016f4 <Request_return_system_state+0x61c>)
 80014c2:	709a      	strb	r2, [r3, #2]

				ret_param1[0] = MM_param1/100 + 48 ; // hundred
 80014c4:	4b8e      	ldr	r3, [pc, #568]	; (8001700 <Request_return_system_state+0x628>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	4a89      	ldr	r2, [pc, #548]	; (80016f0 <Request_return_system_state+0x618>)
 80014ca:	fba2 2303 	umull	r2, r3, r2, r3
 80014ce:	095b      	lsrs	r3, r3, #5
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	3330      	adds	r3, #48	; 0x30
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b8a      	ldr	r3, [pc, #552]	; (8001704 <Request_return_system_state+0x62c>)
 80014da:	701a      	strb	r2, [r3, #0]
				ret_param1[1] = (MM_param1 -(MM_param1/100)*100)/10 + 48 ; //tens
 80014dc:	4b88      	ldr	r3, [pc, #544]	; (8001700 <Request_return_system_state+0x628>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	4b87      	ldr	r3, [pc, #540]	; (8001700 <Request_return_system_state+0x628>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	4a82      	ldr	r2, [pc, #520]	; (80016f0 <Request_return_system_state+0x618>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	095b      	lsrs	r3, r3, #5
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80014f6:	fb02 f303 	mul.w	r3, r2, r3
 80014fa:	440b      	add	r3, r1
 80014fc:	4a7e      	ldr	r2, [pc, #504]	; (80016f8 <Request_return_system_state+0x620>)
 80014fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001502:	1092      	asrs	r2, r2, #2
 8001504:	17db      	asrs	r3, r3, #31
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	b2db      	uxtb	r3, r3
 800150a:	3330      	adds	r3, #48	; 0x30
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4b7d      	ldr	r3, [pc, #500]	; (8001704 <Request_return_system_state+0x62c>)
 8001510:	705a      	strb	r2, [r3, #1]
				ret_param1[2] = (MM_param1 - (MM_param1/10)*10) + 48 ;  //units
 8001512:	4b7b      	ldr	r3, [pc, #492]	; (8001700 <Request_return_system_state+0x628>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b79      	ldr	r3, [pc, #484]	; (8001700 <Request_return_system_state+0x628>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	4977      	ldr	r1, [pc, #476]	; (80016fc <Request_return_system_state+0x624>)
 800151e:	fba1 1303 	umull	r1, r3, r1, r3
 8001522:	08db      	lsrs	r3, r3, #3
 8001524:	b29b      	uxth	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4619      	mov	r1, r3
 800152a:	0149      	lsls	r1, r1, #5
 800152c:	1ac9      	subs	r1, r1, r3
 800152e:	0089      	lsls	r1, r1, #2
 8001530:	1acb      	subs	r3, r1, r3
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4413      	add	r3, r2
 8001538:	b2db      	uxtb	r3, r3
 800153a:	3330      	adds	r3, #48	; 0x30
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4b71      	ldr	r3, [pc, #452]	; (8001704 <Request_return_system_state+0x62c>)
 8001540:	709a      	strb	r2, [r3, #2]

				ret_param2[0] = MM_param2/100 + 48 ; // hundred
 8001542:	4b71      	ldr	r3, [pc, #452]	; (8001708 <Request_return_system_state+0x630>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	4a6a      	ldr	r2, [pc, #424]	; (80016f0 <Request_return_system_state+0x618>)
 8001548:	fba2 2303 	umull	r2, r3, r2, r3
 800154c:	095b      	lsrs	r3, r3, #5
 800154e:	b29b      	uxth	r3, r3
 8001550:	b2db      	uxtb	r3, r3
 8001552:	3330      	adds	r3, #48	; 0x30
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4b6d      	ldr	r3, [pc, #436]	; (800170c <Request_return_system_state+0x634>)
 8001558:	701a      	strb	r2, [r3, #0]
				ret_param2[1] = (MM_param2 -(MM_param2/100)*100)/10 + 48 ; //tens
 800155a:	4b6b      	ldr	r3, [pc, #428]	; (8001708 <Request_return_system_state+0x630>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	4619      	mov	r1, r3
 8001560:	4b69      	ldr	r3, [pc, #420]	; (8001708 <Request_return_system_state+0x630>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	4a62      	ldr	r2, [pc, #392]	; (80016f0 <Request_return_system_state+0x618>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	b29b      	uxth	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001574:	fb02 f303 	mul.w	r3, r2, r3
 8001578:	440b      	add	r3, r1
 800157a:	4a5f      	ldr	r2, [pc, #380]	; (80016f8 <Request_return_system_state+0x620>)
 800157c:	fb82 1203 	smull	r1, r2, r2, r3
 8001580:	1092      	asrs	r2, r2, #2
 8001582:	17db      	asrs	r3, r3, #31
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	3330      	adds	r3, #48	; 0x30
 800158a:	b2da      	uxtb	r2, r3
 800158c:	4b5f      	ldr	r3, [pc, #380]	; (800170c <Request_return_system_state+0x634>)
 800158e:	705a      	strb	r2, [r3, #1]
				ret_param2[2] = (MM_param2 - (MM_param2/10)*10) + 48 ;  //units
 8001590:	4b5d      	ldr	r3, [pc, #372]	; (8001708 <Request_return_system_state+0x630>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4b5c      	ldr	r3, [pc, #368]	; (8001708 <Request_return_system_state+0x630>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	4958      	ldr	r1, [pc, #352]	; (80016fc <Request_return_system_state+0x624>)
 800159c:	fba1 1303 	umull	r1, r3, r1, r3
 80015a0:	08db      	lsrs	r3, r3, #3
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4619      	mov	r1, r3
 80015a8:	0149      	lsls	r1, r1, #5
 80015aa:	1ac9      	subs	r1, r1, r3
 80015ac:	0089      	lsls	r1, r1, #2
 80015ae:	1acb      	subs	r3, r1, r3
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	3330      	adds	r3, #48	; 0x30
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	4b53      	ldr	r3, [pc, #332]	; (800170c <Request_return_system_state+0x634>)
 80015be:	709a      	strb	r2, [r3, #2]

			}
		}

		// construct message to return
		for(int i = 0; i<19  ; i++){
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	e0cc      	b.n	8001760 <Request_return_system_state+0x688>
			switch(i){
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b12      	cmp	r3, #18
 80015ca:	f200 80c5 	bhi.w	8001758 <Request_return_system_state+0x680>
 80015ce:	a201      	add	r2, pc, #4	; (adr r2, 80015d4 <Request_return_system_state+0x4fc>)
 80015d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d4:	08001621 	.word	0x08001621
 80015d8:	0800162d 	.word	0x0800162d
 80015dc:	08001639 	.word	0x08001639
 80015e0:	08001645 	.word	0x08001645
 80015e4:	08001655 	.word	0x08001655
 80015e8:	08001661 	.word	0x08001661
 80015ec:	08001671 	.word	0x08001671
 80015f0:	08001681 	.word	0x08001681
 80015f4:	08001691 	.word	0x08001691
 80015f8:	0800169d 	.word	0x0800169d
 80015fc:	080016ad 	.word	0x080016ad
 8001600:	080016bd 	.word	0x080016bd
 8001604:	080016cd 	.word	0x080016cd
 8001608:	080016d9 	.word	0x080016d9
 800160c:	08001715 	.word	0x08001715
 8001610:	08001725 	.word	0x08001725
 8001614:	08001735 	.word	0x08001735
 8001618:	08001741 	.word	0x08001741
 800161c:	0800174d 	.word	0x0800174d
			case 0:
				value[i] ='#';
 8001620:	4a3b      	ldr	r2, [pc, #236]	; (8001710 <Request_return_system_state+0x638>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	2223      	movs	r2, #35	; 0x23
 8001628:	701a      	strb	r2, [r3, #0]

				break ;
 800162a:	e096      	b.n	800175a <Request_return_system_state+0x682>
			case 1:
				value[i] = ':' ;
 800162c:	4a38      	ldr	r2, [pc, #224]	; (8001710 <Request_return_system_state+0x638>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	223a      	movs	r2, #58	; 0x3a
 8001634:	701a      	strb	r2, [r3, #0]

				break ;
 8001636:	e090      	b.n	800175a <Request_return_system_state+0x682>
			case 2:
				value[i] = 'M';
 8001638:	4a35      	ldr	r2, [pc, #212]	; (8001710 <Request_return_system_state+0x638>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	224d      	movs	r2, #77	; 0x4d
 8001640:	701a      	strb	r2, [r3, #0]

			break ;
 8001642:	e08a      	b.n	800175a <Request_return_system_state+0x682>

			case 3:
				value[i] = set_or_ret_sys_state[3];
 8001644:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <Request_return_system_state+0x610>)
 8001646:	78d9      	ldrb	r1, [r3, #3]
 8001648:	4a31      	ldr	r2, [pc, #196]	; (8001710 <Request_return_system_state+0x638>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	460a      	mov	r2, r1
 8001650:	701a      	strb	r2, [r3, #0]

				break ;
 8001652:	e082      	b.n	800175a <Request_return_system_state+0x682>
			case 4:
				value[i] = ':';
 8001654:	4a2e      	ldr	r2, [pc, #184]	; (8001710 <Request_return_system_state+0x638>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	223a      	movs	r2, #58	; 0x3a
 800165c:	701a      	strb	r2, [r3, #0]

				break ;
 800165e:	e07c      	b.n	800175a <Request_return_system_state+0x682>
			case 5:
				value[i] = ret_state[0];
 8001660:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <Request_return_system_state+0x61c>)
 8001662:	7819      	ldrb	r1, [r3, #0]
 8001664:	4a2a      	ldr	r2, [pc, #168]	; (8001710 <Request_return_system_state+0x638>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	460a      	mov	r2, r1
 800166c:	701a      	strb	r2, [r3, #0]

			break ;
 800166e:	e074      	b.n	800175a <Request_return_system_state+0x682>

			case 6:
				value[i] = ret_state[1];
 8001670:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <Request_return_system_state+0x61c>)
 8001672:	7859      	ldrb	r1, [r3, #1]
 8001674:	4a26      	ldr	r2, [pc, #152]	; (8001710 <Request_return_system_state+0x638>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	460a      	mov	r2, r1
 800167c:	701a      	strb	r2, [r3, #0]

				break ;
 800167e:	e06c      	b.n	800175a <Request_return_system_state+0x682>
			case 7:
				value[i] = ret_state[2];
 8001680:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <Request_return_system_state+0x61c>)
 8001682:	7899      	ldrb	r1, [r3, #2]
 8001684:	4a22      	ldr	r2, [pc, #136]	; (8001710 <Request_return_system_state+0x638>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	460a      	mov	r2, r1
 800168c:	701a      	strb	r2, [r3, #0]

				break ;
 800168e:	e064      	b.n	800175a <Request_return_system_state+0x682>
			case 8:
				value[i] =  ':';
 8001690:	4a1f      	ldr	r2, [pc, #124]	; (8001710 <Request_return_system_state+0x638>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	223a      	movs	r2, #58	; 0x3a
 8001698:	701a      	strb	r2, [r3, #0]

			break ;
 800169a:	e05e      	b.n	800175a <Request_return_system_state+0x682>

			case 9:
				value[i] = ret_param1[0];
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <Request_return_system_state+0x62c>)
 800169e:	7819      	ldrb	r1, [r3, #0]
 80016a0:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <Request_return_system_state+0x638>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	460a      	mov	r2, r1
 80016a8:	701a      	strb	r2, [r3, #0]

				break ;
 80016aa:	e056      	b.n	800175a <Request_return_system_state+0x682>
			case 10:
				value[i] = ret_param1[1];
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <Request_return_system_state+0x62c>)
 80016ae:	7859      	ldrb	r1, [r3, #1]
 80016b0:	4a17      	ldr	r2, [pc, #92]	; (8001710 <Request_return_system_state+0x638>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	460a      	mov	r2, r1
 80016b8:	701a      	strb	r2, [r3, #0]

				break ;
 80016ba:	e04e      	b.n	800175a <Request_return_system_state+0x682>
			case 11:
				value[i] = ret_param1[2];
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <Request_return_system_state+0x62c>)
 80016be:	7899      	ldrb	r1, [r3, #2]
 80016c0:	4a13      	ldr	r2, [pc, #76]	; (8001710 <Request_return_system_state+0x638>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	460a      	mov	r2, r1
 80016c8:	701a      	strb	r2, [r3, #0]

			break ;
 80016ca:	e046      	b.n	800175a <Request_return_system_state+0x682>

			case 12:
				value[i] = ':';
 80016cc:	4a10      	ldr	r2, [pc, #64]	; (8001710 <Request_return_system_state+0x638>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	223a      	movs	r2, #58	; 0x3a
 80016d4:	701a      	strb	r2, [r3, #0]

				break ;
 80016d6:	e040      	b.n	800175a <Request_return_system_state+0x682>
			case 13:
				value[i] = ret_param2[0];
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <Request_return_system_state+0x634>)
 80016da:	7819      	ldrb	r1, [r3, #0]
 80016dc:	4a0c      	ldr	r2, [pc, #48]	; (8001710 <Request_return_system_state+0x638>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	460a      	mov	r2, r1
 80016e4:	701a      	strb	r2, [r3, #0]

				break ;
 80016e6:	e038      	b.n	800175a <Request_return_system_state+0x682>
 80016e8:	2000002c 	.word	0x2000002c
 80016ec:	2000232a 	.word	0x2000232a
 80016f0:	51eb851f 	.word	0x51eb851f
 80016f4:	20000058 	.word	0x20000058
 80016f8:	66666667 	.word	0x66666667
 80016fc:	cccccccd 	.word	0xcccccccd
 8001700:	2000232c 	.word	0x2000232c
 8001704:	2000005c 	.word	0x2000005c
 8001708:	2000232e 	.word	0x2000232e
 800170c:	20000060 	.word	0x20000060
 8001710:	20002330 	.word	0x20002330
			case 14:
				value[i] = ret_param2[1];
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <Request_return_system_state+0x6a8>)
 8001716:	7859      	ldrb	r1, [r3, #1]
 8001718:	4a1a      	ldr	r2, [pc, #104]	; (8001784 <Request_return_system_state+0x6ac>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	460a      	mov	r2, r1
 8001720:	701a      	strb	r2, [r3, #0]

				break ;
 8001722:	e01a      	b.n	800175a <Request_return_system_state+0x682>

			case 15:
				value[i] = ret_param2[2];
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <Request_return_system_state+0x6a8>)
 8001726:	7899      	ldrb	r1, [r3, #2]
 8001728:	4a16      	ldr	r2, [pc, #88]	; (8001784 <Request_return_system_state+0x6ac>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	460a      	mov	r2, r1
 8001730:	701a      	strb	r2, [r3, #0]

				break ;
 8001732:	e012      	b.n	800175a <Request_return_system_state+0x682>
			case 16:
				value[i] = ':';
 8001734:	4a13      	ldr	r2, [pc, #76]	; (8001784 <Request_return_system_state+0x6ac>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	223a      	movs	r2, #58	; 0x3a
 800173c:	701a      	strb	r2, [r3, #0]

					break ;
 800173e:	e00c      	b.n	800175a <Request_return_system_state+0x682>
			case 17:
				value[i] = '$';
 8001740:	4a10      	ldr	r2, [pc, #64]	; (8001784 <Request_return_system_state+0x6ac>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	2224      	movs	r2, #36	; 0x24
 8001748:	701a      	strb	r2, [r3, #0]

				break ;
 800174a:	e006      	b.n	800175a <Request_return_system_state+0x682>
			case 18:
				value[i] = '\n' ;
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <Request_return_system_state+0x6ac>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	220a      	movs	r2, #10
 8001754:	701a      	strb	r2, [r3, #0]
				break;
 8001756:	e000      	b.n	800175a <Request_return_system_state+0x682>

			default:
				break;
 8001758:	bf00      	nop
		for(int i = 0; i<19  ; i++){
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3301      	adds	r3, #1
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b12      	cmp	r3, #18
 8001764:	f77f af2f 	ble.w	80015c6 <Request_return_system_state+0x4ee>

			}
		}

		HAL_UART_Transmit_IT(&huart2, (uint8_t*)value, 19) ;
 8001768:	2213      	movs	r2, #19
 800176a:	4906      	ldr	r1, [pc, #24]	; (8001784 <Request_return_system_state+0x6ac>)
 800176c:	4806      	ldr	r0, [pc, #24]	; (8001788 <Request_return_system_state+0x6b0>)
 800176e:	f005 fc59 	bl	8007024 <HAL_UART_Transmit_IT>



		READ_SYS = 0 ;
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <Request_return_system_state+0x6b4>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
	}
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000060 	.word	0x20000060
 8001784:	20002330 	.word	0x20002330
 8001788:	20000268 	.word	0x20000268
 800178c:	20002320 	.word	0x20002320

08001790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001794:	f001 f858 	bl	8002848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001798:	f000 f96a 	bl	8001a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800179c:	f000 fc02 	bl	8001fa4 <MX_GPIO_Init>
  MX_DMA_Init();
 80017a0:	f000 fbe2 	bl	8001f68 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017a4:	f000 fbae 	bl	8001f04 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80017a8:	f000 f9ca 	bl	8001b40 <MX_ADC1_Init>
  MX_TIM2_Init();
 80017ac:	f000 fa38 	bl	8001c20 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017b0:	f000 fab8 	bl	8001d24 <MX_TIM3_Init>
  MX_TIM4_Init();
 80017b4:	f000 fb2e 	bl	8001e14 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(200);
 80017b8:	20c8      	movs	r0, #200	; 0xc8
 80017ba:	f001 f8ab 	bl	8002914 <HAL_Delay>
  HAL_UART_Transmit(&huart2, studentNum, 13, 150); //transmit student number
 80017be:	2396      	movs	r3, #150	; 0x96
 80017c0:	220d      	movs	r2, #13
 80017c2:	4987      	ldr	r1, [pc, #540]	; (80019e0 <main+0x250>)
 80017c4:	4887      	ldr	r0, [pc, #540]	; (80019e4 <main+0x254>)
 80017c6:	f005 fba3 	bl	8006f10 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)recvd_char, 1);
 80017ca:	2201      	movs	r2, #1
 80017cc:	4986      	ldr	r1, [pc, #536]	; (80019e8 <main+0x258>)
 80017ce:	4885      	ldr	r0, [pc, #532]	; (80019e4 <main+0x254>)
 80017d0:	f005 fc86 	bl	80070e0 <HAL_UART_Receive_IT>

  //Startup ADC
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, adc_buf_len) ;
 80017d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017d8:	4984      	ldr	r1, [pc, #528]	; (80019ec <main+0x25c>)
 80017da:	4885      	ldr	r0, [pc, #532]	; (80019f0 <main+0x260>)
 80017dc:	f001 facc 	bl	8002d78 <HAL_ADC_Start_DMA>

  // TIM2_CH1 start PWM
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1) ;
 80017e0:	2100      	movs	r1, #0
 80017e2:	4884      	ldr	r0, [pc, #528]	; (80019f4 <main+0x264>)
 80017e4:	f004 fb6c 	bl	8005ec0 <HAL_TIM_PWM_Start>
  // TIM2_CH4 start PWM - red LED
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) ;
 80017e8:	210c      	movs	r1, #12
 80017ea:	4882      	ldr	r0, [pc, #520]	; (80019f4 <main+0x264>)
 80017ec:	f004 fb68 	bl	8005ec0 <HAL_TIM_PWM_Start>
  // TIM3_CH4 start PWM - GREEN LED
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80017f0:	210c      	movs	r1, #12
 80017f2:	4881      	ldr	r0, [pc, #516]	; (80019f8 <main+0x268>)
 80017f4:	f004 fb64 	bl	8005ec0 <HAL_TIM_PWM_Start>
  // TIM4_CH1 start PWM - BLUE LED
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) ;
 80017f8:	2100      	movs	r1, #0
 80017fa:	4880      	ldr	r0, [pc, #512]	; (80019fc <main+0x26c>)
 80017fc:	f004 fb60 	bl	8005ec0 <HAL_TIM_PWM_Start>

  strobe_ticks  = HAL_GetTick() ;
 8001800:	f001 f87c 	bl	80028fc <HAL_GetTick>
 8001804:	4603      	mov	r3, r0
 8001806:	4a7e      	ldr	r2, [pc, #504]	; (8001a00 <main+0x270>)
 8001808:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // left button press to update system state (MF -> ME -> MM)
	  system_state_update() ;
 800180a:	f7ff f931 	bl	8000a70 <system_state_update>
	  //run adc and capture previous snapshot of ADC value and adc movement processing
	  adc_dma_val_processing();
 800180e:	f7ff f89f 	bl	8000950 <adc_dma_val_processing>
	  // Turn LED ON/OFF
	  TURN_LED_ON_OFF() ;
 8001812:	f7ff fa07 	bl	8000c24 <TURN_LED_ON_OFF>
	  // read UART params
	  convert_UART_state_params_to_Int() ;
 8001816:	f7ff faa3 	bl	8000d60 <convert_UART_state_params_to_Int>
	  // REAS sys state
	  Request_return_system_state() ;
 800181a:	f7ff fc5d 	bl	80010d8 <Request_return_system_state>

	 // system state
	 if(button_count == 0 || start_up == 1 ){
 800181e:	4b79      	ldr	r3, [pc, #484]	; (8001a04 <main+0x274>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <main+0x9e>
 8001826:	4b78      	ldr	r3, [pc, #480]	; (8001a08 <main+0x278>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d15d      	bne.n	80018ea <main+0x15a>

		 start_up = 0 ; //for default MF state
 800182e:	4b76      	ldr	r3, [pc, #472]	; (8001a08 <main+0x278>)
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]

		 MF_mode_LED() ; // sets the corresponding mode LED
 8001834:	f000 fc5a 	bl	80020ec <MF_mode_LED>
		 em_count=0;     // reset the emergency mode count
 8001838:	4b74      	ldr	r3, [pc, #464]	; (8001a0c <main+0x27c>)
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
		 em_default = 1; // to re-enter the EM state
 800183e:	4b74      	ldr	r3, [pc, #464]	; (8001a10 <main+0x280>)
 8001840:	2201      	movs	r2, #1
 8001842:	701a      	strb	r2, [r3, #0]

		if(LED_ON == 1){
 8001844:	4b73      	ldr	r3, [pc, #460]	; (8001a14 <main+0x284>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	f040 8092 	bne.w	8001972 <main+0x1e2>
			 // if LED_ON and SLIDER MOVED -> updated LED intensity
			if(update_led_via_ADC == 1 && UART_state_update == 0){
 800184e:	4b72      	ldr	r3, [pc, #456]	; (8001a18 <main+0x288>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d111      	bne.n	800187a <main+0xea>
 8001856:	4b71      	ldr	r3, [pc, #452]	; (8001a1c <main+0x28c>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10d      	bne.n	800187a <main+0xea>

				htim2.Instance->CCR1 =  LED_intensity ; // vary the duty cycle of the LED [1:512]
 800185e:	4b70      	ldr	r3, [pc, #448]	; (8001a20 <main+0x290>)
 8001860:	881a      	ldrh	r2, [r3, #0]
 8001862:	4b64      	ldr	r3, [pc, #400]	; (80019f4 <main+0x264>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	635a      	str	r2, [r3, #52]	; 0x34
				MF_state = LED_intensity ;
 8001868:	4b6d      	ldr	r3, [pc, #436]	; (8001a20 <main+0x290>)
 800186a:	881a      	ldrh	r2, [r3, #0]
 800186c:	4b6d      	ldr	r3, [pc, #436]	; (8001a24 <main+0x294>)
 800186e:	801a      	strh	r2, [r3, #0]
				MF_param1 = param1  ;
 8001870:	4b6d      	ldr	r3, [pc, #436]	; (8001a28 <main+0x298>)
 8001872:	881a      	ldrh	r2, [r3, #0]
 8001874:	4b6d      	ldr	r3, [pc, #436]	; (8001a2c <main+0x29c>)
 8001876:	801a      	strh	r2, [r3, #0]
		if(LED_ON == 1){
 8001878:	e07b      	b.n	8001972 <main+0x1e2>
			}
			else if(UART_state_update == 1 && state > 0 && set_or_ret_sys_state[3] =='F' ){
 800187a:	4b68      	ldr	r3, [pc, #416]	; (8001a1c <main+0x28c>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d177      	bne.n	8001972 <main+0x1e2>
 8001882:	4b6b      	ldr	r3, [pc, #428]	; (8001a30 <main+0x2a0>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d073      	beq.n	8001972 <main+0x1e2>
 800188a:	4b6a      	ldr	r3, [pc, #424]	; (8001a34 <main+0x2a4>)
 800188c:	78db      	ldrb	r3, [r3, #3]
 800188e:	2b46      	cmp	r3, #70	; 0x46
 8001890:	d16f      	bne.n	8001972 <main+0x1e2>

				htim2.Instance->CCR1 = state ;
 8001892:	4b67      	ldr	r3, [pc, #412]	; (8001a30 <main+0x2a0>)
 8001894:	881a      	ldrh	r2, [r3, #0]
 8001896:	4b57      	ldr	r3, [pc, #348]	; (80019f4 <main+0x264>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	635a      	str	r2, [r3, #52]	; 0x34

				MF_state = state ;  // for when sys request made
 800189c:	4b64      	ldr	r3, [pc, #400]	; (8001a30 <main+0x2a0>)
 800189e:	881a      	ldrh	r2, [r3, #0]
 80018a0:	4b60      	ldr	r3, [pc, #384]	; (8001a24 <main+0x294>)
 80018a2:	801a      	strh	r2, [r3, #0]
				MF_param1 = param1  ;
 80018a4:	4b60      	ldr	r3, [pc, #384]	; (8001a28 <main+0x298>)
 80018a6:	881a      	ldrh	r2, [r3, #0]
 80018a8:	4b60      	ldr	r3, [pc, #384]	; (8001a2c <main+0x29c>)
 80018aa:	801a      	strh	r2, [r3, #0]

				if(strcmp(Custom_Morse_Msg, "000") == 0){
 80018ac:	4962      	ldr	r1, [pc, #392]	; (8001a38 <main+0x2a8>)
 80018ae:	4863      	ldr	r0, [pc, #396]	; (8001a3c <main+0x2ac>)
 80018b0:	f7fe fc96 	bl	80001e0 <strcmp>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d107      	bne.n	80018ca <main+0x13a>
					sprintf(ME_param2, "%d", param2) ;
 80018ba:	4b61      	ldr	r3, [pc, #388]	; (8001a40 <main+0x2b0>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	4960      	ldr	r1, [pc, #384]	; (8001a44 <main+0x2b4>)
 80018c2:	4861      	ldr	r0, [pc, #388]	; (8001a48 <main+0x2b8>)
 80018c4:	f006 feea 	bl	800869c <siprintf>
 80018c8:	e00b      	b.n	80018e2 <main+0x152>

				}else{
					MF_param2[0] = Custom_Morse_Msg[0];
 80018ca:	4b5c      	ldr	r3, [pc, #368]	; (8001a3c <main+0x2ac>)
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	4b5f      	ldr	r3, [pc, #380]	; (8001a4c <main+0x2bc>)
 80018d0:	701a      	strb	r2, [r3, #0]
					MF_param2[1] = Custom_Morse_Msg[1] ;
 80018d2:	4b5a      	ldr	r3, [pc, #360]	; (8001a3c <main+0x2ac>)
 80018d4:	785a      	ldrb	r2, [r3, #1]
 80018d6:	4b5d      	ldr	r3, [pc, #372]	; (8001a4c <main+0x2bc>)
 80018d8:	705a      	strb	r2, [r3, #1]
					MF_param2[2] = Custom_Morse_Msg[2] ;
 80018da:	4b58      	ldr	r3, [pc, #352]	; (8001a3c <main+0x2ac>)
 80018dc:	789a      	ldrb	r2, [r3, #2]
 80018de:	4b5b      	ldr	r3, [pc, #364]	; (8001a4c <main+0x2bc>)
 80018e0:	709a      	strb	r2, [r3, #2]
				}
				UART_state_update = 0;
 80018e2:	4b4e      	ldr	r3, [pc, #312]	; (8001a1c <main+0x28c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
		if(LED_ON == 1){
 80018e8:	e043      	b.n	8001972 <main+0x1e2>
			}

		}
	 }else if(button_count == 1 ){// right button system state updated
 80018ea:	4b46      	ldr	r3, [pc, #280]	; (8001a04 <main+0x274>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d104      	bne.n	80018fc <main+0x16c>
		 ME_mode_LED() ; // sets the corresponding modes LED
 80018f2:	f000 fc19 	bl	8002128 <ME_mode_LED>

		  // set EM mode states
		  Emergency_Mode_State_Update() ;
 80018f6:	f7ff fb41 	bl	8000f7c <Emergency_Mode_State_Update>
 80018fa:	e03b      	b.n	8001974 <main+0x1e4>

	 }else{
		 if(button_count == 2){ // Mood Mode
 80018fc:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <main+0x274>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d137      	bne.n	8001974 <main+0x1e4>
			 // SET THE NECESSARY STATES
			 em_count=0; // reset the emergency mode state
 8001904:	4b41      	ldr	r3, [pc, #260]	; (8001a0c <main+0x27c>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
			 em_default = 1; // to re-enter EM state
 800190a:	4b41      	ldr	r3, [pc, #260]	; (8001a10 <main+0x280>)
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]

			 MM_mode_LED() ; //sets the corresponding modes LED
 8001910:	f000 fc22 	bl	8002158 <MM_mode_LED>

			 Mood_Mode_State_Update() ; // update the necessary MM states
 8001914:	f7ff fbb2 	bl	800107c <Mood_Mode_State_Update>
			 if(LED_ON == 1){
 8001918:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <main+0x284>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d11b      	bne.n	8001958 <main+0x1c8>

				 //red channel
				 htim2.Instance->CCR4 = R_channel_Intensity ;
 8001920:	4b4b      	ldr	r3, [pc, #300]	; (8001a50 <main+0x2c0>)
 8001922:	881a      	ldrh	r2, [r3, #0]
 8001924:	4b33      	ldr	r3, [pc, #204]	; (80019f4 <main+0x264>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	641a      	str	r2, [r3, #64]	; 0x40
				 MM_state = R_channel_Intensity ;
 800192a:	4b49      	ldr	r3, [pc, #292]	; (8001a50 <main+0x2c0>)
 800192c:	881a      	ldrh	r2, [r3, #0]
 800192e:	4b49      	ldr	r3, [pc, #292]	; (8001a54 <main+0x2c4>)
 8001930:	801a      	strh	r2, [r3, #0]
				 // GREEN channel
				 htim3.Instance->CCR4 = G_channel_Intensity ;
 8001932:	4b49      	ldr	r3, [pc, #292]	; (8001a58 <main+0x2c8>)
 8001934:	881a      	ldrh	r2, [r3, #0]
 8001936:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <main+0x268>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	641a      	str	r2, [r3, #64]	; 0x40
				 MM_param1 = G_channel_Intensity ;
 800193c:	4b46      	ldr	r3, [pc, #280]	; (8001a58 <main+0x2c8>)
 800193e:	881a      	ldrh	r2, [r3, #0]
 8001940:	4b46      	ldr	r3, [pc, #280]	; (8001a5c <main+0x2cc>)
 8001942:	801a      	strh	r2, [r3, #0]
				 // BLUE channel
				 htim4.Instance->CCR1 = B_channel_Intensity ;
 8001944:	4b46      	ldr	r3, [pc, #280]	; (8001a60 <main+0x2d0>)
 8001946:	881a      	ldrh	r2, [r3, #0]
 8001948:	4b2c      	ldr	r3, [pc, #176]	; (80019fc <main+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	635a      	str	r2, [r3, #52]	; 0x34
				 MM_param2 = B_channel_Intensity ;
 800194e:	4b44      	ldr	r3, [pc, #272]	; (8001a60 <main+0x2d0>)
 8001950:	881a      	ldrh	r2, [r3, #0]
 8001952:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <main+0x2d4>)
 8001954:	801a      	strh	r2, [r3, #0]
 8001956:	e00d      	b.n	8001974 <main+0x1e4>


			 }else{
				 // put all channels off
				 //red channel
				 htim2.Instance->CCR4 =  0;
 8001958:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <main+0x264>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2200      	movs	r2, #0
 800195e:	641a      	str	r2, [r3, #64]	; 0x40
				 // GREEN channel
				 htim3.Instance->CCR4 = 0 ;
 8001960:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <main+0x268>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2200      	movs	r2, #0
 8001966:	641a      	str	r2, [r3, #64]	; 0x40
				 // BLUE channel
				 htim4.Instance->CCR1 = 0 ;
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <main+0x26c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2200      	movs	r2, #0
 800196e:	635a      	str	r2, [r3, #52]	; 0x34
 8001970:	e000      	b.n	8001974 <main+0x1e4>
		if(LED_ON == 1){
 8001972:	bf00      	nop

		 }
	 }

	 // right button state update
	 right_button_state_update() ;
 8001974:	f7ff f920 	bl	8000bb8 <right_button_state_update>
	 //EMERGENCY MODES
	  if(button_count ==1 ){
 8001978:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <main+0x274>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	f47f af44 	bne.w	800180a <main+0x7a>

		 if(em_count == 0 || em_default ==1){ //strobe wit default intensity
 8001982:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <main+0x27c>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <main+0x202>
 800198a:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <main+0x280>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d111      	bne.n	80019b6 <main+0x226>
			 em_default = 0 ; //default state reached
 8001992:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <main+0x280>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	2120      	movs	r1, #32
 800199c:	4832      	ldr	r0, [pc, #200]	; (8001a68 <main+0x2d8>)
 800199e:	f002 fcf3 	bl	8004388 <HAL_GPIO_WritePin>


			 if(LED_ON){ //LED_on =?
 80019a2:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <main+0x284>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d019      	beq.n	80019de <main+0x24e>
				 // strobe LED with provided on time
				 EM_mode_Strobe(strobe_delay) ;
 80019aa:	4b30      	ldr	r3, [pc, #192]	; (8001a6c <main+0x2dc>)
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff f986 	bl	8000cc0 <EM_mode_Strobe>
			 if(LED_ON){ //LED_on =?
 80019b4:	e013      	b.n	80019de <main+0x24e>
			 }
		 }
		 else if(em_count ==1){ // SOS MOSRE
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <main+0x27c>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d105      	bne.n	80019ca <main+0x23a>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80019be:	2201      	movs	r2, #1
 80019c0:	2120      	movs	r1, #32
 80019c2:	4829      	ldr	r0, [pc, #164]	; (8001a68 <main+0x2d8>)
 80019c4:	f002 fce0 	bl	8004388 <HAL_GPIO_WritePin>
 80019c8:	e71f      	b.n	800180a <main+0x7a>


		 }
		 else{
			 if(em_count == 2){ // CUSTOM MORSE
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <main+0x27c>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	f47f af1b 	bne.w	800180a <main+0x7a>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80019d4:	2201      	movs	r2, #1
 80019d6:	2120      	movs	r1, #32
 80019d8:	4823      	ldr	r0, [pc, #140]	; (8001a68 <main+0x2d8>)
 80019da:	f002 fcd5 	bl	8004388 <HAL_GPIO_WritePin>
	  system_state_update() ;
 80019de:	e714      	b.n	800180a <main+0x7a>
 80019e0:	2000001c 	.word	0x2000001c
 80019e4:	20000268 	.word	0x20000268
 80019e8:	20002314 	.word	0x20002314
 80019ec:	200002f8 	.word	0x200002f8
 80019f0:	200000f0 	.word	0x200000f0
 80019f4:	20000184 	.word	0x20000184
 80019f8:	200001d0 	.word	0x200001d0
 80019fc:	2000021c 	.word	0x2000021c
 8001a00:	20002308 	.word	0x20002308
 8001a04:	200002f0 	.word	0x200002f0
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	200002f4 	.word	0x200002f4
 8001a10:	20000001 	.word	0x20000001
 8001a14:	20002307 	.word	0x20002307
 8001a18:	20002306 	.word	0x20002306
 8001a1c:	20002318 	.word	0x20002318
 8001a20:	20000010 	.word	0x20000010
 8001a24:	20002322 	.word	0x20002322
 8001a28:	2000231c 	.word	0x2000231c
 8001a2c:	20002324 	.word	0x20002324
 8001a30:	2000231a 	.word	0x2000231a
 8001a34:	2000002c 	.word	0x2000002c
 8001a38:	08009214 	.word	0x08009214
 8001a3c:	2000004c 	.word	0x2000004c
 8001a40:	2000231e 	.word	0x2000231e
 8001a44:	08009234 	.word	0x08009234
 8001a48:	20000054 	.word	0x20000054
 8001a4c:	20000050 	.word	0x20000050
 8001a50:	20000016 	.word	0x20000016
 8001a54:	2000232a 	.word	0x2000232a
 8001a58:	20000018 	.word	0x20000018
 8001a5c:	2000232c 	.word	0x2000232c
 8001a60:	2000001a 	.word	0x2000001a
 8001a64:	2000232e 	.word	0x2000232e
 8001a68:	48000400 	.word	0x48000400
 8001a6c:	20000012 	.word	0x20000012

08001a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b0a6      	sub	sp, #152	; 0x98
 8001a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a7a:	2228      	movs	r2, #40	; 0x28
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f006 fe04 	bl	800868c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	2258      	movs	r2, #88	; 0x58
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f006 fdf6 	bl	800868c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aa8:	2310      	movs	r3, #16
 8001aaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ab8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001abc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ac0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f002 fc96 	bl	8004400 <HAL_RCC_OscConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001ada:	f000 fb6b 	bl	80021b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ade:	230f      	movs	r3, #15
 8001ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001af4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001af8:	2102      	movs	r1, #2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fcd4 	bl	80054a8 <HAL_RCC_ClockConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b06:	f000 fb55 	bl	80021b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <SystemClock_Config+0xcc>)
 8001b0c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 fef6 	bl	8005914 <HAL_RCCEx_PeriphCLKConfig>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b2e:	f000 fb41 	bl	80021b4 <Error_Handler>
  }
}
 8001b32:	bf00      	nop
 8001b34:	3798      	adds	r7, #152	; 0x98
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	00300082 	.word	0x00300082

08001b40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b46:	f107 031c 	add.w	r3, r7, #28
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
 8001b60:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b62:	4b2e      	ldr	r3, [pc, #184]	; (8001c1c <MX_ADC1_Init+0xdc>)
 8001b64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001b68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b6a:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <MX_ADC1_Init+0xdc>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b70:	4b2a      	ldr	r3, [pc, #168]	; (8001c1c <MX_ADC1_Init+0xdc>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b76:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <MX_ADC1_Init+0xdc>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b7c:	4b27      	ldr	r3, [pc, #156]	; (8001c1c <MX_ADC1_Init+0xdc>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <MX_ADC1_Init+0xdc>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b8a:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <MX_ADC1_Init+0xdc>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b90:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <MX_ADC1_Init+0xdc>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <MX_ADC1_Init+0xdc>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <MX_ADC1_Init+0xdc>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <MX_ADC1_Init+0xdc>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001baa:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <MX_ADC1_Init+0xdc>)
 8001bac:	2204      	movs	r2, #4
 8001bae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <MX_ADC1_Init+0xdc>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001bb6:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <MX_ADC1_Init+0xdc>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bbc:	4817      	ldr	r0, [pc, #92]	; (8001c1c <MX_ADC1_Init+0xdc>)
 8001bbe:	f000 fee1 	bl	8002984 <HAL_ADC_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001bc8:	f000 faf4 	bl	80021b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4811      	ldr	r0, [pc, #68]	; (8001c1c <MX_ADC1_Init+0xdc>)
 8001bd8:	f001 fcd6 	bl	8003588 <HAL_ADCEx_MultiModeConfigChannel>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001be2:	f000 fae7 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001be6:	2301      	movs	r3, #1
 8001be8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bea:	2301      	movs	r3, #1
 8001bec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4806      	ldr	r0, [pc, #24]	; (8001c1c <MX_ADC1_Init+0xdc>)
 8001c04:	f001 f9d4 	bl	8002fb0 <HAL_ADC_ConfigChannel>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001c0e:	f000 fad1 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	3728      	adds	r7, #40	; 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200000f0 	.word	0x200000f0

08001c20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08e      	sub	sp, #56	; 0x38
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c40:	463b      	mov	r3, r7
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
 8001c4c:	611a      	str	r2, [r3, #16]
 8001c4e:	615a      	str	r2, [r3, #20]
 8001c50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c52:	4b33      	ldr	r3, [pc, #204]	; (8001d20 <MX_TIM2_Init+0x100>)
 8001c54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36;
 8001c5a:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <MX_TIM2_Init+0x100>)
 8001c5c:	2224      	movs	r2, #36	; 0x24
 8001c5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c60:	4b2f      	ldr	r3, [pc, #188]	; (8001d20 <MX_TIM2_Init+0x100>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 512;
 8001c66:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <MX_TIM2_Init+0x100>)
 8001c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6e:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <MX_TIM2_Init+0x100>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c74:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <MX_TIM2_Init+0x100>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c7a:	4829      	ldr	r0, [pc, #164]	; (8001d20 <MX_TIM2_Init+0x100>)
 8001c7c:	f004 f868 	bl	8005d50 <HAL_TIM_Base_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001c86:	f000 fa95 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c94:	4619      	mov	r1, r3
 8001c96:	4822      	ldr	r0, [pc, #136]	; (8001d20 <MX_TIM2_Init+0x100>)
 8001c98:	f004 fb32 	bl	8006300 <HAL_TIM_ConfigClockSource>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001ca2:	f000 fa87 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ca6:	481e      	ldr	r0, [pc, #120]	; (8001d20 <MX_TIM2_Init+0x100>)
 8001ca8:	f004 f8a9 	bl	8005dfe <HAL_TIM_PWM_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001cb2:	f000 fa7f 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cbe:	f107 031c 	add.w	r3, r7, #28
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4816      	ldr	r0, [pc, #88]	; (8001d20 <MX_TIM2_Init+0x100>)
 8001cc6:	f005 f849 	bl	8006d5c <HAL_TIMEx_MasterConfigSynchronization>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001cd0:	f000 fa70 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cd4:	2360      	movs	r3, #96	; 0x60
 8001cd6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	480d      	ldr	r0, [pc, #52]	; (8001d20 <MX_TIM2_Init+0x100>)
 8001cec:	f004 f9f4 	bl	80060d8 <HAL_TIM_PWM_ConfigChannel>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001cf6:	f000 fa5d 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	220c      	movs	r2, #12
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4807      	ldr	r0, [pc, #28]	; (8001d20 <MX_TIM2_Init+0x100>)
 8001d02:	f004 f9e9 	bl	80060d8 <HAL_TIM_PWM_ConfigChannel>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001d0c:	f000 fa52 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d10:	4803      	ldr	r0, [pc, #12]	; (8001d20 <MX_TIM2_Init+0x100>)
 8001d12:	f000 fb27 	bl	8002364 <HAL_TIM_MspPostInit>

}
 8001d16:	bf00      	nop
 8001d18:	3738      	adds	r7, #56	; 0x38
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000184 	.word	0x20000184

08001d24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08e      	sub	sp, #56	; 0x38
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d44:	463b      	mov	r3, r7
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	611a      	str	r2, [r3, #16]
 8001d52:	615a      	str	r2, [r3, #20]
 8001d54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d56:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <MX_TIM3_Init+0xe8>)
 8001d58:	4a2d      	ldr	r2, [pc, #180]	; (8001e10 <MX_TIM3_Init+0xec>)
 8001d5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36;
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <MX_TIM3_Init+0xe8>)
 8001d5e:	2224      	movs	r2, #36	; 0x24
 8001d60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d62:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <MX_TIM3_Init+0xe8>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 512;
 8001d68:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <MX_TIM3_Init+0xe8>)
 8001d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d70:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <MX_TIM3_Init+0xe8>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d76:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <MX_TIM3_Init+0xe8>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d7c:	4823      	ldr	r0, [pc, #140]	; (8001e0c <MX_TIM3_Init+0xe8>)
 8001d7e:	f003 ffe7 	bl	8005d50 <HAL_TIM_Base_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001d88:	f000 fa14 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d96:	4619      	mov	r1, r3
 8001d98:	481c      	ldr	r0, [pc, #112]	; (8001e0c <MX_TIM3_Init+0xe8>)
 8001d9a:	f004 fab1 	bl	8006300 <HAL_TIM_ConfigClockSource>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001da4:	f000 fa06 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001da8:	4818      	ldr	r0, [pc, #96]	; (8001e0c <MX_TIM3_Init+0xe8>)
 8001daa:	f004 f828 	bl	8005dfe <HAL_TIM_PWM_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001db4:	f000 f9fe 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dc0:	f107 031c 	add.w	r3, r7, #28
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4811      	ldr	r0, [pc, #68]	; (8001e0c <MX_TIM3_Init+0xe8>)
 8001dc8:	f004 ffc8 	bl	8006d5c <HAL_TIMEx_MasterConfigSynchronization>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001dd2:	f000 f9ef 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd6:	2360      	movs	r3, #96	; 0x60
 8001dd8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001de6:	463b      	mov	r3, r7
 8001de8:	220c      	movs	r2, #12
 8001dea:	4619      	mov	r1, r3
 8001dec:	4807      	ldr	r0, [pc, #28]	; (8001e0c <MX_TIM3_Init+0xe8>)
 8001dee:	f004 f973 	bl	80060d8 <HAL_TIM_PWM_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001df8:	f000 f9dc 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dfc:	4803      	ldr	r0, [pc, #12]	; (8001e0c <MX_TIM3_Init+0xe8>)
 8001dfe:	f000 fab1 	bl	8002364 <HAL_TIM_MspPostInit>

}
 8001e02:	bf00      	nop
 8001e04:	3738      	adds	r7, #56	; 0x38
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200001d0 	.word	0x200001d0
 8001e10:	40000400 	.word	0x40000400

08001e14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08e      	sub	sp, #56	; 0x38
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e34:	463b      	mov	r3, r7
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]
 8001e40:	611a      	str	r2, [r3, #16]
 8001e42:	615a      	str	r2, [r3, #20]
 8001e44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e46:	4b2d      	ldr	r3, [pc, #180]	; (8001efc <MX_TIM4_Init+0xe8>)
 8001e48:	4a2d      	ldr	r2, [pc, #180]	; (8001f00 <MX_TIM4_Init+0xec>)
 8001e4a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36;
 8001e4c:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <MX_TIM4_Init+0xe8>)
 8001e4e:	2224      	movs	r2, #36	; 0x24
 8001e50:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e52:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <MX_TIM4_Init+0xe8>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e58:	4b28      	ldr	r3, [pc, #160]	; (8001efc <MX_TIM4_Init+0xe8>)
 8001e5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e5e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e60:	4b26      	ldr	r3, [pc, #152]	; (8001efc <MX_TIM4_Init+0xe8>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e66:	4b25      	ldr	r3, [pc, #148]	; (8001efc <MX_TIM4_Init+0xe8>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e6c:	4823      	ldr	r0, [pc, #140]	; (8001efc <MX_TIM4_Init+0xe8>)
 8001e6e:	f003 ff6f 	bl	8005d50 <HAL_TIM_Base_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001e78:	f000 f99c 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e86:	4619      	mov	r1, r3
 8001e88:	481c      	ldr	r0, [pc, #112]	; (8001efc <MX_TIM4_Init+0xe8>)
 8001e8a:	f004 fa39 	bl	8006300 <HAL_TIM_ConfigClockSource>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001e94:	f000 f98e 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e98:	4818      	ldr	r0, [pc, #96]	; (8001efc <MX_TIM4_Init+0xe8>)
 8001e9a:	f003 ffb0 	bl	8005dfe <HAL_TIM_PWM_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001ea4:	f000 f986 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001eb0:	f107 031c 	add.w	r3, r7, #28
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4811      	ldr	r0, [pc, #68]	; (8001efc <MX_TIM4_Init+0xe8>)
 8001eb8:	f004 ff50 	bl	8006d5c <HAL_TIMEx_MasterConfigSynchronization>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001ec2:	f000 f977 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec6:	2360      	movs	r3, #96	; 0x60
 8001ec8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	2200      	movs	r2, #0
 8001eda:	4619      	mov	r1, r3
 8001edc:	4807      	ldr	r0, [pc, #28]	; (8001efc <MX_TIM4_Init+0xe8>)
 8001ede:	f004 f8fb 	bl	80060d8 <HAL_TIM_PWM_ConfigChannel>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001ee8:	f000 f964 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001eec:	4803      	ldr	r0, [pc, #12]	; (8001efc <MX_TIM4_Init+0xe8>)
 8001eee:	f000 fa39 	bl	8002364 <HAL_TIM_MspPostInit>

}
 8001ef2:	bf00      	nop
 8001ef4:	3738      	adds	r7, #56	; 0x38
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	2000021c 	.word	0x2000021c
 8001f00:	40000800 	.word	0x40000800

08001f04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f08:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <MX_USART2_UART_Init+0x5c>)
 8001f0a:	4a16      	ldr	r2, [pc, #88]	; (8001f64 <MX_USART2_UART_Init+0x60>)
 8001f0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001f0e:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <MX_USART2_UART_Init+0x5c>)
 8001f10:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001f14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <MX_USART2_UART_Init+0x5c>)
 8001f18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f1c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <MX_USART2_UART_Init+0x5c>)
 8001f20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <MX_USART2_UART_Init+0x5c>)
 8001f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f2c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <MX_USART2_UART_Init+0x5c>)
 8001f30:	220c      	movs	r2, #12
 8001f32:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <MX_USART2_UART_Init+0x5c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <MX_USART2_UART_Init+0x5c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <MX_USART2_UART_Init+0x5c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <MX_USART2_UART_Init+0x5c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f4c:	4804      	ldr	r0, [pc, #16]	; (8001f60 <MX_USART2_UART_Init+0x5c>)
 8001f4e:	f004 ff91 	bl	8006e74 <HAL_UART_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001f58:	f000 f92c 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000268 	.word	0x20000268
 8001f64:	40004400 	.word	0x40004400

08001f68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <MX_DMA_Init+0x38>)
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	4a0b      	ldr	r2, [pc, #44]	; (8001fa0 <MX_DMA_Init+0x38>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6153      	str	r3, [r2, #20]
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <MX_DMA_Init+0x38>)
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	200b      	movs	r0, #11
 8001f8c:	f001 fdf9 	bl	8003b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f90:	200b      	movs	r0, #11
 8001f92:	f001 fe12 	bl	8003bba <HAL_NVIC_EnableIRQ>

}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000

08001fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	; 0x28
 8001fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fba:	4b49      	ldr	r3, [pc, #292]	; (80020e0 <MX_GPIO_Init+0x13c>)
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	4a48      	ldr	r2, [pc, #288]	; (80020e0 <MX_GPIO_Init+0x13c>)
 8001fc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fc4:	6153      	str	r3, [r2, #20]
 8001fc6:	4b46      	ldr	r3, [pc, #280]	; (80020e0 <MX_GPIO_Init+0x13c>)
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fd2:	4b43      	ldr	r3, [pc, #268]	; (80020e0 <MX_GPIO_Init+0x13c>)
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	4a42      	ldr	r2, [pc, #264]	; (80020e0 <MX_GPIO_Init+0x13c>)
 8001fd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fdc:	6153      	str	r3, [r2, #20]
 8001fde:	4b40      	ldr	r3, [pc, #256]	; (80020e0 <MX_GPIO_Init+0x13c>)
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fea:	4b3d      	ldr	r3, [pc, #244]	; (80020e0 <MX_GPIO_Init+0x13c>)
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	4a3c      	ldr	r2, [pc, #240]	; (80020e0 <MX_GPIO_Init+0x13c>)
 8001ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff4:	6153      	str	r3, [r2, #20]
 8001ff6:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <MX_GPIO_Init+0x13c>)
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002002:	4b37      	ldr	r3, [pc, #220]	; (80020e0 <MX_GPIO_Init+0x13c>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	4a36      	ldr	r2, [pc, #216]	; (80020e0 <MX_GPIO_Init+0x13c>)
 8002008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800200c:	6153      	str	r3, [r2, #20]
 800200e:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <MX_GPIO_Init+0x13c>)
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D3_Pin|LED_D4_Pin|LED_D5_Pin, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8002020:	4830      	ldr	r0, [pc, #192]	; (80020e4 <MX_GPIO_Init+0x140>)
 8002022:	f002 f9b1 	bl	8004388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800202c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002030:	f002 f9aa 	bl	8004388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002034:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800203a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800203e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	4827      	ldr	r0, [pc, #156]	; (80020e8 <MX_GPIO_Init+0x144>)
 800204c:	f001 fffa 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002050:	23c0      	movs	r3, #192	; 0xc0
 8002052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002054:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800205a:	2301      	movs	r3, #1
 800205c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002068:	f001 ffec 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D3_Pin LED_D4_Pin LED_D5_Pin */
  GPIO_InitStruct.Pin = LED_D3_Pin|LED_D4_Pin|LED_D5_Pin;
 800206c:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8002070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002072:	2301      	movs	r3, #1
 8002074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	4817      	ldr	r0, [pc, #92]	; (80020e4 <MX_GPIO_Init+0x140>)
 8002086:	f001 ffdd 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D2_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 800208a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800208e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002090:	2301      	movs	r3, #1
 8002092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	4619      	mov	r1, r3
 80020a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a6:	f001 ffcd 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80020b0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80020b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020b6:	2301      	movs	r3, #1
 80020b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	4808      	ldr	r0, [pc, #32]	; (80020e4 <MX_GPIO_Init+0x140>)
 80020c2:	f001 ffbf 	bl	8004044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2100      	movs	r1, #0
 80020ca:	2017      	movs	r0, #23
 80020cc:	f001 fd59 	bl	8003b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020d0:	2017      	movs	r0, #23
 80020d2:	f001 fd72 	bl	8003bba <HAL_NVIC_EnableIRQ>

}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	; 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40021000 	.word	0x40021000
 80020e4:	48000400 	.word	0x48000400
 80020e8:	48000800 	.word	0x48000800

080020ec <MF_mode_LED>:

/* USER CODE BEGIN 4 */
// FUNCTIONS
void MF_mode_LED(){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80020f0:	2201      	movs	r2, #1
 80020f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fa:	f002 f945 	bl	8004388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80020fe:	2200      	movs	r2, #0
 8002100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002104:	4807      	ldr	r0, [pc, #28]	; (8002124 <MF_mode_LED+0x38>)
 8002106:	f002 f93f 	bl	8004388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800210a:	2200      	movs	r2, #0
 800210c:	2110      	movs	r1, #16
 800210e:	4805      	ldr	r0, [pc, #20]	; (8002124 <MF_mode_LED+0x38>)
 8002110:	f002 f93a 	bl	8004388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002114:	2200      	movs	r2, #0
 8002116:	2120      	movs	r1, #32
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <MF_mode_LED+0x38>)
 800211a:	f002 f935 	bl	8004388 <HAL_GPIO_WritePin>
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	48000400 	.word	0x48000400

08002128 <ME_mode_LED>:

void ME_mode_LED(){
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800212c:	2200      	movs	r2, #0
 800212e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002136:	f002 f927 	bl	8004388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800213a:	2201      	movs	r2, #1
 800213c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002140:	4804      	ldr	r0, [pc, #16]	; (8002154 <ME_mode_LED+0x2c>)
 8002142:	f002 f921 	bl	8004388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002146:	2200      	movs	r2, #0
 8002148:	2110      	movs	r1, #16
 800214a:	4802      	ldr	r0, [pc, #8]	; (8002154 <ME_mode_LED+0x2c>)
 800214c:	f002 f91c 	bl	8004388 <HAL_GPIO_WritePin>
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}
 8002154:	48000400 	.word	0x48000400

08002158 <MM_mode_LED>:

void MM_mode_LED(){
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800215c:	2200      	movs	r2, #0
 800215e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002166:	f002 f90f 	bl	8004388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800216a:	2200      	movs	r2, #0
 800216c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002170:	4807      	ldr	r0, [pc, #28]	; (8002190 <MM_mode_LED+0x38>)
 8002172:	f002 f909 	bl	8004388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002176:	2201      	movs	r2, #1
 8002178:	2110      	movs	r1, #16
 800217a:	4805      	ldr	r0, [pc, #20]	; (8002190 <MM_mode_LED+0x38>)
 800217c:	f002 f904 	bl	8004388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002180:	2200      	movs	r2, #0
 8002182:	2120      	movs	r1, #32
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <MM_mode_LED+0x38>)
 8002186:	f002 f8ff 	bl	8004388 <HAL_GPIO_WritePin>
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	48000400 	.word	0x48000400

08002194 <HAL_ADC_ConvCpltCallback>:


// adc buffer filled by dma circular sampling
// data should not be processed in the interrupt, it makes rest of the
// progam inaccessible
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	adc_conv_complete = 1 ;
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <HAL_ADC_ConvCpltCallback+0x1c>)
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]

}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20002302 	.word	0x20002302

080021b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
}
 80021ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021bc:	e7fe      	b.n	80021bc <Error_Handler+0x8>
	...

080021c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <HAL_MspInit+0x44>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <HAL_MspInit+0x44>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6193      	str	r3, [r2, #24]
 80021d2:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <HAL_MspInit+0x44>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_MspInit+0x44>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	4a08      	ldr	r2, [pc, #32]	; (8002204 <HAL_MspInit+0x44>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	61d3      	str	r3, [r2, #28]
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_MspInit+0x44>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021f6:	2007      	movs	r0, #7
 80021f8:	f001 fcb8 	bl	8003b6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000

08002208 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08a      	sub	sp, #40	; 0x28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002228:	d14c      	bne.n	80022c4 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800222a:	4b28      	ldr	r3, [pc, #160]	; (80022cc <HAL_ADC_MspInit+0xc4>)
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	4a27      	ldr	r2, [pc, #156]	; (80022cc <HAL_ADC_MspInit+0xc4>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002234:	6153      	str	r3, [r2, #20]
 8002236:	4b25      	ldr	r3, [pc, #148]	; (80022cc <HAL_ADC_MspInit+0xc4>)
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	4b22      	ldr	r3, [pc, #136]	; (80022cc <HAL_ADC_MspInit+0xc4>)
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	4a21      	ldr	r2, [pc, #132]	; (80022cc <HAL_ADC_MspInit+0xc4>)
 8002248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800224c:	6153      	str	r3, [r2, #20]
 800224e:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <HAL_ADC_MspInit+0xc4>)
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800225a:	2301      	movs	r3, #1
 800225c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800225e:	2303      	movs	r3, #3
 8002260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	4619      	mov	r1, r3
 800226c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002270:	f001 fee8 	bl	8004044 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002274:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <HAL_ADC_MspInit+0xc8>)
 8002276:	4a17      	ldr	r2, [pc, #92]	; (80022d4 <HAL_ADC_MspInit+0xcc>)
 8002278:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_ADC_MspInit+0xc8>)
 800227c:	2200      	movs	r2, #0
 800227e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002280:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <HAL_ADC_MspInit+0xc8>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_ADC_MspInit+0xc8>)
 8002288:	2280      	movs	r2, #128	; 0x80
 800228a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_ADC_MspInit+0xc8>)
 800228e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002292:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <HAL_ADC_MspInit+0xc8>)
 8002296:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800229a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <HAL_ADC_MspInit+0xc8>)
 800229e:	2220      	movs	r2, #32
 80022a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022a2:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_ADC_MspInit+0xc8>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022a8:	4809      	ldr	r0, [pc, #36]	; (80022d0 <HAL_ADC_MspInit+0xc8>)
 80022aa:	f001 fca0 	bl	8003bee <HAL_DMA_Init>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80022b4:	f7ff ff7e 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <HAL_ADC_MspInit+0xc8>)
 80022bc:	639a      	str	r2, [r3, #56]	; 0x38
 80022be:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <HAL_ADC_MspInit+0xc8>)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022c4:	bf00      	nop
 80022c6:	3728      	adds	r7, #40	; 0x28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	20000140 	.word	0x20000140
 80022d4:	40020008 	.word	0x40020008

080022d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e8:	d10c      	bne.n	8002304 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ea:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <HAL_TIM_Base_MspInit+0x80>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	4a1a      	ldr	r2, [pc, #104]	; (8002358 <HAL_TIM_Base_MspInit+0x80>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	61d3      	str	r3, [r2, #28]
 80022f6:	4b18      	ldr	r3, [pc, #96]	; (8002358 <HAL_TIM_Base_MspInit+0x80>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002302:	e022      	b.n	800234a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a14      	ldr	r2, [pc, #80]	; (800235c <HAL_TIM_Base_MspInit+0x84>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10c      	bne.n	8002328 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_TIM_Base_MspInit+0x80>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	4a11      	ldr	r2, [pc, #68]	; (8002358 <HAL_TIM_Base_MspInit+0x80>)
 8002314:	f043 0302 	orr.w	r3, r3, #2
 8002318:	61d3      	str	r3, [r2, #28]
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <HAL_TIM_Base_MspInit+0x80>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	693b      	ldr	r3, [r7, #16]
}
 8002326:	e010      	b.n	800234a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <HAL_TIM_Base_MspInit+0x88>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d10b      	bne.n	800234a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_TIM_Base_MspInit+0x80>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	4a08      	ldr	r2, [pc, #32]	; (8002358 <HAL_TIM_Base_MspInit+0x80>)
 8002338:	f043 0304 	orr.w	r3, r3, #4
 800233c:	61d3      	str	r3, [r2, #28]
 800233e:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_TIM_Base_MspInit+0x80>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
}
 800234a:	bf00      	nop
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000
 800235c:	40000400 	.word	0x40000400
 8002360:	40000800 	.word	0x40000800

08002364 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08c      	sub	sp, #48	; 0x30
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 031c 	add.w	r3, r7, #28
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002384:	d13a      	bne.n	80023fc <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002386:	4b42      	ldr	r3, [pc, #264]	; (8002490 <HAL_TIM_MspPostInit+0x12c>)
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	4a41      	ldr	r2, [pc, #260]	; (8002490 <HAL_TIM_MspPostInit+0x12c>)
 800238c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002390:	6153      	str	r3, [r2, #20]
 8002392:	4b3f      	ldr	r3, [pc, #252]	; (8002490 <HAL_TIM_MspPostInit+0x12c>)
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	61bb      	str	r3, [r7, #24]
 800239c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239e:	4b3c      	ldr	r3, [pc, #240]	; (8002490 <HAL_TIM_MspPostInit+0x12c>)
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	4a3b      	ldr	r2, [pc, #236]	; (8002490 <HAL_TIM_MspPostInit+0x12c>)
 80023a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a8:	6153      	str	r3, [r2, #20]
 80023aa:	4b39      	ldr	r3, [pc, #228]	; (8002490 <HAL_TIM_MspPostInit+0x12c>)
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80023b6:	2320      	movs	r3, #32
 80023b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023c6:	2301      	movs	r3, #1
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ca:	f107 031c 	add.w	r3, r7, #28
 80023ce:	4619      	mov	r1, r3
 80023d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d4:	f001 fe36 	bl	8004044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023de:	2302      	movs	r3, #2
 80023e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e6:	2300      	movs	r3, #0
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023ea:	2301      	movs	r3, #1
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ee:	f107 031c 	add.w	r3, r7, #28
 80023f2:	4619      	mov	r1, r3
 80023f4:	4827      	ldr	r0, [pc, #156]	; (8002494 <HAL_TIM_MspPostInit+0x130>)
 80023f6:	f001 fe25 	bl	8004044 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80023fa:	e044      	b.n	8002486 <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM3)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a25      	ldr	r2, [pc, #148]	; (8002498 <HAL_TIM_MspPostInit+0x134>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d11c      	bne.n	8002440 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002406:	4b22      	ldr	r3, [pc, #136]	; (8002490 <HAL_TIM_MspPostInit+0x12c>)
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	4a21      	ldr	r2, [pc, #132]	; (8002490 <HAL_TIM_MspPostInit+0x12c>)
 800240c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002410:	6153      	str	r3, [r2, #20]
 8002412:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <HAL_TIM_MspPostInit+0x12c>)
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800241e:	2302      	movs	r3, #2
 8002420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800242e:	2302      	movs	r3, #2
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002432:	f107 031c 	add.w	r3, r7, #28
 8002436:	4619      	mov	r1, r3
 8002438:	4816      	ldr	r0, [pc, #88]	; (8002494 <HAL_TIM_MspPostInit+0x130>)
 800243a:	f001 fe03 	bl	8004044 <HAL_GPIO_Init>
}
 800243e:	e022      	b.n	8002486 <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM4)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a15      	ldr	r2, [pc, #84]	; (800249c <HAL_TIM_MspPostInit+0x138>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d11d      	bne.n	8002486 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_TIM_MspPostInit+0x12c>)
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	4a10      	ldr	r2, [pc, #64]	; (8002490 <HAL_TIM_MspPostInit+0x12c>)
 8002450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002454:	6153      	str	r3, [r2, #20]
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <HAL_TIM_MspPostInit+0x12c>)
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002462:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002470:	2300      	movs	r3, #0
 8002472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002474:	230a      	movs	r3, #10
 8002476:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002478:	f107 031c 	add.w	r3, r7, #28
 800247c:	4619      	mov	r1, r3
 800247e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002482:	f001 fddf 	bl	8004044 <HAL_GPIO_Init>
}
 8002486:	bf00      	nop
 8002488:	3730      	adds	r7, #48	; 0x30
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
 8002494:	48000400 	.word	0x48000400
 8002498:	40000400 	.word	0x40000400
 800249c:	40000800 	.word	0x40000800

080024a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	; 0x28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1b      	ldr	r2, [pc, #108]	; (800252c <HAL_UART_MspInit+0x8c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d130      	bne.n	8002524 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024c2:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_UART_MspInit+0x90>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	4a1a      	ldr	r2, [pc, #104]	; (8002530 <HAL_UART_MspInit+0x90>)
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024cc:	61d3      	str	r3, [r2, #28]
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <HAL_UART_MspInit+0x90>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <HAL_UART_MspInit+0x90>)
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	4a14      	ldr	r2, [pc, #80]	; (8002530 <HAL_UART_MspInit+0x90>)
 80024e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e4:	6153      	str	r3, [r2, #20]
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_UART_MspInit+0x90>)
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024f2:	230c      	movs	r3, #12
 80024f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fe:	2300      	movs	r3, #0
 8002500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002502:	2307      	movs	r3, #7
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002506:	f107 0314 	add.w	r3, r7, #20
 800250a:	4619      	mov	r1, r3
 800250c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002510:	f001 fd98 	bl	8004044 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002514:	2200      	movs	r2, #0
 8002516:	2100      	movs	r1, #0
 8002518:	2026      	movs	r0, #38	; 0x26
 800251a:	f001 fb32 	bl	8003b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800251e:	2026      	movs	r0, #38	; 0x26
 8002520:	f001 fb4b 	bl	8003bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002524:	bf00      	nop
 8002526:	3728      	adds	r7, #40	; 0x28
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40004400 	.word	0x40004400
 8002530:	40021000 	.word	0x40021000

08002534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002538:	e7fe      	b.n	8002538 <NMI_Handler+0x4>

0800253a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800253e:	e7fe      	b.n	800253e <HardFault_Handler+0x4>

08002540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002544:	e7fe      	b.n	8002544 <MemManage_Handler+0x4>

08002546 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800254a:	e7fe      	b.n	800254a <BusFault_Handler+0x4>

0800254c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <UsageFault_Handler+0x4>

08002552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002580:	f000 f9a8 	bl	80028d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}

08002588 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800258c:	4802      	ldr	r0, [pc, #8]	; (8002598 <DMA1_Channel1_IRQHandler+0x10>)
 800258e:	f001 fc4b 	bl	8003e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000140 	.word	0x20000140

0800259c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 80025a0:	4b64      	ldr	r3, [pc, #400]	; (8002734 <EXTI9_5_IRQHandler+0x198>)
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d038      	beq.n	800261e <EXTI9_5_IRQHandler+0x82>

		if(HAL_GetTick() - ticks_pressed >= 20){
 80025ac:	f000 f9a6 	bl	80028fc <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4b61      	ldr	r3, [pc, #388]	; (8002738 <EXTI9_5_IRQHandler+0x19c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b13      	cmp	r3, #19
 80025ba:	d92c      	bls.n	8002616 <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 80025bc:	4b5f      	ldr	r3, [pc, #380]	; (800273c <EXTI9_5_IRQHandler+0x1a0>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d112      	bne.n	80025ec <EXTI9_5_IRQHandler+0x50>
 80025c6:	2140      	movs	r1, #64	; 0x40
 80025c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025cc:	f001 fec4 	bl	8004358 <HAL_GPIO_ReadPin>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10a      	bne.n	80025ec <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 80025d6:	4b59      	ldr	r3, [pc, #356]	; (800273c <EXTI9_5_IRQHandler+0x1a0>)
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 80025dc:	f000 f98e 	bl	80028fc <HAL_GetTick>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4a55      	ldr	r2, [pc, #340]	; (8002738 <EXTI9_5_IRQHandler+0x19c>)
 80025e4:	6013      	str	r3, [r2, #0]

				middle_button_pressed = 1;
 80025e6:	4b56      	ldr	r3, [pc, #344]	; (8002740 <EXTI9_5_IRQHandler+0x1a4>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 80025ec:	4b53      	ldr	r3, [pc, #332]	; (800273c <EXTI9_5_IRQHandler+0x1a0>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10f      	bne.n	8002616 <EXTI9_5_IRQHandler+0x7a>
 80025f6:	2140      	movs	r1, #64	; 0x40
 80025f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025fc:	f001 feac 	bl	8004358 <HAL_GPIO_ReadPin>
 8002600:	4603      	mov	r3, r0
 8002602:	2b01      	cmp	r3, #1
 8002604:	d107      	bne.n	8002616 <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 8002606:	f000 f979 	bl	80028fc <HAL_GetTick>
 800260a:	4603      	mov	r3, r0
 800260c:	4a4a      	ldr	r2, [pc, #296]	; (8002738 <EXTI9_5_IRQHandler+0x19c>)
 800260e:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8002610:	4b4a      	ldr	r3, [pc, #296]	; (800273c <EXTI9_5_IRQHandler+0x1a0>)
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 8002616:	4b47      	ldr	r3, [pc, #284]	; (8002734 <EXTI9_5_IRQHandler+0x198>)
 8002618:	2240      	movs	r2, #64	; 0x40
 800261a:	615a      	str	r2, [r3, #20]
 800261c:	e07d      	b.n	800271a <EXTI9_5_IRQHandler+0x17e>
	}
	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 800261e:	4b45      	ldr	r3, [pc, #276]	; (8002734 <EXTI9_5_IRQHandler+0x198>)
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002626:	2b00      	cmp	r3, #0
 8002628:	d038      	beq.n	800269c <EXTI9_5_IRQHandler+0x100>

			if(HAL_GetTick() - ticks_pressed >= 20){
 800262a:	f000 f967 	bl	80028fc <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	4b41      	ldr	r3, [pc, #260]	; (8002738 <EXTI9_5_IRQHandler+0x19c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b13      	cmp	r3, #19
 8002638:	d92c      	bls.n	8002694 <EXTI9_5_IRQHandler+0xf8>
				// stable low state
				if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 800263a:	4b40      	ldr	r3, [pc, #256]	; (800273c <EXTI9_5_IRQHandler+0x1a0>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b01      	cmp	r3, #1
 8002642:	d112      	bne.n	800266a <EXTI9_5_IRQHandler+0xce>
 8002644:	2180      	movs	r1, #128	; 0x80
 8002646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800264a:	f001 fe85 	bl	8004358 <HAL_GPIO_ReadPin>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10a      	bne.n	800266a <EXTI9_5_IRQHandler+0xce>
					button_state =0 ; // stable low reached
 8002654:	4b39      	ldr	r3, [pc, #228]	; (800273c <EXTI9_5_IRQHandler+0x1a0>)
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]
					ticks_pressed = HAL_GetTick() ;
 800265a:	f000 f94f 	bl	80028fc <HAL_GetTick>
 800265e:	4603      	mov	r3, r0
 8002660:	4a35      	ldr	r2, [pc, #212]	; (8002738 <EXTI9_5_IRQHandler+0x19c>)
 8002662:	6013      	str	r3, [r2, #0]

					right_button_pressed = 1;
 8002664:	4b37      	ldr	r3, [pc, #220]	; (8002744 <EXTI9_5_IRQHandler+0x1a8>)
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
				}

				// stable high state
				if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 800266a:	4b34      	ldr	r3, [pc, #208]	; (800273c <EXTI9_5_IRQHandler+0x1a0>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10f      	bne.n	8002694 <EXTI9_5_IRQHandler+0xf8>
 8002674:	2180      	movs	r1, #128	; 0x80
 8002676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267a:	f001 fe6d 	bl	8004358 <HAL_GPIO_ReadPin>
 800267e:	4603      	mov	r3, r0
 8002680:	2b01      	cmp	r3, #1
 8002682:	d107      	bne.n	8002694 <EXTI9_5_IRQHandler+0xf8>
					ticks_pressed = HAL_GetTick() ;
 8002684:	f000 f93a 	bl	80028fc <HAL_GetTick>
 8002688:	4603      	mov	r3, r0
 800268a:	4a2b      	ldr	r2, [pc, #172]	; (8002738 <EXTI9_5_IRQHandler+0x19c>)
 800268c:	6013      	str	r3, [r2, #0]
					button_state =1 ; // stable high state
 800268e:	4b2b      	ldr	r3, [pc, #172]	; (800273c <EXTI9_5_IRQHandler+0x1a0>)
 8002690:	2201      	movs	r2, #1
 8002692:	701a      	strb	r2, [r3, #0]

				}
			}


			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8002694:	4b27      	ldr	r3, [pc, #156]	; (8002734 <EXTI9_5_IRQHandler+0x198>)
 8002696:	2280      	movs	r2, #128	; 0x80
 8002698:	615a      	str	r2, [r3, #20]
 800269a:	e03e      	b.n	800271a <EXTI9_5_IRQHandler+0x17e>
	}
	else{
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 800269c:	4b25      	ldr	r3, [pc, #148]	; (8002734 <EXTI9_5_IRQHandler+0x198>)
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d038      	beq.n	800271a <EXTI9_5_IRQHandler+0x17e>

				if(HAL_GetTick() - ticks_pressed >= 20){
 80026a8:	f000 f928 	bl	80028fc <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b22      	ldr	r3, [pc, #136]	; (8002738 <EXTI9_5_IRQHandler+0x19c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b13      	cmp	r3, #19
 80026b6:	d92c      	bls.n	8002712 <EXTI9_5_IRQHandler+0x176>
					// stable low state
					if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 80026b8:	4b20      	ldr	r3, [pc, #128]	; (800273c <EXTI9_5_IRQHandler+0x1a0>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d112      	bne.n	80026e8 <EXTI9_5_IRQHandler+0x14c>
 80026c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026c6:	4820      	ldr	r0, [pc, #128]	; (8002748 <EXTI9_5_IRQHandler+0x1ac>)
 80026c8:	f001 fe46 	bl	8004358 <HAL_GPIO_ReadPin>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10a      	bne.n	80026e8 <EXTI9_5_IRQHandler+0x14c>
						button_state =0 ; // stable low reached
 80026d2:	4b1a      	ldr	r3, [pc, #104]	; (800273c <EXTI9_5_IRQHandler+0x1a0>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
						ticks_pressed = HAL_GetTick() ;
 80026d8:	f000 f910 	bl	80028fc <HAL_GetTick>
 80026dc:	4603      	mov	r3, r0
 80026de:	4a16      	ldr	r2, [pc, #88]	; (8002738 <EXTI9_5_IRQHandler+0x19c>)
 80026e0:	6013      	str	r3, [r2, #0]

						left_button_pressed = 1;
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <EXTI9_5_IRQHandler+0x1b0>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
					}

					// stable high state
					if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 80026e8:	4b14      	ldr	r3, [pc, #80]	; (800273c <EXTI9_5_IRQHandler+0x1a0>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10f      	bne.n	8002712 <EXTI9_5_IRQHandler+0x176>
 80026f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026f6:	4814      	ldr	r0, [pc, #80]	; (8002748 <EXTI9_5_IRQHandler+0x1ac>)
 80026f8:	f001 fe2e 	bl	8004358 <HAL_GPIO_ReadPin>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d107      	bne.n	8002712 <EXTI9_5_IRQHandler+0x176>
						ticks_pressed = HAL_GetTick() ;
 8002702:	f000 f8fb 	bl	80028fc <HAL_GetTick>
 8002706:	4603      	mov	r3, r0
 8002708:	4a0b      	ldr	r2, [pc, #44]	; (8002738 <EXTI9_5_IRQHandler+0x19c>)
 800270a:	6013      	str	r3, [r2, #0]
						button_state =1 ; // stable high state
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <EXTI9_5_IRQHandler+0x1a0>)
 800270e:	2201      	movs	r2, #1
 8002710:	701a      	strb	r2, [r3, #0]

					}
				}
				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 8002712:	4b08      	ldr	r3, [pc, #32]	; (8002734 <EXTI9_5_IRQHandler+0x198>)
 8002714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002718:	615a      	str	r2, [r3, #20]
			}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800271a:	2040      	movs	r0, #64	; 0x40
 800271c:	f001 fe4c 	bl	80043b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002720:	2080      	movs	r0, #128	; 0x80
 8002722:	f001 fe49 	bl	80043b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002726:	f44f 7080 	mov.w	r0, #256	; 0x100
 800272a:	f001 fe45 	bl	80043b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40010400 	.word	0x40010400
 8002738:	20002344 	.word	0x20002344
 800273c:	20000063 	.word	0x20000063
 8002740:	20002348 	.word	0x20002348
 8002744:	20002349 	.word	0x20002349
 8002748:	48000400 	.word	0x48000400
 800274c:	2000234a 	.word	0x2000234a

08002750 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <USART2_IRQHandler+0x10>)
 8002756:	f004 fd07 	bl	8007168 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000268 	.word	0x20000268

08002764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800276c:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <_sbrk+0x5c>)
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <_sbrk+0x60>)
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002778:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <_sbrk+0x64>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <_sbrk+0x64>)
 8002782:	4a12      	ldr	r2, [pc, #72]	; (80027cc <_sbrk+0x68>)
 8002784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <_sbrk+0x64>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	429a      	cmp	r2, r3
 8002792:	d207      	bcs.n	80027a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002794:	f005 ff50 	bl	8008638 <__errno>
 8002798:	4603      	mov	r3, r0
 800279a:	220c      	movs	r2, #12
 800279c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800279e:	f04f 33ff 	mov.w	r3, #4294967295
 80027a2:	e009      	b.n	80027b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027a4:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <_sbrk+0x64>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027aa:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <_sbrk+0x64>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	4a05      	ldr	r2, [pc, #20]	; (80027c8 <_sbrk+0x64>)
 80027b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027b6:	68fb      	ldr	r3, [r7, #12]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20010000 	.word	0x20010000
 80027c4:	00000400 	.word	0x00000400
 80027c8:	2000234c 	.word	0x2000234c
 80027cc:	20002368 	.word	0x20002368

080027d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <SystemInit+0x20>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	4a05      	ldr	r2, [pc, #20]	; (80027f0 <SystemInit+0x20>)
 80027dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80027f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800282c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80027f8:	f7ff ffea 	bl	80027d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027fc:	480c      	ldr	r0, [pc, #48]	; (8002830 <LoopForever+0x6>)
  ldr r1, =_edata
 80027fe:	490d      	ldr	r1, [pc, #52]	; (8002834 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002800:	4a0d      	ldr	r2, [pc, #52]	; (8002838 <LoopForever+0xe>)
  movs r3, #0
 8002802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002804:	e002      	b.n	800280c <LoopCopyDataInit>

08002806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280a:	3304      	adds	r3, #4

0800280c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800280c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800280e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002810:	d3f9      	bcc.n	8002806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002812:	4a0a      	ldr	r2, [pc, #40]	; (800283c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002814:	4c0a      	ldr	r4, [pc, #40]	; (8002840 <LoopForever+0x16>)
  movs r3, #0
 8002816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002818:	e001      	b.n	800281e <LoopFillZerobss>

0800281a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800281c:	3204      	adds	r2, #4

0800281e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800281e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002820:	d3fb      	bcc.n	800281a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002822:	f005 ff0f 	bl	8008644 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002826:	f7fe ffb3 	bl	8001790 <main>

0800282a <LoopForever>:

LoopForever:
    b LoopForever
 800282a:	e7fe      	b.n	800282a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800282c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002834:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8002838:	080093ac 	.word	0x080093ac
  ldr r2, =_sbss
 800283c:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8002840:	20002364 	.word	0x20002364

08002844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002844:	e7fe      	b.n	8002844 <ADC1_2_IRQHandler>
	...

08002848 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800284c:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_Init+0x28>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a07      	ldr	r2, [pc, #28]	; (8002870 <HAL_Init+0x28>)
 8002852:	f043 0310 	orr.w	r3, r3, #16
 8002856:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002858:	2003      	movs	r0, #3
 800285a:	f001 f987 	bl	8003b6c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800285e:	2000      	movs	r0, #0
 8002860:	f000 f808 	bl	8002874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002864:	f7ff fcac 	bl	80021c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40022000 	.word	0x40022000

08002874 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800287c:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_InitTick+0x54>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_InitTick+0x58>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	4619      	mov	r1, r3
 8002886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800288a:	fbb3 f3f1 	udiv	r3, r3, r1
 800288e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002892:	4618      	mov	r0, r3
 8002894:	f001 f99f 	bl	8003bd6 <HAL_SYSTICK_Config>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e00e      	b.n	80028c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b0f      	cmp	r3, #15
 80028a6:	d80a      	bhi.n	80028be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028a8:	2200      	movs	r2, #0
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	f04f 30ff 	mov.w	r0, #4294967295
 80028b0:	f001 f967 	bl	8003b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028b4:	4a06      	ldr	r2, [pc, #24]	; (80028d0 <HAL_InitTick+0x5c>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e000      	b.n	80028c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000064 	.word	0x20000064
 80028cc:	2000006c 	.word	0x2000006c
 80028d0:	20000068 	.word	0x20000068

080028d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_IncTick+0x20>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_IncTick+0x24>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4413      	add	r3, r2
 80028e4:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <HAL_IncTick+0x24>)
 80028e6:	6013      	str	r3, [r2, #0]
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	2000006c 	.word	0x2000006c
 80028f8:	20002350 	.word	0x20002350

080028fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8002900:	4b03      	ldr	r3, [pc, #12]	; (8002910 <HAL_GetTick+0x14>)
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	20002350 	.word	0x20002350

08002914 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800291c:	f7ff ffee 	bl	80028fc <HAL_GetTick>
 8002920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292c:	d005      	beq.n	800293a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_Delay+0x44>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4413      	add	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800293a:	bf00      	nop
 800293c:	f7ff ffde 	bl	80028fc <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	429a      	cmp	r2, r3
 800294a:	d8f7      	bhi.n	800293c <HAL_Delay+0x28>
  {
  }
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	2000006c 	.word	0x2000006c

0800295c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b09a      	sub	sp, #104	; 0x68
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e1e3      	b.n	8002d6c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d176      	bne.n	8002aa4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d152      	bne.n	8002a64 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff fc15 	bl	8002208 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d13b      	bne.n	8002a64 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 ff87 	bl	8003900 <ADC_Disable>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d12f      	bne.n	8002a64 <HAL_ADC_Init+0xe0>
 8002a04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d12b      	bne.n	8002a64 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a14:	f023 0302 	bic.w	r3, r3, #2
 8002a18:	f043 0202 	orr.w	r2, r3, #2
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a2e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a3e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a40:	4b92      	ldr	r3, [pc, #584]	; (8002c8c <HAL_ADC_Init+0x308>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a92      	ldr	r2, [pc, #584]	; (8002c90 <HAL_ADC_Init+0x30c>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	0c9a      	lsrs	r2, r3, #18
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a56:	e002      	b.n	8002a5e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f9      	bne.n	8002a58 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d007      	beq.n	8002a82 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a80:	d110      	bne.n	8002aa4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f023 0312 	bic.w	r3, r3, #18
 8002a8a:	f043 0210 	orr.w	r2, r3, #16
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	f043 0201 	orr.w	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f040 8150 	bne.w	8002d52 <HAL_ADC_Init+0x3ce>
 8002ab2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f040 814b 	bne.w	8002d52 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f040 8143 	bne.w	8002d52 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ad4:	f043 0202 	orr.w	r2, r3, #2
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ae4:	d004      	beq.n	8002af0 <HAL_ADC_Init+0x16c>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a6a      	ldr	r2, [pc, #424]	; (8002c94 <HAL_ADC_Init+0x310>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d101      	bne.n	8002af4 <HAL_ADC_Init+0x170>
 8002af0:	4b69      	ldr	r3, [pc, #420]	; (8002c98 <HAL_ADC_Init+0x314>)
 8002af2:	e000      	b.n	8002af6 <HAL_ADC_Init+0x172>
 8002af4:	4b69      	ldr	r3, [pc, #420]	; (8002c9c <HAL_ADC_Init+0x318>)
 8002af6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b00:	d102      	bne.n	8002b08 <HAL_ADC_Init+0x184>
 8002b02:	4b64      	ldr	r3, [pc, #400]	; (8002c94 <HAL_ADC_Init+0x310>)
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	e01a      	b.n	8002b3e <HAL_ADC_Init+0x1ba>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a61      	ldr	r2, [pc, #388]	; (8002c94 <HAL_ADC_Init+0x310>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d103      	bne.n	8002b1a <HAL_ADC_Init+0x196>
 8002b12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	e011      	b.n	8002b3e <HAL_ADC_Init+0x1ba>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a60      	ldr	r2, [pc, #384]	; (8002ca0 <HAL_ADC_Init+0x31c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d102      	bne.n	8002b2a <HAL_ADC_Init+0x1a6>
 8002b24:	4b5f      	ldr	r3, [pc, #380]	; (8002ca4 <HAL_ADC_Init+0x320>)
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	e009      	b.n	8002b3e <HAL_ADC_Init+0x1ba>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a5d      	ldr	r2, [pc, #372]	; (8002ca4 <HAL_ADC_Init+0x320>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d102      	bne.n	8002b3a <HAL_ADC_Init+0x1b6>
 8002b34:	4b5a      	ldr	r3, [pc, #360]	; (8002ca0 <HAL_ADC_Init+0x31c>)
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	e001      	b.n	8002b3e <HAL_ADC_Init+0x1ba>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d108      	bne.n	8002b5e <HAL_ADC_Init+0x1da>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_ADC_Init+0x1da>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <HAL_ADC_Init+0x1dc>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d11c      	bne.n	8002b9e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b64:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d010      	beq.n	8002b8c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d107      	bne.n	8002b86 <HAL_ADC_Init+0x202>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_Init+0x202>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <HAL_ADC_Init+0x204>
 8002b86:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d108      	bne.n	8002b9e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b9c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	7e5b      	ldrb	r3, [r3, #25]
 8002ba2:	035b      	lsls	r3, r3, #13
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ba8:	2a01      	cmp	r2, #1
 8002baa:	d002      	beq.n	8002bb2 <HAL_ADC_Init+0x22e>
 8002bac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bb0:	e000      	b.n	8002bb4 <HAL_ADC_Init+0x230>
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d11b      	bne.n	8002c0a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7e5b      	ldrb	r3, [r3, #25]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	3b01      	subs	r3, #1
 8002be0:	045a      	lsls	r2, r3, #17
 8002be2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bea:	663b      	str	r3, [r7, #96]	; 0x60
 8002bec:	e00d      	b.n	8002c0a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002bf6:	f043 0220 	orr.w	r2, r3, #32
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	f043 0201 	orr.w	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d054      	beq.n	8002cbc <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a22      	ldr	r2, [pc, #136]	; (8002ca0 <HAL_ADC_Init+0x31c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d004      	beq.n	8002c26 <HAL_ADC_Init+0x2a2>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a20      	ldr	r2, [pc, #128]	; (8002ca4 <HAL_ADC_Init+0x320>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d140      	bne.n	8002ca8 <HAL_ADC_Init+0x324>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002c2e:	d02a      	beq.n	8002c86 <HAL_ADC_Init+0x302>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c38:	d022      	beq.n	8002c80 <HAL_ADC_Init+0x2fc>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002c42:	d01a      	beq.n	8002c7a <HAL_ADC_Init+0x2f6>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002c4c:	d012      	beq.n	8002c74 <HAL_ADC_Init+0x2f0>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002c56:	d00a      	beq.n	8002c6e <HAL_ADC_Init+0x2ea>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002c60:	d002      	beq.n	8002c68 <HAL_ADC_Init+0x2e4>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	e023      	b.n	8002cb0 <HAL_ADC_Init+0x32c>
 8002c68:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002c6c:	e020      	b.n	8002cb0 <HAL_ADC_Init+0x32c>
 8002c6e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c72:	e01d      	b.n	8002cb0 <HAL_ADC_Init+0x32c>
 8002c74:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002c78:	e01a      	b.n	8002cb0 <HAL_ADC_Init+0x32c>
 8002c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c7e:	e017      	b.n	8002cb0 <HAL_ADC_Init+0x32c>
 8002c80:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002c84:	e014      	b.n	8002cb0 <HAL_ADC_Init+0x32c>
 8002c86:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002c8a:	e011      	b.n	8002cb0 <HAL_ADC_Init+0x32c>
 8002c8c:	20000064 	.word	0x20000064
 8002c90:	431bde83 	.word	0x431bde83
 8002c94:	50000100 	.word	0x50000100
 8002c98:	50000300 	.word	0x50000300
 8002c9c:	50000700 	.word	0x50000700
 8002ca0:	50000400 	.word	0x50000400
 8002ca4:	50000500 	.word	0x50000500
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d114      	bne.n	8002cf4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cd8:	f023 0302 	bic.w	r3, r3, #2
 8002cdc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	7e1b      	ldrb	r3, [r3, #24]
 8002ce2:	039a      	lsls	r2, r3, #14
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4313      	orrs	r3, r2
 8002cee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <HAL_ADC_Init+0x3f0>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002d04:	430b      	orrs	r3, r1
 8002d06:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d10c      	bne.n	8002d2a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f023 010f 	bic.w	r1, r3, #15
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	1e5a      	subs	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
 8002d28:	e007      	b.n	8002d3a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 020f 	bic.w	r2, r2, #15
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	f023 0303 	bic.w	r3, r3, #3
 8002d48:	f043 0201 	orr.w	r2, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d50:	e00a      	b.n	8002d68 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f023 0312 	bic.w	r3, r3, #18
 8002d5a:	f043 0210 	orr.w	r2, r3, #16
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002d62:	2301      	movs	r3, #1
 8002d64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002d68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3768      	adds	r7, #104	; 0x68
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	fff0c007 	.word	0xfff0c007

08002d78 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f040 80f7 	bne.w	8002f86 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_ADC_Start_DMA+0x2e>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e0f2      	b.n	8002f8c <HAL_ADC_Start_DMA+0x214>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002db6:	d004      	beq.n	8002dc2 <HAL_ADC_Start_DMA+0x4a>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a75      	ldr	r2, [pc, #468]	; (8002f94 <HAL_ADC_Start_DMA+0x21c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d109      	bne.n	8002dd6 <HAL_ADC_Start_DMA+0x5e>
 8002dc2:	4b75      	ldr	r3, [pc, #468]	; (8002f98 <HAL_ADC_Start_DMA+0x220>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bf0c      	ite	eq
 8002dce:	2301      	moveq	r3, #1
 8002dd0:	2300      	movne	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	e008      	b.n	8002de8 <HAL_ADC_Start_DMA+0x70>
 8002dd6:	4b71      	ldr	r3, [pc, #452]	; (8002f9c <HAL_ADC_Start_DMA+0x224>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bf0c      	ite	eq
 8002de2:	2301      	moveq	r3, #1
 8002de4:	2300      	movne	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80c5 	beq.w	8002f78 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 fd22 	bl	8003838 <ADC_Enable>
 8002df4:	4603      	mov	r3, r0
 8002df6:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f040 80b7 	bne.w	8002f6e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e1c:	d004      	beq.n	8002e28 <HAL_ADC_Start_DMA+0xb0>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a5c      	ldr	r2, [pc, #368]	; (8002f94 <HAL_ADC_Start_DMA+0x21c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d106      	bne.n	8002e36 <HAL_ADC_Start_DMA+0xbe>
 8002e28:	4b5b      	ldr	r3, [pc, #364]	; (8002f98 <HAL_ADC_Start_DMA+0x220>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d010      	beq.n	8002e56 <HAL_ADC_Start_DMA+0xde>
 8002e34:	e005      	b.n	8002e42 <HAL_ADC_Start_DMA+0xca>
 8002e36:	4b59      	ldr	r3, [pc, #356]	; (8002f9c <HAL_ADC_Start_DMA+0x224>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <HAL_ADC_Start_DMA+0xde>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e4a:	d004      	beq.n	8002e56 <HAL_ADC_Start_DMA+0xde>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a53      	ldr	r2, [pc, #332]	; (8002fa0 <HAL_ADC_Start_DMA+0x228>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d115      	bne.n	8002e82 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d036      	beq.n	8002ede <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002e80:	e02d      	b.n	8002ede <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e96:	d004      	beq.n	8002ea2 <HAL_ADC_Start_DMA+0x12a>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a3d      	ldr	r2, [pc, #244]	; (8002f94 <HAL_ADC_Start_DMA+0x21c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d10a      	bne.n	8002eb8 <HAL_ADC_Start_DMA+0x140>
 8002ea2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf14      	ite	ne
 8002eb0:	2301      	movne	r3, #1
 8002eb2:	2300      	moveq	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e008      	b.n	8002eca <HAL_ADC_Start_DMA+0x152>
 8002eb8:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <HAL_ADC_Start_DMA+0x228>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf14      	ite	ne
 8002ec4:	2301      	movne	r3, #1
 8002ec6:	2300      	moveq	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ed6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eea:	d106      	bne.n	8002efa <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef0:	f023 0206 	bic.w	r2, r3, #6
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	645a      	str	r2, [r3, #68]	; 0x44
 8002ef8:	e002      	b.n	8002f00 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	4a25      	ldr	r2, [pc, #148]	; (8002fa4 <HAL_ADC_Start_DMA+0x22c>)
 8002f0e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	4a24      	ldr	r2, [pc, #144]	; (8002fa8 <HAL_ADC_Start_DMA+0x230>)
 8002f16:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	4a23      	ldr	r2, [pc, #140]	; (8002fac <HAL_ADC_Start_DMA+0x234>)
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	221c      	movs	r2, #28
 8002f26:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0210 	orr.w	r2, r2, #16
 8002f36:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3340      	adds	r3, #64	; 0x40
 8002f52:	4619      	mov	r1, r3
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f000 fe90 	bl	8003c7c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0204 	orr.w	r2, r2, #4
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	e00d      	b.n	8002f8a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f76:	e008      	b.n	8002f8a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f84:	e001      	b.n	8002f8a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
 8002f88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	50000100 	.word	0x50000100
 8002f98:	50000300 	.word	0x50000300
 8002f9c:	50000700 	.word	0x50000700
 8002fa0:	50000400 	.word	0x50000400
 8002fa4:	0800376d 	.word	0x0800376d
 8002fa8:	080037e7 	.word	0x080037e7
 8002fac:	08003803 	.word	0x08003803

08002fb0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b09b      	sub	sp, #108	; 0x6c
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x22>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e2ca      	b.n	8003568 <HAL_ADC_ConfigChannel+0x5b8>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f040 82ae 	bne.w	8003546 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d81c      	bhi.n	800302c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4413      	add	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	461a      	mov	r2, r3
 8003006:	231f      	movs	r3, #31
 8003008:	4093      	lsls	r3, r2
 800300a:	43db      	mvns	r3, r3
 800300c:	4019      	ands	r1, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	4413      	add	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	fa00 f203 	lsl.w	r2, r0, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	631a      	str	r2, [r3, #48]	; 0x30
 800302a:	e063      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b09      	cmp	r3, #9
 8003032:	d81e      	bhi.n	8003072 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	4413      	add	r3, r2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	3b1e      	subs	r3, #30
 8003048:	221f      	movs	r2, #31
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	4019      	ands	r1, r3
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	4413      	add	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	3b1e      	subs	r3, #30
 8003064:	fa00 f203 	lsl.w	r2, r0, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	635a      	str	r2, [r3, #52]	; 0x34
 8003070:	e040      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b0e      	cmp	r3, #14
 8003078:	d81e      	bhi.n	80030b8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	4413      	add	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	3b3c      	subs	r3, #60	; 0x3c
 800308e:	221f      	movs	r2, #31
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	4019      	ands	r1, r3
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6818      	ldr	r0, [r3, #0]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	3b3c      	subs	r3, #60	; 0x3c
 80030aa:	fa00 f203 	lsl.w	r2, r0, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	639a      	str	r2, [r3, #56]	; 0x38
 80030b6:	e01d      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	3b5a      	subs	r3, #90	; 0x5a
 80030cc:	221f      	movs	r2, #31
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	4019      	ands	r1, r3
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	3b5a      	subs	r3, #90	; 0x5a
 80030e8:	fa00 f203 	lsl.w	r2, r0, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f040 80e5 	bne.w	80032ce <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b09      	cmp	r3, #9
 800310a:	d91c      	bls.n	8003146 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6999      	ldr	r1, [r3, #24]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4613      	mov	r3, r2
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	4413      	add	r3, r2
 800311c:	3b1e      	subs	r3, #30
 800311e:	2207      	movs	r2, #7
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	4019      	ands	r1, r3
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	6898      	ldr	r0, [r3, #8]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4413      	add	r3, r2
 8003136:	3b1e      	subs	r3, #30
 8003138:	fa00 f203 	lsl.w	r2, r0, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	619a      	str	r2, [r3, #24]
 8003144:	e019      	b.n	800317a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6959      	ldr	r1, [r3, #20]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	2207      	movs	r2, #7
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	4019      	ands	r1, r3
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	6898      	ldr	r0, [r3, #8]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4613      	mov	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	fa00 f203 	lsl.w	r2, r0, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	08db      	lsrs	r3, r3, #3
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	3b01      	subs	r3, #1
 8003198:	2b03      	cmp	r3, #3
 800319a:	d84f      	bhi.n	800323c <HAL_ADC_ConfigChannel+0x28c>
 800319c:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <HAL_ADC_ConfigChannel+0x1f4>)
 800319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a2:	bf00      	nop
 80031a4:	080031b5 	.word	0x080031b5
 80031a8:	080031d7 	.word	0x080031d7
 80031ac:	080031f9 	.word	0x080031f9
 80031b0:	0800321b 	.word	0x0800321b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031ba:	4b9a      	ldr	r3, [pc, #616]	; (8003424 <HAL_ADC_ConfigChannel+0x474>)
 80031bc:	4013      	ands	r3, r2
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	6812      	ldr	r2, [r2, #0]
 80031c2:	0691      	lsls	r1, r2, #26
 80031c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031c6:	430a      	orrs	r2, r1
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031d2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031d4:	e07e      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80031dc:	4b91      	ldr	r3, [pc, #580]	; (8003424 <HAL_ADC_ConfigChannel+0x474>)
 80031de:	4013      	ands	r3, r2
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	0691      	lsls	r1, r2, #26
 80031e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031e8:	430a      	orrs	r2, r1
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031f4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031f6:	e06d      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80031fe:	4b89      	ldr	r3, [pc, #548]	; (8003424 <HAL_ADC_ConfigChannel+0x474>)
 8003200:	4013      	ands	r3, r2
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	0691      	lsls	r1, r2, #26
 8003208:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800320a:	430a      	orrs	r2, r1
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003216:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003218:	e05c      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003220:	4b80      	ldr	r3, [pc, #512]	; (8003424 <HAL_ADC_ConfigChannel+0x474>)
 8003222:	4013      	ands	r3, r2
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	0691      	lsls	r1, r2, #26
 800322a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800322c:	430a      	orrs	r2, r1
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003238:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800323a:	e04b      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003242:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	069b      	lsls	r3, r3, #26
 800324c:	429a      	cmp	r2, r3
 800324e:	d107      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800325e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003266:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	069b      	lsls	r3, r3, #26
 8003270:	429a      	cmp	r2, r3
 8003272:	d107      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003282:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800328a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	069b      	lsls	r3, r3, #26
 8003294:	429a      	cmp	r2, r3
 8003296:	d107      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032a6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	069b      	lsls	r3, r3, #26
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d10a      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032ca:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80032cc:	e001      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80032ce:	bf00      	nop
 80032d0:	e000      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80032d2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d108      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x344>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x344>
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x346>
 80032f4:	2300      	movs	r3, #0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f040 8130 	bne.w	800355c <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d00f      	beq.n	8003324 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2201      	movs	r2, #1
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43da      	mvns	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	400a      	ands	r2, r1
 800331e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003322:	e049      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2201      	movs	r2, #1
 8003332:	409a      	lsls	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b09      	cmp	r3, #9
 8003344:	d91c      	bls.n	8003380 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6999      	ldr	r1, [r3, #24]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4613      	mov	r3, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	4413      	add	r3, r2
 8003356:	3b1b      	subs	r3, #27
 8003358:	2207      	movs	r2, #7
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	4019      	ands	r1, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	6898      	ldr	r0, [r3, #8]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	4613      	mov	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	4413      	add	r3, r2
 8003370:	3b1b      	subs	r3, #27
 8003372:	fa00 f203 	lsl.w	r2, r0, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	619a      	str	r2, [r3, #24]
 800337e:	e01b      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6959      	ldr	r1, [r3, #20]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	4613      	mov	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4413      	add	r3, r2
 8003392:	2207      	movs	r2, #7
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	4019      	ands	r1, r3
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	6898      	ldr	r0, [r3, #8]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	4613      	mov	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	4413      	add	r3, r2
 80033ac:	fa00 f203 	lsl.w	r2, r0, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033c0:	d004      	beq.n	80033cc <HAL_ADC_ConfigChannel+0x41c>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a18      	ldr	r2, [pc, #96]	; (8003428 <HAL_ADC_ConfigChannel+0x478>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d101      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x420>
 80033cc:	4b17      	ldr	r3, [pc, #92]	; (800342c <HAL_ADC_ConfigChannel+0x47c>)
 80033ce:	e000      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x422>
 80033d0:	4b17      	ldr	r3, [pc, #92]	; (8003430 <HAL_ADC_ConfigChannel+0x480>)
 80033d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b10      	cmp	r3, #16
 80033da:	d105      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80033dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d015      	beq.n	8003414 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80033ec:	2b11      	cmp	r3, #17
 80033ee:	d105      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80033f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00b      	beq.n	8003414 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003400:	2b12      	cmp	r3, #18
 8003402:	f040 80ab 	bne.w	800355c <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800340e:	2b00      	cmp	r3, #0
 8003410:	f040 80a4 	bne.w	800355c <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800341c:	d10a      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x484>
 800341e:	4b02      	ldr	r3, [pc, #8]	; (8003428 <HAL_ADC_ConfigChannel+0x478>)
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	e022      	b.n	800346a <HAL_ADC_ConfigChannel+0x4ba>
 8003424:	83fff000 	.word	0x83fff000
 8003428:	50000100 	.word	0x50000100
 800342c:	50000300 	.word	0x50000300
 8003430:	50000700 	.word	0x50000700
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a4e      	ldr	r2, [pc, #312]	; (8003574 <HAL_ADC_ConfigChannel+0x5c4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d103      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x496>
 800343e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	e011      	b.n	800346a <HAL_ADC_ConfigChannel+0x4ba>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a4b      	ldr	r2, [pc, #300]	; (8003578 <HAL_ADC_ConfigChannel+0x5c8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d102      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x4a6>
 8003450:	4b4a      	ldr	r3, [pc, #296]	; (800357c <HAL_ADC_ConfigChannel+0x5cc>)
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	e009      	b.n	800346a <HAL_ADC_ConfigChannel+0x4ba>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a48      	ldr	r2, [pc, #288]	; (800357c <HAL_ADC_ConfigChannel+0x5cc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d102      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x4b6>
 8003460:	4b45      	ldr	r3, [pc, #276]	; (8003578 <HAL_ADC_ConfigChannel+0x5c8>)
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	e001      	b.n	800346a <HAL_ADC_ConfigChannel+0x4ba>
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	2b01      	cmp	r3, #1
 8003476:	d108      	bne.n	800348a <HAL_ADC_ConfigChannel+0x4da>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <HAL_ADC_ConfigChannel+0x4da>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <HAL_ADC_ConfigChannel+0x4dc>
 800348a:	2300      	movs	r3, #0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d150      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003490:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003492:	2b00      	cmp	r3, #0
 8003494:	d010      	beq.n	80034b8 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d107      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x502>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x502>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x504>
 80034b2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d13c      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b10      	cmp	r3, #16
 80034be:	d11d      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x54c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034c8:	d118      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80034ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034d6:	4b2a      	ldr	r3, [pc, #168]	; (8003580 <HAL_ADC_ConfigChannel+0x5d0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a2a      	ldr	r2, [pc, #168]	; (8003584 <HAL_ADC_ConfigChannel+0x5d4>)
 80034dc:	fba2 2303 	umull	r2, r3, r2, r3
 80034e0:	0c9a      	lsrs	r2, r3, #18
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034ec:	e002      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	3b01      	subs	r3, #1
 80034f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f9      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034fa:	e02e      	b.n	800355a <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b11      	cmp	r3, #17
 8003502:	d10b      	bne.n	800351c <HAL_ADC_ConfigChannel+0x56c>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800350c:	d106      	bne.n	800351c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800350e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003518:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800351a:	e01e      	b.n	800355a <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b12      	cmp	r3, #18
 8003522:	d11a      	bne.n	800355a <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800352c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800352e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003530:	e013      	b.n	800355a <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f043 0220 	orr.w	r2, r3, #32
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003544:	e00a      	b.n	800355c <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f043 0220 	orr.w	r2, r3, #32
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003558:	e000      	b.n	800355c <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800355a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003564:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003568:	4618      	mov	r0, r3
 800356a:	376c      	adds	r7, #108	; 0x6c
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	50000100 	.word	0x50000100
 8003578:	50000400 	.word	0x50000400
 800357c:	50000500 	.word	0x50000500
 8003580:	20000064 	.word	0x20000064
 8003584:	431bde83 	.word	0x431bde83

08003588 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003588:	b480      	push	{r7}
 800358a:	b099      	sub	sp, #100	; 0x64
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035a0:	d102      	bne.n	80035a8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80035a2:	4b6d      	ldr	r3, [pc, #436]	; (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	e01a      	b.n	80035de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a6a      	ldr	r2, [pc, #424]	; (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d103      	bne.n	80035ba <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80035b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	e011      	b.n	80035de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a67      	ldr	r2, [pc, #412]	; (800375c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d102      	bne.n	80035ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035c4:	4b66      	ldr	r3, [pc, #408]	; (8003760 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	e009      	b.n	80035de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a64      	ldr	r2, [pc, #400]	; (8003760 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d102      	bne.n	80035da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80035d4:	4b61      	ldr	r3, [pc, #388]	; (800375c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	e001      	b.n	80035de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80035da:	2300      	movs	r3, #0
 80035dc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0b0      	b.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e0a9      	b.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	f040 808d 	bne.w	8003728 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 8086 	bne.w	8003728 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003624:	d004      	beq.n	8003630 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a4b      	ldr	r2, [pc, #300]	; (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d101      	bne.n	8003634 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003630:	4b4c      	ldr	r3, [pc, #304]	; (8003764 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003632:	e000      	b.n	8003636 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003634:	4b4c      	ldr	r3, [pc, #304]	; (8003768 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003636:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d040      	beq.n	80036c2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	6859      	ldr	r1, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003652:	035b      	lsls	r3, r3, #13
 8003654:	430b      	orrs	r3, r1
 8003656:	431a      	orrs	r2, r3
 8003658:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800365a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b01      	cmp	r3, #1
 8003668:	d108      	bne.n	800367c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800367c:	2300      	movs	r3, #0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d15c      	bne.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d107      	bne.n	800369e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800369e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d14b      	bne.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80036a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036ac:	f023 030f 	bic.w	r3, r3, #15
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	6811      	ldr	r1, [r2, #0]
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	6892      	ldr	r2, [r2, #8]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	431a      	orrs	r2, r3
 80036bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036be:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80036c0:	e03c      	b.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036cc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d108      	bne.n	80036ee <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80036ee:	2300      	movs	r3, #0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d123      	bne.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d107      	bne.n	8003710 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003710:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003712:	2b00      	cmp	r3, #0
 8003714:	d112      	bne.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800371e:	f023 030f 	bic.w	r3, r3, #15
 8003722:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003724:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003726:	e009      	b.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800373a:	e000      	b.n	800373e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800373c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003746:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800374a:	4618      	mov	r0, r3
 800374c:	3764      	adds	r7, #100	; 0x64
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	50000100 	.word	0x50000100
 800375c:	50000400 	.word	0x50000400
 8003760:	50000500 	.word	0x50000500
 8003764:	50000300 	.word	0x50000300
 8003768:	50000700 	.word	0x50000700

0800376c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003782:	2b00      	cmp	r3, #0
 8003784:	d126      	bne.n	80037d4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800379c:	2b00      	cmp	r3, #0
 800379e:	d115      	bne.n	80037cc <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d111      	bne.n	80037cc <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d105      	bne.n	80037cc <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	f043 0201 	orr.w	r2, r3, #1
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f7fe fce1 	bl	8002194 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80037d2:	e004      	b.n	80037de <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	4798      	blx	r3
}
 80037de:	bf00      	nop
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f7ff f8b1 	bl	800295c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80037fa:	bf00      	nop
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003820:	f043 0204 	orr.w	r2, r3, #4
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f7ff f8a1 	bl	8002970 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b01      	cmp	r3, #1
 8003850:	d108      	bne.n	8003864 <ADC_Enable+0x2c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <ADC_Enable+0x2c>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <ADC_Enable+0x2e>
 8003864:	2300      	movs	r3, #0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d143      	bne.n	80038f2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	4b22      	ldr	r3, [pc, #136]	; (80038fc <ADC_Enable+0xc4>)
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00d      	beq.n	8003894 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	f043 0210 	orr.w	r2, r3, #16
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003888:	f043 0201 	orr.w	r2, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e02f      	b.n	80038f4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80038a4:	f7ff f82a 	bl	80028fc <HAL_GetTick>
 80038a8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80038aa:	e01b      	b.n	80038e4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038ac:	f7ff f826 	bl	80028fc <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d914      	bls.n	80038e4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d00d      	beq.n	80038e4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f043 0210 	orr.w	r2, r3, #16
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d8:	f043 0201 	orr.w	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e007      	b.n	80038f4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d1dc      	bne.n	80038ac <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	8000003f 	.word	0x8000003f

08003900 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d108      	bne.n	800392c <ADC_Disable+0x2c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <ADC_Disable+0x2c>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <ADC_Disable+0x2e>
 800392c:	2300      	movs	r3, #0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d047      	beq.n	80039c2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 030d 	and.w	r3, r3, #13
 800393c:	2b01      	cmp	r3, #1
 800393e:	d10f      	bne.n	8003960 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0202 	orr.w	r2, r2, #2
 800394e:	609a      	str	r2, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2203      	movs	r2, #3
 8003956:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003958:	f7fe ffd0 	bl	80028fc <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800395e:	e029      	b.n	80039b4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	f043 0210 	orr.w	r2, r3, #16
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	f043 0201 	orr.w	r2, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e023      	b.n	80039c4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800397c:	f7fe ffbe 	bl	80028fc <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d914      	bls.n	80039b4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b01      	cmp	r3, #1
 8003996:	d10d      	bne.n	80039b4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	f043 0210 	orr.w	r2, r3, #16
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a8:	f043 0201 	orr.w	r2, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e007      	b.n	80039c4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d0dc      	beq.n	800397c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039dc:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <__NVIC_SetPriorityGrouping+0x44>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039e8:	4013      	ands	r3, r2
 80039ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039fe:	4a04      	ldr	r2, [pc, #16]	; (8003a10 <__NVIC_SetPriorityGrouping+0x44>)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	60d3      	str	r3, [r2, #12]
}
 8003a04:	bf00      	nop
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a18:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <__NVIC_GetPriorityGrouping+0x18>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	0a1b      	lsrs	r3, r3, #8
 8003a1e:	f003 0307 	and.w	r3, r3, #7
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	db0b      	blt.n	8003a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	f003 021f 	and.w	r2, r3, #31
 8003a48:	4907      	ldr	r1, [pc, #28]	; (8003a68 <__NVIC_EnableIRQ+0x38>)
 8003a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	2001      	movs	r0, #1
 8003a52:	fa00 f202 	lsl.w	r2, r0, r2
 8003a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	e000e100 	.word	0xe000e100

08003a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	6039      	str	r1, [r7, #0]
 8003a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	db0a      	blt.n	8003a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	490c      	ldr	r1, [pc, #48]	; (8003ab8 <__NVIC_SetPriority+0x4c>)
 8003a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8a:	0112      	lsls	r2, r2, #4
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	440b      	add	r3, r1
 8003a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a94:	e00a      	b.n	8003aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4908      	ldr	r1, [pc, #32]	; (8003abc <__NVIC_SetPriority+0x50>)
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	3b04      	subs	r3, #4
 8003aa4:	0112      	lsls	r2, r2, #4
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	761a      	strb	r2, [r3, #24]
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	e000e100 	.word	0xe000e100
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b089      	sub	sp, #36	; 0x24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f1c3 0307 	rsb	r3, r3, #7
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	bf28      	it	cs
 8003ade:	2304      	movcs	r3, #4
 8003ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	2b06      	cmp	r3, #6
 8003ae8:	d902      	bls.n	8003af0 <NVIC_EncodePriority+0x30>
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3b03      	subs	r3, #3
 8003aee:	e000      	b.n	8003af2 <NVIC_EncodePriority+0x32>
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af4:	f04f 32ff 	mov.w	r2, #4294967295
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43da      	mvns	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	401a      	ands	r2, r3
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b08:	f04f 31ff 	mov.w	r1, #4294967295
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b12:	43d9      	mvns	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b18:	4313      	orrs	r3, r2
         );
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3724      	adds	r7, #36	; 0x24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
	...

08003b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b38:	d301      	bcc.n	8003b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e00f      	b.n	8003b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b3e:	4a0a      	ldr	r2, [pc, #40]	; (8003b68 <SysTick_Config+0x40>)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b46:	210f      	movs	r1, #15
 8003b48:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4c:	f7ff ff8e 	bl	8003a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <SysTick_Config+0x40>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b56:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <SysTick_Config+0x40>)
 8003b58:	2207      	movs	r2, #7
 8003b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	e000e010 	.word	0xe000e010

08003b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ff29 	bl	80039cc <__NVIC_SetPriorityGrouping>
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b086      	sub	sp, #24
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	4603      	mov	r3, r0
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b94:	f7ff ff3e 	bl	8003a14 <__NVIC_GetPriorityGrouping>
 8003b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	6978      	ldr	r0, [r7, #20]
 8003ba0:	f7ff ff8e 	bl	8003ac0 <NVIC_EncodePriority>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003baa:	4611      	mov	r1, r2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff5d 	bl	8003a6c <__NVIC_SetPriority>
}
 8003bb2:	bf00      	nop
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ff31 	bl	8003a30 <__NVIC_EnableIRQ>
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff ffa2 	bl	8003b28 <SysTick_Config>
 8003be4:	4603      	mov	r3, r0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e037      	b.n	8003c74 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c1a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003c1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f9b8 	bl	8003fcc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}  
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <HAL_DMA_Start_IT+0x20>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e04a      	b.n	8003d32 <HAL_DMA_Start_IT+0xb6>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d13a      	bne.n	8003d24 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f94b 	bl	8003f6e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 020e 	orr.w	r2, r2, #14
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	e00f      	b.n	8003d12 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 020a 	orr.w	r2, r2, #10
 8003d00:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0204 	bic.w	r2, r2, #4
 8003d10:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	e005      	b.n	8003d30 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d008      	beq.n	8003d5e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2204      	movs	r2, #4
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e020      	b.n	8003da0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 020e 	bic.w	r2, r2, #14
 8003d6c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0201 	bic.w	r2, r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d86:	2101      	movs	r1, #1
 8003d88:	fa01 f202 	lsl.w	r2, r1, r2
 8003d8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d005      	beq.n	8003dce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
 8003dcc:	e027      	b.n	8003e1e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 020e 	bic.w	r2, r2, #14
 8003ddc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0201 	bic.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df6:	2101      	movs	r1, #1
 8003df8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	4798      	blx	r3
    } 
  }
  return status;
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	2204      	movs	r2, #4
 8003e46:	409a      	lsls	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d024      	beq.n	8003e9a <HAL_DMA_IRQHandler+0x72>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01f      	beq.n	8003e9a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d107      	bne.n	8003e78 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0204 	bic.w	r2, r2, #4
 8003e76:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e80:	2104      	movs	r1, #4
 8003e82:	fa01 f202 	lsl.w	r2, r1, r2
 8003e86:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d06a      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003e98:	e065      	b.n	8003f66 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d02c      	beq.n	8003f04 <HAL_DMA_IRQHandler+0xdc>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d027      	beq.n	8003f04 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0320 	and.w	r3, r3, #32
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10b      	bne.n	8003eda <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 020a 	bic.w	r2, r2, #10
 8003ed0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d035      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003f02:	e030      	b.n	8003f66 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	2208      	movs	r2, #8
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d028      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x13e>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d023      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 020e 	bic.w	r2, r2, #14
 8003f2c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	2101      	movs	r1, #1
 8003f38:	fa01 f202 	lsl.w	r2, r1, r2
 8003f3c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d004      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	4798      	blx	r3
    }
  }
}  
 8003f64:	e7ff      	b.n	8003f66 <HAL_DMA_IRQHandler+0x13e>
 8003f66:	bf00      	nop
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b085      	sub	sp, #20
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f84:	2101      	movs	r1, #1
 8003f86:	fa01 f202 	lsl.w	r2, r1, r2
 8003f8a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d108      	bne.n	8003fae <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003fac:	e007      	b.n	8003fbe <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	60da      	str	r2, [r3, #12]
}
 8003fbe:	bf00      	nop
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4b14      	ldr	r3, [pc, #80]	; (800402c <DMA_CalcBaseAndBitshift+0x60>)
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d80f      	bhi.n	8004000 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4b12      	ldr	r3, [pc, #72]	; (8004030 <DMA_CalcBaseAndBitshift+0x64>)
 8003fe8:	4413      	add	r3, r2
 8003fea:	4a12      	ldr	r2, [pc, #72]	; (8004034 <DMA_CalcBaseAndBitshift+0x68>)
 8003fec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	009a      	lsls	r2, r3, #2
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a0f      	ldr	r2, [pc, #60]	; (8004038 <DMA_CalcBaseAndBitshift+0x6c>)
 8003ffc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003ffe:	e00e      	b.n	800401e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	4b0d      	ldr	r3, [pc, #52]	; (800403c <DMA_CalcBaseAndBitshift+0x70>)
 8004008:	4413      	add	r3, r2
 800400a:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <DMA_CalcBaseAndBitshift+0x68>)
 800400c:	fba2 2303 	umull	r2, r3, r2, r3
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	009a      	lsls	r2, r3, #2
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a09      	ldr	r2, [pc, #36]	; (8004040 <DMA_CalcBaseAndBitshift+0x74>)
 800401c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40020407 	.word	0x40020407
 8004030:	bffdfff8 	.word	0xbffdfff8
 8004034:	cccccccd 	.word	0xcccccccd
 8004038:	40020000 	.word	0x40020000
 800403c:	bffdfbf8 	.word	0xbffdfbf8
 8004040:	40020400 	.word	0x40020400

08004044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004052:	e160      	b.n	8004316 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	2101      	movs	r1, #1
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	fa01 f303 	lsl.w	r3, r1, r3
 8004060:	4013      	ands	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 8152 	beq.w	8004310 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 0303 	and.w	r3, r3, #3
 8004074:	2b01      	cmp	r3, #1
 8004076:	d005      	beq.n	8004084 <HAL_GPIO_Init+0x40>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d130      	bne.n	80040e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	2203      	movs	r2, #3
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4013      	ands	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040ba:	2201      	movs	r2, #1
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	43db      	mvns	r3, r3
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4013      	ands	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	091b      	lsrs	r3, r3, #4
 80040d0:	f003 0201 	and.w	r2, r3, #1
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d017      	beq.n	8004122 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	2203      	movs	r2, #3
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	43db      	mvns	r3, r3
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4013      	ands	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d123      	bne.n	8004176 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	08da      	lsrs	r2, r3, #3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3208      	adds	r2, #8
 8004136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800413a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	220f      	movs	r2, #15
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	43db      	mvns	r3, r3
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	4013      	ands	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	fa02 f303 	lsl.w	r3, r2, r3
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	08da      	lsrs	r2, r3, #3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3208      	adds	r2, #8
 8004170:	6939      	ldr	r1, [r7, #16]
 8004172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	2203      	movs	r2, #3
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	43db      	mvns	r3, r3
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4013      	ands	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f003 0203 	and.w	r2, r3, #3
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 80ac 	beq.w	8004310 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041b8:	4b5e      	ldr	r3, [pc, #376]	; (8004334 <HAL_GPIO_Init+0x2f0>)
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	4a5d      	ldr	r2, [pc, #372]	; (8004334 <HAL_GPIO_Init+0x2f0>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	6193      	str	r3, [r2, #24]
 80041c4:	4b5b      	ldr	r3, [pc, #364]	; (8004334 <HAL_GPIO_Init+0x2f0>)
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80041d0:	4a59      	ldr	r2, [pc, #356]	; (8004338 <HAL_GPIO_Init+0x2f4>)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	089b      	lsrs	r3, r3, #2
 80041d6:	3302      	adds	r3, #2
 80041d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f003 0303 	and.w	r3, r3, #3
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	220f      	movs	r2, #15
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4013      	ands	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041fa:	d025      	beq.n	8004248 <HAL_GPIO_Init+0x204>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a4f      	ldr	r2, [pc, #316]	; (800433c <HAL_GPIO_Init+0x2f8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d01f      	beq.n	8004244 <HAL_GPIO_Init+0x200>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a4e      	ldr	r2, [pc, #312]	; (8004340 <HAL_GPIO_Init+0x2fc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d019      	beq.n	8004240 <HAL_GPIO_Init+0x1fc>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a4d      	ldr	r2, [pc, #308]	; (8004344 <HAL_GPIO_Init+0x300>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d013      	beq.n	800423c <HAL_GPIO_Init+0x1f8>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a4c      	ldr	r2, [pc, #304]	; (8004348 <HAL_GPIO_Init+0x304>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00d      	beq.n	8004238 <HAL_GPIO_Init+0x1f4>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a4b      	ldr	r2, [pc, #300]	; (800434c <HAL_GPIO_Init+0x308>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d007      	beq.n	8004234 <HAL_GPIO_Init+0x1f0>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a4a      	ldr	r2, [pc, #296]	; (8004350 <HAL_GPIO_Init+0x30c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d101      	bne.n	8004230 <HAL_GPIO_Init+0x1ec>
 800422c:	2306      	movs	r3, #6
 800422e:	e00c      	b.n	800424a <HAL_GPIO_Init+0x206>
 8004230:	2307      	movs	r3, #7
 8004232:	e00a      	b.n	800424a <HAL_GPIO_Init+0x206>
 8004234:	2305      	movs	r3, #5
 8004236:	e008      	b.n	800424a <HAL_GPIO_Init+0x206>
 8004238:	2304      	movs	r3, #4
 800423a:	e006      	b.n	800424a <HAL_GPIO_Init+0x206>
 800423c:	2303      	movs	r3, #3
 800423e:	e004      	b.n	800424a <HAL_GPIO_Init+0x206>
 8004240:	2302      	movs	r3, #2
 8004242:	e002      	b.n	800424a <HAL_GPIO_Init+0x206>
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <HAL_GPIO_Init+0x206>
 8004248:	2300      	movs	r3, #0
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	f002 0203 	and.w	r2, r2, #3
 8004250:	0092      	lsls	r2, r2, #2
 8004252:	4093      	lsls	r3, r2
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800425a:	4937      	ldr	r1, [pc, #220]	; (8004338 <HAL_GPIO_Init+0x2f4>)
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	089b      	lsrs	r3, r3, #2
 8004260:	3302      	adds	r3, #2
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004268:	4b3a      	ldr	r3, [pc, #232]	; (8004354 <HAL_GPIO_Init+0x310>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	43db      	mvns	r3, r3
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4013      	ands	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800428c:	4a31      	ldr	r2, [pc, #196]	; (8004354 <HAL_GPIO_Init+0x310>)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004292:	4b30      	ldr	r3, [pc, #192]	; (8004354 <HAL_GPIO_Init+0x310>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	43db      	mvns	r3, r3
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4013      	ands	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80042b6:	4a27      	ldr	r2, [pc, #156]	; (8004354 <HAL_GPIO_Init+0x310>)
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042bc:	4b25      	ldr	r3, [pc, #148]	; (8004354 <HAL_GPIO_Init+0x310>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	43db      	mvns	r3, r3
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4013      	ands	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80042e0:	4a1c      	ldr	r2, [pc, #112]	; (8004354 <HAL_GPIO_Init+0x310>)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042e6:	4b1b      	ldr	r3, [pc, #108]	; (8004354 <HAL_GPIO_Init+0x310>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	43db      	mvns	r3, r3
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	4013      	ands	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800430a:	4a12      	ldr	r2, [pc, #72]	; (8004354 <HAL_GPIO_Init+0x310>)
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	3301      	adds	r3, #1
 8004314:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	fa22 f303 	lsr.w	r3, r2, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	f47f ae97 	bne.w	8004054 <HAL_GPIO_Init+0x10>
  }
}
 8004326:	bf00      	nop
 8004328:	bf00      	nop
 800432a:	371c      	adds	r7, #28
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	40021000 	.word	0x40021000
 8004338:	40010000 	.word	0x40010000
 800433c:	48000400 	.word	0x48000400
 8004340:	48000800 	.word	0x48000800
 8004344:	48000c00 	.word	0x48000c00
 8004348:	48001000 	.word	0x48001000
 800434c:	48001400 	.word	0x48001400
 8004350:	48001800 	.word	0x48001800
 8004354:	40010400 	.word	0x40010400

08004358 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	887b      	ldrh	r3, [r7, #2]
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004370:	2301      	movs	r3, #1
 8004372:	73fb      	strb	r3, [r7, #15]
 8004374:	e001      	b.n	800437a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004376:	2300      	movs	r3, #0
 8004378:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800437a:	7bfb      	ldrb	r3, [r7, #15]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	807b      	strh	r3, [r7, #2]
 8004394:	4613      	mov	r3, r2
 8004396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004398:	787b      	ldrb	r3, [r7, #1]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800439e:	887a      	ldrh	r2, [r7, #2]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043a4:	e002      	b.n	80043ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043a6:	887a      	ldrh	r2, [r7, #2]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	4603      	mov	r3, r0
 80043c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043c2:	4b08      	ldr	r3, [pc, #32]	; (80043e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043c4:	695a      	ldr	r2, [r3, #20]
 80043c6:	88fb      	ldrh	r3, [r7, #6]
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d006      	beq.n	80043dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043ce:	4a05      	ldr	r2, [pc, #20]	; (80043e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043d0:	88fb      	ldrh	r3, [r7, #6]
 80043d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043d4:	88fb      	ldrh	r3, [r7, #6]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 f806 	bl	80043e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80043dc:	bf00      	nop
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40010400 	.word	0x40010400

080043e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004406:	af00      	add	r7, sp, #0
 8004408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800440c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004410:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004416:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	f001 b83a 	b.w	800549a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004426:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800442a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 816f 	beq.w	800471a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800443c:	4bb5      	ldr	r3, [pc, #724]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 030c 	and.w	r3, r3, #12
 8004444:	2b04      	cmp	r3, #4
 8004446:	d00c      	beq.n	8004462 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004448:	4bb2      	ldr	r3, [pc, #712]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 030c 	and.w	r3, r3, #12
 8004450:	2b08      	cmp	r3, #8
 8004452:	d15c      	bne.n	800450e <HAL_RCC_OscConfig+0x10e>
 8004454:	4baf      	ldr	r3, [pc, #700]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800445c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004460:	d155      	bne.n	800450e <HAL_RCC_OscConfig+0x10e>
 8004462:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004466:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800446e:	fa93 f3a3 	rbit	r3, r3
 8004472:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004476:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800447a:	fab3 f383 	clz	r3, r3
 800447e:	b2db      	uxtb	r3, r3
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	b2db      	uxtb	r3, r3
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b01      	cmp	r3, #1
 800448c:	d102      	bne.n	8004494 <HAL_RCC_OscConfig+0x94>
 800448e:	4ba1      	ldr	r3, [pc, #644]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	e015      	b.n	80044c0 <HAL_RCC_OscConfig+0xc0>
 8004494:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004498:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80044a0:	fa93 f3a3 	rbit	r3, r3
 80044a4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80044a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044ac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80044b0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80044b4:	fa93 f3a3 	rbit	r3, r3
 80044b8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80044bc:	4b95      	ldr	r3, [pc, #596]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044c4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80044c8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80044cc:	fa92 f2a2 	rbit	r2, r2
 80044d0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80044d4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80044d8:	fab2 f282 	clz	r2, r2
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	f042 0220 	orr.w	r2, r2, #32
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	f002 021f 	and.w	r2, r2, #31
 80044e8:	2101      	movs	r1, #1
 80044ea:	fa01 f202 	lsl.w	r2, r1, r2
 80044ee:	4013      	ands	r3, r2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8111 	beq.w	8004718 <HAL_RCC_OscConfig+0x318>
 80044f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f040 8108 	bne.w	8004718 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	f000 bfc6 	b.w	800549a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800450e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004512:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800451e:	d106      	bne.n	800452e <HAL_RCC_OscConfig+0x12e>
 8004520:	4b7c      	ldr	r3, [pc, #496]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a7b      	ldr	r2, [pc, #492]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 8004526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	e036      	b.n	800459c <HAL_RCC_OscConfig+0x19c>
 800452e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004532:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10c      	bne.n	8004558 <HAL_RCC_OscConfig+0x158>
 800453e:	4b75      	ldr	r3, [pc, #468]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a74      	ldr	r2, [pc, #464]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 8004544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	4b72      	ldr	r3, [pc, #456]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a71      	ldr	r2, [pc, #452]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 8004550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	e021      	b.n	800459c <HAL_RCC_OscConfig+0x19c>
 8004558:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800455c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004568:	d10c      	bne.n	8004584 <HAL_RCC_OscConfig+0x184>
 800456a:	4b6a      	ldr	r3, [pc, #424]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a69      	ldr	r2, [pc, #420]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 8004570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	4b67      	ldr	r3, [pc, #412]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a66      	ldr	r2, [pc, #408]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 800457c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	e00b      	b.n	800459c <HAL_RCC_OscConfig+0x19c>
 8004584:	4b63      	ldr	r3, [pc, #396]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a62      	ldr	r2, [pc, #392]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 800458a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	4b60      	ldr	r3, [pc, #384]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a5f      	ldr	r2, [pc, #380]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 8004596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800459a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800459c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d059      	beq.n	8004660 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ac:	f7fe f9a6 	bl	80028fc <HAL_GetTick>
 80045b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b4:	e00a      	b.n	80045cc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045b6:	f7fe f9a1 	bl	80028fc <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b64      	cmp	r3, #100	; 0x64
 80045c4:	d902      	bls.n	80045cc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	f000 bf67 	b.w	800549a <HAL_RCC_OscConfig+0x109a>
 80045cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045d0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80045d8:	fa93 f3a3 	rbit	r3, r3
 80045dc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80045e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e4:	fab3 f383 	clz	r3, r3
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d102      	bne.n	80045fe <HAL_RCC_OscConfig+0x1fe>
 80045f8:	4b46      	ldr	r3, [pc, #280]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	e015      	b.n	800462a <HAL_RCC_OscConfig+0x22a>
 80045fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004602:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004606:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800460a:	fa93 f3a3 	rbit	r3, r3
 800460e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004612:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004616:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800461a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800461e:	fa93 f3a3 	rbit	r3, r3
 8004622:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004626:	4b3b      	ldr	r3, [pc, #236]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800462e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004632:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004636:	fa92 f2a2 	rbit	r2, r2
 800463a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800463e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004642:	fab2 f282 	clz	r2, r2
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	f042 0220 	orr.w	r2, r2, #32
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	f002 021f 	and.w	r2, r2, #31
 8004652:	2101      	movs	r1, #1
 8004654:	fa01 f202 	lsl.w	r2, r1, r2
 8004658:	4013      	ands	r3, r2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0ab      	beq.n	80045b6 <HAL_RCC_OscConfig+0x1b6>
 800465e:	e05c      	b.n	800471a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004660:	f7fe f94c 	bl	80028fc <HAL_GetTick>
 8004664:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004668:	e00a      	b.n	8004680 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800466a:	f7fe f947 	bl	80028fc <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b64      	cmp	r3, #100	; 0x64
 8004678:	d902      	bls.n	8004680 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	f000 bf0d 	b.w	800549a <HAL_RCC_OscConfig+0x109a>
 8004680:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004684:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004688:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800468c:	fa93 f3a3 	rbit	r3, r3
 8004690:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004694:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004698:	fab3 f383 	clz	r3, r3
 800469c:	b2db      	uxtb	r3, r3
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d102      	bne.n	80046b2 <HAL_RCC_OscConfig+0x2b2>
 80046ac:	4b19      	ldr	r3, [pc, #100]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	e015      	b.n	80046de <HAL_RCC_OscConfig+0x2de>
 80046b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80046be:	fa93 f3a3 	rbit	r3, r3
 80046c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80046c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046ca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80046ce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80046d2:	fa93 f3a3 	rbit	r3, r3
 80046d6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80046da:	4b0e      	ldr	r3, [pc, #56]	; (8004714 <HAL_RCC_OscConfig+0x314>)
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046e2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80046e6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80046ea:	fa92 f2a2 	rbit	r2, r2
 80046ee:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80046f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80046f6:	fab2 f282 	clz	r2, r2
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	f042 0220 	orr.w	r2, r2, #32
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	f002 021f 	and.w	r2, r2, #31
 8004706:	2101      	movs	r1, #1
 8004708:	fa01 f202 	lsl.w	r2, r1, r2
 800470c:	4013      	ands	r3, r2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ab      	bne.n	800466a <HAL_RCC_OscConfig+0x26a>
 8004712:	e002      	b.n	800471a <HAL_RCC_OscConfig+0x31a>
 8004714:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800471a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800471e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 817f 	beq.w	8004a2e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004730:	4ba7      	ldr	r3, [pc, #668]	; (80049d0 <HAL_RCC_OscConfig+0x5d0>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 030c 	and.w	r3, r3, #12
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00c      	beq.n	8004756 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800473c:	4ba4      	ldr	r3, [pc, #656]	; (80049d0 <HAL_RCC_OscConfig+0x5d0>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 030c 	and.w	r3, r3, #12
 8004744:	2b08      	cmp	r3, #8
 8004746:	d173      	bne.n	8004830 <HAL_RCC_OscConfig+0x430>
 8004748:	4ba1      	ldr	r3, [pc, #644]	; (80049d0 <HAL_RCC_OscConfig+0x5d0>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004754:	d16c      	bne.n	8004830 <HAL_RCC_OscConfig+0x430>
 8004756:	2302      	movs	r3, #2
 8004758:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004760:	fa93 f3a3 	rbit	r3, r3
 8004764:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004768:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800476c:	fab3 f383 	clz	r3, r3
 8004770:	b2db      	uxtb	r3, r3
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	b2db      	uxtb	r3, r3
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b01      	cmp	r3, #1
 800477e:	d102      	bne.n	8004786 <HAL_RCC_OscConfig+0x386>
 8004780:	4b93      	ldr	r3, [pc, #588]	; (80049d0 <HAL_RCC_OscConfig+0x5d0>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	e013      	b.n	80047ae <HAL_RCC_OscConfig+0x3ae>
 8004786:	2302      	movs	r3, #2
 8004788:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004790:	fa93 f3a3 	rbit	r3, r3
 8004794:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004798:	2302      	movs	r3, #2
 800479a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800479e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80047a2:	fa93 f3a3 	rbit	r3, r3
 80047a6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80047aa:	4b89      	ldr	r3, [pc, #548]	; (80049d0 <HAL_RCC_OscConfig+0x5d0>)
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	2202      	movs	r2, #2
 80047b0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80047b4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80047b8:	fa92 f2a2 	rbit	r2, r2
 80047bc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80047c0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80047c4:	fab2 f282 	clz	r2, r2
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	f042 0220 	orr.w	r2, r2, #32
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	f002 021f 	and.w	r2, r2, #31
 80047d4:	2101      	movs	r1, #1
 80047d6:	fa01 f202 	lsl.w	r2, r1, r2
 80047da:	4013      	ands	r3, r2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <HAL_RCC_OscConfig+0x3f6>
 80047e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d002      	beq.n	80047f6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f000 be52 	b.w	800549a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f6:	4b76      	ldr	r3, [pc, #472]	; (80049d0 <HAL_RCC_OscConfig+0x5d0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004802:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	21f8      	movs	r1, #248	; 0xf8
 800480c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004814:	fa91 f1a1 	rbit	r1, r1
 8004818:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800481c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004820:	fab1 f181 	clz	r1, r1
 8004824:	b2c9      	uxtb	r1, r1
 8004826:	408b      	lsls	r3, r1
 8004828:	4969      	ldr	r1, [pc, #420]	; (80049d0 <HAL_RCC_OscConfig+0x5d0>)
 800482a:	4313      	orrs	r3, r2
 800482c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482e:	e0fe      	b.n	8004a2e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004834:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 8088 	beq.w	8004952 <HAL_RCC_OscConfig+0x552>
 8004842:	2301      	movs	r3, #1
 8004844:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004848:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800484c:	fa93 f3a3 	rbit	r3, r3
 8004850:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004854:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004858:	fab3 f383 	clz	r3, r3
 800485c:	b2db      	uxtb	r3, r3
 800485e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004862:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	461a      	mov	r2, r3
 800486a:	2301      	movs	r3, #1
 800486c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486e:	f7fe f845 	bl	80028fc <HAL_GetTick>
 8004872:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004876:	e00a      	b.n	800488e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004878:	f7fe f840 	bl	80028fc <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d902      	bls.n	800488e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	f000 be06 	b.w	800549a <HAL_RCC_OscConfig+0x109a>
 800488e:	2302      	movs	r3, #2
 8004890:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004894:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004898:	fa93 f3a3 	rbit	r3, r3
 800489c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80048a0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a4:	fab3 f383 	clz	r3, r3
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	f043 0301 	orr.w	r3, r3, #1
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d102      	bne.n	80048be <HAL_RCC_OscConfig+0x4be>
 80048b8:	4b45      	ldr	r3, [pc, #276]	; (80049d0 <HAL_RCC_OscConfig+0x5d0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	e013      	b.n	80048e6 <HAL_RCC_OscConfig+0x4e6>
 80048be:	2302      	movs	r3, #2
 80048c0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80048c8:	fa93 f3a3 	rbit	r3, r3
 80048cc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80048d0:	2302      	movs	r3, #2
 80048d2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80048d6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80048da:	fa93 f3a3 	rbit	r3, r3
 80048de:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80048e2:	4b3b      	ldr	r3, [pc, #236]	; (80049d0 <HAL_RCC_OscConfig+0x5d0>)
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	2202      	movs	r2, #2
 80048e8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80048ec:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80048f0:	fa92 f2a2 	rbit	r2, r2
 80048f4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80048f8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80048fc:	fab2 f282 	clz	r2, r2
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	f042 0220 	orr.w	r2, r2, #32
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	f002 021f 	and.w	r2, r2, #31
 800490c:	2101      	movs	r1, #1
 800490e:	fa01 f202 	lsl.w	r2, r1, r2
 8004912:	4013      	ands	r3, r2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0af      	beq.n	8004878 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004918:	4b2d      	ldr	r3, [pc, #180]	; (80049d0 <HAL_RCC_OscConfig+0x5d0>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004920:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004924:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	21f8      	movs	r1, #248	; 0xf8
 800492e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004932:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004936:	fa91 f1a1 	rbit	r1, r1
 800493a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800493e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004942:	fab1 f181 	clz	r1, r1
 8004946:	b2c9      	uxtb	r1, r1
 8004948:	408b      	lsls	r3, r1
 800494a:	4921      	ldr	r1, [pc, #132]	; (80049d0 <HAL_RCC_OscConfig+0x5d0>)
 800494c:	4313      	orrs	r3, r2
 800494e:	600b      	str	r3, [r1, #0]
 8004950:	e06d      	b.n	8004a2e <HAL_RCC_OscConfig+0x62e>
 8004952:	2301      	movs	r3, #1
 8004954:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004958:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800495c:	fa93 f3a3 	rbit	r3, r3
 8004960:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004964:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004968:	fab3 f383 	clz	r3, r3
 800496c:	b2db      	uxtb	r3, r3
 800496e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004972:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	461a      	mov	r2, r3
 800497a:	2300      	movs	r3, #0
 800497c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497e:	f7fd ffbd 	bl	80028fc <HAL_GetTick>
 8004982:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004986:	e00a      	b.n	800499e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004988:	f7fd ffb8 	bl	80028fc <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d902      	bls.n	800499e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	f000 bd7e 	b.w	800549a <HAL_RCC_OscConfig+0x109a>
 800499e:	2302      	movs	r3, #2
 80049a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80049a8:	fa93 f3a3 	rbit	r3, r3
 80049ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80049b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049b4:	fab3 f383 	clz	r3, r3
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d105      	bne.n	80049d4 <HAL_RCC_OscConfig+0x5d4>
 80049c8:	4b01      	ldr	r3, [pc, #4]	; (80049d0 <HAL_RCC_OscConfig+0x5d0>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	e016      	b.n	80049fc <HAL_RCC_OscConfig+0x5fc>
 80049ce:	bf00      	nop
 80049d0:	40021000 	.word	0x40021000
 80049d4:	2302      	movs	r3, #2
 80049d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049de:	fa93 f3a3 	rbit	r3, r3
 80049e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80049e6:	2302      	movs	r3, #2
 80049e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80049ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80049f0:	fa93 f3a3 	rbit	r3, r3
 80049f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80049f8:	4bbf      	ldr	r3, [pc, #764]	; (8004cf8 <HAL_RCC_OscConfig+0x8f8>)
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	2202      	movs	r2, #2
 80049fe:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004a02:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004a06:	fa92 f2a2 	rbit	r2, r2
 8004a0a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004a0e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004a12:	fab2 f282 	clz	r2, r2
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	f042 0220 	orr.w	r2, r2, #32
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	f002 021f 	and.w	r2, r2, #31
 8004a22:	2101      	movs	r1, #1
 8004a24:	fa01 f202 	lsl.w	r2, r1, r2
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1ac      	bne.n	8004988 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a32:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 8113 	beq.w	8004c6a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d07c      	beq.n	8004b4e <HAL_RCC_OscConfig+0x74e>
 8004a54:	2301      	movs	r3, #1
 8004a56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a5e:	fa93 f3a3 	rbit	r3, r3
 8004a62:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004a66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a6a:	fab3 f383 	clz	r3, r3
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	4ba2      	ldr	r3, [pc, #648]	; (8004cfc <HAL_RCC_OscConfig+0x8fc>)
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	461a      	mov	r2, r3
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a7e:	f7fd ff3d 	bl	80028fc <HAL_GetTick>
 8004a82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a86:	e00a      	b.n	8004a9e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a88:	f7fd ff38 	bl	80028fc <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d902      	bls.n	8004a9e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	f000 bcfe 	b.w	800549a <HAL_RCC_OscConfig+0x109a>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa8:	fa93 f2a3 	rbit	r2, r3
 8004aac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ab0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004abe:	2202      	movs	r2, #2
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ac6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	fa93 f2a3 	rbit	r2, r3
 8004ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ade:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	fa93 f2a3 	rbit	r2, r3
 8004af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004af8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004afc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004afe:	4b7e      	ldr	r3, [pc, #504]	; (8004cf8 <HAL_RCC_OscConfig+0x8f8>)
 8004b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b06:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004b0a:	2102      	movs	r1, #2
 8004b0c:	6019      	str	r1, [r3, #0]
 8004b0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b12:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	fa93 f1a3 	rbit	r1, r3
 8004b1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b20:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b24:	6019      	str	r1, [r3, #0]
  return result;
 8004b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b2a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	fab3 f383 	clz	r3, r3
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	f003 031f 	and.w	r3, r3, #31
 8004b40:	2101      	movs	r1, #1
 8004b42:	fa01 f303 	lsl.w	r3, r1, r3
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d09d      	beq.n	8004a88 <HAL_RCC_OscConfig+0x688>
 8004b4c:	e08d      	b.n	8004c6a <HAL_RCC_OscConfig+0x86a>
 8004b4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b52:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b56:	2201      	movs	r2, #1
 8004b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b5e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	fa93 f2a3 	rbit	r2, r3
 8004b68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b6c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b70:	601a      	str	r2, [r3, #0]
  return result;
 8004b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b76:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b7a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b7c:	fab3 f383 	clz	r3, r3
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	4b5d      	ldr	r3, [pc, #372]	; (8004cfc <HAL_RCC_OscConfig+0x8fc>)
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b90:	f7fd feb4 	bl	80028fc <HAL_GetTick>
 8004b94:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b98:	e00a      	b.n	8004bb0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b9a:	f7fd feaf 	bl	80028fc <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d902      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	f000 bc75 	b.w	800549a <HAL_RCC_OscConfig+0x109a>
 8004bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bb4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004bb8:	2202      	movs	r2, #2
 8004bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bc0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	fa93 f2a3 	rbit	r2, r3
 8004bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bdc:	2202      	movs	r2, #2
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004be4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	fa93 f2a3 	rbit	r2, r3
 8004bee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bfc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004c00:	2202      	movs	r2, #2
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c08:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	fa93 f2a3 	rbit	r2, r3
 8004c12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c16:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004c1a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c1c:	4b36      	ldr	r3, [pc, #216]	; (8004cf8 <HAL_RCC_OscConfig+0x8f8>)
 8004c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c24:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004c28:	2102      	movs	r1, #2
 8004c2a:	6019      	str	r1, [r3, #0]
 8004c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c30:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	fa93 f1a3 	rbit	r1, r3
 8004c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c3e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004c42:	6019      	str	r1, [r3, #0]
  return result;
 8004c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c48:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	fab3 f383 	clz	r3, r3
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	2101      	movs	r1, #1
 8004c60:	fa01 f303 	lsl.w	r3, r1, r3
 8004c64:	4013      	ands	r3, r2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d197      	bne.n	8004b9a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 81a5 	beq.w	8004fca <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c80:	2300      	movs	r3, #0
 8004c82:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c86:	4b1c      	ldr	r3, [pc, #112]	; (8004cf8 <HAL_RCC_OscConfig+0x8f8>)
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d116      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c92:	4b19      	ldr	r3, [pc, #100]	; (8004cf8 <HAL_RCC_OscConfig+0x8f8>)
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	4a18      	ldr	r2, [pc, #96]	; (8004cf8 <HAL_RCC_OscConfig+0x8f8>)
 8004c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c9c:	61d3      	str	r3, [r2, #28]
 8004c9e:	4b16      	ldr	r3, [pc, #88]	; (8004cf8 <HAL_RCC_OscConfig+0x8f8>)
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004caa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cb8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc0:	4b0f      	ldr	r3, [pc, #60]	; (8004d00 <HAL_RCC_OscConfig+0x900>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d121      	bne.n	8004d10 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <HAL_RCC_OscConfig+0x900>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a0b      	ldr	r2, [pc, #44]	; (8004d00 <HAL_RCC_OscConfig+0x900>)
 8004cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cd8:	f7fd fe10 	bl	80028fc <HAL_GetTick>
 8004cdc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce0:	e010      	b.n	8004d04 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce2:	f7fd fe0b 	bl	80028fc <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b64      	cmp	r3, #100	; 0x64
 8004cf0:	d908      	bls.n	8004d04 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e3d1      	b.n	800549a <HAL_RCC_OscConfig+0x109a>
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	10908120 	.word	0x10908120
 8004d00:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d04:	4b8d      	ldr	r3, [pc, #564]	; (8004f3c <HAL_RCC_OscConfig+0xb3c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0e8      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d106      	bne.n	8004d2e <HAL_RCC_OscConfig+0x92e>
 8004d20:	4b87      	ldr	r3, [pc, #540]	; (8004f40 <HAL_RCC_OscConfig+0xb40>)
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	4a86      	ldr	r2, [pc, #536]	; (8004f40 <HAL_RCC_OscConfig+0xb40>)
 8004d26:	f043 0301 	orr.w	r3, r3, #1
 8004d2a:	6213      	str	r3, [r2, #32]
 8004d2c:	e035      	b.n	8004d9a <HAL_RCC_OscConfig+0x99a>
 8004d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d32:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10c      	bne.n	8004d58 <HAL_RCC_OscConfig+0x958>
 8004d3e:	4b80      	ldr	r3, [pc, #512]	; (8004f40 <HAL_RCC_OscConfig+0xb40>)
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	4a7f      	ldr	r2, [pc, #508]	; (8004f40 <HAL_RCC_OscConfig+0xb40>)
 8004d44:	f023 0301 	bic.w	r3, r3, #1
 8004d48:	6213      	str	r3, [r2, #32]
 8004d4a:	4b7d      	ldr	r3, [pc, #500]	; (8004f40 <HAL_RCC_OscConfig+0xb40>)
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	4a7c      	ldr	r2, [pc, #496]	; (8004f40 <HAL_RCC_OscConfig+0xb40>)
 8004d50:	f023 0304 	bic.w	r3, r3, #4
 8004d54:	6213      	str	r3, [r2, #32]
 8004d56:	e020      	b.n	8004d9a <HAL_RCC_OscConfig+0x99a>
 8004d58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2b05      	cmp	r3, #5
 8004d66:	d10c      	bne.n	8004d82 <HAL_RCC_OscConfig+0x982>
 8004d68:	4b75      	ldr	r3, [pc, #468]	; (8004f40 <HAL_RCC_OscConfig+0xb40>)
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	4a74      	ldr	r2, [pc, #464]	; (8004f40 <HAL_RCC_OscConfig+0xb40>)
 8004d6e:	f043 0304 	orr.w	r3, r3, #4
 8004d72:	6213      	str	r3, [r2, #32]
 8004d74:	4b72      	ldr	r3, [pc, #456]	; (8004f40 <HAL_RCC_OscConfig+0xb40>)
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	4a71      	ldr	r2, [pc, #452]	; (8004f40 <HAL_RCC_OscConfig+0xb40>)
 8004d7a:	f043 0301 	orr.w	r3, r3, #1
 8004d7e:	6213      	str	r3, [r2, #32]
 8004d80:	e00b      	b.n	8004d9a <HAL_RCC_OscConfig+0x99a>
 8004d82:	4b6f      	ldr	r3, [pc, #444]	; (8004f40 <HAL_RCC_OscConfig+0xb40>)
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	4a6e      	ldr	r2, [pc, #440]	; (8004f40 <HAL_RCC_OscConfig+0xb40>)
 8004d88:	f023 0301 	bic.w	r3, r3, #1
 8004d8c:	6213      	str	r3, [r2, #32]
 8004d8e:	4b6c      	ldr	r3, [pc, #432]	; (8004f40 <HAL_RCC_OscConfig+0xb40>)
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	4a6b      	ldr	r2, [pc, #428]	; (8004f40 <HAL_RCC_OscConfig+0xb40>)
 8004d94:	f023 0304 	bic.w	r3, r3, #4
 8004d98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 8081 	beq.w	8004eae <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dac:	f7fd fda6 	bl	80028fc <HAL_GetTick>
 8004db0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db4:	e00b      	b.n	8004dce <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004db6:	f7fd fda1 	bl	80028fc <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e365      	b.n	800549a <HAL_RCC_OscConfig+0x109a>
 8004dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dd2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dde:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	fa93 f2a3 	rbit	r2, r3
 8004de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004df6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e02:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	fa93 f2a3 	rbit	r2, r3
 8004e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e10:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004e14:	601a      	str	r2, [r3, #0]
  return result;
 8004e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e1a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004e1e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e20:	fab3 f383 	clz	r3, r3
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	f043 0302 	orr.w	r3, r3, #2
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d102      	bne.n	8004e3a <HAL_RCC_OscConfig+0xa3a>
 8004e34:	4b42      	ldr	r3, [pc, #264]	; (8004f40 <HAL_RCC_OscConfig+0xb40>)
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	e013      	b.n	8004e62 <HAL_RCC_OscConfig+0xa62>
 8004e3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e3e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004e42:	2202      	movs	r2, #2
 8004e44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e4a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	fa93 f2a3 	rbit	r2, r3
 8004e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e58:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	4b38      	ldr	r3, [pc, #224]	; (8004f40 <HAL_RCC_OscConfig+0xb40>)
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e66:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004e6a:	2102      	movs	r1, #2
 8004e6c:	6011      	str	r1, [r2, #0]
 8004e6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e72:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	fa92 f1a2 	rbit	r1, r2
 8004e7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e80:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004e84:	6011      	str	r1, [r2, #0]
  return result;
 8004e86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e8a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004e8e:	6812      	ldr	r2, [r2, #0]
 8004e90:	fab2 f282 	clz	r2, r2
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	f002 021f 	and.w	r2, r2, #31
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d084      	beq.n	8004db6 <HAL_RCC_OscConfig+0x9b6>
 8004eac:	e083      	b.n	8004fb6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eae:	f7fd fd25 	bl	80028fc <HAL_GetTick>
 8004eb2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eb6:	e00b      	b.n	8004ed0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eb8:	f7fd fd20 	bl	80028fc <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e2e4      	b.n	800549a <HAL_RCC_OscConfig+0x109a>
 8004ed0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ed4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004ed8:	2202      	movs	r2, #2
 8004eda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004edc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ee0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	fa93 f2a3 	rbit	r2, r3
 8004eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ef8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004efc:	2202      	movs	r2, #2
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f04:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	fa93 f2a3 	rbit	r2, r3
 8004f0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f12:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004f16:	601a      	str	r2, [r3, #0]
  return result;
 8004f18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f1c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004f20:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f22:	fab3 f383 	clz	r3, r3
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	095b      	lsrs	r3, r3, #5
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	f043 0302 	orr.w	r3, r3, #2
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d106      	bne.n	8004f44 <HAL_RCC_OscConfig+0xb44>
 8004f36:	4b02      	ldr	r3, [pc, #8]	; (8004f40 <HAL_RCC_OscConfig+0xb40>)
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	e017      	b.n	8004f6c <HAL_RCC_OscConfig+0xb6c>
 8004f3c:	40007000 	.word	0x40007000
 8004f40:	40021000 	.word	0x40021000
 8004f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f48:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f54:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	fa93 f2a3 	rbit	r2, r3
 8004f5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f62:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	4bb3      	ldr	r3, [pc, #716]	; (8005238 <HAL_RCC_OscConfig+0xe38>)
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f70:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004f74:	2102      	movs	r1, #2
 8004f76:	6011      	str	r1, [r2, #0]
 8004f78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f7c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004f80:	6812      	ldr	r2, [r2, #0]
 8004f82:	fa92 f1a2 	rbit	r1, r2
 8004f86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f8a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004f8e:	6011      	str	r1, [r2, #0]
  return result;
 8004f90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f94:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004f98:	6812      	ldr	r2, [r2, #0]
 8004f9a:	fab2 f282 	clz	r2, r2
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	f002 021f 	and.w	r2, r2, #31
 8004faa:	2101      	movs	r1, #1
 8004fac:	fa01 f202 	lsl.w	r2, r1, r2
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d180      	bne.n	8004eb8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004fb6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d105      	bne.n	8004fca <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fbe:	4b9e      	ldr	r3, [pc, #632]	; (8005238 <HAL_RCC_OscConfig+0xe38>)
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	4a9d      	ldr	r2, [pc, #628]	; (8005238 <HAL_RCC_OscConfig+0xe38>)
 8004fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 825e 	beq.w	8005498 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fdc:	4b96      	ldr	r3, [pc, #600]	; (8005238 <HAL_RCC_OscConfig+0xe38>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f003 030c 	and.w	r3, r3, #12
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	f000 821f 	beq.w	8005428 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	f040 8170 	bne.w	80052dc <HAL_RCC_OscConfig+0xedc>
 8004ffc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005000:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005004:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800500e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	fa93 f2a3 	rbit	r2, r3
 8005018:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800501c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005020:	601a      	str	r2, [r3, #0]
  return result;
 8005022:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005026:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800502a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502c:	fab3 f383 	clz	r3, r3
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005036:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	461a      	mov	r2, r3
 800503e:	2300      	movs	r3, #0
 8005040:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005042:	f7fd fc5b 	bl	80028fc <HAL_GetTick>
 8005046:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800504a:	e009      	b.n	8005060 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504c:	f7fd fc56 	bl	80028fc <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e21c      	b.n	800549a <HAL_RCC_OscConfig+0x109a>
 8005060:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005064:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005068:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800506c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005072:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	fa93 f2a3 	rbit	r2, r3
 800507c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005080:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005084:	601a      	str	r2, [r3, #0]
  return result;
 8005086:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800508a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800508e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005090:	fab3 f383 	clz	r3, r3
 8005094:	b2db      	uxtb	r3, r3
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	b2db      	uxtb	r3, r3
 800509a:	f043 0301 	orr.w	r3, r3, #1
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d102      	bne.n	80050aa <HAL_RCC_OscConfig+0xcaa>
 80050a4:	4b64      	ldr	r3, [pc, #400]	; (8005238 <HAL_RCC_OscConfig+0xe38>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	e027      	b.n	80050fa <HAL_RCC_OscConfig+0xcfa>
 80050aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050ae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80050b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050bc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	fa93 f2a3 	rbit	r2, r3
 80050c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050ca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050d4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80050d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050e2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	fa93 f2a3 	rbit	r2, r3
 80050ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050f0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	4b50      	ldr	r3, [pc, #320]	; (8005238 <HAL_RCC_OscConfig+0xe38>)
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050fe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005102:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005106:	6011      	str	r1, [r2, #0]
 8005108:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800510c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005110:	6812      	ldr	r2, [r2, #0]
 8005112:	fa92 f1a2 	rbit	r1, r2
 8005116:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800511a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800511e:	6011      	str	r1, [r2, #0]
  return result;
 8005120:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005124:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8005128:	6812      	ldr	r2, [r2, #0]
 800512a:	fab2 f282 	clz	r2, r2
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	f042 0220 	orr.w	r2, r2, #32
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	f002 021f 	and.w	r2, r2, #31
 800513a:	2101      	movs	r1, #1
 800513c:	fa01 f202 	lsl.w	r2, r1, r2
 8005140:	4013      	ands	r3, r2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d182      	bne.n	800504c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005146:	4b3c      	ldr	r3, [pc, #240]	; (8005238 <HAL_RCC_OscConfig+0xe38>)
 8005148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514a:	f023 020f 	bic.w	r2, r3, #15
 800514e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005152:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	4937      	ldr	r1, [pc, #220]	; (8005238 <HAL_RCC_OscConfig+0xe38>)
 800515c:	4313      	orrs	r3, r2
 800515e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005160:	4b35      	ldr	r3, [pc, #212]	; (8005238 <HAL_RCC_OscConfig+0xe38>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005168:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800516c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6a19      	ldr	r1, [r3, #32]
 8005174:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005178:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	430b      	orrs	r3, r1
 8005182:	492d      	ldr	r1, [pc, #180]	; (8005238 <HAL_RCC_OscConfig+0xe38>)
 8005184:	4313      	orrs	r3, r2
 8005186:	604b      	str	r3, [r1, #4]
 8005188:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800518c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005190:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005194:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005196:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800519a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	fa93 f2a3 	rbit	r2, r3
 80051a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051a8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80051ac:	601a      	str	r2, [r3, #0]
  return result;
 80051ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051b2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80051b6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051b8:	fab3 f383 	clz	r3, r3
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80051c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	461a      	mov	r2, r3
 80051ca:	2301      	movs	r3, #1
 80051cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ce:	f7fd fb95 	bl	80028fc <HAL_GetTick>
 80051d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051d6:	e009      	b.n	80051ec <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051d8:	f7fd fb90 	bl	80028fc <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e156      	b.n	800549a <HAL_RCC_OscConfig+0x109a>
 80051ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051f0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80051f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051fe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	fa93 f2a3 	rbit	r2, r3
 8005208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800520c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005210:	601a      	str	r2, [r3, #0]
  return result;
 8005212:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005216:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800521a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800521c:	fab3 f383 	clz	r3, r3
 8005220:	b2db      	uxtb	r3, r3
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	b2db      	uxtb	r3, r3
 8005226:	f043 0301 	orr.w	r3, r3, #1
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	d105      	bne.n	800523c <HAL_RCC_OscConfig+0xe3c>
 8005230:	4b01      	ldr	r3, [pc, #4]	; (8005238 <HAL_RCC_OscConfig+0xe38>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	e02a      	b.n	800528c <HAL_RCC_OscConfig+0xe8c>
 8005236:	bf00      	nop
 8005238:	40021000 	.word	0x40021000
 800523c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005240:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005244:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005248:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800524e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	fa93 f2a3 	rbit	r2, r3
 8005258:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800525c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005266:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800526a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005274:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	fa93 f2a3 	rbit	r2, r3
 800527e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005282:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	4b86      	ldr	r3, [pc, #536]	; (80054a4 <HAL_RCC_OscConfig+0x10a4>)
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005290:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005294:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005298:	6011      	str	r1, [r2, #0]
 800529a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800529e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80052a2:	6812      	ldr	r2, [r2, #0]
 80052a4:	fa92 f1a2 	rbit	r1, r2
 80052a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80052ac:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80052b0:	6011      	str	r1, [r2, #0]
  return result;
 80052b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80052b6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80052ba:	6812      	ldr	r2, [r2, #0]
 80052bc:	fab2 f282 	clz	r2, r2
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	f042 0220 	orr.w	r2, r2, #32
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	f002 021f 	and.w	r2, r2, #31
 80052cc:	2101      	movs	r1, #1
 80052ce:	fa01 f202 	lsl.w	r2, r1, r2
 80052d2:	4013      	ands	r3, r2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f43f af7f 	beq.w	80051d8 <HAL_RCC_OscConfig+0xdd8>
 80052da:	e0dd      	b.n	8005498 <HAL_RCC_OscConfig+0x1098>
 80052dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052e0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80052e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052ee:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	fa93 f2a3 	rbit	r2, r3
 80052f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052fc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005300:	601a      	str	r2, [r3, #0]
  return result;
 8005302:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005306:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800530a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800530c:	fab3 f383 	clz	r3, r3
 8005310:	b2db      	uxtb	r3, r3
 8005312:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005316:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	461a      	mov	r2, r3
 800531e:	2300      	movs	r3, #0
 8005320:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005322:	f7fd faeb 	bl	80028fc <HAL_GetTick>
 8005326:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800532a:	e009      	b.n	8005340 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800532c:	f7fd fae6 	bl	80028fc <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e0ac      	b.n	800549a <HAL_RCC_OscConfig+0x109a>
 8005340:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005344:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005348:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800534c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005352:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	fa93 f2a3 	rbit	r2, r3
 800535c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005360:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005364:	601a      	str	r2, [r3, #0]
  return result;
 8005366:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800536a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800536e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005370:	fab3 f383 	clz	r3, r3
 8005374:	b2db      	uxtb	r3, r3
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	b2db      	uxtb	r3, r3
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b01      	cmp	r3, #1
 8005382:	d102      	bne.n	800538a <HAL_RCC_OscConfig+0xf8a>
 8005384:	4b47      	ldr	r3, [pc, #284]	; (80054a4 <HAL_RCC_OscConfig+0x10a4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	e027      	b.n	80053da <HAL_RCC_OscConfig+0xfda>
 800538a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800538e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005392:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005396:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800539c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	fa93 f2a3 	rbit	r2, r3
 80053a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053aa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053b4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80053b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053c2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	fa93 f2a3 	rbit	r2, r3
 80053cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053d0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	4b33      	ldr	r3, [pc, #204]	; (80054a4 <HAL_RCC_OscConfig+0x10a4>)
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80053de:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80053e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80053e6:	6011      	str	r1, [r2, #0]
 80053e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80053ec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80053f0:	6812      	ldr	r2, [r2, #0]
 80053f2:	fa92 f1a2 	rbit	r1, r2
 80053f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80053fa:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80053fe:	6011      	str	r1, [r2, #0]
  return result;
 8005400:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005404:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005408:	6812      	ldr	r2, [r2, #0]
 800540a:	fab2 f282 	clz	r2, r2
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	f042 0220 	orr.w	r2, r2, #32
 8005414:	b2d2      	uxtb	r2, r2
 8005416:	f002 021f 	and.w	r2, r2, #31
 800541a:	2101      	movs	r1, #1
 800541c:	fa01 f202 	lsl.w	r2, r1, r2
 8005420:	4013      	ands	r3, r2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d182      	bne.n	800532c <HAL_RCC_OscConfig+0xf2c>
 8005426:	e037      	b.n	8005498 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005428:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800542c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e02e      	b.n	800549a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800543c:	4b19      	ldr	r3, [pc, #100]	; (80054a4 <HAL_RCC_OscConfig+0x10a4>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005444:	4b17      	ldr	r3, [pc, #92]	; (80054a4 <HAL_RCC_OscConfig+0x10a4>)
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800544c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005450:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005454:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005458:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	429a      	cmp	r2, r3
 8005462:	d117      	bne.n	8005494 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005464:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005468:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800546c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005470:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005478:	429a      	cmp	r2, r3
 800547a:	d10b      	bne.n	8005494 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800547c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005480:	f003 020f 	and.w	r2, r3, #15
 8005484:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005488:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005490:	429a      	cmp	r2, r3
 8005492:	d001      	beq.n	8005498 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e000      	b.n	800549a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40021000 	.word	0x40021000

080054a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b09e      	sub	sp, #120	; 0x78
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e162      	b.n	8005786 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054c0:	4b90      	ldr	r3, [pc, #576]	; (8005704 <HAL_RCC_ClockConfig+0x25c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d910      	bls.n	80054f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ce:	4b8d      	ldr	r3, [pc, #564]	; (8005704 <HAL_RCC_ClockConfig+0x25c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f023 0207 	bic.w	r2, r3, #7
 80054d6:	498b      	ldr	r1, [pc, #556]	; (8005704 <HAL_RCC_ClockConfig+0x25c>)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	4313      	orrs	r3, r2
 80054dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054de:	4b89      	ldr	r3, [pc, #548]	; (8005704 <HAL_RCC_ClockConfig+0x25c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d001      	beq.n	80054f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e14a      	b.n	8005786 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d008      	beq.n	800550e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054fc:	4b82      	ldr	r3, [pc, #520]	; (8005708 <HAL_RCC_ClockConfig+0x260>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	497f      	ldr	r1, [pc, #508]	; (8005708 <HAL_RCC_ClockConfig+0x260>)
 800550a:	4313      	orrs	r3, r2
 800550c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 80dc 	beq.w	80056d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d13c      	bne.n	800559e <HAL_RCC_ClockConfig+0xf6>
 8005524:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005528:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800552c:	fa93 f3a3 	rbit	r3, r3
 8005530:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005534:	fab3 f383 	clz	r3, r3
 8005538:	b2db      	uxtb	r3, r3
 800553a:	095b      	lsrs	r3, r3, #5
 800553c:	b2db      	uxtb	r3, r3
 800553e:	f043 0301 	orr.w	r3, r3, #1
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b01      	cmp	r3, #1
 8005546:	d102      	bne.n	800554e <HAL_RCC_ClockConfig+0xa6>
 8005548:	4b6f      	ldr	r3, [pc, #444]	; (8005708 <HAL_RCC_ClockConfig+0x260>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	e00f      	b.n	800556e <HAL_RCC_ClockConfig+0xc6>
 800554e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005552:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005554:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005556:	fa93 f3a3 	rbit	r3, r3
 800555a:	667b      	str	r3, [r7, #100]	; 0x64
 800555c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005560:	663b      	str	r3, [r7, #96]	; 0x60
 8005562:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005564:	fa93 f3a3 	rbit	r3, r3
 8005568:	65fb      	str	r3, [r7, #92]	; 0x5c
 800556a:	4b67      	ldr	r3, [pc, #412]	; (8005708 <HAL_RCC_ClockConfig+0x260>)
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005572:	65ba      	str	r2, [r7, #88]	; 0x58
 8005574:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005576:	fa92 f2a2 	rbit	r2, r2
 800557a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800557c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800557e:	fab2 f282 	clz	r2, r2
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	f042 0220 	orr.w	r2, r2, #32
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	f002 021f 	and.w	r2, r2, #31
 800558e:	2101      	movs	r1, #1
 8005590:	fa01 f202 	lsl.w	r2, r1, r2
 8005594:	4013      	ands	r3, r2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d17b      	bne.n	8005692 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e0f3      	b.n	8005786 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d13c      	bne.n	8005620 <HAL_RCC_ClockConfig+0x178>
 80055a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ae:	fa93 f3a3 	rbit	r3, r3
 80055b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80055b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055b6:	fab3 f383 	clz	r3, r3
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	095b      	lsrs	r3, r3, #5
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d102      	bne.n	80055d0 <HAL_RCC_ClockConfig+0x128>
 80055ca:	4b4f      	ldr	r3, [pc, #316]	; (8005708 <HAL_RCC_ClockConfig+0x260>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	e00f      	b.n	80055f0 <HAL_RCC_ClockConfig+0x148>
 80055d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055d8:	fa93 f3a3 	rbit	r3, r3
 80055dc:	647b      	str	r3, [r7, #68]	; 0x44
 80055de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055e2:	643b      	str	r3, [r7, #64]	; 0x40
 80055e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e6:	fa93 f3a3 	rbit	r3, r3
 80055ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ec:	4b46      	ldr	r3, [pc, #280]	; (8005708 <HAL_RCC_ClockConfig+0x260>)
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055f4:	63ba      	str	r2, [r7, #56]	; 0x38
 80055f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055f8:	fa92 f2a2 	rbit	r2, r2
 80055fc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80055fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005600:	fab2 f282 	clz	r2, r2
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	f042 0220 	orr.w	r2, r2, #32
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	f002 021f 	and.w	r2, r2, #31
 8005610:	2101      	movs	r1, #1
 8005612:	fa01 f202 	lsl.w	r2, r1, r2
 8005616:	4013      	ands	r3, r2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d13a      	bne.n	8005692 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e0b2      	b.n	8005786 <HAL_RCC_ClockConfig+0x2de>
 8005620:	2302      	movs	r3, #2
 8005622:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005626:	fa93 f3a3 	rbit	r3, r3
 800562a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800562e:	fab3 f383 	clz	r3, r3
 8005632:	b2db      	uxtb	r3, r3
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	b2db      	uxtb	r3, r3
 8005638:	f043 0301 	orr.w	r3, r3, #1
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b01      	cmp	r3, #1
 8005640:	d102      	bne.n	8005648 <HAL_RCC_ClockConfig+0x1a0>
 8005642:	4b31      	ldr	r3, [pc, #196]	; (8005708 <HAL_RCC_ClockConfig+0x260>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	e00d      	b.n	8005664 <HAL_RCC_ClockConfig+0x1bc>
 8005648:	2302      	movs	r3, #2
 800564a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	fa93 f3a3 	rbit	r3, r3
 8005652:	627b      	str	r3, [r7, #36]	; 0x24
 8005654:	2302      	movs	r3, #2
 8005656:	623b      	str	r3, [r7, #32]
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	fa93 f3a3 	rbit	r3, r3
 800565e:	61fb      	str	r3, [r7, #28]
 8005660:	4b29      	ldr	r3, [pc, #164]	; (8005708 <HAL_RCC_ClockConfig+0x260>)
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	2202      	movs	r2, #2
 8005666:	61ba      	str	r2, [r7, #24]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	fa92 f2a2 	rbit	r2, r2
 800566e:	617a      	str	r2, [r7, #20]
  return result;
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	fab2 f282 	clz	r2, r2
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	f042 0220 	orr.w	r2, r2, #32
 800567c:	b2d2      	uxtb	r2, r2
 800567e:	f002 021f 	and.w	r2, r2, #31
 8005682:	2101      	movs	r1, #1
 8005684:	fa01 f202 	lsl.w	r2, r1, r2
 8005688:	4013      	ands	r3, r2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e079      	b.n	8005786 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005692:	4b1d      	ldr	r3, [pc, #116]	; (8005708 <HAL_RCC_ClockConfig+0x260>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f023 0203 	bic.w	r2, r3, #3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	491a      	ldr	r1, [pc, #104]	; (8005708 <HAL_RCC_ClockConfig+0x260>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056a4:	f7fd f92a 	bl	80028fc <HAL_GetTick>
 80056a8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056aa:	e00a      	b.n	80056c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ac:	f7fd f926 	bl	80028fc <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e061      	b.n	8005786 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c2:	4b11      	ldr	r3, [pc, #68]	; (8005708 <HAL_RCC_ClockConfig+0x260>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f003 020c 	and.w	r2, r3, #12
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d1eb      	bne.n	80056ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056d4:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <HAL_RCC_ClockConfig+0x25c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d214      	bcs.n	800570c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056e2:	4b08      	ldr	r3, [pc, #32]	; (8005704 <HAL_RCC_ClockConfig+0x25c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f023 0207 	bic.w	r2, r3, #7
 80056ea:	4906      	ldr	r1, [pc, #24]	; (8005704 <HAL_RCC_ClockConfig+0x25c>)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f2:	4b04      	ldr	r3, [pc, #16]	; (8005704 <HAL_RCC_ClockConfig+0x25c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d005      	beq.n	800570c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e040      	b.n	8005786 <HAL_RCC_ClockConfig+0x2de>
 8005704:	40022000 	.word	0x40022000
 8005708:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d008      	beq.n	800572a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005718:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <HAL_RCC_ClockConfig+0x2e8>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	491a      	ldr	r1, [pc, #104]	; (8005790 <HAL_RCC_ClockConfig+0x2e8>)
 8005726:	4313      	orrs	r3, r2
 8005728:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0308 	and.w	r3, r3, #8
 8005732:	2b00      	cmp	r3, #0
 8005734:	d009      	beq.n	800574a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005736:	4b16      	ldr	r3, [pc, #88]	; (8005790 <HAL_RCC_ClockConfig+0x2e8>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	4912      	ldr	r1, [pc, #72]	; (8005790 <HAL_RCC_ClockConfig+0x2e8>)
 8005746:	4313      	orrs	r3, r2
 8005748:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800574a:	f000 f829 	bl	80057a0 <HAL_RCC_GetSysClockFreq>
 800574e:	4601      	mov	r1, r0
 8005750:	4b0f      	ldr	r3, [pc, #60]	; (8005790 <HAL_RCC_ClockConfig+0x2e8>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005758:	22f0      	movs	r2, #240	; 0xf0
 800575a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	fa92 f2a2 	rbit	r2, r2
 8005762:	60fa      	str	r2, [r7, #12]
  return result;
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	fab2 f282 	clz	r2, r2
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	40d3      	lsrs	r3, r2
 800576e:	4a09      	ldr	r2, [pc, #36]	; (8005794 <HAL_RCC_ClockConfig+0x2ec>)
 8005770:	5cd3      	ldrb	r3, [r2, r3]
 8005772:	fa21 f303 	lsr.w	r3, r1, r3
 8005776:	4a08      	ldr	r2, [pc, #32]	; (8005798 <HAL_RCC_ClockConfig+0x2f0>)
 8005778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800577a:	4b08      	ldr	r3, [pc, #32]	; (800579c <HAL_RCC_ClockConfig+0x2f4>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f7fd f878 	bl	8002874 <HAL_InitTick>
  
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3778      	adds	r7, #120	; 0x78
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40021000 	.word	0x40021000
 8005794:	08009238 	.word	0x08009238
 8005798:	20000064 	.word	0x20000064
 800579c:	20000068 	.word	0x20000068

080057a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b08b      	sub	sp, #44	; 0x2c
 80057a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	61fb      	str	r3, [r7, #28]
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	2300      	movs	r3, #0
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80057ba:	4b2a      	ldr	r3, [pc, #168]	; (8005864 <HAL_RCC_GetSysClockFreq+0xc4>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	f003 030c 	and.w	r3, r3, #12
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d002      	beq.n	80057d0 <HAL_RCC_GetSysClockFreq+0x30>
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d003      	beq.n	80057d6 <HAL_RCC_GetSysClockFreq+0x36>
 80057ce:	e03f      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80057d0:	4b25      	ldr	r3, [pc, #148]	; (8005868 <HAL_RCC_GetSysClockFreq+0xc8>)
 80057d2:	623b      	str	r3, [r7, #32]
      break;
 80057d4:	e03f      	b.n	8005856 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80057dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80057e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	fa92 f2a2 	rbit	r2, r2
 80057e8:	607a      	str	r2, [r7, #4]
  return result;
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	fab2 f282 	clz	r2, r2
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	40d3      	lsrs	r3, r2
 80057f4:	4a1d      	ldr	r2, [pc, #116]	; (800586c <HAL_RCC_GetSysClockFreq+0xcc>)
 80057f6:	5cd3      	ldrb	r3, [r2, r3]
 80057f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80057fa:	4b1a      	ldr	r3, [pc, #104]	; (8005864 <HAL_RCC_GetSysClockFreq+0xc4>)
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	f003 030f 	and.w	r3, r3, #15
 8005802:	220f      	movs	r2, #15
 8005804:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	fa92 f2a2 	rbit	r2, r2
 800580c:	60fa      	str	r2, [r7, #12]
  return result;
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	fab2 f282 	clz	r2, r2
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	40d3      	lsrs	r3, r2
 8005818:	4a15      	ldr	r2, [pc, #84]	; (8005870 <HAL_RCC_GetSysClockFreq+0xd0>)
 800581a:	5cd3      	ldrb	r3, [r2, r3]
 800581c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d008      	beq.n	800583a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005828:	4a0f      	ldr	r2, [pc, #60]	; (8005868 <HAL_RCC_GetSysClockFreq+0xc8>)
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	fb02 f303 	mul.w	r3, r2, r3
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
 8005838:	e007      	b.n	800584a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800583a:	4a0b      	ldr	r2, [pc, #44]	; (8005868 <HAL_RCC_GetSysClockFreq+0xc8>)
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	fb02 f303 	mul.w	r3, r2, r3
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	623b      	str	r3, [r7, #32]
      break;
 800584e:	e002      	b.n	8005856 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005850:	4b05      	ldr	r3, [pc, #20]	; (8005868 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005852:	623b      	str	r3, [r7, #32]
      break;
 8005854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005856:	6a3b      	ldr	r3, [r7, #32]
}
 8005858:	4618      	mov	r0, r3
 800585a:	372c      	adds	r7, #44	; 0x2c
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	40021000 	.word	0x40021000
 8005868:	007a1200 	.word	0x007a1200
 800586c:	08009250 	.word	0x08009250
 8005870:	08009260 	.word	0x08009260

08005874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005878:	4b03      	ldr	r3, [pc, #12]	; (8005888 <HAL_RCC_GetHCLKFreq+0x14>)
 800587a:	681b      	ldr	r3, [r3, #0]
}
 800587c:	4618      	mov	r0, r3
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	20000064 	.word	0x20000064

0800588c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005892:	f7ff ffef 	bl	8005874 <HAL_RCC_GetHCLKFreq>
 8005896:	4601      	mov	r1, r0
 8005898:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80058a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	fa92 f2a2 	rbit	r2, r2
 80058ac:	603a      	str	r2, [r7, #0]
  return result;
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	fab2 f282 	clz	r2, r2
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	40d3      	lsrs	r3, r2
 80058b8:	4a04      	ldr	r2, [pc, #16]	; (80058cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80058ba:	5cd3      	ldrb	r3, [r2, r3]
 80058bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80058c0:	4618      	mov	r0, r3
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40021000 	.word	0x40021000
 80058cc:	08009248 	.word	0x08009248

080058d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80058d6:	f7ff ffcd 	bl	8005874 <HAL_RCC_GetHCLKFreq>
 80058da:	4601      	mov	r1, r0
 80058dc:	4b0b      	ldr	r3, [pc, #44]	; (800590c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80058e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80058e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	fa92 f2a2 	rbit	r2, r2
 80058f0:	603a      	str	r2, [r7, #0]
  return result;
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	fab2 f282 	clz	r2, r2
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	40d3      	lsrs	r3, r2
 80058fc:	4a04      	ldr	r2, [pc, #16]	; (8005910 <HAL_RCC_GetPCLK2Freq+0x40>)
 80058fe:	5cd3      	ldrb	r3, [r2, r3]
 8005900:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40021000 	.word	0x40021000
 8005910:	08009248 	.word	0x08009248

08005914 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b092      	sub	sp, #72	; 0x48
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005924:	2300      	movs	r3, #0
 8005926:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 80d4 	beq.w	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005938:	4b4e      	ldr	r3, [pc, #312]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10e      	bne.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005944:	4b4b      	ldr	r3, [pc, #300]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	4a4a      	ldr	r2, [pc, #296]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800594a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800594e:	61d3      	str	r3, [r2, #28]
 8005950:	4b48      	ldr	r3, [pc, #288]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005958:	60bb      	str	r3, [r7, #8]
 800595a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800595c:	2301      	movs	r3, #1
 800595e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005962:	4b45      	ldr	r3, [pc, #276]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596a:	2b00      	cmp	r3, #0
 800596c:	d118      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800596e:	4b42      	ldr	r3, [pc, #264]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a41      	ldr	r2, [pc, #260]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005978:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800597a:	f7fc ffbf 	bl	80028fc <HAL_GetTick>
 800597e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005980:	e008      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005982:	f7fc ffbb 	bl	80028fc <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b64      	cmp	r3, #100	; 0x64
 800598e:	d901      	bls.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e1d6      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005994:	4b38      	ldr	r3, [pc, #224]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0f0      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059a0:	4b34      	ldr	r3, [pc, #208]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 8084 	beq.w	8005aba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059bc:	429a      	cmp	r2, r3
 80059be:	d07c      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059c0:	4b2c      	ldr	r3, [pc, #176]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	fa93 f3a3 	rbit	r3, r3
 80059d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059da:	fab3 f383 	clz	r3, r3
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	461a      	mov	r2, r3
 80059e2:	4b26      	ldr	r3, [pc, #152]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80059e4:	4413      	add	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	461a      	mov	r2, r3
 80059ea:	2301      	movs	r3, #1
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f6:	fa93 f3a3 	rbit	r3, r3
 80059fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80059fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059fe:	fab3 f383 	clz	r3, r3
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	461a      	mov	r2, r3
 8005a06:	4b1d      	ldr	r3, [pc, #116]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	2300      	movs	r3, #0
 8005a10:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005a12:	4a18      	ldr	r2, [pc, #96]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a16:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d04b      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a22:	f7fc ff6b 	bl	80028fc <HAL_GetTick>
 8005a26:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a28:	e00a      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a2a:	f7fc ff67 	bl	80028fc <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e180      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005a40:	2302      	movs	r3, #2
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	fa93 f3a3 	rbit	r3, r3
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	623b      	str	r3, [r7, #32]
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	fa93 f3a3 	rbit	r3, r3
 8005a56:	61fb      	str	r3, [r7, #28]
  return result;
 8005a58:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a5a:	fab3 f383 	clz	r3, r3
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	095b      	lsrs	r3, r3, #5
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	f043 0302 	orr.w	r3, r3, #2
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d108      	bne.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005a6e:	4b01      	ldr	r3, [pc, #4]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	e00d      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005a74:	40021000 	.word	0x40021000
 8005a78:	40007000 	.word	0x40007000
 8005a7c:	10908100 	.word	0x10908100
 8005a80:	2302      	movs	r3, #2
 8005a82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	fa93 f3a3 	rbit	r3, r3
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	4b9a      	ldr	r3, [pc, #616]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	2202      	movs	r2, #2
 8005a92:	613a      	str	r2, [r7, #16]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	fa92 f2a2 	rbit	r2, r2
 8005a9a:	60fa      	str	r2, [r7, #12]
  return result;
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	fab2 f282 	clz	r2, r2
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	f002 021f 	and.w	r2, r2, #31
 8005aae:	2101      	movs	r1, #1
 8005ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0b7      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005aba:	4b8f      	ldr	r3, [pc, #572]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	498c      	ldr	r1, [pc, #560]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005acc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d105      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ad4:	4b88      	ldr	r3, [pc, #544]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	4a87      	ldr	r2, [pc, #540]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ade:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d008      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005aec:	4b82      	ldr	r3, [pc, #520]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af0:	f023 0203 	bic.w	r2, r3, #3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	497f      	ldr	r1, [pc, #508]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d008      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b0a:	4b7b      	ldr	r3, [pc, #492]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	4978      	ldr	r1, [pc, #480]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d008      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b28:	4b73      	ldr	r3, [pc, #460]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	4970      	ldr	r1, [pc, #448]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d008      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b46:	4b6c      	ldr	r3, [pc, #432]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4a:	f023 0210 	bic.w	r2, r3, #16
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	4969      	ldr	r1, [pc, #420]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d008      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005b64:	4b64      	ldr	r3, [pc, #400]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b70:	4961      	ldr	r1, [pc, #388]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d008      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b82:	4b5d      	ldr	r3, [pc, #372]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b86:	f023 0220 	bic.w	r2, r3, #32
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	495a      	ldr	r1, [pc, #360]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d008      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ba0:	4b55      	ldr	r3, [pc, #340]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	4952      	ldr	r1, [pc, #328]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0308 	and.w	r3, r3, #8
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d008      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005bbe:	4b4e      	ldr	r3, [pc, #312]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	494b      	ldr	r1, [pc, #300]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0310 	and.w	r3, r3, #16
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d008      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005bdc:	4b46      	ldr	r3, [pc, #280]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	4943      	ldr	r1, [pc, #268]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d008      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005bfa:	4b3f      	ldr	r3, [pc, #252]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c06:	493c      	ldr	r1, [pc, #240]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d008      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005c18:	4b37      	ldr	r3, [pc, #220]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c24:	4934      	ldr	r1, [pc, #208]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d008      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005c36:	4b30      	ldr	r3, [pc, #192]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c42:	492d      	ldr	r1, [pc, #180]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d008      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005c54:	4b28      	ldr	r3, [pc, #160]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c60:	4925      	ldr	r1, [pc, #148]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d008      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005c72:	4b21      	ldr	r3, [pc, #132]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c76:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	491e      	ldr	r1, [pc, #120]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d008      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005c90:	4b19      	ldr	r3, [pc, #100]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	4916      	ldr	r1, [pc, #88]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d008      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005cae:	4b12      	ldr	r3, [pc, #72]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cba:	490f      	ldr	r1, [pc, #60]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005ccc:	4b0a      	ldr	r3, [pc, #40]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd8:	4907      	ldr	r1, [pc, #28]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00c      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005cea:	4b03      	ldr	r3, [pc, #12]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cee:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	e002      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005cf6:	bf00      	nop
 8005cf8:	40021000 	.word	0x40021000
 8005cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cfe:	4913      	ldr	r1, [pc, #76]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d008      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005d10:	4b0e      	ldr	r3, [pc, #56]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1c:	490b      	ldr	r1, [pc, #44]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d008      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005d2e:	4b07      	ldr	r3, [pc, #28]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d32:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d3a:	4904      	ldr	r1, [pc, #16]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3748      	adds	r7, #72	; 0x48
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	40021000 	.word	0x40021000

08005d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e049      	b.n	8005df6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d106      	bne.n	8005d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fc faae 	bl	80022d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4610      	mov	r0, r2
 8005d90:	f000 fb80 	bl	8006494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b082      	sub	sp, #8
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e049      	b.n	8005ea4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d106      	bne.n	8005e2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f841 	bl	8005eac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	f000 fb29 	bl	8006494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d109      	bne.n	8005ee4 <HAL_TIM_PWM_Start+0x24>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	bf14      	ite	ne
 8005edc:	2301      	movne	r3, #1
 8005ede:	2300      	moveq	r3, #0
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	e03c      	b.n	8005f5e <HAL_TIM_PWM_Start+0x9e>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	d109      	bne.n	8005efe <HAL_TIM_PWM_Start+0x3e>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	bf14      	ite	ne
 8005ef6:	2301      	movne	r3, #1
 8005ef8:	2300      	moveq	r3, #0
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	e02f      	b.n	8005f5e <HAL_TIM_PWM_Start+0x9e>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d109      	bne.n	8005f18 <HAL_TIM_PWM_Start+0x58>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	bf14      	ite	ne
 8005f10:	2301      	movne	r3, #1
 8005f12:	2300      	moveq	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	e022      	b.n	8005f5e <HAL_TIM_PWM_Start+0x9e>
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b0c      	cmp	r3, #12
 8005f1c:	d109      	bne.n	8005f32 <HAL_TIM_PWM_Start+0x72>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	bf14      	ite	ne
 8005f2a:	2301      	movne	r3, #1
 8005f2c:	2300      	moveq	r3, #0
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	e015      	b.n	8005f5e <HAL_TIM_PWM_Start+0x9e>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b10      	cmp	r3, #16
 8005f36:	d109      	bne.n	8005f4c <HAL_TIM_PWM_Start+0x8c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	bf14      	ite	ne
 8005f44:	2301      	movne	r3, #1
 8005f46:	2300      	moveq	r3, #0
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	e008      	b.n	8005f5e <HAL_TIM_PWM_Start+0x9e>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	bf14      	ite	ne
 8005f58:	2301      	movne	r3, #1
 8005f5a:	2300      	moveq	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e0a1      	b.n	80060aa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d104      	bne.n	8005f76 <HAL_TIM_PWM_Start+0xb6>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f74:	e023      	b.n	8005fbe <HAL_TIM_PWM_Start+0xfe>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d104      	bne.n	8005f86 <HAL_TIM_PWM_Start+0xc6>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f84:	e01b      	b.n	8005fbe <HAL_TIM_PWM_Start+0xfe>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d104      	bne.n	8005f96 <HAL_TIM_PWM_Start+0xd6>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f94:	e013      	b.n	8005fbe <HAL_TIM_PWM_Start+0xfe>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b0c      	cmp	r3, #12
 8005f9a:	d104      	bne.n	8005fa6 <HAL_TIM_PWM_Start+0xe6>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fa4:	e00b      	b.n	8005fbe <HAL_TIM_PWM_Start+0xfe>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b10      	cmp	r3, #16
 8005faa:	d104      	bne.n	8005fb6 <HAL_TIM_PWM_Start+0xf6>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fb4:	e003      	b.n	8005fbe <HAL_TIM_PWM_Start+0xfe>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 fea2 	bl	8006d10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a38      	ldr	r2, [pc, #224]	; (80060b4 <HAL_TIM_PWM_Start+0x1f4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d018      	beq.n	8006008 <HAL_TIM_PWM_Start+0x148>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a37      	ldr	r2, [pc, #220]	; (80060b8 <HAL_TIM_PWM_Start+0x1f8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d013      	beq.n	8006008 <HAL_TIM_PWM_Start+0x148>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a35      	ldr	r2, [pc, #212]	; (80060bc <HAL_TIM_PWM_Start+0x1fc>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00e      	beq.n	8006008 <HAL_TIM_PWM_Start+0x148>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a34      	ldr	r2, [pc, #208]	; (80060c0 <HAL_TIM_PWM_Start+0x200>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d009      	beq.n	8006008 <HAL_TIM_PWM_Start+0x148>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a32      	ldr	r2, [pc, #200]	; (80060c4 <HAL_TIM_PWM_Start+0x204>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d004      	beq.n	8006008 <HAL_TIM_PWM_Start+0x148>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a31      	ldr	r2, [pc, #196]	; (80060c8 <HAL_TIM_PWM_Start+0x208>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d101      	bne.n	800600c <HAL_TIM_PWM_Start+0x14c>
 8006008:	2301      	movs	r3, #1
 800600a:	e000      	b.n	800600e <HAL_TIM_PWM_Start+0x14e>
 800600c:	2300      	movs	r3, #0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d007      	beq.n	8006022 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006020:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a23      	ldr	r2, [pc, #140]	; (80060b4 <HAL_TIM_PWM_Start+0x1f4>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d01d      	beq.n	8006068 <HAL_TIM_PWM_Start+0x1a8>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006034:	d018      	beq.n	8006068 <HAL_TIM_PWM_Start+0x1a8>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a24      	ldr	r2, [pc, #144]	; (80060cc <HAL_TIM_PWM_Start+0x20c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d013      	beq.n	8006068 <HAL_TIM_PWM_Start+0x1a8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a22      	ldr	r2, [pc, #136]	; (80060d0 <HAL_TIM_PWM_Start+0x210>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00e      	beq.n	8006068 <HAL_TIM_PWM_Start+0x1a8>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a1a      	ldr	r2, [pc, #104]	; (80060b8 <HAL_TIM_PWM_Start+0x1f8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d009      	beq.n	8006068 <HAL_TIM_PWM_Start+0x1a8>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a18      	ldr	r2, [pc, #96]	; (80060bc <HAL_TIM_PWM_Start+0x1fc>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d004      	beq.n	8006068 <HAL_TIM_PWM_Start+0x1a8>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a19      	ldr	r2, [pc, #100]	; (80060c8 <HAL_TIM_PWM_Start+0x208>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d115      	bne.n	8006094 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	4b19      	ldr	r3, [pc, #100]	; (80060d4 <HAL_TIM_PWM_Start+0x214>)
 8006070:	4013      	ands	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b06      	cmp	r3, #6
 8006078:	d015      	beq.n	80060a6 <HAL_TIM_PWM_Start+0x1e6>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006080:	d011      	beq.n	80060a6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0201 	orr.w	r2, r2, #1
 8006090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006092:	e008      	b.n	80060a6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0201 	orr.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	e000      	b.n	80060a8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	40012c00 	.word	0x40012c00
 80060b8:	40013400 	.word	0x40013400
 80060bc:	40014000 	.word	0x40014000
 80060c0:	40014400 	.word	0x40014400
 80060c4:	40014800 	.word	0x40014800
 80060c8:	40015000 	.word	0x40015000
 80060cc:	40000400 	.word	0x40000400
 80060d0:	40000800 	.word	0x40000800
 80060d4:	00010007 	.word	0x00010007

080060d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e0ff      	b.n	80062f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b14      	cmp	r3, #20
 8006102:	f200 80f0 	bhi.w	80062e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006106:	a201      	add	r2, pc, #4	; (adr r2, 800610c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610c:	08006161 	.word	0x08006161
 8006110:	080062e7 	.word	0x080062e7
 8006114:	080062e7 	.word	0x080062e7
 8006118:	080062e7 	.word	0x080062e7
 800611c:	080061a1 	.word	0x080061a1
 8006120:	080062e7 	.word	0x080062e7
 8006124:	080062e7 	.word	0x080062e7
 8006128:	080062e7 	.word	0x080062e7
 800612c:	080061e3 	.word	0x080061e3
 8006130:	080062e7 	.word	0x080062e7
 8006134:	080062e7 	.word	0x080062e7
 8006138:	080062e7 	.word	0x080062e7
 800613c:	08006223 	.word	0x08006223
 8006140:	080062e7 	.word	0x080062e7
 8006144:	080062e7 	.word	0x080062e7
 8006148:	080062e7 	.word	0x080062e7
 800614c:	08006265 	.word	0x08006265
 8006150:	080062e7 	.word	0x080062e7
 8006154:	080062e7 	.word	0x080062e7
 8006158:	080062e7 	.word	0x080062e7
 800615c:	080062a5 	.word	0x080062a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68b9      	ldr	r1, [r7, #8]
 8006166:	4618      	mov	r0, r3
 8006168:	f000 fa32 	bl	80065d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0208 	orr.w	r2, r2, #8
 800617a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0204 	bic.w	r2, r2, #4
 800618a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6999      	ldr	r1, [r3, #24]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	691a      	ldr	r2, [r3, #16]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	619a      	str	r2, [r3, #24]
      break;
 800619e:	e0a5      	b.n	80062ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 faac 	bl	8006704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699a      	ldr	r2, [r3, #24]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6999      	ldr	r1, [r3, #24]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	021a      	lsls	r2, r3, #8
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	619a      	str	r2, [r3, #24]
      break;
 80061e0:	e084      	b.n	80062ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 fb1f 	bl	800682c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f042 0208 	orr.w	r2, r2, #8
 80061fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0204 	bic.w	r2, r2, #4
 800620c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69d9      	ldr	r1, [r3, #28]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	691a      	ldr	r2, [r3, #16]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	61da      	str	r2, [r3, #28]
      break;
 8006220:	e064      	b.n	80062ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68b9      	ldr	r1, [r7, #8]
 8006228:	4618      	mov	r0, r3
 800622a:	f000 fb91 	bl	8006950 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69da      	ldr	r2, [r3, #28]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800623c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69da      	ldr	r2, [r3, #28]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800624c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69d9      	ldr	r1, [r3, #28]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	021a      	lsls	r2, r3, #8
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	61da      	str	r2, [r3, #28]
      break;
 8006262:	e043      	b.n	80062ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68b9      	ldr	r1, [r7, #8]
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fbe0 	bl	8006a30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0208 	orr.w	r2, r2, #8
 800627e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 0204 	bic.w	r2, r2, #4
 800628e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	691a      	ldr	r2, [r3, #16]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80062a2:	e023      	b.n	80062ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68b9      	ldr	r1, [r7, #8]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 fc2a 	bl	8006b04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	021a      	lsls	r2, r3, #8
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80062e4:	e002      	b.n	80062ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	75fb      	strb	r3, [r7, #23]
      break;
 80062ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop

08006300 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_TIM_ConfigClockSource+0x1c>
 8006318:	2302      	movs	r3, #2
 800631a:	e0b6      	b.n	800648a <HAL_TIM_ConfigClockSource+0x18a>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800633a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800633e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006346:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006358:	d03e      	beq.n	80063d8 <HAL_TIM_ConfigClockSource+0xd8>
 800635a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800635e:	f200 8087 	bhi.w	8006470 <HAL_TIM_ConfigClockSource+0x170>
 8006362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006366:	f000 8086 	beq.w	8006476 <HAL_TIM_ConfigClockSource+0x176>
 800636a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636e:	d87f      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x170>
 8006370:	2b70      	cmp	r3, #112	; 0x70
 8006372:	d01a      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0xaa>
 8006374:	2b70      	cmp	r3, #112	; 0x70
 8006376:	d87b      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x170>
 8006378:	2b60      	cmp	r3, #96	; 0x60
 800637a:	d050      	beq.n	800641e <HAL_TIM_ConfigClockSource+0x11e>
 800637c:	2b60      	cmp	r3, #96	; 0x60
 800637e:	d877      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x170>
 8006380:	2b50      	cmp	r3, #80	; 0x50
 8006382:	d03c      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0xfe>
 8006384:	2b50      	cmp	r3, #80	; 0x50
 8006386:	d873      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x170>
 8006388:	2b40      	cmp	r3, #64	; 0x40
 800638a:	d058      	beq.n	800643e <HAL_TIM_ConfigClockSource+0x13e>
 800638c:	2b40      	cmp	r3, #64	; 0x40
 800638e:	d86f      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x170>
 8006390:	2b30      	cmp	r3, #48	; 0x30
 8006392:	d064      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x15e>
 8006394:	2b30      	cmp	r3, #48	; 0x30
 8006396:	d86b      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x170>
 8006398:	2b20      	cmp	r3, #32
 800639a:	d060      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x15e>
 800639c:	2b20      	cmp	r3, #32
 800639e:	d867      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x170>
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d05c      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x15e>
 80063a4:	2b10      	cmp	r3, #16
 80063a6:	d05a      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x15e>
 80063a8:	e062      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6899      	ldr	r1, [r3, #8]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f000 fc89 	bl	8006cd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	609a      	str	r2, [r3, #8]
      break;
 80063d6:	e04f      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6818      	ldr	r0, [r3, #0]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	6899      	ldr	r1, [r3, #8]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f000 fc72 	bl	8006cd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689a      	ldr	r2, [r3, #8]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063fa:	609a      	str	r2, [r3, #8]
      break;
 80063fc:	e03c      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	6859      	ldr	r1, [r3, #4]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	461a      	mov	r2, r3
 800640c:	f000 fbe6 	bl	8006bdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2150      	movs	r1, #80	; 0x50
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fc3f 	bl	8006c9a <TIM_ITRx_SetConfig>
      break;
 800641c:	e02c      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	6859      	ldr	r1, [r3, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	461a      	mov	r2, r3
 800642c:	f000 fc05 	bl	8006c3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2160      	movs	r1, #96	; 0x60
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fc2f 	bl	8006c9a <TIM_ITRx_SetConfig>
      break;
 800643c:	e01c      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	6859      	ldr	r1, [r3, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	461a      	mov	r2, r3
 800644c:	f000 fbc6 	bl	8006bdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2140      	movs	r1, #64	; 0x40
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fc1f 	bl	8006c9a <TIM_ITRx_SetConfig>
      break;
 800645c:	e00c      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4619      	mov	r1, r3
 8006468:	4610      	mov	r0, r2
 800646a:	f000 fc16 	bl	8006c9a <TIM_ITRx_SetConfig>
      break;
 800646e:	e003      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
      break;
 8006474:	e000      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006476:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006488:	7bfb      	ldrb	r3, [r7, #15]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a42      	ldr	r2, [pc, #264]	; (80065b0 <TIM_Base_SetConfig+0x11c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d013      	beq.n	80064d4 <TIM_Base_SetConfig+0x40>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b2:	d00f      	beq.n	80064d4 <TIM_Base_SetConfig+0x40>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a3f      	ldr	r2, [pc, #252]	; (80065b4 <TIM_Base_SetConfig+0x120>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00b      	beq.n	80064d4 <TIM_Base_SetConfig+0x40>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a3e      	ldr	r2, [pc, #248]	; (80065b8 <TIM_Base_SetConfig+0x124>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d007      	beq.n	80064d4 <TIM_Base_SetConfig+0x40>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a3d      	ldr	r2, [pc, #244]	; (80065bc <TIM_Base_SetConfig+0x128>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_Base_SetConfig+0x40>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a3c      	ldr	r2, [pc, #240]	; (80065c0 <TIM_Base_SetConfig+0x12c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d108      	bne.n	80064e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a31      	ldr	r2, [pc, #196]	; (80065b0 <TIM_Base_SetConfig+0x11c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d01f      	beq.n	800652e <TIM_Base_SetConfig+0x9a>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f4:	d01b      	beq.n	800652e <TIM_Base_SetConfig+0x9a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a2e      	ldr	r2, [pc, #184]	; (80065b4 <TIM_Base_SetConfig+0x120>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d017      	beq.n	800652e <TIM_Base_SetConfig+0x9a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a2d      	ldr	r2, [pc, #180]	; (80065b8 <TIM_Base_SetConfig+0x124>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d013      	beq.n	800652e <TIM_Base_SetConfig+0x9a>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a2c      	ldr	r2, [pc, #176]	; (80065bc <TIM_Base_SetConfig+0x128>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00f      	beq.n	800652e <TIM_Base_SetConfig+0x9a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a2c      	ldr	r2, [pc, #176]	; (80065c4 <TIM_Base_SetConfig+0x130>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00b      	beq.n	800652e <TIM_Base_SetConfig+0x9a>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a2b      	ldr	r2, [pc, #172]	; (80065c8 <TIM_Base_SetConfig+0x134>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d007      	beq.n	800652e <TIM_Base_SetConfig+0x9a>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a2a      	ldr	r2, [pc, #168]	; (80065cc <TIM_Base_SetConfig+0x138>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d003      	beq.n	800652e <TIM_Base_SetConfig+0x9a>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a25      	ldr	r2, [pc, #148]	; (80065c0 <TIM_Base_SetConfig+0x12c>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d108      	bne.n	8006540 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	4313      	orrs	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a12      	ldr	r2, [pc, #72]	; (80065b0 <TIM_Base_SetConfig+0x11c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d013      	beq.n	8006594 <TIM_Base_SetConfig+0x100>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a13      	ldr	r2, [pc, #76]	; (80065bc <TIM_Base_SetConfig+0x128>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d00f      	beq.n	8006594 <TIM_Base_SetConfig+0x100>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a13      	ldr	r2, [pc, #76]	; (80065c4 <TIM_Base_SetConfig+0x130>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d00b      	beq.n	8006594 <TIM_Base_SetConfig+0x100>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a12      	ldr	r2, [pc, #72]	; (80065c8 <TIM_Base_SetConfig+0x134>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d007      	beq.n	8006594 <TIM_Base_SetConfig+0x100>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a11      	ldr	r2, [pc, #68]	; (80065cc <TIM_Base_SetConfig+0x138>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d003      	beq.n	8006594 <TIM_Base_SetConfig+0x100>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a0c      	ldr	r2, [pc, #48]	; (80065c0 <TIM_Base_SetConfig+0x12c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d103      	bne.n	800659c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	691a      	ldr	r2, [r3, #16]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	615a      	str	r2, [r3, #20]
}
 80065a2:	bf00      	nop
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	40012c00 	.word	0x40012c00
 80065b4:	40000400 	.word	0x40000400
 80065b8:	40000800 	.word	0x40000800
 80065bc:	40013400 	.word	0x40013400
 80065c0:	40015000 	.word	0x40015000
 80065c4:	40014000 	.word	0x40014000
 80065c8:	40014400 	.word	0x40014400
 80065cc:	40014800 	.word	0x40014800

080065d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f023 0201 	bic.w	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0303 	bic.w	r3, r3, #3
 800660a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f023 0302 	bic.w	r3, r3, #2
 800661c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	4313      	orrs	r3, r2
 8006626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a30      	ldr	r2, [pc, #192]	; (80066ec <TIM_OC1_SetConfig+0x11c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d013      	beq.n	8006658 <TIM_OC1_SetConfig+0x88>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a2f      	ldr	r2, [pc, #188]	; (80066f0 <TIM_OC1_SetConfig+0x120>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d00f      	beq.n	8006658 <TIM_OC1_SetConfig+0x88>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a2e      	ldr	r2, [pc, #184]	; (80066f4 <TIM_OC1_SetConfig+0x124>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d00b      	beq.n	8006658 <TIM_OC1_SetConfig+0x88>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a2d      	ldr	r2, [pc, #180]	; (80066f8 <TIM_OC1_SetConfig+0x128>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d007      	beq.n	8006658 <TIM_OC1_SetConfig+0x88>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a2c      	ldr	r2, [pc, #176]	; (80066fc <TIM_OC1_SetConfig+0x12c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d003      	beq.n	8006658 <TIM_OC1_SetConfig+0x88>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a2b      	ldr	r2, [pc, #172]	; (8006700 <TIM_OC1_SetConfig+0x130>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d10c      	bne.n	8006672 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f023 0308 	bic.w	r3, r3, #8
 800665e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	4313      	orrs	r3, r2
 8006668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f023 0304 	bic.w	r3, r3, #4
 8006670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a1d      	ldr	r2, [pc, #116]	; (80066ec <TIM_OC1_SetConfig+0x11c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d013      	beq.n	80066a2 <TIM_OC1_SetConfig+0xd2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a1c      	ldr	r2, [pc, #112]	; (80066f0 <TIM_OC1_SetConfig+0x120>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d00f      	beq.n	80066a2 <TIM_OC1_SetConfig+0xd2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a1b      	ldr	r2, [pc, #108]	; (80066f4 <TIM_OC1_SetConfig+0x124>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d00b      	beq.n	80066a2 <TIM_OC1_SetConfig+0xd2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a1a      	ldr	r2, [pc, #104]	; (80066f8 <TIM_OC1_SetConfig+0x128>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d007      	beq.n	80066a2 <TIM_OC1_SetConfig+0xd2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a19      	ldr	r2, [pc, #100]	; (80066fc <TIM_OC1_SetConfig+0x12c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d003      	beq.n	80066a2 <TIM_OC1_SetConfig+0xd2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a18      	ldr	r2, [pc, #96]	; (8006700 <TIM_OC1_SetConfig+0x130>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d111      	bne.n	80066c6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	621a      	str	r2, [r3, #32]
}
 80066e0:	bf00      	nop
 80066e2:	371c      	adds	r7, #28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	40012c00 	.word	0x40012c00
 80066f0:	40013400 	.word	0x40013400
 80066f4:	40014000 	.word	0x40014000
 80066f8:	40014400 	.word	0x40014400
 80066fc:	40014800 	.word	0x40014800
 8006700:	40015000 	.word	0x40015000

08006704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	f023 0210 	bic.w	r2, r3, #16
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800673e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	021b      	lsls	r3, r3, #8
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	4313      	orrs	r3, r2
 800674a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f023 0320 	bic.w	r3, r3, #32
 8006752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	011b      	lsls	r3, r3, #4
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a2c      	ldr	r2, [pc, #176]	; (8006814 <TIM_OC2_SetConfig+0x110>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d007      	beq.n	8006778 <TIM_OC2_SetConfig+0x74>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a2b      	ldr	r2, [pc, #172]	; (8006818 <TIM_OC2_SetConfig+0x114>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d003      	beq.n	8006778 <TIM_OC2_SetConfig+0x74>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a2a      	ldr	r2, [pc, #168]	; (800681c <TIM_OC2_SetConfig+0x118>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d10d      	bne.n	8006794 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800677e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	011b      	lsls	r3, r3, #4
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	4313      	orrs	r3, r2
 800678a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006792:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a1f      	ldr	r2, [pc, #124]	; (8006814 <TIM_OC2_SetConfig+0x110>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d013      	beq.n	80067c4 <TIM_OC2_SetConfig+0xc0>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a1e      	ldr	r2, [pc, #120]	; (8006818 <TIM_OC2_SetConfig+0x114>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00f      	beq.n	80067c4 <TIM_OC2_SetConfig+0xc0>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a1e      	ldr	r2, [pc, #120]	; (8006820 <TIM_OC2_SetConfig+0x11c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d00b      	beq.n	80067c4 <TIM_OC2_SetConfig+0xc0>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a1d      	ldr	r2, [pc, #116]	; (8006824 <TIM_OC2_SetConfig+0x120>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d007      	beq.n	80067c4 <TIM_OC2_SetConfig+0xc0>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a1c      	ldr	r2, [pc, #112]	; (8006828 <TIM_OC2_SetConfig+0x124>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d003      	beq.n	80067c4 <TIM_OC2_SetConfig+0xc0>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a17      	ldr	r2, [pc, #92]	; (800681c <TIM_OC2_SetConfig+0x118>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d113      	bne.n	80067ec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067ca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067d2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	4313      	orrs	r3, r2
 80067de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	621a      	str	r2, [r3, #32]
}
 8006806:	bf00      	nop
 8006808:	371c      	adds	r7, #28
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	40012c00 	.word	0x40012c00
 8006818:	40013400 	.word	0x40013400
 800681c:	40015000 	.word	0x40015000
 8006820:	40014000 	.word	0x40014000
 8006824:	40014400 	.word	0x40014400
 8006828:	40014800 	.word	0x40014800

0800682c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800685a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0303 	bic.w	r3, r3, #3
 8006866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	021b      	lsls	r3, r3, #8
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	4313      	orrs	r3, r2
 8006884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a2b      	ldr	r2, [pc, #172]	; (8006938 <TIM_OC3_SetConfig+0x10c>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d007      	beq.n	800689e <TIM_OC3_SetConfig+0x72>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a2a      	ldr	r2, [pc, #168]	; (800693c <TIM_OC3_SetConfig+0x110>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d003      	beq.n	800689e <TIM_OC3_SetConfig+0x72>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a29      	ldr	r2, [pc, #164]	; (8006940 <TIM_OC3_SetConfig+0x114>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d10d      	bne.n	80068ba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	021b      	lsls	r3, r3, #8
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068b8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a1e      	ldr	r2, [pc, #120]	; (8006938 <TIM_OC3_SetConfig+0x10c>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d013      	beq.n	80068ea <TIM_OC3_SetConfig+0xbe>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a1d      	ldr	r2, [pc, #116]	; (800693c <TIM_OC3_SetConfig+0x110>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d00f      	beq.n	80068ea <TIM_OC3_SetConfig+0xbe>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a1d      	ldr	r2, [pc, #116]	; (8006944 <TIM_OC3_SetConfig+0x118>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d00b      	beq.n	80068ea <TIM_OC3_SetConfig+0xbe>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a1c      	ldr	r2, [pc, #112]	; (8006948 <TIM_OC3_SetConfig+0x11c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d007      	beq.n	80068ea <TIM_OC3_SetConfig+0xbe>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a1b      	ldr	r2, [pc, #108]	; (800694c <TIM_OC3_SetConfig+0x120>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d003      	beq.n	80068ea <TIM_OC3_SetConfig+0xbe>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a16      	ldr	r2, [pc, #88]	; (8006940 <TIM_OC3_SetConfig+0x114>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d113      	bne.n	8006912 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	011b      	lsls	r3, r3, #4
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4313      	orrs	r3, r2
 8006910:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	621a      	str	r2, [r3, #32]
}
 800692c:	bf00      	nop
 800692e:	371c      	adds	r7, #28
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	40012c00 	.word	0x40012c00
 800693c:	40013400 	.word	0x40013400
 8006940:	40015000 	.word	0x40015000
 8006944:	40014000 	.word	0x40014000
 8006948:	40014400 	.word	0x40014400
 800694c:	40014800 	.word	0x40014800

08006950 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800697e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	021b      	lsls	r3, r3, #8
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800699e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	031b      	lsls	r3, r3, #12
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a1a      	ldr	r2, [pc, #104]	; (8006a18 <TIM_OC4_SetConfig+0xc8>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d013      	beq.n	80069dc <TIM_OC4_SetConfig+0x8c>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a19      	ldr	r2, [pc, #100]	; (8006a1c <TIM_OC4_SetConfig+0xcc>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00f      	beq.n	80069dc <TIM_OC4_SetConfig+0x8c>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a18      	ldr	r2, [pc, #96]	; (8006a20 <TIM_OC4_SetConfig+0xd0>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00b      	beq.n	80069dc <TIM_OC4_SetConfig+0x8c>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a17      	ldr	r2, [pc, #92]	; (8006a24 <TIM_OC4_SetConfig+0xd4>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d007      	beq.n	80069dc <TIM_OC4_SetConfig+0x8c>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a16      	ldr	r2, [pc, #88]	; (8006a28 <TIM_OC4_SetConfig+0xd8>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d003      	beq.n	80069dc <TIM_OC4_SetConfig+0x8c>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a15      	ldr	r2, [pc, #84]	; (8006a2c <TIM_OC4_SetConfig+0xdc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d109      	bne.n	80069f0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	019b      	lsls	r3, r3, #6
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	621a      	str	r2, [r3, #32]
}
 8006a0a:	bf00      	nop
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	40012c00 	.word	0x40012c00
 8006a1c:	40013400 	.word	0x40013400
 8006a20:	40014000 	.word	0x40014000
 8006a24:	40014400 	.word	0x40014400
 8006a28:	40014800 	.word	0x40014800
 8006a2c:	40015000 	.word	0x40015000

08006a30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	041b      	lsls	r3, r3, #16
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a19      	ldr	r2, [pc, #100]	; (8006aec <TIM_OC5_SetConfig+0xbc>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d013      	beq.n	8006ab2 <TIM_OC5_SetConfig+0x82>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a18      	ldr	r2, [pc, #96]	; (8006af0 <TIM_OC5_SetConfig+0xc0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d00f      	beq.n	8006ab2 <TIM_OC5_SetConfig+0x82>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a17      	ldr	r2, [pc, #92]	; (8006af4 <TIM_OC5_SetConfig+0xc4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00b      	beq.n	8006ab2 <TIM_OC5_SetConfig+0x82>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a16      	ldr	r2, [pc, #88]	; (8006af8 <TIM_OC5_SetConfig+0xc8>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d007      	beq.n	8006ab2 <TIM_OC5_SetConfig+0x82>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a15      	ldr	r2, [pc, #84]	; (8006afc <TIM_OC5_SetConfig+0xcc>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d003      	beq.n	8006ab2 <TIM_OC5_SetConfig+0x82>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a14      	ldr	r2, [pc, #80]	; (8006b00 <TIM_OC5_SetConfig+0xd0>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d109      	bne.n	8006ac6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	021b      	lsls	r3, r3, #8
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	621a      	str	r2, [r3, #32]
}
 8006ae0:	bf00      	nop
 8006ae2:	371c      	adds	r7, #28
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	40012c00 	.word	0x40012c00
 8006af0:	40013400 	.word	0x40013400
 8006af4:	40014000 	.word	0x40014000
 8006af8:	40014400 	.word	0x40014400
 8006afc:	40014800 	.word	0x40014800
 8006b00:	40015000 	.word	0x40015000

08006b04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	021b      	lsls	r3, r3, #8
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	051b      	lsls	r3, r3, #20
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a1a      	ldr	r2, [pc, #104]	; (8006bc4 <TIM_OC6_SetConfig+0xc0>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d013      	beq.n	8006b88 <TIM_OC6_SetConfig+0x84>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a19      	ldr	r2, [pc, #100]	; (8006bc8 <TIM_OC6_SetConfig+0xc4>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d00f      	beq.n	8006b88 <TIM_OC6_SetConfig+0x84>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a18      	ldr	r2, [pc, #96]	; (8006bcc <TIM_OC6_SetConfig+0xc8>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d00b      	beq.n	8006b88 <TIM_OC6_SetConfig+0x84>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a17      	ldr	r2, [pc, #92]	; (8006bd0 <TIM_OC6_SetConfig+0xcc>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d007      	beq.n	8006b88 <TIM_OC6_SetConfig+0x84>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a16      	ldr	r2, [pc, #88]	; (8006bd4 <TIM_OC6_SetConfig+0xd0>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d003      	beq.n	8006b88 <TIM_OC6_SetConfig+0x84>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a15      	ldr	r2, [pc, #84]	; (8006bd8 <TIM_OC6_SetConfig+0xd4>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d109      	bne.n	8006b9c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	029b      	lsls	r3, r3, #10
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	621a      	str	r2, [r3, #32]
}
 8006bb6:	bf00      	nop
 8006bb8:	371c      	adds	r7, #28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	40012c00 	.word	0x40012c00
 8006bc8:	40013400 	.word	0x40013400
 8006bcc:	40014000 	.word	0x40014000
 8006bd0:	40014400 	.word	0x40014400
 8006bd4:	40014800 	.word	0x40014800
 8006bd8:	40015000 	.word	0x40015000

08006bdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	f023 0201 	bic.w	r2, r3, #1
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	011b      	lsls	r3, r3, #4
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f023 030a 	bic.w	r3, r3, #10
 8006c18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	621a      	str	r2, [r3, #32]
}
 8006c2e:	bf00      	nop
 8006c30:	371c      	adds	r7, #28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b087      	sub	sp, #28
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	f023 0210 	bic.w	r2, r3, #16
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	031b      	lsls	r3, r3, #12
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	011b      	lsls	r3, r3, #4
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	621a      	str	r2, [r3, #32]
}
 8006c8e:	bf00      	nop
 8006c90:	371c      	adds	r7, #28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b085      	sub	sp, #20
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	f043 0307 	orr.w	r3, r3, #7
 8006cbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	609a      	str	r2, [r3, #8]
}
 8006cc4:	bf00      	nop
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	021a      	lsls	r2, r3, #8
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	609a      	str	r2, [r3, #8]
}
 8006d04:	bf00      	nop
 8006d06:	371c      	adds	r7, #28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	f003 031f 	and.w	r3, r3, #31
 8006d22:	2201      	movs	r2, #1
 8006d24:	fa02 f303 	lsl.w	r3, r2, r3
 8006d28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6a1a      	ldr	r2, [r3, #32]
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	43db      	mvns	r3, r3
 8006d32:	401a      	ands	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a1a      	ldr	r2, [r3, #32]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f003 031f 	and.w	r3, r3, #31
 8006d42:	6879      	ldr	r1, [r7, #4]
 8006d44:	fa01 f303 	lsl.w	r3, r1, r3
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	621a      	str	r2, [r3, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
	...

08006d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e06d      	b.n	8006e50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a30      	ldr	r2, [pc, #192]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d009      	beq.n	8006db2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a2f      	ldr	r2, [pc, #188]	; (8006e60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d004      	beq.n	8006db2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a2d      	ldr	r2, [pc, #180]	; (8006e64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d108      	bne.n	8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006db8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a1e      	ldr	r2, [pc, #120]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d01d      	beq.n	8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df0:	d018      	beq.n	8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a1c      	ldr	r2, [pc, #112]	; (8006e68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d013      	beq.n	8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a1a      	ldr	r2, [pc, #104]	; (8006e6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d00e      	beq.n	8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a15      	ldr	r2, [pc, #84]	; (8006e60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d009      	beq.n	8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a16      	ldr	r2, [pc, #88]	; (8006e70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d004      	beq.n	8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a11      	ldr	r2, [pc, #68]	; (8006e64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d10c      	bne.n	8006e3e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	40012c00 	.word	0x40012c00
 8006e60:	40013400 	.word	0x40013400
 8006e64:	40015000 	.word	0x40015000
 8006e68:	40000400 	.word	0x40000400
 8006e6c:	40000800 	.word	0x40000800
 8006e70:	40014000 	.word	0x40014000

08006e74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e040      	b.n	8006f08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d106      	bne.n	8006e9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7fb fb02 	bl	80024a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2224      	movs	r2, #36	; 0x24
 8006ea0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0201 	bic.w	r2, r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fc5e 	bl	8007774 <UART_SetConfig>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d101      	bne.n	8006ec2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e022      	b.n	8006f08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d002      	beq.n	8006ed0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fe26 	bl	8007b1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ede:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006eee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f042 0201 	orr.w	r2, r2, #1
 8006efe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fead 	bl	8007c60 <UART_CheckIdleState>
 8006f06:	4603      	mov	r3, r0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b08a      	sub	sp, #40	; 0x28
 8006f14:	af02      	add	r7, sp, #8
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	603b      	str	r3, [r7, #0]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	d178      	bne.n	800701a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d002      	beq.n	8006f34 <HAL_UART_Transmit+0x24>
 8006f2e:	88fb      	ldrh	r3, [r7, #6]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e071      	b.n	800701c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2221      	movs	r2, #33	; 0x21
 8006f44:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f46:	f7fb fcd9 	bl	80028fc <HAL_GetTick>
 8006f4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	88fa      	ldrh	r2, [r7, #6]
 8006f50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	88fa      	ldrh	r2, [r7, #6]
 8006f58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f64:	d108      	bne.n	8006f78 <HAL_UART_Transmit+0x68>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d104      	bne.n	8006f78 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	61bb      	str	r3, [r7, #24]
 8006f76:	e003      	b.n	8006f80 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f80:	e030      	b.n	8006fe4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	2180      	movs	r1, #128	; 0x80
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 ff0f 	bl	8007db0 <UART_WaitOnFlagUntilTimeout>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d004      	beq.n	8006fa2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e03c      	b.n	800701c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10b      	bne.n	8006fc0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	881a      	ldrh	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fb4:	b292      	uxth	r2, r2
 8006fb6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	3302      	adds	r3, #2
 8006fbc:	61bb      	str	r3, [r7, #24]
 8006fbe:	e008      	b.n	8006fd2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	781a      	ldrb	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	b292      	uxth	r2, r2
 8006fca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1c8      	bne.n	8006f82 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2140      	movs	r1, #64	; 0x40
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f000 fed8 	bl	8007db0 <UART_WaitOnFlagUntilTimeout>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d004      	beq.n	8007010 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2220      	movs	r2, #32
 800700a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e005      	b.n	800701c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2220      	movs	r2, #32
 8007014:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	e000      	b.n	800701c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800701a:	2302      	movs	r3, #2
  }
}
 800701c:	4618      	mov	r0, r3
 800701e:	3720      	adds	r7, #32
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007024:	b480      	push	{r7}
 8007026:	b08b      	sub	sp, #44	; 0x2c
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	4613      	mov	r3, r2
 8007030:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007036:	2b20      	cmp	r3, #32
 8007038:	d147      	bne.n	80070ca <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <HAL_UART_Transmit_IT+0x22>
 8007040:	88fb      	ldrh	r3, [r7, #6]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e040      	b.n	80070cc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	88fa      	ldrh	r2, [r7, #6]
 8007054:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	88fa      	ldrh	r2, [r7, #6]
 800705c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2221      	movs	r2, #33	; 0x21
 8007072:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800707c:	d107      	bne.n	800708e <HAL_UART_Transmit_IT+0x6a>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d103      	bne.n	800708e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4a13      	ldr	r2, [pc, #76]	; (80070d8 <HAL_UART_Transmit_IT+0xb4>)
 800708a:	66da      	str	r2, [r3, #108]	; 0x6c
 800708c:	e002      	b.n	8007094 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4a12      	ldr	r2, [pc, #72]	; (80070dc <HAL_UART_Transmit_IT+0xb8>)
 8007092:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	613b      	str	r3, [r7, #16]
   return(result);
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a8:	627b      	str	r3, [r7, #36]	; 0x24
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	623b      	str	r3, [r7, #32]
 80070b4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b6:	69f9      	ldr	r1, [r7, #28]
 80070b8:	6a3a      	ldr	r2, [r7, #32]
 80070ba:	e841 2300 	strex	r3, r2, [r1]
 80070be:	61bb      	str	r3, [r7, #24]
   return(result);
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1e6      	bne.n	8007094 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	e000      	b.n	80070cc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80070ca:	2302      	movs	r3, #2
  }
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	372c      	adds	r7, #44	; 0x2c
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	080081b9 	.word	0x080081b9
 80070dc:	08008101 	.word	0x08008101

080070e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b08a      	sub	sp, #40	; 0x28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	4613      	mov	r3, r2
 80070ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070f4:	2b20      	cmp	r3, #32
 80070f6:	d132      	bne.n	800715e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <HAL_UART_Receive_IT+0x24>
 80070fe:	88fb      	ldrh	r3, [r7, #6]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e02b      	b.n	8007160 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d018      	beq.n	800714e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	e853 3f00 	ldrex	r3, [r3]
 8007128:	613b      	str	r3, [r7, #16]
   return(result);
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007130:	627b      	str	r3, [r7, #36]	; 0x24
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	623b      	str	r3, [r7, #32]
 800713c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713e:	69f9      	ldr	r1, [r7, #28]
 8007140:	6a3a      	ldr	r2, [r7, #32]
 8007142:	e841 2300 	strex	r3, r2, [r1]
 8007146:	61bb      	str	r3, [r7, #24]
   return(result);
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1e6      	bne.n	800711c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800714e:	88fb      	ldrh	r3, [r7, #6]
 8007150:	461a      	mov	r2, r3
 8007152:	68b9      	ldr	r1, [r7, #8]
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 fe93 	bl	8007e80 <UART_Start_Receive_IT>
 800715a:	4603      	mov	r3, r0
 800715c:	e000      	b.n	8007160 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800715e:	2302      	movs	r3, #2
  }
}
 8007160:	4618      	mov	r0, r3
 8007162:	3728      	adds	r7, #40	; 0x28
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b0ba      	sub	sp, #232	; 0xe8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800718e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007192:	f640 030f 	movw	r3, #2063	; 0x80f
 8007196:	4013      	ands	r3, r2
 8007198:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800719c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d115      	bne.n	80071d0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80071a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a8:	f003 0320 	and.w	r3, r3, #32
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00f      	beq.n	80071d0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b4:	f003 0320 	and.w	r3, r3, #32
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d009      	beq.n	80071d0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 82ab 	beq.w	800771c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	4798      	blx	r3
      }
      return;
 80071ce:	e2a5      	b.n	800771c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80071d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 8117 	beq.w	8007408 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80071da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d106      	bne.n	80071f4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80071e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80071ea:	4b85      	ldr	r3, [pc, #532]	; (8007400 <HAL_UART_IRQHandler+0x298>)
 80071ec:	4013      	ands	r3, r2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 810a 	beq.w	8007408 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d011      	beq.n	8007224 <HAL_UART_IRQHandler+0xbc>
 8007200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00b      	beq.n	8007224 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2201      	movs	r2, #1
 8007212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800721a:	f043 0201 	orr.w	r2, r3, #1
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d011      	beq.n	8007254 <HAL_UART_IRQHandler+0xec>
 8007230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00b      	beq.n	8007254 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2202      	movs	r2, #2
 8007242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800724a:	f043 0204 	orr.w	r2, r3, #4
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b00      	cmp	r3, #0
 800725e:	d011      	beq.n	8007284 <HAL_UART_IRQHandler+0x11c>
 8007260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00b      	beq.n	8007284 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2204      	movs	r2, #4
 8007272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800727a:	f043 0202 	orr.w	r2, r3, #2
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007288:	f003 0308 	and.w	r3, r3, #8
 800728c:	2b00      	cmp	r3, #0
 800728e:	d017      	beq.n	80072c0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007294:	f003 0320 	and.w	r3, r3, #32
 8007298:	2b00      	cmp	r3, #0
 800729a:	d105      	bne.n	80072a8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800729c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00b      	beq.n	80072c0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2208      	movs	r2, #8
 80072ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072b6:	f043 0208 	orr.w	r2, r3, #8
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d012      	beq.n	80072f2 <HAL_UART_IRQHandler+0x18a>
 80072cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00c      	beq.n	80072f2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072e8:	f043 0220 	orr.w	r2, r3, #32
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 8211 	beq.w	8007720 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80072fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007302:	f003 0320 	and.w	r3, r3, #32
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00d      	beq.n	8007326 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800730a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800730e:	f003 0320 	and.w	r3, r3, #32
 8007312:	2b00      	cmp	r3, #0
 8007314:	d007      	beq.n	8007326 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800732c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733a:	2b40      	cmp	r3, #64	; 0x40
 800733c:	d005      	beq.n	800734a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800733e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007342:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007346:	2b00      	cmp	r3, #0
 8007348:	d04f      	beq.n	80073ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fe5e 	bl	800800c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735a:	2b40      	cmp	r3, #64	; 0x40
 800735c:	d141      	bne.n	80073e2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3308      	adds	r3, #8
 8007364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007368:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800736c:	e853 3f00 	ldrex	r3, [r3]
 8007370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007374:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800737c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3308      	adds	r3, #8
 8007386:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800738a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800738e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007396:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800739a:	e841 2300 	strex	r3, r2, [r1]
 800739e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80073a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1d9      	bne.n	800735e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d013      	beq.n	80073da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073b6:	4a13      	ldr	r2, [pc, #76]	; (8007404 <HAL_UART_IRQHandler+0x29c>)
 80073b8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fc fcf4 	bl	8003dac <HAL_DMA_Abort_IT>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d017      	beq.n	80073fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80073d4:	4610      	mov	r0, r2
 80073d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d8:	e00f      	b.n	80073fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f9b4 	bl	8007748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e0:	e00b      	b.n	80073fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f9b0 	bl	8007748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e8:	e007      	b.n	80073fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f9ac 	bl	8007748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80073f8:	e192      	b.n	8007720 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073fa:	bf00      	nop
    return;
 80073fc:	e190      	b.n	8007720 <HAL_UART_IRQHandler+0x5b8>
 80073fe:	bf00      	nop
 8007400:	04000120 	.word	0x04000120
 8007404:	080080d5 	.word	0x080080d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800740c:	2b01      	cmp	r3, #1
 800740e:	f040 814b 	bne.w	80076a8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007416:	f003 0310 	and.w	r3, r3, #16
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 8144 	beq.w	80076a8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007424:	f003 0310 	and.w	r3, r3, #16
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 813d 	beq.w	80076a8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2210      	movs	r2, #16
 8007434:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007440:	2b40      	cmp	r3, #64	; 0x40
 8007442:	f040 80b5 	bne.w	80075b0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007452:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 8164 	beq.w	8007724 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007466:	429a      	cmp	r2, r3
 8007468:	f080 815c 	bcs.w	8007724 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007472:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	2b20      	cmp	r3, #32
 800747e:	f000 8086 	beq.w	800758e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800748e:	e853 3f00 	ldrex	r3, [r3]
 8007492:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007496:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800749a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800749e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	461a      	mov	r2, r3
 80074a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80074b0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80074bc:	e841 2300 	strex	r3, r2, [r1]
 80074c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80074c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1da      	bne.n	8007482 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3308      	adds	r3, #8
 80074d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074d6:	e853 3f00 	ldrex	r3, [r3]
 80074da:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80074dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074de:	f023 0301 	bic.w	r3, r3, #1
 80074e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3308      	adds	r3, #8
 80074ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074f0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074f4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074fc:	e841 2300 	strex	r3, r2, [r1]
 8007500:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007502:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1e1      	bne.n	80074cc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3308      	adds	r3, #8
 800750e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007510:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007512:	e853 3f00 	ldrex	r3, [r3]
 8007516:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800751a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800751e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3308      	adds	r3, #8
 8007528:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800752c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800752e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007530:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007532:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007534:	e841 2300 	strex	r3, r2, [r1]
 8007538:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800753a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e3      	bne.n	8007508 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2220      	movs	r2, #32
 8007544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800755c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800755e:	f023 0310 	bic.w	r3, r3, #16
 8007562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007570:	65bb      	str	r3, [r7, #88]	; 0x58
 8007572:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007576:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007578:	e841 2300 	strex	r3, r2, [r1]
 800757c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800757e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e4      	bne.n	800754e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007588:	4618      	mov	r0, r3
 800758a:	f7fc fbd6 	bl	8003d3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2202      	movs	r2, #2
 8007592:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 f8d7 	bl	800775c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075ae:	e0b9      	b.n	8007724 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075bc:	b29b      	uxth	r3, r3
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 80ab 	beq.w	8007728 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80075d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 80a6 	beq.w	8007728 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	461a      	mov	r2, r3
 80075fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007600:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007602:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007604:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007606:	e841 2300 	strex	r3, r2, [r1]
 800760a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800760c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1e4      	bne.n	80075dc <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3308      	adds	r3, #8
 8007618:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	623b      	str	r3, [r7, #32]
   return(result);
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	f023 0301 	bic.w	r3, r3, #1
 8007628:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3308      	adds	r3, #8
 8007632:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007636:	633a      	str	r2, [r7, #48]	; 0x30
 8007638:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800763c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e3      	bne.n	8007612 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2220      	movs	r2, #32
 800764e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	e853 3f00 	ldrex	r3, [r3]
 800766a:	60fb      	str	r3, [r7, #12]
   return(result);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f023 0310 	bic.w	r3, r3, #16
 8007672:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007680:	61fb      	str	r3, [r7, #28]
 8007682:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007684:	69b9      	ldr	r1, [r7, #24]
 8007686:	69fa      	ldr	r2, [r7, #28]
 8007688:	e841 2300 	strex	r3, r2, [r1]
 800768c:	617b      	str	r3, [r7, #20]
   return(result);
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1e4      	bne.n	800765e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2202      	movs	r2, #2
 8007698:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800769a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 f85b 	bl	800775c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076a6:	e03f      	b.n	8007728 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80076a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00e      	beq.n	80076d2 <HAL_UART_IRQHandler+0x56a>
 80076b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d008      	beq.n	80076d2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80076c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 ffa6 	bl	800861c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076d0:	e02d      	b.n	800772e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80076d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00e      	beq.n	80076fc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80076de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d008      	beq.n	80076fc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d01c      	beq.n	800772c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	4798      	blx	r3
    }
    return;
 80076fa:	e017      	b.n	800772c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80076fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007704:	2b00      	cmp	r3, #0
 8007706:	d012      	beq.n	800772e <HAL_UART_IRQHandler+0x5c6>
 8007708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800770c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00c      	beq.n	800772e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fdaf 	bl	8008278 <UART_EndTransmit_IT>
    return;
 800771a:	e008      	b.n	800772e <HAL_UART_IRQHandler+0x5c6>
      return;
 800771c:	bf00      	nop
 800771e:	e006      	b.n	800772e <HAL_UART_IRQHandler+0x5c6>
    return;
 8007720:	bf00      	nop
 8007722:	e004      	b.n	800772e <HAL_UART_IRQHandler+0x5c6>
      return;
 8007724:	bf00      	nop
 8007726:	e002      	b.n	800772e <HAL_UART_IRQHandler+0x5c6>
      return;
 8007728:	bf00      	nop
 800772a:	e000      	b.n	800772e <HAL_UART_IRQHandler+0x5c6>
    return;
 800772c:	bf00      	nop
  }

}
 800772e:	37e8      	adds	r7, #232	; 0xe8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b088      	sub	sp, #32
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	431a      	orrs	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	431a      	orrs	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	4313      	orrs	r3, r2
 8007796:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	4b92      	ldr	r3, [pc, #584]	; (80079e8 <UART_SetConfig+0x274>)
 80077a0:	4013      	ands	r3, r2
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	6812      	ldr	r2, [r2, #0]
 80077a6:	6979      	ldr	r1, [r7, #20]
 80077a8:	430b      	orrs	r3, r1
 80077aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68da      	ldr	r2, [r3, #12]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	430a      	orrs	r2, r1
 80077e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a80      	ldr	r2, [pc, #512]	; (80079ec <UART_SetConfig+0x278>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d120      	bne.n	8007832 <UART_SetConfig+0xbe>
 80077f0:	4b7f      	ldr	r3, [pc, #508]	; (80079f0 <UART_SetConfig+0x27c>)
 80077f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f4:	f003 0303 	and.w	r3, r3, #3
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	d817      	bhi.n	800782c <UART_SetConfig+0xb8>
 80077fc:	a201      	add	r2, pc, #4	; (adr r2, 8007804 <UART_SetConfig+0x90>)
 80077fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007802:	bf00      	nop
 8007804:	08007815 	.word	0x08007815
 8007808:	08007821 	.word	0x08007821
 800780c:	08007827 	.word	0x08007827
 8007810:	0800781b 	.word	0x0800781b
 8007814:	2301      	movs	r3, #1
 8007816:	77fb      	strb	r3, [r7, #31]
 8007818:	e0b5      	b.n	8007986 <UART_SetConfig+0x212>
 800781a:	2302      	movs	r3, #2
 800781c:	77fb      	strb	r3, [r7, #31]
 800781e:	e0b2      	b.n	8007986 <UART_SetConfig+0x212>
 8007820:	2304      	movs	r3, #4
 8007822:	77fb      	strb	r3, [r7, #31]
 8007824:	e0af      	b.n	8007986 <UART_SetConfig+0x212>
 8007826:	2308      	movs	r3, #8
 8007828:	77fb      	strb	r3, [r7, #31]
 800782a:	e0ac      	b.n	8007986 <UART_SetConfig+0x212>
 800782c:	2310      	movs	r3, #16
 800782e:	77fb      	strb	r3, [r7, #31]
 8007830:	e0a9      	b.n	8007986 <UART_SetConfig+0x212>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a6f      	ldr	r2, [pc, #444]	; (80079f4 <UART_SetConfig+0x280>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d124      	bne.n	8007886 <UART_SetConfig+0x112>
 800783c:	4b6c      	ldr	r3, [pc, #432]	; (80079f0 <UART_SetConfig+0x27c>)
 800783e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007840:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007844:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007848:	d011      	beq.n	800786e <UART_SetConfig+0xfa>
 800784a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800784e:	d817      	bhi.n	8007880 <UART_SetConfig+0x10c>
 8007850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007854:	d011      	beq.n	800787a <UART_SetConfig+0x106>
 8007856:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800785a:	d811      	bhi.n	8007880 <UART_SetConfig+0x10c>
 800785c:	2b00      	cmp	r3, #0
 800785e:	d003      	beq.n	8007868 <UART_SetConfig+0xf4>
 8007860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007864:	d006      	beq.n	8007874 <UART_SetConfig+0x100>
 8007866:	e00b      	b.n	8007880 <UART_SetConfig+0x10c>
 8007868:	2300      	movs	r3, #0
 800786a:	77fb      	strb	r3, [r7, #31]
 800786c:	e08b      	b.n	8007986 <UART_SetConfig+0x212>
 800786e:	2302      	movs	r3, #2
 8007870:	77fb      	strb	r3, [r7, #31]
 8007872:	e088      	b.n	8007986 <UART_SetConfig+0x212>
 8007874:	2304      	movs	r3, #4
 8007876:	77fb      	strb	r3, [r7, #31]
 8007878:	e085      	b.n	8007986 <UART_SetConfig+0x212>
 800787a:	2308      	movs	r3, #8
 800787c:	77fb      	strb	r3, [r7, #31]
 800787e:	e082      	b.n	8007986 <UART_SetConfig+0x212>
 8007880:	2310      	movs	r3, #16
 8007882:	77fb      	strb	r3, [r7, #31]
 8007884:	e07f      	b.n	8007986 <UART_SetConfig+0x212>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a5b      	ldr	r2, [pc, #364]	; (80079f8 <UART_SetConfig+0x284>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d124      	bne.n	80078da <UART_SetConfig+0x166>
 8007890:	4b57      	ldr	r3, [pc, #348]	; (80079f0 <UART_SetConfig+0x27c>)
 8007892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007894:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007898:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800789c:	d011      	beq.n	80078c2 <UART_SetConfig+0x14e>
 800789e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80078a2:	d817      	bhi.n	80078d4 <UART_SetConfig+0x160>
 80078a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80078a8:	d011      	beq.n	80078ce <UART_SetConfig+0x15a>
 80078aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80078ae:	d811      	bhi.n	80078d4 <UART_SetConfig+0x160>
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d003      	beq.n	80078bc <UART_SetConfig+0x148>
 80078b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80078b8:	d006      	beq.n	80078c8 <UART_SetConfig+0x154>
 80078ba:	e00b      	b.n	80078d4 <UART_SetConfig+0x160>
 80078bc:	2300      	movs	r3, #0
 80078be:	77fb      	strb	r3, [r7, #31]
 80078c0:	e061      	b.n	8007986 <UART_SetConfig+0x212>
 80078c2:	2302      	movs	r3, #2
 80078c4:	77fb      	strb	r3, [r7, #31]
 80078c6:	e05e      	b.n	8007986 <UART_SetConfig+0x212>
 80078c8:	2304      	movs	r3, #4
 80078ca:	77fb      	strb	r3, [r7, #31]
 80078cc:	e05b      	b.n	8007986 <UART_SetConfig+0x212>
 80078ce:	2308      	movs	r3, #8
 80078d0:	77fb      	strb	r3, [r7, #31]
 80078d2:	e058      	b.n	8007986 <UART_SetConfig+0x212>
 80078d4:	2310      	movs	r3, #16
 80078d6:	77fb      	strb	r3, [r7, #31]
 80078d8:	e055      	b.n	8007986 <UART_SetConfig+0x212>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a47      	ldr	r2, [pc, #284]	; (80079fc <UART_SetConfig+0x288>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d124      	bne.n	800792e <UART_SetConfig+0x1ba>
 80078e4:	4b42      	ldr	r3, [pc, #264]	; (80079f0 <UART_SetConfig+0x27c>)
 80078e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80078ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078f0:	d011      	beq.n	8007916 <UART_SetConfig+0x1a2>
 80078f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078f6:	d817      	bhi.n	8007928 <UART_SetConfig+0x1b4>
 80078f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078fc:	d011      	beq.n	8007922 <UART_SetConfig+0x1ae>
 80078fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007902:	d811      	bhi.n	8007928 <UART_SetConfig+0x1b4>
 8007904:	2b00      	cmp	r3, #0
 8007906:	d003      	beq.n	8007910 <UART_SetConfig+0x19c>
 8007908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800790c:	d006      	beq.n	800791c <UART_SetConfig+0x1a8>
 800790e:	e00b      	b.n	8007928 <UART_SetConfig+0x1b4>
 8007910:	2300      	movs	r3, #0
 8007912:	77fb      	strb	r3, [r7, #31]
 8007914:	e037      	b.n	8007986 <UART_SetConfig+0x212>
 8007916:	2302      	movs	r3, #2
 8007918:	77fb      	strb	r3, [r7, #31]
 800791a:	e034      	b.n	8007986 <UART_SetConfig+0x212>
 800791c:	2304      	movs	r3, #4
 800791e:	77fb      	strb	r3, [r7, #31]
 8007920:	e031      	b.n	8007986 <UART_SetConfig+0x212>
 8007922:	2308      	movs	r3, #8
 8007924:	77fb      	strb	r3, [r7, #31]
 8007926:	e02e      	b.n	8007986 <UART_SetConfig+0x212>
 8007928:	2310      	movs	r3, #16
 800792a:	77fb      	strb	r3, [r7, #31]
 800792c:	e02b      	b.n	8007986 <UART_SetConfig+0x212>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a33      	ldr	r2, [pc, #204]	; (8007a00 <UART_SetConfig+0x28c>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d124      	bne.n	8007982 <UART_SetConfig+0x20e>
 8007938:	4b2d      	ldr	r3, [pc, #180]	; (80079f0 <UART_SetConfig+0x27c>)
 800793a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007940:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007944:	d011      	beq.n	800796a <UART_SetConfig+0x1f6>
 8007946:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800794a:	d817      	bhi.n	800797c <UART_SetConfig+0x208>
 800794c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007950:	d011      	beq.n	8007976 <UART_SetConfig+0x202>
 8007952:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007956:	d811      	bhi.n	800797c <UART_SetConfig+0x208>
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <UART_SetConfig+0x1f0>
 800795c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007960:	d006      	beq.n	8007970 <UART_SetConfig+0x1fc>
 8007962:	e00b      	b.n	800797c <UART_SetConfig+0x208>
 8007964:	2300      	movs	r3, #0
 8007966:	77fb      	strb	r3, [r7, #31]
 8007968:	e00d      	b.n	8007986 <UART_SetConfig+0x212>
 800796a:	2302      	movs	r3, #2
 800796c:	77fb      	strb	r3, [r7, #31]
 800796e:	e00a      	b.n	8007986 <UART_SetConfig+0x212>
 8007970:	2304      	movs	r3, #4
 8007972:	77fb      	strb	r3, [r7, #31]
 8007974:	e007      	b.n	8007986 <UART_SetConfig+0x212>
 8007976:	2308      	movs	r3, #8
 8007978:	77fb      	strb	r3, [r7, #31]
 800797a:	e004      	b.n	8007986 <UART_SetConfig+0x212>
 800797c:	2310      	movs	r3, #16
 800797e:	77fb      	strb	r3, [r7, #31]
 8007980:	e001      	b.n	8007986 <UART_SetConfig+0x212>
 8007982:	2310      	movs	r3, #16
 8007984:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800798e:	d16b      	bne.n	8007a68 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007990:	7ffb      	ldrb	r3, [r7, #31]
 8007992:	2b08      	cmp	r3, #8
 8007994:	d838      	bhi.n	8007a08 <UART_SetConfig+0x294>
 8007996:	a201      	add	r2, pc, #4	; (adr r2, 800799c <UART_SetConfig+0x228>)
 8007998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799c:	080079c1 	.word	0x080079c1
 80079a0:	080079c9 	.word	0x080079c9
 80079a4:	080079d1 	.word	0x080079d1
 80079a8:	08007a09 	.word	0x08007a09
 80079ac:	080079d7 	.word	0x080079d7
 80079b0:	08007a09 	.word	0x08007a09
 80079b4:	08007a09 	.word	0x08007a09
 80079b8:	08007a09 	.word	0x08007a09
 80079bc:	080079df 	.word	0x080079df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079c0:	f7fd ff64 	bl	800588c <HAL_RCC_GetPCLK1Freq>
 80079c4:	61b8      	str	r0, [r7, #24]
        break;
 80079c6:	e024      	b.n	8007a12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079c8:	f7fd ff82 	bl	80058d0 <HAL_RCC_GetPCLK2Freq>
 80079cc:	61b8      	str	r0, [r7, #24]
        break;
 80079ce:	e020      	b.n	8007a12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079d0:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <UART_SetConfig+0x290>)
 80079d2:	61bb      	str	r3, [r7, #24]
        break;
 80079d4:	e01d      	b.n	8007a12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079d6:	f7fd fee3 	bl	80057a0 <HAL_RCC_GetSysClockFreq>
 80079da:	61b8      	str	r0, [r7, #24]
        break;
 80079dc:	e019      	b.n	8007a12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079e2:	61bb      	str	r3, [r7, #24]
        break;
 80079e4:	e015      	b.n	8007a12 <UART_SetConfig+0x29e>
 80079e6:	bf00      	nop
 80079e8:	efff69f3 	.word	0xefff69f3
 80079ec:	40013800 	.word	0x40013800
 80079f0:	40021000 	.word	0x40021000
 80079f4:	40004400 	.word	0x40004400
 80079f8:	40004800 	.word	0x40004800
 80079fc:	40004c00 	.word	0x40004c00
 8007a00:	40005000 	.word	0x40005000
 8007a04:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	77bb      	strb	r3, [r7, #30]
        break;
 8007a10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d073      	beq.n	8007b00 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	005a      	lsls	r2, r3, #1
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	085b      	lsrs	r3, r3, #1
 8007a22:	441a      	add	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	2b0f      	cmp	r3, #15
 8007a32:	d916      	bls.n	8007a62 <UART_SetConfig+0x2ee>
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a3a:	d212      	bcs.n	8007a62 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	f023 030f 	bic.w	r3, r3, #15
 8007a44:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	085b      	lsrs	r3, r3, #1
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	f003 0307 	and.w	r3, r3, #7
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	89fb      	ldrh	r3, [r7, #14]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	89fa      	ldrh	r2, [r7, #14]
 8007a5e:	60da      	str	r2, [r3, #12]
 8007a60:	e04e      	b.n	8007b00 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	77bb      	strb	r3, [r7, #30]
 8007a66:	e04b      	b.n	8007b00 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a68:	7ffb      	ldrb	r3, [r7, #31]
 8007a6a:	2b08      	cmp	r3, #8
 8007a6c:	d827      	bhi.n	8007abe <UART_SetConfig+0x34a>
 8007a6e:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <UART_SetConfig+0x300>)
 8007a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a74:	08007a99 	.word	0x08007a99
 8007a78:	08007aa1 	.word	0x08007aa1
 8007a7c:	08007aa9 	.word	0x08007aa9
 8007a80:	08007abf 	.word	0x08007abf
 8007a84:	08007aaf 	.word	0x08007aaf
 8007a88:	08007abf 	.word	0x08007abf
 8007a8c:	08007abf 	.word	0x08007abf
 8007a90:	08007abf 	.word	0x08007abf
 8007a94:	08007ab7 	.word	0x08007ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a98:	f7fd fef8 	bl	800588c <HAL_RCC_GetPCLK1Freq>
 8007a9c:	61b8      	str	r0, [r7, #24]
        break;
 8007a9e:	e013      	b.n	8007ac8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007aa0:	f7fd ff16 	bl	80058d0 <HAL_RCC_GetPCLK2Freq>
 8007aa4:	61b8      	str	r0, [r7, #24]
        break;
 8007aa6:	e00f      	b.n	8007ac8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007aa8:	4b1b      	ldr	r3, [pc, #108]	; (8007b18 <UART_SetConfig+0x3a4>)
 8007aaa:	61bb      	str	r3, [r7, #24]
        break;
 8007aac:	e00c      	b.n	8007ac8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aae:	f7fd fe77 	bl	80057a0 <HAL_RCC_GetSysClockFreq>
 8007ab2:	61b8      	str	r0, [r7, #24]
        break;
 8007ab4:	e008      	b.n	8007ac8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aba:	61bb      	str	r3, [r7, #24]
        break;
 8007abc:	e004      	b.n	8007ac8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	77bb      	strb	r3, [r7, #30]
        break;
 8007ac6:	bf00      	nop
    }

    if (pclk != 0U)
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d018      	beq.n	8007b00 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	085a      	lsrs	r2, r3, #1
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	441a      	add	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	2b0f      	cmp	r3, #15
 8007ae6:	d909      	bls.n	8007afc <UART_SetConfig+0x388>
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aee:	d205      	bcs.n	8007afc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	60da      	str	r2, [r3, #12]
 8007afa:	e001      	b.n	8007b00 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007b0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3720      	adds	r7, #32
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	007a1200 	.word	0x007a1200

08007b1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b28:	f003 0301 	and.w	r3, r3, #1
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00a      	beq.n	8007b46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00a      	beq.n	8007b8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8e:	f003 0308 	and.w	r3, r3, #8
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00a      	beq.n	8007bac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb0:	f003 0310 	and.w	r3, r3, #16
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00a      	beq.n	8007bce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd2:	f003 0320 	and.w	r3, r3, #32
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00a      	beq.n	8007bf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	430a      	orrs	r2, r1
 8007bee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d01a      	beq.n	8007c32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c1a:	d10a      	bne.n	8007c32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	430a      	orrs	r2, r1
 8007c52:	605a      	str	r2, [r3, #4]
  }
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b098      	sub	sp, #96	; 0x60
 8007c64:	af02      	add	r7, sp, #8
 8007c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c70:	f7fa fe44 	bl	80028fc <HAL_GetTick>
 8007c74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0308 	and.w	r3, r3, #8
 8007c80:	2b08      	cmp	r3, #8
 8007c82:	d12e      	bne.n	8007ce2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f88c 	bl	8007db0 <UART_WaitOnFlagUntilTimeout>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d021      	beq.n	8007ce2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca6:	e853 3f00 	ldrex	r3, [r3]
 8007caa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cb2:	653b      	str	r3, [r7, #80]	; 0x50
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cbc:	647b      	str	r3, [r7, #68]	; 0x44
 8007cbe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cc4:	e841 2300 	strex	r3, r2, [r1]
 8007cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1e6      	bne.n	8007c9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e062      	b.n	8007da8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0304 	and.w	r3, r3, #4
 8007cec:	2b04      	cmp	r3, #4
 8007cee:	d149      	bne.n	8007d84 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f856 	bl	8007db0 <UART_WaitOnFlagUntilTimeout>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d03c      	beq.n	8007d84 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	e853 3f00 	ldrex	r3, [r3]
 8007d16:	623b      	str	r3, [r7, #32]
   return(result);
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	461a      	mov	r2, r3
 8007d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d28:	633b      	str	r3, [r7, #48]	; 0x30
 8007d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d30:	e841 2300 	strex	r3, r2, [r1]
 8007d34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1e6      	bne.n	8007d0a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3308      	adds	r3, #8
 8007d42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	e853 3f00 	ldrex	r3, [r3]
 8007d4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f023 0301 	bic.w	r3, r3, #1
 8007d52:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3308      	adds	r3, #8
 8007d5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d5c:	61fa      	str	r2, [r7, #28]
 8007d5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	69b9      	ldr	r1, [r7, #24]
 8007d62:	69fa      	ldr	r2, [r7, #28]
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	617b      	str	r3, [r7, #20]
   return(result);
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e5      	bne.n	8007d3c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2220      	movs	r2, #32
 8007d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e011      	b.n	8007da8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2220      	movs	r2, #32
 8007d88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2220      	movs	r2, #32
 8007d8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3758      	adds	r7, #88	; 0x58
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	603b      	str	r3, [r7, #0]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dc0:	e049      	b.n	8007e56 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc8:	d045      	beq.n	8007e56 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dca:	f7fa fd97 	bl	80028fc <HAL_GetTick>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d302      	bcc.n	8007de0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e048      	b.n	8007e76 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0304 	and.w	r3, r3, #4
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d031      	beq.n	8007e56 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	69db      	ldr	r3, [r3, #28]
 8007df8:	f003 0308 	and.w	r3, r3, #8
 8007dfc:	2b08      	cmp	r3, #8
 8007dfe:	d110      	bne.n	8007e22 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2208      	movs	r2, #8
 8007e06:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f000 f8ff 	bl	800800c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2208      	movs	r2, #8
 8007e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e029      	b.n	8007e76 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	69db      	ldr	r3, [r3, #28]
 8007e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e30:	d111      	bne.n	8007e56 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 f8e5 	bl	800800c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2220      	movs	r2, #32
 8007e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e00f      	b.n	8007e76 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	69da      	ldr	r2, [r3, #28]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	4013      	ands	r3, r2
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	bf0c      	ite	eq
 8007e66:	2301      	moveq	r3, #1
 8007e68:	2300      	movne	r3, #0
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	79fb      	ldrb	r3, [r7, #7]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d0a6      	beq.n	8007dc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
	...

08007e80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b097      	sub	sp, #92	; 0x5c
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	88fa      	ldrh	r2, [r7, #6]
 8007e98:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	88fa      	ldrh	r2, [r7, #6]
 8007ea0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eb2:	d10e      	bne.n	8007ed2 <UART_Start_Receive_IT+0x52>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d105      	bne.n	8007ec8 <UART_Start_Receive_IT+0x48>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007ec2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ec6:	e02d      	b.n	8007f24 <UART_Start_Receive_IT+0xa4>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	22ff      	movs	r2, #255	; 0xff
 8007ecc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ed0:	e028      	b.n	8007f24 <UART_Start_Receive_IT+0xa4>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10d      	bne.n	8007ef6 <UART_Start_Receive_IT+0x76>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d104      	bne.n	8007eec <UART_Start_Receive_IT+0x6c>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	22ff      	movs	r2, #255	; 0xff
 8007ee6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007eea:	e01b      	b.n	8007f24 <UART_Start_Receive_IT+0xa4>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	227f      	movs	r2, #127	; 0x7f
 8007ef0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ef4:	e016      	b.n	8007f24 <UART_Start_Receive_IT+0xa4>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007efe:	d10d      	bne.n	8007f1c <UART_Start_Receive_IT+0x9c>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d104      	bne.n	8007f12 <UART_Start_Receive_IT+0x92>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	227f      	movs	r2, #127	; 0x7f
 8007f0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f10:	e008      	b.n	8007f24 <UART_Start_Receive_IT+0xa4>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	223f      	movs	r2, #63	; 0x3f
 8007f16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f1a:	e003      	b.n	8007f24 <UART_Start_Receive_IT+0xa4>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2222      	movs	r2, #34	; 0x22
 8007f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	3308      	adds	r3, #8
 8007f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f3e:	e853 3f00 	ldrex	r3, [r3]
 8007f42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f46:	f043 0301 	orr.w	r3, r3, #1
 8007f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	3308      	adds	r3, #8
 8007f52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f54:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f56:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f58:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f5c:	e841 2300 	strex	r3, r2, [r1]
 8007f60:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1e5      	bne.n	8007f34 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f70:	d107      	bne.n	8007f82 <UART_Start_Receive_IT+0x102>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d103      	bne.n	8007f82 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	4a21      	ldr	r2, [pc, #132]	; (8008004 <UART_Start_Receive_IT+0x184>)
 8007f7e:	669a      	str	r2, [r3, #104]	; 0x68
 8007f80:	e002      	b.n	8007f88 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	4a20      	ldr	r2, [pc, #128]	; (8008008 <UART_Start_Receive_IT+0x188>)
 8007f86:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d019      	beq.n	8007fc4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f98:	e853 3f00 	ldrex	r3, [r3]
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fae:	637b      	str	r3, [r7, #52]	; 0x34
 8007fb0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fb6:	e841 2300 	strex	r3, r2, [r1]
 8007fba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1e6      	bne.n	8007f90 <UART_Start_Receive_IT+0x110>
 8007fc2:	e018      	b.n	8007ff6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	e853 3f00 	ldrex	r3, [r3]
 8007fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f043 0320 	orr.w	r3, r3, #32
 8007fd8:	653b      	str	r3, [r7, #80]	; 0x50
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fe2:	623b      	str	r3, [r7, #32]
 8007fe4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe6:	69f9      	ldr	r1, [r7, #28]
 8007fe8:	6a3a      	ldr	r2, [r7, #32]
 8007fea:	e841 2300 	strex	r3, r2, [r1]
 8007fee:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1e6      	bne.n	8007fc4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	375c      	adds	r7, #92	; 0x5c
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	08008475 	.word	0x08008475
 8008008:	080082cd 	.word	0x080082cd

0800800c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800800c:	b480      	push	{r7}
 800800e:	b095      	sub	sp, #84	; 0x54
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800801c:	e853 3f00 	ldrex	r3, [r3]
 8008020:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008024:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008028:	64fb      	str	r3, [r7, #76]	; 0x4c
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008032:	643b      	str	r3, [r7, #64]	; 0x40
 8008034:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008036:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008038:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800803a:	e841 2300 	strex	r3, r2, [r1]
 800803e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1e6      	bne.n	8008014 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3308      	adds	r3, #8
 800804c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	61fb      	str	r3, [r7, #28]
   return(result);
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	f023 0301 	bic.w	r3, r3, #1
 800805c:	64bb      	str	r3, [r7, #72]	; 0x48
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3308      	adds	r3, #8
 8008064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008066:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008068:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800806c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800806e:	e841 2300 	strex	r3, r2, [r1]
 8008072:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1e5      	bne.n	8008046 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800807e:	2b01      	cmp	r3, #1
 8008080:	d118      	bne.n	80080b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	e853 3f00 	ldrex	r3, [r3]
 800808e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f023 0310 	bic.w	r3, r3, #16
 8008096:	647b      	str	r3, [r7, #68]	; 0x44
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	461a      	mov	r2, r3
 800809e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080a0:	61bb      	str	r3, [r7, #24]
 80080a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a4:	6979      	ldr	r1, [r7, #20]
 80080a6:	69ba      	ldr	r2, [r7, #24]
 80080a8:	e841 2300 	strex	r3, r2, [r1]
 80080ac:	613b      	str	r3, [r7, #16]
   return(result);
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1e6      	bne.n	8008082 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2220      	movs	r2, #32
 80080b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80080c8:	bf00      	nop
 80080ca:	3754      	adds	r7, #84	; 0x54
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f7ff fb28 	bl	8007748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080f8:	bf00      	nop
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008100:	b480      	push	{r7}
 8008102:	b08f      	sub	sp, #60	; 0x3c
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800810c:	2b21      	cmp	r3, #33	; 0x21
 800810e:	d14d      	bne.n	80081ac <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008116:	b29b      	uxth	r3, r3
 8008118:	2b00      	cmp	r3, #0
 800811a:	d132      	bne.n	8008182 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	e853 3f00 	ldrex	r3, [r3]
 8008128:	61fb      	str	r3, [r7, #28]
   return(result);
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008130:	637b      	str	r3, [r7, #52]	; 0x34
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800813a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800813c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008142:	e841 2300 	strex	r3, r2, [r1]
 8008146:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1e6      	bne.n	800811c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	e853 3f00 	ldrex	r3, [r3]
 800815a:	60bb      	str	r3, [r7, #8]
   return(result);
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008162:	633b      	str	r3, [r7, #48]	; 0x30
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	461a      	mov	r2, r3
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	61bb      	str	r3, [r7, #24]
 800816e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008170:	6979      	ldr	r1, [r7, #20]
 8008172:	69ba      	ldr	r2, [r7, #24]
 8008174:	e841 2300 	strex	r3, r2, [r1]
 8008178:	613b      	str	r3, [r7, #16]
   return(result);
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1e6      	bne.n	800814e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008180:	e014      	b.n	80081ac <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008186:	781a      	ldrb	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	b292      	uxth	r2, r2
 800818e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80081ac:	bf00      	nop
 80081ae:	373c      	adds	r7, #60	; 0x3c
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b091      	sub	sp, #68	; 0x44
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081c4:	2b21      	cmp	r3, #33	; 0x21
 80081c6:	d151      	bne.n	800826c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d132      	bne.n	800823a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	e853 3f00 	ldrex	r3, [r3]
 80081e0:	623b      	str	r3, [r7, #32]
   return(result);
 80081e2:	6a3b      	ldr	r3, [r7, #32]
 80081e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f2:	633b      	str	r3, [r7, #48]	; 0x30
 80081f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081fa:	e841 2300 	strex	r3, r2, [r1]
 80081fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1e6      	bne.n	80081d4 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	e853 3f00 	ldrex	r3, [r3]
 8008212:	60fb      	str	r3, [r7, #12]
   return(result);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800821a:	637b      	str	r3, [r7, #52]	; 0x34
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	461a      	mov	r2, r3
 8008222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008224:	61fb      	str	r3, [r7, #28]
 8008226:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008228:	69b9      	ldr	r1, [r7, #24]
 800822a:	69fa      	ldr	r2, [r7, #28]
 800822c:	e841 2300 	strex	r3, r2, [r1]
 8008230:	617b      	str	r3, [r7, #20]
   return(result);
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1e6      	bne.n	8008206 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008238:	e018      	b.n	800826c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008242:	881a      	ldrh	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800824c:	b292      	uxth	r2, r2
 800824e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008254:	1c9a      	adds	r2, r3, #2
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008260:	b29b      	uxth	r3, r3
 8008262:	3b01      	subs	r3, #1
 8008264:	b29a      	uxth	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800826c:	bf00      	nop
 800826e:	3744      	adds	r7, #68	; 0x44
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b088      	sub	sp, #32
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	e853 3f00 	ldrex	r3, [r3]
 800828c:	60bb      	str	r3, [r7, #8]
   return(result);
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008294:	61fb      	str	r3, [r7, #28]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	61bb      	str	r3, [r7, #24]
 80082a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a2:	6979      	ldr	r1, [r7, #20]
 80082a4:	69ba      	ldr	r2, [r7, #24]
 80082a6:	e841 2300 	strex	r3, r2, [r1]
 80082aa:	613b      	str	r3, [r7, #16]
   return(result);
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1e6      	bne.n	8008280 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2220      	movs	r2, #32
 80082b6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7ff fa38 	bl	8007734 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082c4:	bf00      	nop
 80082c6:	3720      	adds	r7, #32
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b09c      	sub	sp, #112	; 0x70
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082da:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082e4:	2b22      	cmp	r3, #34	; 0x22
 80082e6:	f040 80b9 	bne.w	800845c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80082f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80082f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80082f8:	b2d9      	uxtb	r1, r3
 80082fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008304:	400a      	ands	r2, r1
 8008306:	b2d2      	uxtb	r2, r2
 8008308:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800830e:	1c5a      	adds	r2, r3, #1
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800831a:	b29b      	uxth	r3, r3
 800831c:	3b01      	subs	r3, #1
 800831e:	b29a      	uxth	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800832c:	b29b      	uxth	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	f040 809c 	bne.w	800846c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800833c:	e853 3f00 	ldrex	r3, [r3]
 8008340:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008344:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008348:	66bb      	str	r3, [r7, #104]	; 0x68
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008352:	65bb      	str	r3, [r7, #88]	; 0x58
 8008354:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008356:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008358:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800835a:	e841 2300 	strex	r3, r2, [r1]
 800835e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1e6      	bne.n	8008334 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	3308      	adds	r3, #8
 800836c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008370:	e853 3f00 	ldrex	r3, [r3]
 8008374:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008378:	f023 0301 	bic.w	r3, r3, #1
 800837c:	667b      	str	r3, [r7, #100]	; 0x64
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3308      	adds	r3, #8
 8008384:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008386:	647a      	str	r2, [r7, #68]	; 0x44
 8008388:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800838c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800838e:	e841 2300 	strex	r3, r2, [r1]
 8008392:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1e5      	bne.n	8008366 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2220      	movs	r2, #32
 800839e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d018      	beq.n	80083ee <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c4:	e853 3f00 	ldrex	r3, [r3]
 80083c8:	623b      	str	r3, [r7, #32]
   return(result);
 80083ca:	6a3b      	ldr	r3, [r7, #32]
 80083cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80083d0:	663b      	str	r3, [r7, #96]	; 0x60
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083da:	633b      	str	r3, [r7, #48]	; 0x30
 80083dc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083e2:	e841 2300 	strex	r3, r2, [r1]
 80083e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1e6      	bne.n	80083bc <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d12e      	bne.n	8008454 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	60fb      	str	r3, [r7, #12]
   return(result);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f023 0310 	bic.w	r3, r3, #16
 8008410:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	461a      	mov	r2, r3
 8008418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800841a:	61fb      	str	r3, [r7, #28]
 800841c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	69b9      	ldr	r1, [r7, #24]
 8008420:	69fa      	ldr	r2, [r7, #28]
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	617b      	str	r3, [r7, #20]
   return(result);
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e6      	bne.n	80083fc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	f003 0310 	and.w	r3, r3, #16
 8008438:	2b10      	cmp	r3, #16
 800843a:	d103      	bne.n	8008444 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2210      	movs	r2, #16
 8008442:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7ff f985 	bl	800775c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008452:	e00b      	b.n	800846c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7f8 fa29 	bl	80008ac <HAL_UART_RxCpltCallback>
}
 800845a:	e007      	b.n	800846c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	699a      	ldr	r2, [r3, #24]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0208 	orr.w	r2, r2, #8
 800846a:	619a      	str	r2, [r3, #24]
}
 800846c:	bf00      	nop
 800846e:	3770      	adds	r7, #112	; 0x70
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b09c      	sub	sp, #112	; 0x70
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008482:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800848c:	2b22      	cmp	r3, #34	; 0x22
 800848e:	f040 80b9 	bne.w	8008604 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008498:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80084a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80084a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80084aa:	4013      	ands	r3, r2
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b6:	1c9a      	adds	r2, r3, #2
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	3b01      	subs	r3, #1
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f040 809c 	bne.w	8008614 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084e4:	e853 3f00 	ldrex	r3, [r3]
 80084e8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80084ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084f0:	667b      	str	r3, [r7, #100]	; 0x64
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	461a      	mov	r2, r3
 80084f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084fa:	657b      	str	r3, [r7, #84]	; 0x54
 80084fc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008500:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008502:	e841 2300 	strex	r3, r2, [r1]
 8008506:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e6      	bne.n	80084dc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3308      	adds	r3, #8
 8008514:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008518:	e853 3f00 	ldrex	r3, [r3]
 800851c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800851e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008520:	f023 0301 	bic.w	r3, r3, #1
 8008524:	663b      	str	r3, [r7, #96]	; 0x60
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3308      	adds	r3, #8
 800852c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800852e:	643a      	str	r2, [r7, #64]	; 0x40
 8008530:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008534:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008536:	e841 2300 	strex	r3, r2, [r1]
 800853a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800853c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e5      	bne.n	800850e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2220      	movs	r2, #32
 8008546:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008560:	2b00      	cmp	r3, #0
 8008562:	d018      	beq.n	8008596 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	e853 3f00 	ldrex	r3, [r3]
 8008570:	61fb      	str	r3, [r7, #28]
   return(result);
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008578:	65fb      	str	r3, [r7, #92]	; 0x5c
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	461a      	mov	r2, r3
 8008580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008584:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008586:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800858a:	e841 2300 	strex	r3, r2, [r1]
 800858e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1e6      	bne.n	8008564 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800859a:	2b01      	cmp	r3, #1
 800859c:	d12e      	bne.n	80085fc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	e853 3f00 	ldrex	r3, [r3]
 80085b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	f023 0310 	bic.w	r3, r3, #16
 80085b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	461a      	mov	r2, r3
 80085c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085c2:	61bb      	str	r3, [r7, #24]
 80085c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	6979      	ldr	r1, [r7, #20]
 80085c8:	69ba      	ldr	r2, [r7, #24]
 80085ca:	e841 2300 	strex	r3, r2, [r1]
 80085ce:	613b      	str	r3, [r7, #16]
   return(result);
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1e6      	bne.n	80085a4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	f003 0310 	and.w	r3, r3, #16
 80085e0:	2b10      	cmp	r3, #16
 80085e2:	d103      	bne.n	80085ec <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2210      	movs	r2, #16
 80085ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f7ff f8b1 	bl	800775c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085fa:	e00b      	b.n	8008614 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7f8 f955 	bl	80008ac <HAL_UART_RxCpltCallback>
}
 8008602:	e007      	b.n	8008614 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	699a      	ldr	r2, [r3, #24]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f042 0208 	orr.w	r2, r2, #8
 8008612:	619a      	str	r2, [r3, #24]
}
 8008614:	bf00      	nop
 8008616:	3770      	adds	r7, #112	; 0x70
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <atoi>:
 8008630:	220a      	movs	r2, #10
 8008632:	2100      	movs	r1, #0
 8008634:	f000 b8d4 	b.w	80087e0 <strtol>

08008638 <__errno>:
 8008638:	4b01      	ldr	r3, [pc, #4]	; (8008640 <__errno+0x8>)
 800863a:	6818      	ldr	r0, [r3, #0]
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	20000070 	.word	0x20000070

08008644 <__libc_init_array>:
 8008644:	b570      	push	{r4, r5, r6, lr}
 8008646:	4d0d      	ldr	r5, [pc, #52]	; (800867c <__libc_init_array+0x38>)
 8008648:	4c0d      	ldr	r4, [pc, #52]	; (8008680 <__libc_init_array+0x3c>)
 800864a:	1b64      	subs	r4, r4, r5
 800864c:	10a4      	asrs	r4, r4, #2
 800864e:	2600      	movs	r6, #0
 8008650:	42a6      	cmp	r6, r4
 8008652:	d109      	bne.n	8008668 <__libc_init_array+0x24>
 8008654:	4d0b      	ldr	r5, [pc, #44]	; (8008684 <__libc_init_array+0x40>)
 8008656:	4c0c      	ldr	r4, [pc, #48]	; (8008688 <__libc_init_array+0x44>)
 8008658:	f000 fd1a 	bl	8009090 <_init>
 800865c:	1b64      	subs	r4, r4, r5
 800865e:	10a4      	asrs	r4, r4, #2
 8008660:	2600      	movs	r6, #0
 8008662:	42a6      	cmp	r6, r4
 8008664:	d105      	bne.n	8008672 <__libc_init_array+0x2e>
 8008666:	bd70      	pop	{r4, r5, r6, pc}
 8008668:	f855 3b04 	ldr.w	r3, [r5], #4
 800866c:	4798      	blx	r3
 800866e:	3601      	adds	r6, #1
 8008670:	e7ee      	b.n	8008650 <__libc_init_array+0xc>
 8008672:	f855 3b04 	ldr.w	r3, [r5], #4
 8008676:	4798      	blx	r3
 8008678:	3601      	adds	r6, #1
 800867a:	e7f2      	b.n	8008662 <__libc_init_array+0x1e>
 800867c:	080093a4 	.word	0x080093a4
 8008680:	080093a4 	.word	0x080093a4
 8008684:	080093a4 	.word	0x080093a4
 8008688:	080093a8 	.word	0x080093a8

0800868c <memset>:
 800868c:	4402      	add	r2, r0
 800868e:	4603      	mov	r3, r0
 8008690:	4293      	cmp	r3, r2
 8008692:	d100      	bne.n	8008696 <memset+0xa>
 8008694:	4770      	bx	lr
 8008696:	f803 1b01 	strb.w	r1, [r3], #1
 800869a:	e7f9      	b.n	8008690 <memset+0x4>

0800869c <siprintf>:
 800869c:	b40e      	push	{r1, r2, r3}
 800869e:	b500      	push	{lr}
 80086a0:	b09c      	sub	sp, #112	; 0x70
 80086a2:	ab1d      	add	r3, sp, #116	; 0x74
 80086a4:	9002      	str	r0, [sp, #8]
 80086a6:	9006      	str	r0, [sp, #24]
 80086a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086ac:	4809      	ldr	r0, [pc, #36]	; (80086d4 <siprintf+0x38>)
 80086ae:	9107      	str	r1, [sp, #28]
 80086b0:	9104      	str	r1, [sp, #16]
 80086b2:	4909      	ldr	r1, [pc, #36]	; (80086d8 <siprintf+0x3c>)
 80086b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086b8:	9105      	str	r1, [sp, #20]
 80086ba:	6800      	ldr	r0, [r0, #0]
 80086bc:	9301      	str	r3, [sp, #4]
 80086be:	a902      	add	r1, sp, #8
 80086c0:	f000 f8f4 	bl	80088ac <_svfiprintf_r>
 80086c4:	9b02      	ldr	r3, [sp, #8]
 80086c6:	2200      	movs	r2, #0
 80086c8:	701a      	strb	r2, [r3, #0]
 80086ca:	b01c      	add	sp, #112	; 0x70
 80086cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80086d0:	b003      	add	sp, #12
 80086d2:	4770      	bx	lr
 80086d4:	20000070 	.word	0x20000070
 80086d8:	ffff0208 	.word	0xffff0208

080086dc <_strtol_l.constprop.0>:
 80086dc:	2b01      	cmp	r3, #1
 80086de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e2:	d001      	beq.n	80086e8 <_strtol_l.constprop.0+0xc>
 80086e4:	2b24      	cmp	r3, #36	; 0x24
 80086e6:	d906      	bls.n	80086f6 <_strtol_l.constprop.0+0x1a>
 80086e8:	f7ff ffa6 	bl	8008638 <__errno>
 80086ec:	2316      	movs	r3, #22
 80086ee:	6003      	str	r3, [r0, #0]
 80086f0:	2000      	movs	r0, #0
 80086f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80087dc <_strtol_l.constprop.0+0x100>
 80086fa:	460d      	mov	r5, r1
 80086fc:	462e      	mov	r6, r5
 80086fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008702:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008706:	f017 0708 	ands.w	r7, r7, #8
 800870a:	d1f7      	bne.n	80086fc <_strtol_l.constprop.0+0x20>
 800870c:	2c2d      	cmp	r4, #45	; 0x2d
 800870e:	d132      	bne.n	8008776 <_strtol_l.constprop.0+0x9a>
 8008710:	782c      	ldrb	r4, [r5, #0]
 8008712:	2701      	movs	r7, #1
 8008714:	1cb5      	adds	r5, r6, #2
 8008716:	2b00      	cmp	r3, #0
 8008718:	d05b      	beq.n	80087d2 <_strtol_l.constprop.0+0xf6>
 800871a:	2b10      	cmp	r3, #16
 800871c:	d109      	bne.n	8008732 <_strtol_l.constprop.0+0x56>
 800871e:	2c30      	cmp	r4, #48	; 0x30
 8008720:	d107      	bne.n	8008732 <_strtol_l.constprop.0+0x56>
 8008722:	782c      	ldrb	r4, [r5, #0]
 8008724:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008728:	2c58      	cmp	r4, #88	; 0x58
 800872a:	d14d      	bne.n	80087c8 <_strtol_l.constprop.0+0xec>
 800872c:	786c      	ldrb	r4, [r5, #1]
 800872e:	2310      	movs	r3, #16
 8008730:	3502      	adds	r5, #2
 8008732:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008736:	f108 38ff 	add.w	r8, r8, #4294967295
 800873a:	f04f 0c00 	mov.w	ip, #0
 800873e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008742:	4666      	mov	r6, ip
 8008744:	fb03 8a19 	mls	sl, r3, r9, r8
 8008748:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800874c:	f1be 0f09 	cmp.w	lr, #9
 8008750:	d816      	bhi.n	8008780 <_strtol_l.constprop.0+0xa4>
 8008752:	4674      	mov	r4, lr
 8008754:	42a3      	cmp	r3, r4
 8008756:	dd24      	ble.n	80087a2 <_strtol_l.constprop.0+0xc6>
 8008758:	f1bc 0f00 	cmp.w	ip, #0
 800875c:	db1e      	blt.n	800879c <_strtol_l.constprop.0+0xc0>
 800875e:	45b1      	cmp	r9, r6
 8008760:	d31c      	bcc.n	800879c <_strtol_l.constprop.0+0xc0>
 8008762:	d101      	bne.n	8008768 <_strtol_l.constprop.0+0x8c>
 8008764:	45a2      	cmp	sl, r4
 8008766:	db19      	blt.n	800879c <_strtol_l.constprop.0+0xc0>
 8008768:	fb06 4603 	mla	r6, r6, r3, r4
 800876c:	f04f 0c01 	mov.w	ip, #1
 8008770:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008774:	e7e8      	b.n	8008748 <_strtol_l.constprop.0+0x6c>
 8008776:	2c2b      	cmp	r4, #43	; 0x2b
 8008778:	bf04      	itt	eq
 800877a:	782c      	ldrbeq	r4, [r5, #0]
 800877c:	1cb5      	addeq	r5, r6, #2
 800877e:	e7ca      	b.n	8008716 <_strtol_l.constprop.0+0x3a>
 8008780:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008784:	f1be 0f19 	cmp.w	lr, #25
 8008788:	d801      	bhi.n	800878e <_strtol_l.constprop.0+0xb2>
 800878a:	3c37      	subs	r4, #55	; 0x37
 800878c:	e7e2      	b.n	8008754 <_strtol_l.constprop.0+0x78>
 800878e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008792:	f1be 0f19 	cmp.w	lr, #25
 8008796:	d804      	bhi.n	80087a2 <_strtol_l.constprop.0+0xc6>
 8008798:	3c57      	subs	r4, #87	; 0x57
 800879a:	e7db      	b.n	8008754 <_strtol_l.constprop.0+0x78>
 800879c:	f04f 3cff 	mov.w	ip, #4294967295
 80087a0:	e7e6      	b.n	8008770 <_strtol_l.constprop.0+0x94>
 80087a2:	f1bc 0f00 	cmp.w	ip, #0
 80087a6:	da05      	bge.n	80087b4 <_strtol_l.constprop.0+0xd8>
 80087a8:	2322      	movs	r3, #34	; 0x22
 80087aa:	6003      	str	r3, [r0, #0]
 80087ac:	4646      	mov	r6, r8
 80087ae:	b942      	cbnz	r2, 80087c2 <_strtol_l.constprop.0+0xe6>
 80087b0:	4630      	mov	r0, r6
 80087b2:	e79e      	b.n	80086f2 <_strtol_l.constprop.0+0x16>
 80087b4:	b107      	cbz	r7, 80087b8 <_strtol_l.constprop.0+0xdc>
 80087b6:	4276      	negs	r6, r6
 80087b8:	2a00      	cmp	r2, #0
 80087ba:	d0f9      	beq.n	80087b0 <_strtol_l.constprop.0+0xd4>
 80087bc:	f1bc 0f00 	cmp.w	ip, #0
 80087c0:	d000      	beq.n	80087c4 <_strtol_l.constprop.0+0xe8>
 80087c2:	1e69      	subs	r1, r5, #1
 80087c4:	6011      	str	r1, [r2, #0]
 80087c6:	e7f3      	b.n	80087b0 <_strtol_l.constprop.0+0xd4>
 80087c8:	2430      	movs	r4, #48	; 0x30
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1b1      	bne.n	8008732 <_strtol_l.constprop.0+0x56>
 80087ce:	2308      	movs	r3, #8
 80087d0:	e7af      	b.n	8008732 <_strtol_l.constprop.0+0x56>
 80087d2:	2c30      	cmp	r4, #48	; 0x30
 80087d4:	d0a5      	beq.n	8008722 <_strtol_l.constprop.0+0x46>
 80087d6:	230a      	movs	r3, #10
 80087d8:	e7ab      	b.n	8008732 <_strtol_l.constprop.0+0x56>
 80087da:	bf00      	nop
 80087dc:	08009271 	.word	0x08009271

080087e0 <strtol>:
 80087e0:	4613      	mov	r3, r2
 80087e2:	460a      	mov	r2, r1
 80087e4:	4601      	mov	r1, r0
 80087e6:	4802      	ldr	r0, [pc, #8]	; (80087f0 <strtol+0x10>)
 80087e8:	6800      	ldr	r0, [r0, #0]
 80087ea:	f7ff bf77 	b.w	80086dc <_strtol_l.constprop.0>
 80087ee:	bf00      	nop
 80087f0:	20000070 	.word	0x20000070

080087f4 <__ssputs_r>:
 80087f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f8:	688e      	ldr	r6, [r1, #8]
 80087fa:	429e      	cmp	r6, r3
 80087fc:	4682      	mov	sl, r0
 80087fe:	460c      	mov	r4, r1
 8008800:	4690      	mov	r8, r2
 8008802:	461f      	mov	r7, r3
 8008804:	d838      	bhi.n	8008878 <__ssputs_r+0x84>
 8008806:	898a      	ldrh	r2, [r1, #12]
 8008808:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800880c:	d032      	beq.n	8008874 <__ssputs_r+0x80>
 800880e:	6825      	ldr	r5, [r4, #0]
 8008810:	6909      	ldr	r1, [r1, #16]
 8008812:	eba5 0901 	sub.w	r9, r5, r1
 8008816:	6965      	ldr	r5, [r4, #20]
 8008818:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800881c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008820:	3301      	adds	r3, #1
 8008822:	444b      	add	r3, r9
 8008824:	106d      	asrs	r5, r5, #1
 8008826:	429d      	cmp	r5, r3
 8008828:	bf38      	it	cc
 800882a:	461d      	movcc	r5, r3
 800882c:	0553      	lsls	r3, r2, #21
 800882e:	d531      	bpl.n	8008894 <__ssputs_r+0xa0>
 8008830:	4629      	mov	r1, r5
 8008832:	f000 fb63 	bl	8008efc <_malloc_r>
 8008836:	4606      	mov	r6, r0
 8008838:	b950      	cbnz	r0, 8008850 <__ssputs_r+0x5c>
 800883a:	230c      	movs	r3, #12
 800883c:	f8ca 3000 	str.w	r3, [sl]
 8008840:	89a3      	ldrh	r3, [r4, #12]
 8008842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008846:	81a3      	strh	r3, [r4, #12]
 8008848:	f04f 30ff 	mov.w	r0, #4294967295
 800884c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008850:	6921      	ldr	r1, [r4, #16]
 8008852:	464a      	mov	r2, r9
 8008854:	f000 fabe 	bl	8008dd4 <memcpy>
 8008858:	89a3      	ldrh	r3, [r4, #12]
 800885a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800885e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008862:	81a3      	strh	r3, [r4, #12]
 8008864:	6126      	str	r6, [r4, #16]
 8008866:	6165      	str	r5, [r4, #20]
 8008868:	444e      	add	r6, r9
 800886a:	eba5 0509 	sub.w	r5, r5, r9
 800886e:	6026      	str	r6, [r4, #0]
 8008870:	60a5      	str	r5, [r4, #8]
 8008872:	463e      	mov	r6, r7
 8008874:	42be      	cmp	r6, r7
 8008876:	d900      	bls.n	800887a <__ssputs_r+0x86>
 8008878:	463e      	mov	r6, r7
 800887a:	6820      	ldr	r0, [r4, #0]
 800887c:	4632      	mov	r2, r6
 800887e:	4641      	mov	r1, r8
 8008880:	f000 fab6 	bl	8008df0 <memmove>
 8008884:	68a3      	ldr	r3, [r4, #8]
 8008886:	1b9b      	subs	r3, r3, r6
 8008888:	60a3      	str	r3, [r4, #8]
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	4433      	add	r3, r6
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	2000      	movs	r0, #0
 8008892:	e7db      	b.n	800884c <__ssputs_r+0x58>
 8008894:	462a      	mov	r2, r5
 8008896:	f000 fba5 	bl	8008fe4 <_realloc_r>
 800889a:	4606      	mov	r6, r0
 800889c:	2800      	cmp	r0, #0
 800889e:	d1e1      	bne.n	8008864 <__ssputs_r+0x70>
 80088a0:	6921      	ldr	r1, [r4, #16]
 80088a2:	4650      	mov	r0, sl
 80088a4:	f000 fabe 	bl	8008e24 <_free_r>
 80088a8:	e7c7      	b.n	800883a <__ssputs_r+0x46>
	...

080088ac <_svfiprintf_r>:
 80088ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b0:	4698      	mov	r8, r3
 80088b2:	898b      	ldrh	r3, [r1, #12]
 80088b4:	061b      	lsls	r3, r3, #24
 80088b6:	b09d      	sub	sp, #116	; 0x74
 80088b8:	4607      	mov	r7, r0
 80088ba:	460d      	mov	r5, r1
 80088bc:	4614      	mov	r4, r2
 80088be:	d50e      	bpl.n	80088de <_svfiprintf_r+0x32>
 80088c0:	690b      	ldr	r3, [r1, #16]
 80088c2:	b963      	cbnz	r3, 80088de <_svfiprintf_r+0x32>
 80088c4:	2140      	movs	r1, #64	; 0x40
 80088c6:	f000 fb19 	bl	8008efc <_malloc_r>
 80088ca:	6028      	str	r0, [r5, #0]
 80088cc:	6128      	str	r0, [r5, #16]
 80088ce:	b920      	cbnz	r0, 80088da <_svfiprintf_r+0x2e>
 80088d0:	230c      	movs	r3, #12
 80088d2:	603b      	str	r3, [r7, #0]
 80088d4:	f04f 30ff 	mov.w	r0, #4294967295
 80088d8:	e0d1      	b.n	8008a7e <_svfiprintf_r+0x1d2>
 80088da:	2340      	movs	r3, #64	; 0x40
 80088dc:	616b      	str	r3, [r5, #20]
 80088de:	2300      	movs	r3, #0
 80088e0:	9309      	str	r3, [sp, #36]	; 0x24
 80088e2:	2320      	movs	r3, #32
 80088e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80088ec:	2330      	movs	r3, #48	; 0x30
 80088ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008a98 <_svfiprintf_r+0x1ec>
 80088f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088f6:	f04f 0901 	mov.w	r9, #1
 80088fa:	4623      	mov	r3, r4
 80088fc:	469a      	mov	sl, r3
 80088fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008902:	b10a      	cbz	r2, 8008908 <_svfiprintf_r+0x5c>
 8008904:	2a25      	cmp	r2, #37	; 0x25
 8008906:	d1f9      	bne.n	80088fc <_svfiprintf_r+0x50>
 8008908:	ebba 0b04 	subs.w	fp, sl, r4
 800890c:	d00b      	beq.n	8008926 <_svfiprintf_r+0x7a>
 800890e:	465b      	mov	r3, fp
 8008910:	4622      	mov	r2, r4
 8008912:	4629      	mov	r1, r5
 8008914:	4638      	mov	r0, r7
 8008916:	f7ff ff6d 	bl	80087f4 <__ssputs_r>
 800891a:	3001      	adds	r0, #1
 800891c:	f000 80aa 	beq.w	8008a74 <_svfiprintf_r+0x1c8>
 8008920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008922:	445a      	add	r2, fp
 8008924:	9209      	str	r2, [sp, #36]	; 0x24
 8008926:	f89a 3000 	ldrb.w	r3, [sl]
 800892a:	2b00      	cmp	r3, #0
 800892c:	f000 80a2 	beq.w	8008a74 <_svfiprintf_r+0x1c8>
 8008930:	2300      	movs	r3, #0
 8008932:	f04f 32ff 	mov.w	r2, #4294967295
 8008936:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800893a:	f10a 0a01 	add.w	sl, sl, #1
 800893e:	9304      	str	r3, [sp, #16]
 8008940:	9307      	str	r3, [sp, #28]
 8008942:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008946:	931a      	str	r3, [sp, #104]	; 0x68
 8008948:	4654      	mov	r4, sl
 800894a:	2205      	movs	r2, #5
 800894c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008950:	4851      	ldr	r0, [pc, #324]	; (8008a98 <_svfiprintf_r+0x1ec>)
 8008952:	f7f7 fc55 	bl	8000200 <memchr>
 8008956:	9a04      	ldr	r2, [sp, #16]
 8008958:	b9d8      	cbnz	r0, 8008992 <_svfiprintf_r+0xe6>
 800895a:	06d0      	lsls	r0, r2, #27
 800895c:	bf44      	itt	mi
 800895e:	2320      	movmi	r3, #32
 8008960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008964:	0711      	lsls	r1, r2, #28
 8008966:	bf44      	itt	mi
 8008968:	232b      	movmi	r3, #43	; 0x2b
 800896a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800896e:	f89a 3000 	ldrb.w	r3, [sl]
 8008972:	2b2a      	cmp	r3, #42	; 0x2a
 8008974:	d015      	beq.n	80089a2 <_svfiprintf_r+0xf6>
 8008976:	9a07      	ldr	r2, [sp, #28]
 8008978:	4654      	mov	r4, sl
 800897a:	2000      	movs	r0, #0
 800897c:	f04f 0c0a 	mov.w	ip, #10
 8008980:	4621      	mov	r1, r4
 8008982:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008986:	3b30      	subs	r3, #48	; 0x30
 8008988:	2b09      	cmp	r3, #9
 800898a:	d94e      	bls.n	8008a2a <_svfiprintf_r+0x17e>
 800898c:	b1b0      	cbz	r0, 80089bc <_svfiprintf_r+0x110>
 800898e:	9207      	str	r2, [sp, #28]
 8008990:	e014      	b.n	80089bc <_svfiprintf_r+0x110>
 8008992:	eba0 0308 	sub.w	r3, r0, r8
 8008996:	fa09 f303 	lsl.w	r3, r9, r3
 800899a:	4313      	orrs	r3, r2
 800899c:	9304      	str	r3, [sp, #16]
 800899e:	46a2      	mov	sl, r4
 80089a0:	e7d2      	b.n	8008948 <_svfiprintf_r+0x9c>
 80089a2:	9b03      	ldr	r3, [sp, #12]
 80089a4:	1d19      	adds	r1, r3, #4
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	9103      	str	r1, [sp, #12]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	bfbb      	ittet	lt
 80089ae:	425b      	neglt	r3, r3
 80089b0:	f042 0202 	orrlt.w	r2, r2, #2
 80089b4:	9307      	strge	r3, [sp, #28]
 80089b6:	9307      	strlt	r3, [sp, #28]
 80089b8:	bfb8      	it	lt
 80089ba:	9204      	strlt	r2, [sp, #16]
 80089bc:	7823      	ldrb	r3, [r4, #0]
 80089be:	2b2e      	cmp	r3, #46	; 0x2e
 80089c0:	d10c      	bne.n	80089dc <_svfiprintf_r+0x130>
 80089c2:	7863      	ldrb	r3, [r4, #1]
 80089c4:	2b2a      	cmp	r3, #42	; 0x2a
 80089c6:	d135      	bne.n	8008a34 <_svfiprintf_r+0x188>
 80089c8:	9b03      	ldr	r3, [sp, #12]
 80089ca:	1d1a      	adds	r2, r3, #4
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	9203      	str	r2, [sp, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bfb8      	it	lt
 80089d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80089d8:	3402      	adds	r4, #2
 80089da:	9305      	str	r3, [sp, #20]
 80089dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008aa8 <_svfiprintf_r+0x1fc>
 80089e0:	7821      	ldrb	r1, [r4, #0]
 80089e2:	2203      	movs	r2, #3
 80089e4:	4650      	mov	r0, sl
 80089e6:	f7f7 fc0b 	bl	8000200 <memchr>
 80089ea:	b140      	cbz	r0, 80089fe <_svfiprintf_r+0x152>
 80089ec:	2340      	movs	r3, #64	; 0x40
 80089ee:	eba0 000a 	sub.w	r0, r0, sl
 80089f2:	fa03 f000 	lsl.w	r0, r3, r0
 80089f6:	9b04      	ldr	r3, [sp, #16]
 80089f8:	4303      	orrs	r3, r0
 80089fa:	3401      	adds	r4, #1
 80089fc:	9304      	str	r3, [sp, #16]
 80089fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a02:	4826      	ldr	r0, [pc, #152]	; (8008a9c <_svfiprintf_r+0x1f0>)
 8008a04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a08:	2206      	movs	r2, #6
 8008a0a:	f7f7 fbf9 	bl	8000200 <memchr>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d038      	beq.n	8008a84 <_svfiprintf_r+0x1d8>
 8008a12:	4b23      	ldr	r3, [pc, #140]	; (8008aa0 <_svfiprintf_r+0x1f4>)
 8008a14:	bb1b      	cbnz	r3, 8008a5e <_svfiprintf_r+0x1b2>
 8008a16:	9b03      	ldr	r3, [sp, #12]
 8008a18:	3307      	adds	r3, #7
 8008a1a:	f023 0307 	bic.w	r3, r3, #7
 8008a1e:	3308      	adds	r3, #8
 8008a20:	9303      	str	r3, [sp, #12]
 8008a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a24:	4433      	add	r3, r6
 8008a26:	9309      	str	r3, [sp, #36]	; 0x24
 8008a28:	e767      	b.n	80088fa <_svfiprintf_r+0x4e>
 8008a2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a2e:	460c      	mov	r4, r1
 8008a30:	2001      	movs	r0, #1
 8008a32:	e7a5      	b.n	8008980 <_svfiprintf_r+0xd4>
 8008a34:	2300      	movs	r3, #0
 8008a36:	3401      	adds	r4, #1
 8008a38:	9305      	str	r3, [sp, #20]
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	f04f 0c0a 	mov.w	ip, #10
 8008a40:	4620      	mov	r0, r4
 8008a42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a46:	3a30      	subs	r2, #48	; 0x30
 8008a48:	2a09      	cmp	r2, #9
 8008a4a:	d903      	bls.n	8008a54 <_svfiprintf_r+0x1a8>
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d0c5      	beq.n	80089dc <_svfiprintf_r+0x130>
 8008a50:	9105      	str	r1, [sp, #20]
 8008a52:	e7c3      	b.n	80089dc <_svfiprintf_r+0x130>
 8008a54:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a58:	4604      	mov	r4, r0
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e7f0      	b.n	8008a40 <_svfiprintf_r+0x194>
 8008a5e:	ab03      	add	r3, sp, #12
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	462a      	mov	r2, r5
 8008a64:	4b0f      	ldr	r3, [pc, #60]	; (8008aa4 <_svfiprintf_r+0x1f8>)
 8008a66:	a904      	add	r1, sp, #16
 8008a68:	4638      	mov	r0, r7
 8008a6a:	f3af 8000 	nop.w
 8008a6e:	1c42      	adds	r2, r0, #1
 8008a70:	4606      	mov	r6, r0
 8008a72:	d1d6      	bne.n	8008a22 <_svfiprintf_r+0x176>
 8008a74:	89ab      	ldrh	r3, [r5, #12]
 8008a76:	065b      	lsls	r3, r3, #25
 8008a78:	f53f af2c 	bmi.w	80088d4 <_svfiprintf_r+0x28>
 8008a7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a7e:	b01d      	add	sp, #116	; 0x74
 8008a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a84:	ab03      	add	r3, sp, #12
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	462a      	mov	r2, r5
 8008a8a:	4b06      	ldr	r3, [pc, #24]	; (8008aa4 <_svfiprintf_r+0x1f8>)
 8008a8c:	a904      	add	r1, sp, #16
 8008a8e:	4638      	mov	r0, r7
 8008a90:	f000 f87a 	bl	8008b88 <_printf_i>
 8008a94:	e7eb      	b.n	8008a6e <_svfiprintf_r+0x1c2>
 8008a96:	bf00      	nop
 8008a98:	08009371 	.word	0x08009371
 8008a9c:	0800937b 	.word	0x0800937b
 8008aa0:	00000000 	.word	0x00000000
 8008aa4:	080087f5 	.word	0x080087f5
 8008aa8:	08009377 	.word	0x08009377

08008aac <_printf_common>:
 8008aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab0:	4616      	mov	r6, r2
 8008ab2:	4699      	mov	r9, r3
 8008ab4:	688a      	ldr	r2, [r1, #8]
 8008ab6:	690b      	ldr	r3, [r1, #16]
 8008ab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008abc:	4293      	cmp	r3, r2
 8008abe:	bfb8      	it	lt
 8008ac0:	4613      	movlt	r3, r2
 8008ac2:	6033      	str	r3, [r6, #0]
 8008ac4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ac8:	4607      	mov	r7, r0
 8008aca:	460c      	mov	r4, r1
 8008acc:	b10a      	cbz	r2, 8008ad2 <_printf_common+0x26>
 8008ace:	3301      	adds	r3, #1
 8008ad0:	6033      	str	r3, [r6, #0]
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	0699      	lsls	r1, r3, #26
 8008ad6:	bf42      	ittt	mi
 8008ad8:	6833      	ldrmi	r3, [r6, #0]
 8008ada:	3302      	addmi	r3, #2
 8008adc:	6033      	strmi	r3, [r6, #0]
 8008ade:	6825      	ldr	r5, [r4, #0]
 8008ae0:	f015 0506 	ands.w	r5, r5, #6
 8008ae4:	d106      	bne.n	8008af4 <_printf_common+0x48>
 8008ae6:	f104 0a19 	add.w	sl, r4, #25
 8008aea:	68e3      	ldr	r3, [r4, #12]
 8008aec:	6832      	ldr	r2, [r6, #0]
 8008aee:	1a9b      	subs	r3, r3, r2
 8008af0:	42ab      	cmp	r3, r5
 8008af2:	dc26      	bgt.n	8008b42 <_printf_common+0x96>
 8008af4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008af8:	1e13      	subs	r3, r2, #0
 8008afa:	6822      	ldr	r2, [r4, #0]
 8008afc:	bf18      	it	ne
 8008afe:	2301      	movne	r3, #1
 8008b00:	0692      	lsls	r2, r2, #26
 8008b02:	d42b      	bmi.n	8008b5c <_printf_common+0xb0>
 8008b04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b08:	4649      	mov	r1, r9
 8008b0a:	4638      	mov	r0, r7
 8008b0c:	47c0      	blx	r8
 8008b0e:	3001      	adds	r0, #1
 8008b10:	d01e      	beq.n	8008b50 <_printf_common+0xa4>
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	68e5      	ldr	r5, [r4, #12]
 8008b16:	6832      	ldr	r2, [r6, #0]
 8008b18:	f003 0306 	and.w	r3, r3, #6
 8008b1c:	2b04      	cmp	r3, #4
 8008b1e:	bf08      	it	eq
 8008b20:	1aad      	subeq	r5, r5, r2
 8008b22:	68a3      	ldr	r3, [r4, #8]
 8008b24:	6922      	ldr	r2, [r4, #16]
 8008b26:	bf0c      	ite	eq
 8008b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b2c:	2500      	movne	r5, #0
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	bfc4      	itt	gt
 8008b32:	1a9b      	subgt	r3, r3, r2
 8008b34:	18ed      	addgt	r5, r5, r3
 8008b36:	2600      	movs	r6, #0
 8008b38:	341a      	adds	r4, #26
 8008b3a:	42b5      	cmp	r5, r6
 8008b3c:	d11a      	bne.n	8008b74 <_printf_common+0xc8>
 8008b3e:	2000      	movs	r0, #0
 8008b40:	e008      	b.n	8008b54 <_printf_common+0xa8>
 8008b42:	2301      	movs	r3, #1
 8008b44:	4652      	mov	r2, sl
 8008b46:	4649      	mov	r1, r9
 8008b48:	4638      	mov	r0, r7
 8008b4a:	47c0      	blx	r8
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	d103      	bne.n	8008b58 <_printf_common+0xac>
 8008b50:	f04f 30ff 	mov.w	r0, #4294967295
 8008b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b58:	3501      	adds	r5, #1
 8008b5a:	e7c6      	b.n	8008aea <_printf_common+0x3e>
 8008b5c:	18e1      	adds	r1, r4, r3
 8008b5e:	1c5a      	adds	r2, r3, #1
 8008b60:	2030      	movs	r0, #48	; 0x30
 8008b62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b66:	4422      	add	r2, r4
 8008b68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b70:	3302      	adds	r3, #2
 8008b72:	e7c7      	b.n	8008b04 <_printf_common+0x58>
 8008b74:	2301      	movs	r3, #1
 8008b76:	4622      	mov	r2, r4
 8008b78:	4649      	mov	r1, r9
 8008b7a:	4638      	mov	r0, r7
 8008b7c:	47c0      	blx	r8
 8008b7e:	3001      	adds	r0, #1
 8008b80:	d0e6      	beq.n	8008b50 <_printf_common+0xa4>
 8008b82:	3601      	adds	r6, #1
 8008b84:	e7d9      	b.n	8008b3a <_printf_common+0x8e>
	...

08008b88 <_printf_i>:
 8008b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b8c:	7e0f      	ldrb	r7, [r1, #24]
 8008b8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b90:	2f78      	cmp	r7, #120	; 0x78
 8008b92:	4691      	mov	r9, r2
 8008b94:	4680      	mov	r8, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	469a      	mov	sl, r3
 8008b9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b9e:	d807      	bhi.n	8008bb0 <_printf_i+0x28>
 8008ba0:	2f62      	cmp	r7, #98	; 0x62
 8008ba2:	d80a      	bhi.n	8008bba <_printf_i+0x32>
 8008ba4:	2f00      	cmp	r7, #0
 8008ba6:	f000 80d8 	beq.w	8008d5a <_printf_i+0x1d2>
 8008baa:	2f58      	cmp	r7, #88	; 0x58
 8008bac:	f000 80a3 	beq.w	8008cf6 <_printf_i+0x16e>
 8008bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bb8:	e03a      	b.n	8008c30 <_printf_i+0xa8>
 8008bba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bbe:	2b15      	cmp	r3, #21
 8008bc0:	d8f6      	bhi.n	8008bb0 <_printf_i+0x28>
 8008bc2:	a101      	add	r1, pc, #4	; (adr r1, 8008bc8 <_printf_i+0x40>)
 8008bc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bc8:	08008c21 	.word	0x08008c21
 8008bcc:	08008c35 	.word	0x08008c35
 8008bd0:	08008bb1 	.word	0x08008bb1
 8008bd4:	08008bb1 	.word	0x08008bb1
 8008bd8:	08008bb1 	.word	0x08008bb1
 8008bdc:	08008bb1 	.word	0x08008bb1
 8008be0:	08008c35 	.word	0x08008c35
 8008be4:	08008bb1 	.word	0x08008bb1
 8008be8:	08008bb1 	.word	0x08008bb1
 8008bec:	08008bb1 	.word	0x08008bb1
 8008bf0:	08008bb1 	.word	0x08008bb1
 8008bf4:	08008d41 	.word	0x08008d41
 8008bf8:	08008c65 	.word	0x08008c65
 8008bfc:	08008d23 	.word	0x08008d23
 8008c00:	08008bb1 	.word	0x08008bb1
 8008c04:	08008bb1 	.word	0x08008bb1
 8008c08:	08008d63 	.word	0x08008d63
 8008c0c:	08008bb1 	.word	0x08008bb1
 8008c10:	08008c65 	.word	0x08008c65
 8008c14:	08008bb1 	.word	0x08008bb1
 8008c18:	08008bb1 	.word	0x08008bb1
 8008c1c:	08008d2b 	.word	0x08008d2b
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	1d1a      	adds	r2, r3, #4
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	602a      	str	r2, [r5, #0]
 8008c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c30:	2301      	movs	r3, #1
 8008c32:	e0a3      	b.n	8008d7c <_printf_i+0x1f4>
 8008c34:	6820      	ldr	r0, [r4, #0]
 8008c36:	6829      	ldr	r1, [r5, #0]
 8008c38:	0606      	lsls	r6, r0, #24
 8008c3a:	f101 0304 	add.w	r3, r1, #4
 8008c3e:	d50a      	bpl.n	8008c56 <_printf_i+0xce>
 8008c40:	680e      	ldr	r6, [r1, #0]
 8008c42:	602b      	str	r3, [r5, #0]
 8008c44:	2e00      	cmp	r6, #0
 8008c46:	da03      	bge.n	8008c50 <_printf_i+0xc8>
 8008c48:	232d      	movs	r3, #45	; 0x2d
 8008c4a:	4276      	negs	r6, r6
 8008c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c50:	485e      	ldr	r0, [pc, #376]	; (8008dcc <_printf_i+0x244>)
 8008c52:	230a      	movs	r3, #10
 8008c54:	e019      	b.n	8008c8a <_printf_i+0x102>
 8008c56:	680e      	ldr	r6, [r1, #0]
 8008c58:	602b      	str	r3, [r5, #0]
 8008c5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c5e:	bf18      	it	ne
 8008c60:	b236      	sxthne	r6, r6
 8008c62:	e7ef      	b.n	8008c44 <_printf_i+0xbc>
 8008c64:	682b      	ldr	r3, [r5, #0]
 8008c66:	6820      	ldr	r0, [r4, #0]
 8008c68:	1d19      	adds	r1, r3, #4
 8008c6a:	6029      	str	r1, [r5, #0]
 8008c6c:	0601      	lsls	r1, r0, #24
 8008c6e:	d501      	bpl.n	8008c74 <_printf_i+0xec>
 8008c70:	681e      	ldr	r6, [r3, #0]
 8008c72:	e002      	b.n	8008c7a <_printf_i+0xf2>
 8008c74:	0646      	lsls	r6, r0, #25
 8008c76:	d5fb      	bpl.n	8008c70 <_printf_i+0xe8>
 8008c78:	881e      	ldrh	r6, [r3, #0]
 8008c7a:	4854      	ldr	r0, [pc, #336]	; (8008dcc <_printf_i+0x244>)
 8008c7c:	2f6f      	cmp	r7, #111	; 0x6f
 8008c7e:	bf0c      	ite	eq
 8008c80:	2308      	moveq	r3, #8
 8008c82:	230a      	movne	r3, #10
 8008c84:	2100      	movs	r1, #0
 8008c86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c8a:	6865      	ldr	r5, [r4, #4]
 8008c8c:	60a5      	str	r5, [r4, #8]
 8008c8e:	2d00      	cmp	r5, #0
 8008c90:	bfa2      	ittt	ge
 8008c92:	6821      	ldrge	r1, [r4, #0]
 8008c94:	f021 0104 	bicge.w	r1, r1, #4
 8008c98:	6021      	strge	r1, [r4, #0]
 8008c9a:	b90e      	cbnz	r6, 8008ca0 <_printf_i+0x118>
 8008c9c:	2d00      	cmp	r5, #0
 8008c9e:	d04d      	beq.n	8008d3c <_printf_i+0x1b4>
 8008ca0:	4615      	mov	r5, r2
 8008ca2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ca6:	fb03 6711 	mls	r7, r3, r1, r6
 8008caa:	5dc7      	ldrb	r7, [r0, r7]
 8008cac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cb0:	4637      	mov	r7, r6
 8008cb2:	42bb      	cmp	r3, r7
 8008cb4:	460e      	mov	r6, r1
 8008cb6:	d9f4      	bls.n	8008ca2 <_printf_i+0x11a>
 8008cb8:	2b08      	cmp	r3, #8
 8008cba:	d10b      	bne.n	8008cd4 <_printf_i+0x14c>
 8008cbc:	6823      	ldr	r3, [r4, #0]
 8008cbe:	07de      	lsls	r6, r3, #31
 8008cc0:	d508      	bpl.n	8008cd4 <_printf_i+0x14c>
 8008cc2:	6923      	ldr	r3, [r4, #16]
 8008cc4:	6861      	ldr	r1, [r4, #4]
 8008cc6:	4299      	cmp	r1, r3
 8008cc8:	bfde      	ittt	le
 8008cca:	2330      	movle	r3, #48	; 0x30
 8008ccc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cd4:	1b52      	subs	r2, r2, r5
 8008cd6:	6122      	str	r2, [r4, #16]
 8008cd8:	f8cd a000 	str.w	sl, [sp]
 8008cdc:	464b      	mov	r3, r9
 8008cde:	aa03      	add	r2, sp, #12
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	4640      	mov	r0, r8
 8008ce4:	f7ff fee2 	bl	8008aac <_printf_common>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d14c      	bne.n	8008d86 <_printf_i+0x1fe>
 8008cec:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf0:	b004      	add	sp, #16
 8008cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf6:	4835      	ldr	r0, [pc, #212]	; (8008dcc <_printf_i+0x244>)
 8008cf8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008cfc:	6829      	ldr	r1, [r5, #0]
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d04:	6029      	str	r1, [r5, #0]
 8008d06:	061d      	lsls	r5, r3, #24
 8008d08:	d514      	bpl.n	8008d34 <_printf_i+0x1ac>
 8008d0a:	07df      	lsls	r7, r3, #31
 8008d0c:	bf44      	itt	mi
 8008d0e:	f043 0320 	orrmi.w	r3, r3, #32
 8008d12:	6023      	strmi	r3, [r4, #0]
 8008d14:	b91e      	cbnz	r6, 8008d1e <_printf_i+0x196>
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	f023 0320 	bic.w	r3, r3, #32
 8008d1c:	6023      	str	r3, [r4, #0]
 8008d1e:	2310      	movs	r3, #16
 8008d20:	e7b0      	b.n	8008c84 <_printf_i+0xfc>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	f043 0320 	orr.w	r3, r3, #32
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	2378      	movs	r3, #120	; 0x78
 8008d2c:	4828      	ldr	r0, [pc, #160]	; (8008dd0 <_printf_i+0x248>)
 8008d2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d32:	e7e3      	b.n	8008cfc <_printf_i+0x174>
 8008d34:	0659      	lsls	r1, r3, #25
 8008d36:	bf48      	it	mi
 8008d38:	b2b6      	uxthmi	r6, r6
 8008d3a:	e7e6      	b.n	8008d0a <_printf_i+0x182>
 8008d3c:	4615      	mov	r5, r2
 8008d3e:	e7bb      	b.n	8008cb8 <_printf_i+0x130>
 8008d40:	682b      	ldr	r3, [r5, #0]
 8008d42:	6826      	ldr	r6, [r4, #0]
 8008d44:	6961      	ldr	r1, [r4, #20]
 8008d46:	1d18      	adds	r0, r3, #4
 8008d48:	6028      	str	r0, [r5, #0]
 8008d4a:	0635      	lsls	r5, r6, #24
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	d501      	bpl.n	8008d54 <_printf_i+0x1cc>
 8008d50:	6019      	str	r1, [r3, #0]
 8008d52:	e002      	b.n	8008d5a <_printf_i+0x1d2>
 8008d54:	0670      	lsls	r0, r6, #25
 8008d56:	d5fb      	bpl.n	8008d50 <_printf_i+0x1c8>
 8008d58:	8019      	strh	r1, [r3, #0]
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	6123      	str	r3, [r4, #16]
 8008d5e:	4615      	mov	r5, r2
 8008d60:	e7ba      	b.n	8008cd8 <_printf_i+0x150>
 8008d62:	682b      	ldr	r3, [r5, #0]
 8008d64:	1d1a      	adds	r2, r3, #4
 8008d66:	602a      	str	r2, [r5, #0]
 8008d68:	681d      	ldr	r5, [r3, #0]
 8008d6a:	6862      	ldr	r2, [r4, #4]
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f7f7 fa46 	bl	8000200 <memchr>
 8008d74:	b108      	cbz	r0, 8008d7a <_printf_i+0x1f2>
 8008d76:	1b40      	subs	r0, r0, r5
 8008d78:	6060      	str	r0, [r4, #4]
 8008d7a:	6863      	ldr	r3, [r4, #4]
 8008d7c:	6123      	str	r3, [r4, #16]
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d84:	e7a8      	b.n	8008cd8 <_printf_i+0x150>
 8008d86:	6923      	ldr	r3, [r4, #16]
 8008d88:	462a      	mov	r2, r5
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	4640      	mov	r0, r8
 8008d8e:	47d0      	blx	sl
 8008d90:	3001      	adds	r0, #1
 8008d92:	d0ab      	beq.n	8008cec <_printf_i+0x164>
 8008d94:	6823      	ldr	r3, [r4, #0]
 8008d96:	079b      	lsls	r3, r3, #30
 8008d98:	d413      	bmi.n	8008dc2 <_printf_i+0x23a>
 8008d9a:	68e0      	ldr	r0, [r4, #12]
 8008d9c:	9b03      	ldr	r3, [sp, #12]
 8008d9e:	4298      	cmp	r0, r3
 8008da0:	bfb8      	it	lt
 8008da2:	4618      	movlt	r0, r3
 8008da4:	e7a4      	b.n	8008cf0 <_printf_i+0x168>
 8008da6:	2301      	movs	r3, #1
 8008da8:	4632      	mov	r2, r6
 8008daa:	4649      	mov	r1, r9
 8008dac:	4640      	mov	r0, r8
 8008dae:	47d0      	blx	sl
 8008db0:	3001      	adds	r0, #1
 8008db2:	d09b      	beq.n	8008cec <_printf_i+0x164>
 8008db4:	3501      	adds	r5, #1
 8008db6:	68e3      	ldr	r3, [r4, #12]
 8008db8:	9903      	ldr	r1, [sp, #12]
 8008dba:	1a5b      	subs	r3, r3, r1
 8008dbc:	42ab      	cmp	r3, r5
 8008dbe:	dcf2      	bgt.n	8008da6 <_printf_i+0x21e>
 8008dc0:	e7eb      	b.n	8008d9a <_printf_i+0x212>
 8008dc2:	2500      	movs	r5, #0
 8008dc4:	f104 0619 	add.w	r6, r4, #25
 8008dc8:	e7f5      	b.n	8008db6 <_printf_i+0x22e>
 8008dca:	bf00      	nop
 8008dcc:	08009382 	.word	0x08009382
 8008dd0:	08009393 	.word	0x08009393

08008dd4 <memcpy>:
 8008dd4:	440a      	add	r2, r1
 8008dd6:	4291      	cmp	r1, r2
 8008dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ddc:	d100      	bne.n	8008de0 <memcpy+0xc>
 8008dde:	4770      	bx	lr
 8008de0:	b510      	push	{r4, lr}
 8008de2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008de6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dea:	4291      	cmp	r1, r2
 8008dec:	d1f9      	bne.n	8008de2 <memcpy+0xe>
 8008dee:	bd10      	pop	{r4, pc}

08008df0 <memmove>:
 8008df0:	4288      	cmp	r0, r1
 8008df2:	b510      	push	{r4, lr}
 8008df4:	eb01 0402 	add.w	r4, r1, r2
 8008df8:	d902      	bls.n	8008e00 <memmove+0x10>
 8008dfa:	4284      	cmp	r4, r0
 8008dfc:	4623      	mov	r3, r4
 8008dfe:	d807      	bhi.n	8008e10 <memmove+0x20>
 8008e00:	1e43      	subs	r3, r0, #1
 8008e02:	42a1      	cmp	r1, r4
 8008e04:	d008      	beq.n	8008e18 <memmove+0x28>
 8008e06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e0e:	e7f8      	b.n	8008e02 <memmove+0x12>
 8008e10:	4402      	add	r2, r0
 8008e12:	4601      	mov	r1, r0
 8008e14:	428a      	cmp	r2, r1
 8008e16:	d100      	bne.n	8008e1a <memmove+0x2a>
 8008e18:	bd10      	pop	{r4, pc}
 8008e1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e22:	e7f7      	b.n	8008e14 <memmove+0x24>

08008e24 <_free_r>:
 8008e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e26:	2900      	cmp	r1, #0
 8008e28:	d044      	beq.n	8008eb4 <_free_r+0x90>
 8008e2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e2e:	9001      	str	r0, [sp, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f1a1 0404 	sub.w	r4, r1, #4
 8008e36:	bfb8      	it	lt
 8008e38:	18e4      	addlt	r4, r4, r3
 8008e3a:	f000 f913 	bl	8009064 <__malloc_lock>
 8008e3e:	4a1e      	ldr	r2, [pc, #120]	; (8008eb8 <_free_r+0x94>)
 8008e40:	9801      	ldr	r0, [sp, #4]
 8008e42:	6813      	ldr	r3, [r2, #0]
 8008e44:	b933      	cbnz	r3, 8008e54 <_free_r+0x30>
 8008e46:	6063      	str	r3, [r4, #4]
 8008e48:	6014      	str	r4, [r2, #0]
 8008e4a:	b003      	add	sp, #12
 8008e4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e50:	f000 b90e 	b.w	8009070 <__malloc_unlock>
 8008e54:	42a3      	cmp	r3, r4
 8008e56:	d908      	bls.n	8008e6a <_free_r+0x46>
 8008e58:	6825      	ldr	r5, [r4, #0]
 8008e5a:	1961      	adds	r1, r4, r5
 8008e5c:	428b      	cmp	r3, r1
 8008e5e:	bf01      	itttt	eq
 8008e60:	6819      	ldreq	r1, [r3, #0]
 8008e62:	685b      	ldreq	r3, [r3, #4]
 8008e64:	1949      	addeq	r1, r1, r5
 8008e66:	6021      	streq	r1, [r4, #0]
 8008e68:	e7ed      	b.n	8008e46 <_free_r+0x22>
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	b10b      	cbz	r3, 8008e74 <_free_r+0x50>
 8008e70:	42a3      	cmp	r3, r4
 8008e72:	d9fa      	bls.n	8008e6a <_free_r+0x46>
 8008e74:	6811      	ldr	r1, [r2, #0]
 8008e76:	1855      	adds	r5, r2, r1
 8008e78:	42a5      	cmp	r5, r4
 8008e7a:	d10b      	bne.n	8008e94 <_free_r+0x70>
 8008e7c:	6824      	ldr	r4, [r4, #0]
 8008e7e:	4421      	add	r1, r4
 8008e80:	1854      	adds	r4, r2, r1
 8008e82:	42a3      	cmp	r3, r4
 8008e84:	6011      	str	r1, [r2, #0]
 8008e86:	d1e0      	bne.n	8008e4a <_free_r+0x26>
 8008e88:	681c      	ldr	r4, [r3, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	6053      	str	r3, [r2, #4]
 8008e8e:	4421      	add	r1, r4
 8008e90:	6011      	str	r1, [r2, #0]
 8008e92:	e7da      	b.n	8008e4a <_free_r+0x26>
 8008e94:	d902      	bls.n	8008e9c <_free_r+0x78>
 8008e96:	230c      	movs	r3, #12
 8008e98:	6003      	str	r3, [r0, #0]
 8008e9a:	e7d6      	b.n	8008e4a <_free_r+0x26>
 8008e9c:	6825      	ldr	r5, [r4, #0]
 8008e9e:	1961      	adds	r1, r4, r5
 8008ea0:	428b      	cmp	r3, r1
 8008ea2:	bf04      	itt	eq
 8008ea4:	6819      	ldreq	r1, [r3, #0]
 8008ea6:	685b      	ldreq	r3, [r3, #4]
 8008ea8:	6063      	str	r3, [r4, #4]
 8008eaa:	bf04      	itt	eq
 8008eac:	1949      	addeq	r1, r1, r5
 8008eae:	6021      	streq	r1, [r4, #0]
 8008eb0:	6054      	str	r4, [r2, #4]
 8008eb2:	e7ca      	b.n	8008e4a <_free_r+0x26>
 8008eb4:	b003      	add	sp, #12
 8008eb6:	bd30      	pop	{r4, r5, pc}
 8008eb8:	20002354 	.word	0x20002354

08008ebc <sbrk_aligned>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	4e0e      	ldr	r6, [pc, #56]	; (8008ef8 <sbrk_aligned+0x3c>)
 8008ec0:	460c      	mov	r4, r1
 8008ec2:	6831      	ldr	r1, [r6, #0]
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	b911      	cbnz	r1, 8008ece <sbrk_aligned+0x12>
 8008ec8:	f000 f8bc 	bl	8009044 <_sbrk_r>
 8008ecc:	6030      	str	r0, [r6, #0]
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	f000 f8b7 	bl	8009044 <_sbrk_r>
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	d00a      	beq.n	8008ef0 <sbrk_aligned+0x34>
 8008eda:	1cc4      	adds	r4, r0, #3
 8008edc:	f024 0403 	bic.w	r4, r4, #3
 8008ee0:	42a0      	cmp	r0, r4
 8008ee2:	d007      	beq.n	8008ef4 <sbrk_aligned+0x38>
 8008ee4:	1a21      	subs	r1, r4, r0
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f000 f8ac 	bl	8009044 <_sbrk_r>
 8008eec:	3001      	adds	r0, #1
 8008eee:	d101      	bne.n	8008ef4 <sbrk_aligned+0x38>
 8008ef0:	f04f 34ff 	mov.w	r4, #4294967295
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}
 8008ef8:	20002358 	.word	0x20002358

08008efc <_malloc_r>:
 8008efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f00:	1ccd      	adds	r5, r1, #3
 8008f02:	f025 0503 	bic.w	r5, r5, #3
 8008f06:	3508      	adds	r5, #8
 8008f08:	2d0c      	cmp	r5, #12
 8008f0a:	bf38      	it	cc
 8008f0c:	250c      	movcc	r5, #12
 8008f0e:	2d00      	cmp	r5, #0
 8008f10:	4607      	mov	r7, r0
 8008f12:	db01      	blt.n	8008f18 <_malloc_r+0x1c>
 8008f14:	42a9      	cmp	r1, r5
 8008f16:	d905      	bls.n	8008f24 <_malloc_r+0x28>
 8008f18:	230c      	movs	r3, #12
 8008f1a:	603b      	str	r3, [r7, #0]
 8008f1c:	2600      	movs	r6, #0
 8008f1e:	4630      	mov	r0, r6
 8008f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f24:	4e2e      	ldr	r6, [pc, #184]	; (8008fe0 <_malloc_r+0xe4>)
 8008f26:	f000 f89d 	bl	8009064 <__malloc_lock>
 8008f2a:	6833      	ldr	r3, [r6, #0]
 8008f2c:	461c      	mov	r4, r3
 8008f2e:	bb34      	cbnz	r4, 8008f7e <_malloc_r+0x82>
 8008f30:	4629      	mov	r1, r5
 8008f32:	4638      	mov	r0, r7
 8008f34:	f7ff ffc2 	bl	8008ebc <sbrk_aligned>
 8008f38:	1c43      	adds	r3, r0, #1
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	d14d      	bne.n	8008fda <_malloc_r+0xde>
 8008f3e:	6834      	ldr	r4, [r6, #0]
 8008f40:	4626      	mov	r6, r4
 8008f42:	2e00      	cmp	r6, #0
 8008f44:	d140      	bne.n	8008fc8 <_malloc_r+0xcc>
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	4631      	mov	r1, r6
 8008f4a:	4638      	mov	r0, r7
 8008f4c:	eb04 0803 	add.w	r8, r4, r3
 8008f50:	f000 f878 	bl	8009044 <_sbrk_r>
 8008f54:	4580      	cmp	r8, r0
 8008f56:	d13a      	bne.n	8008fce <_malloc_r+0xd2>
 8008f58:	6821      	ldr	r1, [r4, #0]
 8008f5a:	3503      	adds	r5, #3
 8008f5c:	1a6d      	subs	r5, r5, r1
 8008f5e:	f025 0503 	bic.w	r5, r5, #3
 8008f62:	3508      	adds	r5, #8
 8008f64:	2d0c      	cmp	r5, #12
 8008f66:	bf38      	it	cc
 8008f68:	250c      	movcc	r5, #12
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	4638      	mov	r0, r7
 8008f6e:	f7ff ffa5 	bl	8008ebc <sbrk_aligned>
 8008f72:	3001      	adds	r0, #1
 8008f74:	d02b      	beq.n	8008fce <_malloc_r+0xd2>
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	442b      	add	r3, r5
 8008f7a:	6023      	str	r3, [r4, #0]
 8008f7c:	e00e      	b.n	8008f9c <_malloc_r+0xa0>
 8008f7e:	6822      	ldr	r2, [r4, #0]
 8008f80:	1b52      	subs	r2, r2, r5
 8008f82:	d41e      	bmi.n	8008fc2 <_malloc_r+0xc6>
 8008f84:	2a0b      	cmp	r2, #11
 8008f86:	d916      	bls.n	8008fb6 <_malloc_r+0xba>
 8008f88:	1961      	adds	r1, r4, r5
 8008f8a:	42a3      	cmp	r3, r4
 8008f8c:	6025      	str	r5, [r4, #0]
 8008f8e:	bf18      	it	ne
 8008f90:	6059      	strne	r1, [r3, #4]
 8008f92:	6863      	ldr	r3, [r4, #4]
 8008f94:	bf08      	it	eq
 8008f96:	6031      	streq	r1, [r6, #0]
 8008f98:	5162      	str	r2, [r4, r5]
 8008f9a:	604b      	str	r3, [r1, #4]
 8008f9c:	4638      	mov	r0, r7
 8008f9e:	f104 060b 	add.w	r6, r4, #11
 8008fa2:	f000 f865 	bl	8009070 <__malloc_unlock>
 8008fa6:	f026 0607 	bic.w	r6, r6, #7
 8008faa:	1d23      	adds	r3, r4, #4
 8008fac:	1af2      	subs	r2, r6, r3
 8008fae:	d0b6      	beq.n	8008f1e <_malloc_r+0x22>
 8008fb0:	1b9b      	subs	r3, r3, r6
 8008fb2:	50a3      	str	r3, [r4, r2]
 8008fb4:	e7b3      	b.n	8008f1e <_malloc_r+0x22>
 8008fb6:	6862      	ldr	r2, [r4, #4]
 8008fb8:	42a3      	cmp	r3, r4
 8008fba:	bf0c      	ite	eq
 8008fbc:	6032      	streq	r2, [r6, #0]
 8008fbe:	605a      	strne	r2, [r3, #4]
 8008fc0:	e7ec      	b.n	8008f9c <_malloc_r+0xa0>
 8008fc2:	4623      	mov	r3, r4
 8008fc4:	6864      	ldr	r4, [r4, #4]
 8008fc6:	e7b2      	b.n	8008f2e <_malloc_r+0x32>
 8008fc8:	4634      	mov	r4, r6
 8008fca:	6876      	ldr	r6, [r6, #4]
 8008fcc:	e7b9      	b.n	8008f42 <_malloc_r+0x46>
 8008fce:	230c      	movs	r3, #12
 8008fd0:	603b      	str	r3, [r7, #0]
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	f000 f84c 	bl	8009070 <__malloc_unlock>
 8008fd8:	e7a1      	b.n	8008f1e <_malloc_r+0x22>
 8008fda:	6025      	str	r5, [r4, #0]
 8008fdc:	e7de      	b.n	8008f9c <_malloc_r+0xa0>
 8008fde:	bf00      	nop
 8008fe0:	20002354 	.word	0x20002354

08008fe4 <_realloc_r>:
 8008fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe8:	4680      	mov	r8, r0
 8008fea:	4614      	mov	r4, r2
 8008fec:	460e      	mov	r6, r1
 8008fee:	b921      	cbnz	r1, 8008ffa <_realloc_r+0x16>
 8008ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff4:	4611      	mov	r1, r2
 8008ff6:	f7ff bf81 	b.w	8008efc <_malloc_r>
 8008ffa:	b92a      	cbnz	r2, 8009008 <_realloc_r+0x24>
 8008ffc:	f7ff ff12 	bl	8008e24 <_free_r>
 8009000:	4625      	mov	r5, r4
 8009002:	4628      	mov	r0, r5
 8009004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009008:	f000 f838 	bl	800907c <_malloc_usable_size_r>
 800900c:	4284      	cmp	r4, r0
 800900e:	4607      	mov	r7, r0
 8009010:	d802      	bhi.n	8009018 <_realloc_r+0x34>
 8009012:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009016:	d812      	bhi.n	800903e <_realloc_r+0x5a>
 8009018:	4621      	mov	r1, r4
 800901a:	4640      	mov	r0, r8
 800901c:	f7ff ff6e 	bl	8008efc <_malloc_r>
 8009020:	4605      	mov	r5, r0
 8009022:	2800      	cmp	r0, #0
 8009024:	d0ed      	beq.n	8009002 <_realloc_r+0x1e>
 8009026:	42bc      	cmp	r4, r7
 8009028:	4622      	mov	r2, r4
 800902a:	4631      	mov	r1, r6
 800902c:	bf28      	it	cs
 800902e:	463a      	movcs	r2, r7
 8009030:	f7ff fed0 	bl	8008dd4 <memcpy>
 8009034:	4631      	mov	r1, r6
 8009036:	4640      	mov	r0, r8
 8009038:	f7ff fef4 	bl	8008e24 <_free_r>
 800903c:	e7e1      	b.n	8009002 <_realloc_r+0x1e>
 800903e:	4635      	mov	r5, r6
 8009040:	e7df      	b.n	8009002 <_realloc_r+0x1e>
	...

08009044 <_sbrk_r>:
 8009044:	b538      	push	{r3, r4, r5, lr}
 8009046:	4d06      	ldr	r5, [pc, #24]	; (8009060 <_sbrk_r+0x1c>)
 8009048:	2300      	movs	r3, #0
 800904a:	4604      	mov	r4, r0
 800904c:	4608      	mov	r0, r1
 800904e:	602b      	str	r3, [r5, #0]
 8009050:	f7f9 fb88 	bl	8002764 <_sbrk>
 8009054:	1c43      	adds	r3, r0, #1
 8009056:	d102      	bne.n	800905e <_sbrk_r+0x1a>
 8009058:	682b      	ldr	r3, [r5, #0]
 800905a:	b103      	cbz	r3, 800905e <_sbrk_r+0x1a>
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	bd38      	pop	{r3, r4, r5, pc}
 8009060:	2000235c 	.word	0x2000235c

08009064 <__malloc_lock>:
 8009064:	4801      	ldr	r0, [pc, #4]	; (800906c <__malloc_lock+0x8>)
 8009066:	f000 b811 	b.w	800908c <__retarget_lock_acquire_recursive>
 800906a:	bf00      	nop
 800906c:	20002360 	.word	0x20002360

08009070 <__malloc_unlock>:
 8009070:	4801      	ldr	r0, [pc, #4]	; (8009078 <__malloc_unlock+0x8>)
 8009072:	f000 b80c 	b.w	800908e <__retarget_lock_release_recursive>
 8009076:	bf00      	nop
 8009078:	20002360 	.word	0x20002360

0800907c <_malloc_usable_size_r>:
 800907c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009080:	1f18      	subs	r0, r3, #4
 8009082:	2b00      	cmp	r3, #0
 8009084:	bfbc      	itt	lt
 8009086:	580b      	ldrlt	r3, [r1, r0]
 8009088:	18c0      	addlt	r0, r0, r3
 800908a:	4770      	bx	lr

0800908c <__retarget_lock_acquire_recursive>:
 800908c:	4770      	bx	lr

0800908e <__retarget_lock_release_recursive>:
 800908e:	4770      	bx	lr

08009090 <_init>:
 8009090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009092:	bf00      	nop
 8009094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009096:	bc08      	pop	{r3}
 8009098:	469e      	mov	lr, r3
 800909a:	4770      	bx	lr

0800909c <_fini>:
 800909c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909e:	bf00      	nop
 80090a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090a2:	bc08      	pop	{r3}
 80090a4:	469e      	mov	lr, r3
 80090a6:	4770      	bx	lr


Multi-Functional Light-Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  0800a460  0800a460  0001a460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a80c  0800a80c  0002016c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a80c  0800a80c  0002016c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a80c  0800a80c  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a80c  0800a80c  0001a80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a810  0800a810  0001a810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0800a814  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002016c  2**0
                  CONTENTS
 10 .bss          00002308  2000016c  2000016c  0002016c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002474  20002474  0002016c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001743e  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002be4  00000000  00000000  000375da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  0003a1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012a8  00000000  00000000  0003b580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023046  00000000  00000000  0003c828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000197e0  00000000  00000000  0005f86e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6dfc  00000000  00000000  0007904e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014fe4a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ff0  00000000  00000000  0014fe9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000016c 	.word	0x2000016c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a448 	.word	0x0800a448

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000170 	.word	0x20000170
 80001dc:	0800a448 	.word	0x0800a448

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

	// store recieved characters one at at time
	set_or_ret_sys_state[num_characters] = recvd_char[0] ;
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <HAL_UART_RxCpltCallback+0x6c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <HAL_UART_RxCpltCallback+0x70>)
 80008cc:	7819      	ldrb	r1, [r3, #0]
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <HAL_UART_RxCpltCallback+0x74>)
 80008d0:	5499      	strb	r1, [r3, r2]

	num_characters++ ;
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_UART_RxCpltCallback+0x6c>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	3301      	adds	r3, #1
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <HAL_UART_RxCpltCallback+0x6c>)
 80008dc:	701a      	strb	r2, [r3, #0]

	if(recvd_char[0] == '\n'){
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <HAL_UART_RxCpltCallback+0x70>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b0a      	cmp	r3, #10
 80008e4:	d117      	bne.n	8000916 <HAL_UART_RxCpltCallback+0x5a>
		if(num_characters == 19){
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <HAL_UART_RxCpltCallback+0x6c>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b13      	cmp	r3, #19
 80008ec:	d103      	bne.n	80008f6 <HAL_UART_RxCpltCallback+0x3a>
			UART_set_syst_state = 1 ;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_UART_RxCpltCallback+0x78>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	701a      	strb	r2, [r3, #0]
 80008f4:	e00c      	b.n	8000910 <HAL_UART_RxCpltCallback+0x54>

		}else if( num_characters == 7){
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_UART_RxCpltCallback+0x6c>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b07      	cmp	r3, #7
 80008fc:	d103      	bne.n	8000906 <HAL_UART_RxCpltCallback+0x4a>
			UART_ret_sys_state = 1 ;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_UART_RxCpltCallback+0x7c>)
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
 8000904:	e004      	b.n	8000910 <HAL_UART_RxCpltCallback+0x54>

		}else{
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Incorrect status request size\n", 30) ;
 8000906:	221e      	movs	r2, #30
 8000908:	490c      	ldr	r1, [pc, #48]	; (800093c <HAL_UART_RxCpltCallback+0x80>)
 800090a:	480d      	ldr	r0, [pc, #52]	; (8000940 <HAL_UART_RxCpltCallback+0x84>)
 800090c:	f006 fff8 	bl	8007900 <HAL_UART_Transmit_IT>
		}

		num_characters =  0;
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_UART_RxCpltCallback+0x6c>)
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]

	}
	// recieve character - re-prime receiver to receive single characters at a time
	HAL_UART_Receive_IT(&huart2, (uint8_t*)recvd_char, 1);
 8000916:	2201      	movs	r2, #1
 8000918:	4904      	ldr	r1, [pc, #16]	; (800092c <HAL_UART_RxCpltCallback+0x70>)
 800091a:	4809      	ldr	r0, [pc, #36]	; (8000940 <HAL_UART_RxCpltCallback+0x84>)
 800091c:	f007 f84e 	bl	80079bc <HAL_UART_Receive_IT>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20002421 	.word	0x20002421
 800092c:	20002420 	.word	0x20002420
 8000930:	20000030 	.word	0x20000030
 8000934:	20002422 	.word	0x20002422
 8000938:	20002423 	.word	0x20002423
 800093c:	0800a548 	.word	0x0800a548
 8000940:	20000354 	.word	0x20000354
 8000944:	00000000 	.word	0x00000000

08000948 <adc_dma_val_processing>:

/**
 * scale up transmit ADC values
 */

void adc_dma_val_processing(){
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

	if(adc_conv_complete == 1){
 800094e:	4b3c      	ldr	r3, [pc, #240]	; (8000a40 <adc_dma_val_processing+0xf8>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d142      	bne.n	80009dc <adc_dma_val_processing+0x94>

		adc_conv_complete =0  ;
 8000956:	4b3a      	ldr	r3, [pc, #232]	; (8000a40 <adc_dma_val_processing+0xf8>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
		sum = 0 ;
 800095c:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <adc_dma_val_processing+0xfc>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
		for(int i = 0 ; i < adc_buf_len ; i++){
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	e00c      	b.n	8000982 <adc_dma_val_processing+0x3a>
			sum += adc_buf[i] ;
 8000968:	4a37      	ldr	r2, [pc, #220]	; (8000a48 <adc_dma_val_processing+0x100>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000970:	461a      	mov	r2, r3
 8000972:	4b34      	ldr	r3, [pc, #208]	; (8000a44 <adc_dma_val_processing+0xfc>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a32      	ldr	r2, [pc, #200]	; (8000a44 <adc_dma_val_processing+0xfc>)
 800097a:	6013      	str	r3, [r2, #0]
		for(int i = 0 ; i < adc_buf_len ; i++){
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3301      	adds	r3, #1
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000988:	dbee      	blt.n	8000968 <adc_dma_val_processing+0x20>
		}
		raw_adc_dma_val =(uint16_t)(sum/adc_buf_len) ;
 800098a:	4b2e      	ldr	r3, [pc, #184]	; (8000a44 <adc_dma_val_processing+0xfc>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	da01      	bge.n	8000996 <adc_dma_val_processing+0x4e>
 8000992:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000996:	131b      	asrs	r3, r3, #12
 8000998:	b29a      	uxth	r2, r3
 800099a:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <adc_dma_val_processing+0x104>)
 800099c:	801a      	strh	r2, [r3, #0]

		scaled_adc_val = (uint16_t)raw_adc_dma_val*adc_scale_up ; //adc scaled to max =4095
 800099e:	4b2b      	ldr	r3, [pc, #172]	; (8000a4c <adc_dma_val_processing+0x104>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ff00 	bl	80007a8 <__aeabi_i2d>
 80009a8:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <adc_dma_val_processing+0x108>)
 80009aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009ae:	f7ff fc7f 	bl	80002b0 <__aeabi_dmul>
 80009b2:	4602      	mov	r2, r0
 80009b4:	460b      	mov	r3, r1
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	f7ff ff5f 	bl	800087c <__aeabi_d2uiz>
 80009be:	4603      	mov	r3, r0
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <adc_dma_val_processing+0x10c>)
 80009c4:	801a      	strh	r2, [r3, #0]

		//capture previous adc cal
		if(adc_val_capture == 1){
 80009c6:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <adc_dma_val_processing+0x110>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d106      	bne.n	80009dc <adc_dma_val_processing+0x94>
			adc_val_snapshot = scaled_adc_val ;
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <adc_dma_val_processing+0x10c>)
 80009d0:	881a      	ldrh	r2, [r3, #0]
 80009d2:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <adc_dma_val_processing+0x114>)
 80009d4:	801a      	strh	r2, [r3, #0]
			adc_val_capture = 0 ;
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <adc_dma_val_processing+0x110>)
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
		}
	}

	// if ADC movement significant update LED intensity
	if(abs(scaled_adc_val - adc_val_snapshot) >15){
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <adc_dma_val_processing+0x10c>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <adc_dma_val_processing+0x114>)
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bfb8      	it	lt
 80009ec:	425b      	neglt	r3, r3
 80009ee:	2b0f      	cmp	r3, #15
 80009f0:	dd02      	ble.n	80009f8 <adc_dma_val_processing+0xb0>
	  update_led_via_ADC = 1 ;
 80009f2:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <adc_dma_val_processing+0x118>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	701a      	strb	r2, [r3, #0]
	}

//	 WHITE LED intensity
	LED_intensity =(float)(scaled_adc_val)*(512.0/4095.0)  ;
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <adc_dma_val_processing+0x10c>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	ee07 3a90 	vmov	s15, r3
 8000a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a04:	ee17 0a90 	vmov	r0, s15
 8000a08:	f7ff fee0 	bl	80007cc <__aeabi_f2d>
 8000a0c:	a30a      	add	r3, pc, #40	; (adr r3, 8000a38 <adc_dma_val_processing+0xf0>)
 8000a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a12:	f7ff fc4d 	bl	80002b0 <__aeabi_dmul>
 8000a16:	4602      	mov	r2, r0
 8000a18:	460b      	mov	r3, r1
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f7ff ff2d 	bl	800087c <__aeabi_d2uiz>
 8000a22:	4603      	mov	r3, r0
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <adc_dma_val_processing+0x11c>)
 8000a28:	801a      	strh	r2, [r3, #0]
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	f3af 8000 	nop.w
 8000a38:	10010010 	.word	0x10010010
 8000a3c:	3fc00100 	.word	0x3fc00100
 8000a40:	200023ee 	.word	0x200023ee
 8000a44:	200023e8 	.word	0x200023e8
 8000a48:	200003e4 	.word	0x200003e4
 8000a4c:	200023e4 	.word	0x200023e4
 8000a50:	20000008 	.word	0x20000008
 8000a54:	200023f0 	.word	0x200023f0
 8000a58:	20000002 	.word	0x20000002
 8000a5c:	200023ec 	.word	0x200023ec
 8000a60:	200023f2 	.word	0x200023f2
 8000a64:	20000010 	.word	0x20000010

08000a68 <system_state_update>:

/**
 * Depending on input recvd system changes to specified state
 */
void system_state_update(){
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
	// button system state update
	 if(left_button_pressed ==1 && UART_set_syst_state == 0 && UART_ret_sys_state == 0 ){
 8000a6c:	4b45      	ldr	r3, [pc, #276]	; (8000b84 <system_state_update+0x11c>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d130      	bne.n	8000ad6 <system_state_update+0x6e>
 8000a74:	4b44      	ldr	r3, [pc, #272]	; (8000b88 <system_state_update+0x120>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d12c      	bne.n	8000ad6 <system_state_update+0x6e>
 8000a7c:	4b43      	ldr	r3, [pc, #268]	; (8000b8c <system_state_update+0x124>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d128      	bne.n	8000ad6 <system_state_update+0x6e>

		 button_count++ ;
 8000a84:	4b42      	ldr	r3, [pc, #264]	; (8000b90 <system_state_update+0x128>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	4a41      	ldr	r2, [pc, #260]	; (8000b90 <system_state_update+0x128>)
 8000a8c:	6013      	str	r3, [r2, #0]
		 if(button_count > 2){
 8000a8e:	4b40      	ldr	r3, [pc, #256]	; (8000b90 <system_state_update+0x128>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	dd02      	ble.n	8000a9c <system_state_update+0x34>
			 button_count = 0 ;
 8000a96:	4b3e      	ldr	r3, [pc, #248]	; (8000b90 <system_state_update+0x128>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
		 }
		 update_led_via_ADC =  0 ; // don't read ADC by default in next state
 8000a9c:	4b3d      	ldr	r3, [pc, #244]	; (8000b94 <system_state_update+0x12c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
		 // snapshot of ADC taken in next state
		 if(adc_conv_complete == 1){
 8000aa2:	4b3d      	ldr	r3, [pc, #244]	; (8000b98 <system_state_update+0x130>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d102      	bne.n	8000ab0 <system_state_update+0x48>
			 adc_val_capture =1  ; // capture ADC value
 8000aaa:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <system_state_update+0x134>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	701a      	strb	r2, [r3, #0]
		 }

		 // Emergency MODE DEFAULT
		 if(button_count != 1){
 8000ab0:	4b37      	ldr	r3, [pc, #220]	; (8000b90 <system_state_update+0x128>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d007      	beq.n	8000ac8 <system_state_update+0x60>
			 strobe_led_Intensity = 256 ;
 8000ab8:	4b39      	ldr	r3, [pc, #228]	; (8000ba0 <system_state_update+0x138>)
 8000aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000abe:	801a      	strh	r2, [r3, #0]
			 strobe_delay = 512;
 8000ac0:	4b38      	ldr	r3, [pc, #224]	; (8000ba4 <system_state_update+0x13c>)
 8000ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac6:	801a      	strh	r2, [r3, #0]
		 }

		 LED_ON = 0 ;  // at eahc new state led set off
 8000ac8:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <system_state_update+0x140>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
		 left_button_pressed = 0 ;
 8000ace:	4b2d      	ldr	r3, [pc, #180]	; (8000b84 <system_state_update+0x11c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
 8000ad4:	e051      	b.n	8000b7a <system_state_update+0x112>

	 }
	 // UART system state update
	 else if( left_button_pressed ==0 && UART_set_syst_state == 1 && UART_ret_sys_state == 0){ // System state update to come from only one source
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <system_state_update+0x11c>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d12f      	bne.n	8000b3e <system_state_update+0xd6>
 8000ade:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <system_state_update+0x120>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d12b      	bne.n	8000b3e <system_state_update+0xd6>
 8000ae6:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <system_state_update+0x124>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d127      	bne.n	8000b3e <system_state_update+0xd6>
		 UART_set_syst_state = 0;
 8000aee:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <system_state_update+0x120>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
		// stop reading ADC when UART set command  received
		if(adc_conv_complete == 1){
 8000af4:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <system_state_update+0x130>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d105      	bne.n	8000b08 <system_state_update+0xa0>
			adc_val_capture = 1 ; // capture slider value
 8000afc:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <system_state_update+0x134>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
			update_led_via_ADC = 0 ; // dont read until slider moved
 8000b02:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <system_state_update+0x12c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		}

		 UART_state_update =1;
 8000b08:	4b28      	ldr	r3, [pc, #160]	; (8000bac <system_state_update+0x144>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]

		 if(set_or_ret_sys_state[3] == 'F'){
 8000b0e:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <system_state_update+0x148>)
 8000b10:	78db      	ldrb	r3, [r3, #3]
 8000b12:	2b46      	cmp	r3, #70	; 0x46
 8000b14:	d103      	bne.n	8000b1e <system_state_update+0xb6>
			 button_count =0 ;
 8000b16:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <system_state_update+0x128>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
		 if(set_or_ret_sys_state[3] == 'F'){
 8000b1c:	e02c      	b.n	8000b78 <system_state_update+0x110>
		 }
		 else if(set_or_ret_sys_state[3] =='E'){
 8000b1e:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <system_state_update+0x148>)
 8000b20:	78db      	ldrb	r3, [r3, #3]
 8000b22:	2b45      	cmp	r3, #69	; 0x45
 8000b24:	d103      	bne.n	8000b2e <system_state_update+0xc6>
			 button_count =1;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <system_state_update+0x128>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
		 if(set_or_ret_sys_state[3] == 'F'){
 8000b2c:	e024      	b.n	8000b78 <system_state_update+0x110>

		 }else{
			 if(set_or_ret_sys_state[3] == 'M'){
 8000b2e:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <system_state_update+0x148>)
 8000b30:	78db      	ldrb	r3, [r3, #3]
 8000b32:	2b4d      	cmp	r3, #77	; 0x4d
 8000b34:	d120      	bne.n	8000b78 <system_state_update+0x110>
				 button_count =2 ;
 8000b36:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <system_state_update+0x128>)
 8000b38:	2202      	movs	r2, #2
 8000b3a:	601a      	str	r2, [r3, #0]
		 if(set_or_ret_sys_state[3] == 'F'){
 8000b3c:	e01c      	b.n	8000b78 <system_state_update+0x110>
			 }
		 }
	 }
	 // read system state
	 else{ //dont update the system in any way - read current and previous states
		 if( left_button_pressed ==0 && UART_set_syst_state == 0 && UART_ret_sys_state == 1){
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <system_state_update+0x11c>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d119      	bne.n	8000b7a <system_state_update+0x112>
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <system_state_update+0x120>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d115      	bne.n	8000b7a <system_state_update+0x112>
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <system_state_update+0x124>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d111      	bne.n	8000b7a <system_state_update+0x112>

			 // stop reading adc
			if(adc_conv_complete == 1){
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <system_state_update+0x130>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d105      	bne.n	8000b6a <system_state_update+0x102>
				adc_val_capture = 1 ; // capture slider value
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <system_state_update+0x134>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]
				update_led_via_ADC = 0 ; // dont read until slider moved
 8000b64:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <system_state_update+0x12c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
			}

			 UART_ret_sys_state = 0;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <system_state_update+0x124>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
			 READ_SYS =1;
 8000b70:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <system_state_update+0x14c>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]

		 }
	 }
}
 8000b76:	e000      	b.n	8000b7a <system_state_update+0x112>
		 if(set_or_ret_sys_state[3] == 'F'){
 8000b78:	bf00      	nop
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	2000245a 	.word	0x2000245a
 8000b88:	20002422 	.word	0x20002422
 8000b8c:	20002423 	.word	0x20002423
 8000b90:	200003dc 	.word	0x200003dc
 8000b94:	200023f2 	.word	0x200023f2
 8000b98:	200023ee 	.word	0x200023ee
 8000b9c:	20000002 	.word	0x20000002
 8000ba0:	20000014 	.word	0x20000014
 8000ba4:	20000012 	.word	0x20000012
 8000ba8:	200023f3 	.word	0x200023f3
 8000bac:	20002424 	.word	0x20002424
 8000bb0:	20000030 	.word	0x20000030
 8000bb4:	2000242c 	.word	0x2000242c

08000bb8 <right_button_state_update>:

/**
 * Updates system state after right button pressed in emergency mode
 */
void right_button_state_update(){
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

	if(right_button_pressed){
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <right_button_state_update+0x3c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d012      	beq.n	8000bea <right_button_state_update+0x32>
		right_button_pressed = 0 ;
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <right_button_state_update+0x3c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]

		update_led_via_ADC = 0 ; // dont read adc by default in next state
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <right_button_state_update+0x40>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]

		 em_count++ ;
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <right_button_state_update+0x44>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <right_button_state_update+0x44>)
 8000bda:	701a      	strb	r2, [r3, #0]

		 if(em_count>2){
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <right_button_state_update+0x44>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d902      	bls.n	8000bea <right_button_state_update+0x32>
			 em_count = 0;
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <right_button_state_update+0x44>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
		 }
	}
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	20002459 	.word	0x20002459
 8000bf8:	200023f2 	.word	0x200023f2
 8000bfc:	200003e0 	.word	0x200003e0

08000c00 <TURN_LED_ON_OFF>:

/**
 * Middle button press turns LED ON/OFF
 */
void TURN_LED_ON_OFF(){
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
	if(middle_button_pressed == 1 && UART_set_syst_state == 0){
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <TURN_LED_ON_OFF+0x84>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d122      	bne.n	8000c52 <TURN_LED_ON_OFF+0x52>
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <TURN_LED_ON_OFF+0x88>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d11e      	bne.n	8000c52 <TURN_LED_ON_OFF+0x52>
		 LED_ON = !LED_ON ;  // turns the LED on OR off
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <TURN_LED_ON_OFF+0x8c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	bf0c      	ite	eq
 8000c1c:	2301      	moveq	r3, #1
 8000c1e:	2300      	movne	r3, #0
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	461a      	mov	r2, r3
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <TURN_LED_ON_OFF+0x8c>)
 8000c26:	701a      	strb	r2, [r3, #0]

		 // Middle button press -> LED ON / OFF
		 if(LED_ON == 1){
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <TURN_LED_ON_OFF+0x8c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d104      	bne.n	8000c3a <TURN_LED_ON_OFF+0x3a>
			 htim2.Instance->CCR1 = 1 ; // LED ON
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <TURN_LED_ON_OFF+0x90>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2201      	movs	r2, #1
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34
 8000c38:	e007      	b.n	8000c4a <TURN_LED_ON_OFF+0x4a>
		 }else if(LED_ON ==0){
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <TURN_LED_ON_OFF+0x8c>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d103      	bne.n	8000c4a <TURN_LED_ON_OFF+0x4a>
			 htim2.Instance->CCR1 = 0 ; //LED OFFS
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <TURN_LED_ON_OFF+0x90>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2200      	movs	r2, #0
 8000c48:	635a      	str	r2, [r3, #52]	; 0x34
		 }

		 middle_button_pressed = 0 ;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <TURN_LED_ON_OFF+0x84>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
			LED_ON  = 1 ;
		}else{
			LED_ON = 0 ;
		}
	}
}
 8000c50:	e012      	b.n	8000c78 <TURN_LED_ON_OFF+0x78>
	else if(middle_button_pressed == 0 && UART_state_update == 1  ){
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <TURN_LED_ON_OFF+0x84>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10e      	bne.n	8000c78 <TURN_LED_ON_OFF+0x78>
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <TURN_LED_ON_OFF+0x94>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d10a      	bne.n	8000c78 <TURN_LED_ON_OFF+0x78>
		if( state>0){
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <TURN_LED_ON_OFF+0x98>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <TURN_LED_ON_OFF+0x72>
			LED_ON  = 1 ;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <TURN_LED_ON_OFF+0x8c>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
}
 8000c70:	e002      	b.n	8000c78 <TURN_LED_ON_OFF+0x78>
			LED_ON = 0 ;
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <TURN_LED_ON_OFF+0x8c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20002458 	.word	0x20002458
 8000c88:	20002422 	.word	0x20002422
 8000c8c:	200023f3 	.word	0x200023f3
 8000c90:	20000270 	.word	0x20000270
 8000c94:	20002424 	.word	0x20002424
 8000c98:	20002426 	.word	0x20002426

08000c9c <EM_mode_Strobe>:

/**
 * LED strobed with provided number of ms
 */
void EM_mode_Strobe(uint16_t strobe_delay){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	80fb      	strh	r3, [r7, #6]

	 // default delay 512ms
	 timePassed =HAL_GetTick() - strobe_ticks ;
 8000ca6:	f002 f971 	bl	8002f8c <HAL_GetTick>
 8000caa:	4602      	mov	r2, r0
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <EM_mode_Strobe+0x84>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	4a1c      	ldr	r2, [pc, #112]	; (8000d24 <EM_mode_Strobe+0x88>)
 8000cb4:	6013      	str	r3, [r2, #0]
	 // time passed >512
	 if( timePassed >= strobe_delay && led_strobe_on == 0){
 8000cb6:	88fa      	ldrh	r2, [r7, #6]
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <EM_mode_Strobe+0x88>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d80a      	bhi.n	8000cd6 <EM_mode_Strobe+0x3a>
 8000cc0:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <EM_mode_Strobe+0x8c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d106      	bne.n	8000cd6 <EM_mode_Strobe+0x3a>
		 led_strobe_on =1 ;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <EM_mode_Strobe+0x8c>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
		 htim2.Instance->CCR1 = 0 ;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <EM_mode_Strobe+0x90>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	635a      	str	r2, [r3, #52]	; 0x34
	 }
	 // time Passed > 1024
	 if(timePassed >= 1024 && led_strobe_on == 1){
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <EM_mode_Strobe+0x88>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cde:	d31a      	bcc.n	8000d16 <EM_mode_Strobe+0x7a>
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <EM_mode_Strobe+0x8c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d116      	bne.n	8000d16 <EM_mode_Strobe+0x7a>
		 strobe_ticks =  HAL_GetTick() ; // update current time
 8000ce8:	f002 f950 	bl	8002f8c <HAL_GetTick>
 8000cec:	4603      	mov	r3, r0
 8000cee:	4a0c      	ldr	r2, [pc, #48]	; (8000d20 <EM_mode_Strobe+0x84>)
 8000cf0:	6013      	str	r3, [r2, #0]
		 led_strobe_on = 0 ;
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <EM_mode_Strobe+0x8c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]

		 if(update_led_via_ADC ==1){ // update LED intensity if the slider moved
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <EM_mode_Strobe+0x94>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d105      	bne.n	8000d0c <EM_mode_Strobe+0x70>
			 htim2.Instance->CCR1 = LED_intensity ;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <EM_mode_Strobe+0x98>)
 8000d02:	881a      	ldrh	r2, [r3, #0]
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <EM_mode_Strobe+0x90>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	635a      	str	r2, [r3, #52]	; 0x34
		 }else{ // if no slider movement strobe with default intensity
			 htim2.Instance->CCR1 = strobe_led_Intensity;
		 }
	 }

}
 8000d0a:	e004      	b.n	8000d16 <EM_mode_Strobe+0x7a>
			 htim2.Instance->CCR1 = strobe_led_Intensity;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <EM_mode_Strobe+0x9c>)
 8000d0e:	881a      	ldrh	r2, [r3, #0]
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <EM_mode_Strobe+0x90>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200023f4 	.word	0x200023f4
 8000d24:	200023fc 	.word	0x200023fc
 8000d28:	200023f8 	.word	0x200023f8
 8000d2c:	20000270 	.word	0x20000270
 8000d30:	200023f2 	.word	0x200023f2
 8000d34:	20000010 	.word	0x20000010
 8000d38:	20000014 	.word	0x20000014

08000d3c <convert_UART_state_params_to_Int>:
void convert_UART_state_params_to_Int(){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
	if(UART_set_syst_state) {
 8000d42:	4b76      	ldr	r3, [pc, #472]	; (8000f1c <convert_UART_state_params_to_Int+0x1e0>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f000 80e4 	beq.w	8000f14 <convert_UART_state_params_to_Int+0x1d8>
		for(int i = 0; i < 19 ; i++){
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	e05f      	b.n	8000e12 <convert_UART_state_params_to_Int+0xd6>
			switch(i){
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3b05      	subs	r3, #5
 8000d56:	2b0a      	cmp	r3, #10
 8000d58:	d857      	bhi.n	8000e0a <convert_UART_state_params_to_Int+0xce>
 8000d5a:	a201      	add	r2, pc, #4	; (adr r2, 8000d60 <convert_UART_state_params_to_Int+0x24>)
 8000d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d60:	08000d8d 	.word	0x08000d8d
 8000d64:	08000d9b 	.word	0x08000d9b
 8000d68:	08000da9 	.word	0x08000da9
 8000d6c:	08000e0b 	.word	0x08000e0b
 8000d70:	08000db7 	.word	0x08000db7
 8000d74:	08000dc5 	.word	0x08000dc5
 8000d78:	08000dd3 	.word	0x08000dd3
 8000d7c:	08000e0b 	.word	0x08000e0b
 8000d80:	08000de1 	.word	0x08000de1
 8000d84:	08000def 	.word	0x08000def
 8000d88:	08000dfd 	.word	0x08000dfd
			case 5:
				STATE[0]= set_or_ret_sys_state[i] ;
 8000d8c:	4a64      	ldr	r2, [pc, #400]	; (8000f20 <convert_UART_state_params_to_Int+0x1e4>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	781a      	ldrb	r2, [r3, #0]
 8000d94:	4b63      	ldr	r3, [pc, #396]	; (8000f24 <convert_UART_state_params_to_Int+0x1e8>)
 8000d96:	701a      	strb	r2, [r3, #0]
				break;
 8000d98:	e038      	b.n	8000e0c <convert_UART_state_params_to_Int+0xd0>
			case 6:
				STATE[1]= set_or_ret_sys_state[i] ;
 8000d9a:	4a61      	ldr	r2, [pc, #388]	; (8000f20 <convert_UART_state_params_to_Int+0x1e4>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4413      	add	r3, r2
 8000da0:	781a      	ldrb	r2, [r3, #0]
 8000da2:	4b60      	ldr	r3, [pc, #384]	; (8000f24 <convert_UART_state_params_to_Int+0x1e8>)
 8000da4:	705a      	strb	r2, [r3, #1]
				break;
 8000da6:	e031      	b.n	8000e0c <convert_UART_state_params_to_Int+0xd0>
			case 7:
				STATE[2] = set_or_ret_sys_state[i] ;
 8000da8:	4a5d      	ldr	r2, [pc, #372]	; (8000f20 <convert_UART_state_params_to_Int+0x1e4>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	781a      	ldrb	r2, [r3, #0]
 8000db0:	4b5c      	ldr	r3, [pc, #368]	; (8000f24 <convert_UART_state_params_to_Int+0x1e8>)
 8000db2:	709a      	strb	r2, [r3, #2]
				break;
 8000db4:	e02a      	b.n	8000e0c <convert_UART_state_params_to_Int+0xd0>

			case 9:
				PARAM1[0] = set_or_ret_sys_state[i];
 8000db6:	4a5a      	ldr	r2, [pc, #360]	; (8000f20 <convert_UART_state_params_to_Int+0x1e4>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4413      	add	r3, r2
 8000dbc:	781a      	ldrb	r2, [r3, #0]
 8000dbe:	4b5a      	ldr	r3, [pc, #360]	; (8000f28 <convert_UART_state_params_to_Int+0x1ec>)
 8000dc0:	701a      	strb	r2, [r3, #0]
				break;
 8000dc2:	e023      	b.n	8000e0c <convert_UART_state_params_to_Int+0xd0>
			case 10:
				PARAM1[1] = set_or_ret_sys_state[i] ;
 8000dc4:	4a56      	ldr	r2, [pc, #344]	; (8000f20 <convert_UART_state_params_to_Int+0x1e4>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	781a      	ldrb	r2, [r3, #0]
 8000dcc:	4b56      	ldr	r3, [pc, #344]	; (8000f28 <convert_UART_state_params_to_Int+0x1ec>)
 8000dce:	705a      	strb	r2, [r3, #1]
				break;
 8000dd0:	e01c      	b.n	8000e0c <convert_UART_state_params_to_Int+0xd0>
			case 11:
				PARAM1[2] = set_or_ret_sys_state[i] ;
 8000dd2:	4a53      	ldr	r2, [pc, #332]	; (8000f20 <convert_UART_state_params_to_Int+0x1e4>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	781a      	ldrb	r2, [r3, #0]
 8000dda:	4b53      	ldr	r3, [pc, #332]	; (8000f28 <convert_UART_state_params_to_Int+0x1ec>)
 8000ddc:	709a      	strb	r2, [r3, #2]
				break ;
 8000dde:	e015      	b.n	8000e0c <convert_UART_state_params_to_Int+0xd0>
			case 13:
				PARAM2[0] = set_or_ret_sys_state[i] ;
 8000de0:	4a4f      	ldr	r2, [pc, #316]	; (8000f20 <convert_UART_state_params_to_Int+0x1e4>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	4b50      	ldr	r3, [pc, #320]	; (8000f2c <convert_UART_state_params_to_Int+0x1f0>)
 8000dea:	701a      	strb	r2, [r3, #0]
				break;
 8000dec:	e00e      	b.n	8000e0c <convert_UART_state_params_to_Int+0xd0>
			case 14:
				PARAM2[1] = set_or_ret_sys_state[i] ;
 8000dee:	4a4c      	ldr	r2, [pc, #304]	; (8000f20 <convert_UART_state_params_to_Int+0x1e4>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4413      	add	r3, r2
 8000df4:	781a      	ldrb	r2, [r3, #0]
 8000df6:	4b4d      	ldr	r3, [pc, #308]	; (8000f2c <convert_UART_state_params_to_Int+0x1f0>)
 8000df8:	705a      	strb	r2, [r3, #1]
				break;
 8000dfa:	e007      	b.n	8000e0c <convert_UART_state_params_to_Int+0xd0>
			case 15:
				PARAM2[2] = set_or_ret_sys_state[i ];
 8000dfc:	4a48      	ldr	r2, [pc, #288]	; (8000f20 <convert_UART_state_params_to_Int+0x1e4>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	781a      	ldrb	r2, [r3, #0]
 8000e04:	4b49      	ldr	r3, [pc, #292]	; (8000f2c <convert_UART_state_params_to_Int+0x1f0>)
 8000e06:	709a      	strb	r2, [r3, #2]
				break;
 8000e08:	e000      	b.n	8000e0c <convert_UART_state_params_to_Int+0xd0>

			default:
				break ;
 8000e0a:	bf00      	nop
		for(int i = 0; i < 19 ; i++){
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b12      	cmp	r3, #18
 8000e16:	dd9c      	ble.n	8000d52 <convert_UART_state_params_to_Int+0x16>
			}

		}

		state = atoi(STATE) ;
 8000e18:	4842      	ldr	r0, [pc, #264]	; (8000f24 <convert_UART_state_params_to_Int+0x1e8>)
 8000e1a:	f008 f877 	bl	8008f0c <atoi>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	4b43      	ldr	r3, [pc, #268]	; (8000f30 <convert_UART_state_params_to_Int+0x1f4>)
 8000e24:	801a      	strh	r2, [r3, #0]
		param1 = atoi(PARAM1);
 8000e26:	4840      	ldr	r0, [pc, #256]	; (8000f28 <convert_UART_state_params_to_Int+0x1ec>)
 8000e28:	f008 f870 	bl	8008f0c <atoi>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b40      	ldr	r3, [pc, #256]	; (8000f34 <convert_UART_state_params_to_Int+0x1f8>)
 8000e32:	801a      	strh	r2, [r3, #0]
		// problem - perform check for if non integer characters are passed!
		if(strcmp(PARAM2, "000") == 0 ){
 8000e34:	4940      	ldr	r1, [pc, #256]	; (8000f38 <convert_UART_state_params_to_Int+0x1fc>)
 8000e36:	483d      	ldr	r0, [pc, #244]	; (8000f2c <convert_UART_state_params_to_Int+0x1f0>)
 8000e38:	f7ff f9d2 	bl	80001e0 <strcmp>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d146      	bne.n	8000ed0 <convert_UART_state_params_to_Int+0x194>

			param2 = atoi(PARAM2) ;  // SOS MORSE OUTPUT
 8000e42:	483a      	ldr	r0, [pc, #232]	; (8000f2c <convert_UART_state_params_to_Int+0x1f0>)
 8000e44:	f008 f862 	bl	8008f0c <atoi>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	4b3b      	ldr	r3, [pc, #236]	; (8000f3c <convert_UART_state_params_to_Int+0x200>)
 8000e4e:	801a      	strh	r2, [r3, #0]

			ME_param2[0] = param2/100 + 48;
 8000e50:	4b3a      	ldr	r3, [pc, #232]	; (8000f3c <convert_UART_state_params_to_Int+0x200>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	4a3a      	ldr	r2, [pc, #232]	; (8000f40 <convert_UART_state_params_to_Int+0x204>)
 8000e56:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	3330      	adds	r3, #48	; 0x30
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	4b37      	ldr	r3, [pc, #220]	; (8000f44 <convert_UART_state_params_to_Int+0x208>)
 8000e66:	701a      	strb	r2, [r3, #0]
			ME_param2[1] = (param2  -(param2/100)*100)/10 +48 ;
 8000e68:	4b34      	ldr	r3, [pc, #208]	; (8000f3c <convert_UART_state_params_to_Int+0x200>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <convert_UART_state_params_to_Int+0x200>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	4a33      	ldr	r2, [pc, #204]	; (8000f40 <convert_UART_state_params_to_Int+0x204>)
 8000e74:	fba2 2303 	umull	r2, r3, r2, r3
 8000e78:	095b      	lsrs	r3, r3, #5
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8000e82:	fb02 f303 	mul.w	r3, r2, r3
 8000e86:	440b      	add	r3, r1
 8000e88:	4a2f      	ldr	r2, [pc, #188]	; (8000f48 <convert_UART_state_params_to_Int+0x20c>)
 8000e8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e8e:	1092      	asrs	r2, r2, #2
 8000e90:	17db      	asrs	r3, r3, #31
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	3330      	adds	r3, #48	; 0x30
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <convert_UART_state_params_to_Int+0x208>)
 8000e9c:	705a      	strb	r2, [r3, #1]
			ME_param2[2] = (param2 - (param2/10)*10) + 48 ;
 8000e9e:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <convert_UART_state_params_to_Int+0x200>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <convert_UART_state_params_to_Int+0x200>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	4928      	ldr	r1, [pc, #160]	; (8000f4c <convert_UART_state_params_to_Int+0x210>)
 8000eaa:	fba1 1303 	umull	r1, r3, r1, r3
 8000eae:	08db      	lsrs	r3, r3, #3
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	0149      	lsls	r1, r1, #5
 8000eb8:	1ac9      	subs	r1, r1, r3
 8000eba:	0089      	lsls	r1, r1, #2
 8000ebc:	1acb      	subs	r3, r1, r3
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	3330      	adds	r3, #48	; 0x30
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <convert_UART_state_params_to_Int+0x208>)
 8000ecc:	709a      	strb	r2, [r3, #2]
			ME_param2[2] = Custom_Morse_Msg[2] ;

			custom_morse_msg_rcvd = 1;
		}
	}
}
 8000ece:	e021      	b.n	8000f14 <convert_UART_state_params_to_Int+0x1d8>
		else if( strcmp(PARAM2, "000") != 0 ){
 8000ed0:	4919      	ldr	r1, [pc, #100]	; (8000f38 <convert_UART_state_params_to_Int+0x1fc>)
 8000ed2:	4816      	ldr	r0, [pc, #88]	; (8000f2c <convert_UART_state_params_to_Int+0x1f0>)
 8000ed4:	f7ff f984 	bl	80001e0 <strcmp>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d01a      	beq.n	8000f14 <convert_UART_state_params_to_Int+0x1d8>
			Custom_Morse_Msg[0] = PARAM2[0] ; // CUSTOM MORSE output - declare variable to store the output
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <convert_UART_state_params_to_Int+0x1f0>)
 8000ee0:	781a      	ldrb	r2, [r3, #0]
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <convert_UART_state_params_to_Int+0x214>)
 8000ee4:	701a      	strb	r2, [r3, #0]
			Custom_Morse_Msg[1] = PARAM2[1] ;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <convert_UART_state_params_to_Int+0x1f0>)
 8000ee8:	785a      	ldrb	r2, [r3, #1]
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <convert_UART_state_params_to_Int+0x214>)
 8000eec:	705a      	strb	r2, [r3, #1]
			Custom_Morse_Msg[2] = PARAM2[2] ;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <convert_UART_state_params_to_Int+0x1f0>)
 8000ef0:	789a      	ldrb	r2, [r3, #2]
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <convert_UART_state_params_to_Int+0x214>)
 8000ef4:	709a      	strb	r2, [r3, #2]
			ME_param2[0] = Custom_Morse_Msg[0];
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <convert_UART_state_params_to_Int+0x214>)
 8000ef8:	781a      	ldrb	r2, [r3, #0]
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <convert_UART_state_params_to_Int+0x208>)
 8000efc:	701a      	strb	r2, [r3, #0]
			ME_param2[1] = Custom_Morse_Msg[1] ;
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <convert_UART_state_params_to_Int+0x214>)
 8000f00:	785a      	ldrb	r2, [r3, #1]
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <convert_UART_state_params_to_Int+0x208>)
 8000f04:	705a      	strb	r2, [r3, #1]
			ME_param2[2] = Custom_Morse_Msg[2] ;
 8000f06:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <convert_UART_state_params_to_Int+0x214>)
 8000f08:	789a      	ldrb	r2, [r3, #2]
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <convert_UART_state_params_to_Int+0x208>)
 8000f0c:	709a      	strb	r2, [r3, #2]
			custom_morse_msg_rcvd = 1;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <convert_UART_state_params_to_Int+0x218>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20002422 	.word	0x20002422
 8000f20:	20000030 	.word	0x20000030
 8000f24:	20000044 	.word	0x20000044
 8000f28:	20000048 	.word	0x20000048
 8000f2c:	2000004c 	.word	0x2000004c
 8000f30:	20002426 	.word	0x20002426
 8000f34:	20002428 	.word	0x20002428
 8000f38:	0800a568 	.word	0x0800a568
 8000f3c:	2000242a 	.word	0x2000242a
 8000f40:	51eb851f 	.word	0x51eb851f
 8000f44:	20000058 	.word	0x20000058
 8000f48:	66666667 	.word	0x66666667
 8000f4c:	cccccccd 	.word	0xcccccccd
 8000f50:	20000050 	.word	0x20000050
 8000f54:	20002425 	.word	0x20002425

08000f58 <Emergency_Mode_State_Update>:

/**
 * Function updates the necessary states/ values when UART command reached to
 * update the system state
 */
void Emergency_Mode_State_Update(){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0

	if(UART_state_update == 1 && state > 0 && set_or_ret_sys_state[3] =='E'){
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <Emergency_Mode_State_Update+0xbc>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d14c      	bne.n	8000ffe <Emergency_Mode_State_Update+0xa6>
 8000f64:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <Emergency_Mode_State_Update+0xc0>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d048      	beq.n	8000ffe <Emergency_Mode_State_Update+0xa6>
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	; (800101c <Emergency_Mode_State_Update+0xc4>)
 8000f6e:	78db      	ldrb	r3, [r3, #3]
 8000f70:	2b45      	cmp	r3, #69	; 0x45
 8000f72:	d144      	bne.n	8000ffe <Emergency_Mode_State_Update+0xa6>
		// Dont read ADC
		if(adc_conv_complete == 1){
 8000f74:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <Emergency_Mode_State_Update+0xc8>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d105      	bne.n	8000f88 <Emergency_Mode_State_Update+0x30>
			adc_val_capture = 1 ; // capture slider value
 8000f7c:	4b29      	ldr	r3, [pc, #164]	; (8001024 <Emergency_Mode_State_Update+0xcc>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
			update_led_via_ADC = 0 ; // dont read until slider moved
 8000f82:	4b29      	ldr	r3, [pc, #164]	; (8001028 <Emergency_Mode_State_Update+0xd0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
		}

		//update LED intensity
		strobe_led_Intensity = state;
 8000f88:	4b23      	ldr	r3, [pc, #140]	; (8001018 <Emergency_Mode_State_Update+0xc0>)
 8000f8a:	881a      	ldrh	r2, [r3, #0]
 8000f8c:	4b27      	ldr	r3, [pc, #156]	; (800102c <Emergency_Mode_State_Update+0xd4>)
 8000f8e:	801a      	strh	r2, [r3, #0]

		// strobe
		if(param1 > 0 ){
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <Emergency_Mode_State_Update+0xd8>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d007      	beq.n	8000fa8 <Emergency_Mode_State_Update+0x50>
			em_count = 0 ;
 8000f98:	4b26      	ldr	r3, [pc, #152]	; (8001034 <Emergency_Mode_State_Update+0xdc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
			strobe_delay = param1 ;  // update the ON/off time of strobe
 8000f9e:	4b24      	ldr	r3, [pc, #144]	; (8001030 <Emergency_Mode_State_Update+0xd8>)
 8000fa0:	881a      	ldrh	r2, [r3, #0]
 8000fa2:	4b25      	ldr	r3, [pc, #148]	; (8001038 <Emergency_Mode_State_Update+0xe0>)
 8000fa4:	801a      	strh	r2, [r3, #0]
 8000fa6:	e027      	b.n	8000ff8 <Emergency_Mode_State_Update+0xa0>

		}
		// SOS output
		else if(param1 == 0 && param2 == 0 && custom_morse_msg_rcvd == 0 ){
 8000fa8:	4b21      	ldr	r3, [pc, #132]	; (8001030 <Emergency_Mode_State_Update+0xd8>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d110      	bne.n	8000fd2 <Emergency_Mode_State_Update+0x7a>
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <Emergency_Mode_State_Update+0xe4>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10c      	bne.n	8000fd2 <Emergency_Mode_State_Update+0x7a>
 8000fb8:	4b21      	ldr	r3, [pc, #132]	; (8001040 <Emergency_Mode_State_Update+0xe8>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d108      	bne.n	8000fd2 <Emergency_Mode_State_Update+0x7a>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"SOS MORSE\n", 10) ;
 8000fc0:	220a      	movs	r2, #10
 8000fc2:	4920      	ldr	r1, [pc, #128]	; (8001044 <Emergency_Mode_State_Update+0xec>)
 8000fc4:	4820      	ldr	r0, [pc, #128]	; (8001048 <Emergency_Mode_State_Update+0xf0>)
 8000fc6:	f006 fc9b 	bl	8007900 <HAL_UART_Transmit_IT>
			em_count =1 ; // SOS mode
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <Emergency_Mode_State_Update+0xdc>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
 8000fd0:	e012      	b.n	8000ff8 <Emergency_Mode_State_Update+0xa0>
		}
		// CUSTOM morse msg received
		else{
			if(param1 == 0 && custom_morse_msg_rcvd ==1 ){
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <Emergency_Mode_State_Update+0xd8>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10e      	bne.n	8000ff8 <Emergency_Mode_State_Update+0xa0>
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <Emergency_Mode_State_Update+0xe8>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d10a      	bne.n	8000ff8 <Emergency_Mode_State_Update+0xa0>
				custom_morse_msg_rcvd = 0;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <Emergency_Mode_State_Update+0xe8>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart2, (uint8_t*)"CUSTOM MORSE\n", 13) ;
 8000fe8:	220d      	movs	r2, #13
 8000fea:	4918      	ldr	r1, [pc, #96]	; (800104c <Emergency_Mode_State_Update+0xf4>)
 8000fec:	4816      	ldr	r0, [pc, #88]	; (8001048 <Emergency_Mode_State_Update+0xf0>)
 8000fee:	f006 fc87 	bl	8007900 <HAL_UART_Transmit_IT>
				em_count = 2 ; // CUSTOM MORSE
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <Emergency_Mode_State_Update+0xdc>)
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	701a      	strb	r2, [r3, #0]

			}
		}


		UART_state_update = 0;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <Emergency_Mode_State_Update+0xbc>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
	}
	 // copy previous states information
		 ME_state = strobe_led_Intensity ;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <Emergency_Mode_State_Update+0xd4>)
 8001000:	881a      	ldrh	r2, [r3, #0]
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <Emergency_Mode_State_Update+0xf8>)
 8001004:	801a      	strh	r2, [r3, #0]
		 ME_param1 =  strobe_delay;
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <Emergency_Mode_State_Update+0xe0>)
 8001008:	881a      	ldrh	r2, [r3, #0]
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <Emergency_Mode_State_Update+0xfc>)
 800100c:	801a      	strh	r2, [r3, #0]


}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20002424 	.word	0x20002424
 8001018:	20002426 	.word	0x20002426
 800101c:	20000030 	.word	0x20000030
 8001020:	200023ee 	.word	0x200023ee
 8001024:	20000002 	.word	0x20000002
 8001028:	200023f2 	.word	0x200023f2
 800102c:	20000014 	.word	0x20000014
 8001030:	20002428 	.word	0x20002428
 8001034:	200003e0 	.word	0x200003e0
 8001038:	20000012 	.word	0x20000012
 800103c:	2000242a 	.word	0x2000242a
 8001040:	20002425 	.word	0x20002425
 8001044:	0800a56c 	.word	0x0800a56c
 8001048:	20000354 	.word	0x20000354
 800104c:	0800a578 	.word	0x0800a578
 8001050:	20002432 	.word	0x20002432
 8001054:	20002434 	.word	0x20002434

08001058 <Mood_Mode_State_Update>:

void Mood_Mode_State_Update(){
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
	if(UART_state_update ==1  && set_or_ret_sys_state[3] == 'M'){
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <Mood_Mode_State_Update+0x3c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d112      	bne.n	800108a <Mood_Mode_State_Update+0x32>
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <Mood_Mode_State_Update+0x40>)
 8001066:	78db      	ldrb	r3, [r3, #3]
 8001068:	2b4d      	cmp	r3, #77	; 0x4d
 800106a:	d10e      	bne.n	800108a <Mood_Mode_State_Update+0x32>

		R_channel_Intensity = state ;
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <Mood_Mode_State_Update+0x44>)
 800106e:	881a      	ldrh	r2, [r3, #0]
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <Mood_Mode_State_Update+0x48>)
 8001072:	801a      	strh	r2, [r3, #0]
		G_channel_Intensity = param1 ;
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <Mood_Mode_State_Update+0x4c>)
 8001076:	881a      	ldrh	r2, [r3, #0]
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <Mood_Mode_State_Update+0x50>)
 800107a:	801a      	strh	r2, [r3, #0]
		B_channel_Intensity = param2 ;
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <Mood_Mode_State_Update+0x54>)
 800107e:	881a      	ldrh	r2, [r3, #0]
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <Mood_Mode_State_Update+0x58>)
 8001082:	801a      	strh	r2, [r3, #0]

		UART_state_update = 0;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <Mood_Mode_State_Update+0x3c>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
	}
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	20002424 	.word	0x20002424
 8001098:	20000030 	.word	0x20000030
 800109c:	20002426 	.word	0x20002426
 80010a0:	20000018 	.word	0x20000018
 80010a4:	20002428 	.word	0x20002428
 80010a8:	2000001a 	.word	0x2000001a
 80010ac:	2000242a 	.word	0x2000242a
 80010b0:	2000001c 	.word	0x2000001c

080010b4 <Request_return_system_state>:

void Request_return_system_state(){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
	if(READ_SYS ==1 ){
 80010ba:	4b6c      	ldr	r3, [pc, #432]	; (800126c <Request_return_system_state+0x1b8>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	f040 8348 	bne.w	8001754 <Request_return_system_state+0x6a0>
		// flash light mode
		if(set_or_ret_sys_state[3] == 'F'){
 80010c4:	4b6a      	ldr	r3, [pc, #424]	; (8001270 <Request_return_system_state+0x1bc>)
 80010c6:	78db      	ldrb	r3, [r3, #3]
 80010c8:	2b46      	cmp	r3, #70	; 0x46
 80010ca:	f040 80e9 	bne.w	80012a0 <Request_return_system_state+0x1ec>

			ret_state[0] = MF_state/100 + 48 ; // hundred
 80010ce:	4b69      	ldr	r3, [pc, #420]	; (8001274 <Request_return_system_state+0x1c0>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	4a69      	ldr	r2, [pc, #420]	; (8001278 <Request_return_system_state+0x1c4>)
 80010d4:	fba2 2303 	umull	r2, r3, r2, r3
 80010d8:	095b      	lsrs	r3, r3, #5
 80010da:	b29b      	uxth	r3, r3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	3330      	adds	r3, #48	; 0x30
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b66      	ldr	r3, [pc, #408]	; (800127c <Request_return_system_state+0x1c8>)
 80010e4:	701a      	strb	r2, [r3, #0]
			ret_state[1] = (MF_state -(MF_state/100)*100)/10 + 48 ; //tens
 80010e6:	4b63      	ldr	r3, [pc, #396]	; (8001274 <Request_return_system_state+0x1c0>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	4619      	mov	r1, r3
 80010ec:	4b61      	ldr	r3, [pc, #388]	; (8001274 <Request_return_system_state+0x1c0>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	4a61      	ldr	r2, [pc, #388]	; (8001278 <Request_return_system_state+0x1c4>)
 80010f2:	fba2 2303 	umull	r2, r3, r2, r3
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	461a      	mov	r2, r3
 80010fc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001100:	fb02 f303 	mul.w	r3, r2, r3
 8001104:	440b      	add	r3, r1
 8001106:	4a5e      	ldr	r2, [pc, #376]	; (8001280 <Request_return_system_state+0x1cc>)
 8001108:	fb82 1203 	smull	r1, r2, r2, r3
 800110c:	1092      	asrs	r2, r2, #2
 800110e:	17db      	asrs	r3, r3, #31
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	3330      	adds	r3, #48	; 0x30
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b58      	ldr	r3, [pc, #352]	; (800127c <Request_return_system_state+0x1c8>)
 800111a:	705a      	strb	r2, [r3, #1]
			ret_state[2] = (MF_state - (MF_state/10)*10) + 48 ;  //units
 800111c:	4b55      	ldr	r3, [pc, #340]	; (8001274 <Request_return_system_state+0x1c0>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b54      	ldr	r3, [pc, #336]	; (8001274 <Request_return_system_state+0x1c0>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	4957      	ldr	r1, [pc, #348]	; (8001284 <Request_return_system_state+0x1d0>)
 8001128:	fba1 1303 	umull	r1, r3, r1, r3
 800112c:	08db      	lsrs	r3, r3, #3
 800112e:	b29b      	uxth	r3, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	4619      	mov	r1, r3
 8001134:	0149      	lsls	r1, r1, #5
 8001136:	1ac9      	subs	r1, r1, r3
 8001138:	0089      	lsls	r1, r1, #2
 800113a:	1acb      	subs	r3, r1, r3
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4413      	add	r3, r2
 8001142:	b2db      	uxtb	r3, r3
 8001144:	3330      	adds	r3, #48	; 0x30
 8001146:	b2da      	uxtb	r2, r3
 8001148:	4b4c      	ldr	r3, [pc, #304]	; (800127c <Request_return_system_state+0x1c8>)
 800114a:	709a      	strb	r2, [r3, #2]

			ret_param1[0] = MF_param1/100 + 48 ; // hundred
 800114c:	4b4e      	ldr	r3, [pc, #312]	; (8001288 <Request_return_system_state+0x1d4>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	4a49      	ldr	r2, [pc, #292]	; (8001278 <Request_return_system_state+0x1c4>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	b29b      	uxth	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	3330      	adds	r3, #48	; 0x30
 800115e:	b2da      	uxtb	r2, r3
 8001160:	4b4a      	ldr	r3, [pc, #296]	; (800128c <Request_return_system_state+0x1d8>)
 8001162:	701a      	strb	r2, [r3, #0]
			ret_param1[1] = (MF_param1 -(MF_param1/100)*100)/10 + 48 ; //tens
 8001164:	4b48      	ldr	r3, [pc, #288]	; (8001288 <Request_return_system_state+0x1d4>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	4b47      	ldr	r3, [pc, #284]	; (8001288 <Request_return_system_state+0x1d4>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	4a42      	ldr	r2, [pc, #264]	; (8001278 <Request_return_system_state+0x1c4>)
 8001170:	fba2 2303 	umull	r2, r3, r2, r3
 8001174:	095b      	lsrs	r3, r3, #5
 8001176:	b29b      	uxth	r3, r3
 8001178:	461a      	mov	r2, r3
 800117a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	440b      	add	r3, r1
 8001184:	4a3e      	ldr	r2, [pc, #248]	; (8001280 <Request_return_system_state+0x1cc>)
 8001186:	fb82 1203 	smull	r1, r2, r2, r3
 800118a:	1092      	asrs	r2, r2, #2
 800118c:	17db      	asrs	r3, r3, #31
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	3330      	adds	r3, #48	; 0x30
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b3d      	ldr	r3, [pc, #244]	; (800128c <Request_return_system_state+0x1d8>)
 8001198:	705a      	strb	r2, [r3, #1]
			ret_param1[2] = (MF_param1 - (MF_param1/10)*10) + 48 ;  //units
 800119a:	4b3b      	ldr	r3, [pc, #236]	; (8001288 <Request_return_system_state+0x1d4>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b39      	ldr	r3, [pc, #228]	; (8001288 <Request_return_system_state+0x1d4>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	4937      	ldr	r1, [pc, #220]	; (8001284 <Request_return_system_state+0x1d0>)
 80011a6:	fba1 1303 	umull	r1, r3, r1, r3
 80011aa:	08db      	lsrs	r3, r3, #3
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	4619      	mov	r1, r3
 80011b2:	0149      	lsls	r1, r1, #5
 80011b4:	1ac9      	subs	r1, r1, r3
 80011b6:	0089      	lsls	r1, r1, #2
 80011b8:	1acb      	subs	r3, r1, r3
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	4413      	add	r3, r2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	3330      	adds	r3, #48	; 0x30
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b31      	ldr	r3, [pc, #196]	; (800128c <Request_return_system_state+0x1d8>)
 80011c8:	709a      	strb	r2, [r3, #2]

			if(custom_morse_msg_rcvd == 1){
 80011ca:	4b31      	ldr	r3, [pc, #196]	; (8001290 <Request_return_system_state+0x1dc>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d10c      	bne.n	80011ec <Request_return_system_state+0x138>
				ret_param2[0] = MF_param2[0]; // hundred
 80011d2:	4b30      	ldr	r3, [pc, #192]	; (8001294 <Request_return_system_state+0x1e0>)
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	4b30      	ldr	r3, [pc, #192]	; (8001298 <Request_return_system_state+0x1e4>)
 80011d8:	701a      	strb	r2, [r3, #0]
				ret_param2[1] = MF_param2[1] ; //tens
 80011da:	4b2e      	ldr	r3, [pc, #184]	; (8001294 <Request_return_system_state+0x1e0>)
 80011dc:	785a      	ldrb	r2, [r3, #1]
 80011de:	4b2e      	ldr	r3, [pc, #184]	; (8001298 <Request_return_system_state+0x1e4>)
 80011e0:	705a      	strb	r2, [r3, #1]
				ret_param2[2] = MF_param2[2] ; //units
 80011e2:	4b2c      	ldr	r3, [pc, #176]	; (8001294 <Request_return_system_state+0x1e0>)
 80011e4:	789a      	ldrb	r2, [r3, #2]
 80011e6:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <Request_return_system_state+0x1e4>)
 80011e8:	709a      	strb	r2, [r3, #2]
 80011ea:	e1d7      	b.n	800159c <Request_return_system_state+0x4e8>
			}else{
				ret_param2[0] = param2/100 + 48;  // hundred
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <Request_return_system_state+0x1e8>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	4a21      	ldr	r2, [pc, #132]	; (8001278 <Request_return_system_state+0x1c4>)
 80011f2:	fba2 2303 	umull	r2, r3, r2, r3
 80011f6:	095b      	lsrs	r3, r3, #5
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	3330      	adds	r3, #48	; 0x30
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	4b25      	ldr	r3, [pc, #148]	; (8001298 <Request_return_system_state+0x1e4>)
 8001202:	701a      	strb	r2, [r3, #0]
				ret_param2[1] =	(param2 -(param2/100)*100)/10 + 48 ; //tens
 8001204:	4b25      	ldr	r3, [pc, #148]	; (800129c <Request_return_system_state+0x1e8>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	4b24      	ldr	r3, [pc, #144]	; (800129c <Request_return_system_state+0x1e8>)
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	4a1a      	ldr	r2, [pc, #104]	; (8001278 <Request_return_system_state+0x1c4>)
 8001210:	fba2 2303 	umull	r2, r3, r2, r3
 8001214:	095b      	lsrs	r3, r3, #5
 8001216:	b29b      	uxth	r3, r3
 8001218:	461a      	mov	r2, r3
 800121a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800121e:	fb02 f303 	mul.w	r3, r2, r3
 8001222:	440b      	add	r3, r1
 8001224:	4a16      	ldr	r2, [pc, #88]	; (8001280 <Request_return_system_state+0x1cc>)
 8001226:	fb82 1203 	smull	r1, r2, r2, r3
 800122a:	1092      	asrs	r2, r2, #2
 800122c:	17db      	asrs	r3, r3, #31
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	b2db      	uxtb	r3, r3
 8001232:	3330      	adds	r3, #48	; 0x30
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <Request_return_system_state+0x1e4>)
 8001238:	705a      	strb	r2, [r3, #1]
				ret_param2[2] = (param2 - (param2/10)*10) + 48 ; //units
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <Request_return_system_state+0x1e8>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <Request_return_system_state+0x1e8>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	490f      	ldr	r1, [pc, #60]	; (8001284 <Request_return_system_state+0x1d0>)
 8001246:	fba1 1303 	umull	r1, r3, r1, r3
 800124a:	08db      	lsrs	r3, r3, #3
 800124c:	b29b      	uxth	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	4619      	mov	r1, r3
 8001252:	0149      	lsls	r1, r1, #5
 8001254:	1ac9      	subs	r1, r1, r3
 8001256:	0089      	lsls	r1, r1, #2
 8001258:	1acb      	subs	r3, r1, r3
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	b2db      	uxtb	r3, r3
 800125e:	4413      	add	r3, r2
 8001260:	b2db      	uxtb	r3, r3
 8001262:	3330      	adds	r3, #48	; 0x30
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <Request_return_system_state+0x1e4>)
 8001268:	709a      	strb	r2, [r3, #2]
 800126a:	e197      	b.n	800159c <Request_return_system_state+0x4e8>
 800126c:	2000242c 	.word	0x2000242c
 8001270:	20000030 	.word	0x20000030
 8001274:	2000242e 	.word	0x2000242e
 8001278:	51eb851f 	.word	0x51eb851f
 800127c:	2000005c 	.word	0x2000005c
 8001280:	66666667 	.word	0x66666667
 8001284:	cccccccd 	.word	0xcccccccd
 8001288:	20002430 	.word	0x20002430
 800128c:	20000060 	.word	0x20000060
 8001290:	20002425 	.word	0x20002425
 8001294:	20000054 	.word	0x20000054
 8001298:	20000064 	.word	0x20000064
 800129c:	2000242a 	.word	0x2000242a
			}


		}
		// emergency mode
		else if(set_or_ret_sys_state[3] == 'E'){
 80012a0:	4b51      	ldr	r3, [pc, #324]	; (80013e8 <Request_return_system_state+0x334>)
 80012a2:	78db      	ldrb	r3, [r3, #3]
 80012a4:	2b45      	cmp	r3, #69	; 0x45
 80012a6:	f040 80b7 	bne.w	8001418 <Request_return_system_state+0x364>

			ret_state[0] = ME_state/100 + 48 ; // hundred
 80012aa:	4b50      	ldr	r3, [pc, #320]	; (80013ec <Request_return_system_state+0x338>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	4a50      	ldr	r2, [pc, #320]	; (80013f0 <Request_return_system_state+0x33c>)
 80012b0:	fba2 2303 	umull	r2, r3, r2, r3
 80012b4:	095b      	lsrs	r3, r3, #5
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	3330      	adds	r3, #48	; 0x30
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b4d      	ldr	r3, [pc, #308]	; (80013f4 <Request_return_system_state+0x340>)
 80012c0:	701a      	strb	r2, [r3, #0]
			ret_state[1] = (ME_state -(ME_state/100)*100)/10 + 48 ; //tens
 80012c2:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <Request_return_system_state+0x338>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	4619      	mov	r1, r3
 80012c8:	4b48      	ldr	r3, [pc, #288]	; (80013ec <Request_return_system_state+0x338>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	4a48      	ldr	r2, [pc, #288]	; (80013f0 <Request_return_system_state+0x33c>)
 80012ce:	fba2 2303 	umull	r2, r3, r2, r3
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80012dc:	fb02 f303 	mul.w	r3, r2, r3
 80012e0:	440b      	add	r3, r1
 80012e2:	4a45      	ldr	r2, [pc, #276]	; (80013f8 <Request_return_system_state+0x344>)
 80012e4:	fb82 1203 	smull	r1, r2, r2, r3
 80012e8:	1092      	asrs	r2, r2, #2
 80012ea:	17db      	asrs	r3, r3, #31
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	3330      	adds	r3, #48	; 0x30
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <Request_return_system_state+0x340>)
 80012f6:	705a      	strb	r2, [r3, #1]
			ret_state[2] = (ME_state - (ME_state/10)*10) + 48 ;  //units
 80012f8:	4b3c      	ldr	r3, [pc, #240]	; (80013ec <Request_return_system_state+0x338>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <Request_return_system_state+0x338>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	493e      	ldr	r1, [pc, #248]	; (80013fc <Request_return_system_state+0x348>)
 8001304:	fba1 1303 	umull	r1, r3, r1, r3
 8001308:	08db      	lsrs	r3, r3, #3
 800130a:	b29b      	uxth	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4619      	mov	r1, r3
 8001310:	0149      	lsls	r1, r1, #5
 8001312:	1ac9      	subs	r1, r1, r3
 8001314:	0089      	lsls	r1, r1, #2
 8001316:	1acb      	subs	r3, r1, r3
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	b2db      	uxtb	r3, r3
 800131c:	4413      	add	r3, r2
 800131e:	b2db      	uxtb	r3, r3
 8001320:	3330      	adds	r3, #48	; 0x30
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b33      	ldr	r3, [pc, #204]	; (80013f4 <Request_return_system_state+0x340>)
 8001326:	709a      	strb	r2, [r3, #2]

			ret_param1[0] = ME_param1/100 + 48 ; // hundred
 8001328:	4b35      	ldr	r3, [pc, #212]	; (8001400 <Request_return_system_state+0x34c>)
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	4a30      	ldr	r2, [pc, #192]	; (80013f0 <Request_return_system_state+0x33c>)
 800132e:	fba2 2303 	umull	r2, r3, r2, r3
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	b29b      	uxth	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	3330      	adds	r3, #48	; 0x30
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b31      	ldr	r3, [pc, #196]	; (8001404 <Request_return_system_state+0x350>)
 800133e:	701a      	strb	r2, [r3, #0]
			ret_param1[1] = (ME_param1 -(ME_param1/100)*100)/10 + 48 ; //tens
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <Request_return_system_state+0x34c>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <Request_return_system_state+0x34c>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	4a29      	ldr	r2, [pc, #164]	; (80013f0 <Request_return_system_state+0x33c>)
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	095b      	lsrs	r3, r3, #5
 8001352:	b29b      	uxth	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	440b      	add	r3, r1
 8001360:	4a25      	ldr	r2, [pc, #148]	; (80013f8 <Request_return_system_state+0x344>)
 8001362:	fb82 1203 	smull	r1, r2, r2, r3
 8001366:	1092      	asrs	r2, r2, #2
 8001368:	17db      	asrs	r3, r3, #31
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	3330      	adds	r3, #48	; 0x30
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b24      	ldr	r3, [pc, #144]	; (8001404 <Request_return_system_state+0x350>)
 8001374:	705a      	strb	r2, [r3, #1]
			ret_param1[2] = (ME_param1 - (ME_param1/10)*10) + 48 ;  //units
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <Request_return_system_state+0x34c>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	4b20      	ldr	r3, [pc, #128]	; (8001400 <Request_return_system_state+0x34c>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	491e      	ldr	r1, [pc, #120]	; (80013fc <Request_return_system_state+0x348>)
 8001382:	fba1 1303 	umull	r1, r3, r1, r3
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	b29b      	uxth	r3, r3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	4619      	mov	r1, r3
 800138e:	0149      	lsls	r1, r1, #5
 8001390:	1ac9      	subs	r1, r1, r3
 8001392:	0089      	lsls	r1, r1, #2
 8001394:	1acb      	subs	r3, r1, r3
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	b2db      	uxtb	r3, r3
 800139a:	4413      	add	r3, r2
 800139c:	b2db      	uxtb	r3, r3
 800139e:	3330      	adds	r3, #48	; 0x30
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <Request_return_system_state+0x350>)
 80013a4:	709a      	strb	r2, [r3, #2]

			// check whether param2 was 0 OR CUSTOM morse message recvd
			if(strcmp(ME_param2, "000") == 0){
 80013a6:	4918      	ldr	r1, [pc, #96]	; (8001408 <Request_return_system_state+0x354>)
 80013a8:	4818      	ldr	r0, [pc, #96]	; (800140c <Request_return_system_state+0x358>)
 80013aa:	f7fe ff19 	bl	80001e0 <strcmp>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10c      	bne.n	80013ce <Request_return_system_state+0x31a>

				ret_param2[0] = ME_param2[0];
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <Request_return_system_state+0x358>)
 80013b6:	781a      	ldrb	r2, [r3, #0]
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <Request_return_system_state+0x35c>)
 80013ba:	701a      	strb	r2, [r3, #0]
				ret_param2[1] = ME_param2[1] ;
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <Request_return_system_state+0x358>)
 80013be:	785a      	ldrb	r2, [r3, #1]
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <Request_return_system_state+0x35c>)
 80013c2:	705a      	strb	r2, [r3, #1]
				ret_param2[2] = ME_param2[2] ;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <Request_return_system_state+0x358>)
 80013c6:	789a      	ldrb	r2, [r3, #2]
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <Request_return_system_state+0x35c>)
 80013ca:	709a      	strb	r2, [r3, #2]
 80013cc:	e0e6      	b.n	800159c <Request_return_system_state+0x4e8>

			}else{
				ret_param2[0] = Custom_Morse_Msg[0];
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <Request_return_system_state+0x360>)
 80013d0:	781a      	ldrb	r2, [r3, #0]
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <Request_return_system_state+0x35c>)
 80013d4:	701a      	strb	r2, [r3, #0]
				ret_param2[1] = Custom_Morse_Msg[1] ;
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <Request_return_system_state+0x360>)
 80013d8:	785a      	ldrb	r2, [r3, #1]
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <Request_return_system_state+0x35c>)
 80013dc:	705a      	strb	r2, [r3, #1]
				ret_param2[2] = Custom_Morse_Msg[2] ;
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <Request_return_system_state+0x360>)
 80013e0:	789a      	ldrb	r2, [r3, #2]
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <Request_return_system_state+0x35c>)
 80013e4:	709a      	strb	r2, [r3, #2]
 80013e6:	e0d9      	b.n	800159c <Request_return_system_state+0x4e8>
 80013e8:	20000030 	.word	0x20000030
 80013ec:	20002432 	.word	0x20002432
 80013f0:	51eb851f 	.word	0x51eb851f
 80013f4:	2000005c 	.word	0x2000005c
 80013f8:	66666667 	.word	0x66666667
 80013fc:	cccccccd 	.word	0xcccccccd
 8001400:	20002434 	.word	0x20002434
 8001404:	20000060 	.word	0x20000060
 8001408:	0800a568 	.word	0x0800a568
 800140c:	20000058 	.word	0x20000058
 8001410:	20000064 	.word	0x20000064
 8001414:	20000050 	.word	0x20000050
			}

		}
		// mood mode
		else{
			if(set_or_ret_sys_state[3] == 'M'){
 8001418:	4baa      	ldr	r3, [pc, #680]	; (80016c4 <Request_return_system_state+0x610>)
 800141a:	78db      	ldrb	r3, [r3, #3]
 800141c:	2b4d      	cmp	r3, #77	; 0x4d
 800141e:	f040 80bd 	bne.w	800159c <Request_return_system_state+0x4e8>

				ret_state[0] = MM_state/100 + 48 ; // hundred
 8001422:	4ba9      	ldr	r3, [pc, #676]	; (80016c8 <Request_return_system_state+0x614>)
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	4aa9      	ldr	r2, [pc, #676]	; (80016cc <Request_return_system_state+0x618>)
 8001428:	fba2 2303 	umull	r2, r3, r2, r3
 800142c:	095b      	lsrs	r3, r3, #5
 800142e:	b29b      	uxth	r3, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	3330      	adds	r3, #48	; 0x30
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4ba6      	ldr	r3, [pc, #664]	; (80016d0 <Request_return_system_state+0x61c>)
 8001438:	701a      	strb	r2, [r3, #0]
				ret_state[1] = (MM_state -(MM_state/100)*100)/10 + 48 ; //tens
 800143a:	4ba3      	ldr	r3, [pc, #652]	; (80016c8 <Request_return_system_state+0x614>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	4619      	mov	r1, r3
 8001440:	4ba1      	ldr	r3, [pc, #644]	; (80016c8 <Request_return_system_state+0x614>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	4aa1      	ldr	r2, [pc, #644]	; (80016cc <Request_return_system_state+0x618>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	b29b      	uxth	r3, r3
 800144e:	461a      	mov	r2, r3
 8001450:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001454:	fb02 f303 	mul.w	r3, r2, r3
 8001458:	440b      	add	r3, r1
 800145a:	4a9e      	ldr	r2, [pc, #632]	; (80016d4 <Request_return_system_state+0x620>)
 800145c:	fb82 1203 	smull	r1, r2, r2, r3
 8001460:	1092      	asrs	r2, r2, #2
 8001462:	17db      	asrs	r3, r3, #31
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	3330      	adds	r3, #48	; 0x30
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b98      	ldr	r3, [pc, #608]	; (80016d0 <Request_return_system_state+0x61c>)
 800146e:	705a      	strb	r2, [r3, #1]
				ret_state[2] = (MM_state - (MM_state/10)*10) + 48 ;  //units
 8001470:	4b95      	ldr	r3, [pc, #596]	; (80016c8 <Request_return_system_state+0x614>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4b94      	ldr	r3, [pc, #592]	; (80016c8 <Request_return_system_state+0x614>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	4997      	ldr	r1, [pc, #604]	; (80016d8 <Request_return_system_state+0x624>)
 800147c:	fba1 1303 	umull	r1, r3, r1, r3
 8001480:	08db      	lsrs	r3, r3, #3
 8001482:	b29b      	uxth	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4619      	mov	r1, r3
 8001488:	0149      	lsls	r1, r1, #5
 800148a:	1ac9      	subs	r1, r1, r3
 800148c:	0089      	lsls	r1, r1, #2
 800148e:	1acb      	subs	r3, r1, r3
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4413      	add	r3, r2
 8001496:	b2db      	uxtb	r3, r3
 8001498:	3330      	adds	r3, #48	; 0x30
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b8c      	ldr	r3, [pc, #560]	; (80016d0 <Request_return_system_state+0x61c>)
 800149e:	709a      	strb	r2, [r3, #2]

				ret_param1[0] = MM_param1/100 + 48 ; // hundred
 80014a0:	4b8e      	ldr	r3, [pc, #568]	; (80016dc <Request_return_system_state+0x628>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	4a89      	ldr	r2, [pc, #548]	; (80016cc <Request_return_system_state+0x618>)
 80014a6:	fba2 2303 	umull	r2, r3, r2, r3
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	3330      	adds	r3, #48	; 0x30
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	4b8a      	ldr	r3, [pc, #552]	; (80016e0 <Request_return_system_state+0x62c>)
 80014b6:	701a      	strb	r2, [r3, #0]
				ret_param1[1] = (MM_param1 -(MM_param1/100)*100)/10 + 48 ; //tens
 80014b8:	4b88      	ldr	r3, [pc, #544]	; (80016dc <Request_return_system_state+0x628>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	4b87      	ldr	r3, [pc, #540]	; (80016dc <Request_return_system_state+0x628>)
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	4a82      	ldr	r2, [pc, #520]	; (80016cc <Request_return_system_state+0x618>)
 80014c4:	fba2 2303 	umull	r2, r3, r2, r3
 80014c8:	095b      	lsrs	r3, r3, #5
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80014d2:	fb02 f303 	mul.w	r3, r2, r3
 80014d6:	440b      	add	r3, r1
 80014d8:	4a7e      	ldr	r2, [pc, #504]	; (80016d4 <Request_return_system_state+0x620>)
 80014da:	fb82 1203 	smull	r1, r2, r2, r3
 80014de:	1092      	asrs	r2, r2, #2
 80014e0:	17db      	asrs	r3, r3, #31
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	3330      	adds	r3, #48	; 0x30
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b7d      	ldr	r3, [pc, #500]	; (80016e0 <Request_return_system_state+0x62c>)
 80014ec:	705a      	strb	r2, [r3, #1]
				ret_param1[2] = (MM_param1 - (MM_param1/10)*10) + 48 ;  //units
 80014ee:	4b7b      	ldr	r3, [pc, #492]	; (80016dc <Request_return_system_state+0x628>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b79      	ldr	r3, [pc, #484]	; (80016dc <Request_return_system_state+0x628>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	4977      	ldr	r1, [pc, #476]	; (80016d8 <Request_return_system_state+0x624>)
 80014fa:	fba1 1303 	umull	r1, r3, r1, r3
 80014fe:	08db      	lsrs	r3, r3, #3
 8001500:	b29b      	uxth	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4619      	mov	r1, r3
 8001506:	0149      	lsls	r1, r1, #5
 8001508:	1ac9      	subs	r1, r1, r3
 800150a:	0089      	lsls	r1, r1, #2
 800150c:	1acb      	subs	r3, r1, r3
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4413      	add	r3, r2
 8001514:	b2db      	uxtb	r3, r3
 8001516:	3330      	adds	r3, #48	; 0x30
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b71      	ldr	r3, [pc, #452]	; (80016e0 <Request_return_system_state+0x62c>)
 800151c:	709a      	strb	r2, [r3, #2]

				ret_param2[0] = MM_param2/100 + 48 ; // hundred
 800151e:	4b71      	ldr	r3, [pc, #452]	; (80016e4 <Request_return_system_state+0x630>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	4a6a      	ldr	r2, [pc, #424]	; (80016cc <Request_return_system_state+0x618>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	095b      	lsrs	r3, r3, #5
 800152a:	b29b      	uxth	r3, r3
 800152c:	b2db      	uxtb	r3, r3
 800152e:	3330      	adds	r3, #48	; 0x30
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4b6d      	ldr	r3, [pc, #436]	; (80016e8 <Request_return_system_state+0x634>)
 8001534:	701a      	strb	r2, [r3, #0]
				ret_param2[1] = (MM_param2 -(MM_param2/100)*100)/10 + 48 ; //tens
 8001536:	4b6b      	ldr	r3, [pc, #428]	; (80016e4 <Request_return_system_state+0x630>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	4619      	mov	r1, r3
 800153c:	4b69      	ldr	r3, [pc, #420]	; (80016e4 <Request_return_system_state+0x630>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	4a62      	ldr	r2, [pc, #392]	; (80016cc <Request_return_system_state+0x618>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	b29b      	uxth	r3, r3
 800154a:	461a      	mov	r2, r3
 800154c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001550:	fb02 f303 	mul.w	r3, r2, r3
 8001554:	440b      	add	r3, r1
 8001556:	4a5f      	ldr	r2, [pc, #380]	; (80016d4 <Request_return_system_state+0x620>)
 8001558:	fb82 1203 	smull	r1, r2, r2, r3
 800155c:	1092      	asrs	r2, r2, #2
 800155e:	17db      	asrs	r3, r3, #31
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	3330      	adds	r3, #48	; 0x30
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <Request_return_system_state+0x634>)
 800156a:	705a      	strb	r2, [r3, #1]
				ret_param2[2] = (MM_param2 - (MM_param2/10)*10) + 48 ;  //units
 800156c:	4b5d      	ldr	r3, [pc, #372]	; (80016e4 <Request_return_system_state+0x630>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4b5c      	ldr	r3, [pc, #368]	; (80016e4 <Request_return_system_state+0x630>)
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	4958      	ldr	r1, [pc, #352]	; (80016d8 <Request_return_system_state+0x624>)
 8001578:	fba1 1303 	umull	r1, r3, r1, r3
 800157c:	08db      	lsrs	r3, r3, #3
 800157e:	b29b      	uxth	r3, r3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4619      	mov	r1, r3
 8001584:	0149      	lsls	r1, r1, #5
 8001586:	1ac9      	subs	r1, r1, r3
 8001588:	0089      	lsls	r1, r1, #2
 800158a:	1acb      	subs	r3, r1, r3
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	b2db      	uxtb	r3, r3
 8001590:	4413      	add	r3, r2
 8001592:	b2db      	uxtb	r3, r3
 8001594:	3330      	adds	r3, #48	; 0x30
 8001596:	b2da      	uxtb	r2, r3
 8001598:	4b53      	ldr	r3, [pc, #332]	; (80016e8 <Request_return_system_state+0x634>)
 800159a:	709a      	strb	r2, [r3, #2]

			}
		}

		// construct message to return
		for(int i = 0; i<19  ; i++){
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	e0cc      	b.n	800173c <Request_return_system_state+0x688>
			switch(i){
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b12      	cmp	r3, #18
 80015a6:	f200 80c5 	bhi.w	8001734 <Request_return_system_state+0x680>
 80015aa:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <Request_return_system_state+0x4fc>)
 80015ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b0:	080015fd 	.word	0x080015fd
 80015b4:	08001609 	.word	0x08001609
 80015b8:	08001615 	.word	0x08001615
 80015bc:	08001621 	.word	0x08001621
 80015c0:	08001631 	.word	0x08001631
 80015c4:	0800163d 	.word	0x0800163d
 80015c8:	0800164d 	.word	0x0800164d
 80015cc:	0800165d 	.word	0x0800165d
 80015d0:	0800166d 	.word	0x0800166d
 80015d4:	08001679 	.word	0x08001679
 80015d8:	08001689 	.word	0x08001689
 80015dc:	08001699 	.word	0x08001699
 80015e0:	080016a9 	.word	0x080016a9
 80015e4:	080016b5 	.word	0x080016b5
 80015e8:	080016f1 	.word	0x080016f1
 80015ec:	08001701 	.word	0x08001701
 80015f0:	08001711 	.word	0x08001711
 80015f4:	0800171d 	.word	0x0800171d
 80015f8:	08001729 	.word	0x08001729
			case 0:
				value[i] ='#';
 80015fc:	4a3b      	ldr	r2, [pc, #236]	; (80016ec <Request_return_system_state+0x638>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	2223      	movs	r2, #35	; 0x23
 8001604:	701a      	strb	r2, [r3, #0]

				break ;
 8001606:	e096      	b.n	8001736 <Request_return_system_state+0x682>
			case 1:
				value[i] = ':' ;
 8001608:	4a38      	ldr	r2, [pc, #224]	; (80016ec <Request_return_system_state+0x638>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	223a      	movs	r2, #58	; 0x3a
 8001610:	701a      	strb	r2, [r3, #0]

				break ;
 8001612:	e090      	b.n	8001736 <Request_return_system_state+0x682>
			case 2:
				value[i] = 'M';
 8001614:	4a35      	ldr	r2, [pc, #212]	; (80016ec <Request_return_system_state+0x638>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	224d      	movs	r2, #77	; 0x4d
 800161c:	701a      	strb	r2, [r3, #0]

			break ;
 800161e:	e08a      	b.n	8001736 <Request_return_system_state+0x682>

			case 3:
				value[i] = set_or_ret_sys_state[3];
 8001620:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <Request_return_system_state+0x610>)
 8001622:	78d9      	ldrb	r1, [r3, #3]
 8001624:	4a31      	ldr	r2, [pc, #196]	; (80016ec <Request_return_system_state+0x638>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	460a      	mov	r2, r1
 800162c:	701a      	strb	r2, [r3, #0]

				break ;
 800162e:	e082      	b.n	8001736 <Request_return_system_state+0x682>
			case 4:
				value[i] = ':';
 8001630:	4a2e      	ldr	r2, [pc, #184]	; (80016ec <Request_return_system_state+0x638>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	223a      	movs	r2, #58	; 0x3a
 8001638:	701a      	strb	r2, [r3, #0]

				break ;
 800163a:	e07c      	b.n	8001736 <Request_return_system_state+0x682>
			case 5:
				value[i] = ret_state[0];
 800163c:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <Request_return_system_state+0x61c>)
 800163e:	7819      	ldrb	r1, [r3, #0]
 8001640:	4a2a      	ldr	r2, [pc, #168]	; (80016ec <Request_return_system_state+0x638>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	460a      	mov	r2, r1
 8001648:	701a      	strb	r2, [r3, #0]

			break ;
 800164a:	e074      	b.n	8001736 <Request_return_system_state+0x682>

			case 6:
				value[i] = ret_state[1];
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <Request_return_system_state+0x61c>)
 800164e:	7859      	ldrb	r1, [r3, #1]
 8001650:	4a26      	ldr	r2, [pc, #152]	; (80016ec <Request_return_system_state+0x638>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	460a      	mov	r2, r1
 8001658:	701a      	strb	r2, [r3, #0]

				break ;
 800165a:	e06c      	b.n	8001736 <Request_return_system_state+0x682>
			case 7:
				value[i] = ret_state[2];
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <Request_return_system_state+0x61c>)
 800165e:	7899      	ldrb	r1, [r3, #2]
 8001660:	4a22      	ldr	r2, [pc, #136]	; (80016ec <Request_return_system_state+0x638>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	460a      	mov	r2, r1
 8001668:	701a      	strb	r2, [r3, #0]

				break ;
 800166a:	e064      	b.n	8001736 <Request_return_system_state+0x682>
			case 8:
				value[i] =  ':';
 800166c:	4a1f      	ldr	r2, [pc, #124]	; (80016ec <Request_return_system_state+0x638>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	223a      	movs	r2, #58	; 0x3a
 8001674:	701a      	strb	r2, [r3, #0]

			break ;
 8001676:	e05e      	b.n	8001736 <Request_return_system_state+0x682>

			case 9:
				value[i] = ret_param1[0];
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <Request_return_system_state+0x62c>)
 800167a:	7819      	ldrb	r1, [r3, #0]
 800167c:	4a1b      	ldr	r2, [pc, #108]	; (80016ec <Request_return_system_state+0x638>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	460a      	mov	r2, r1
 8001684:	701a      	strb	r2, [r3, #0]

				break ;
 8001686:	e056      	b.n	8001736 <Request_return_system_state+0x682>
			case 10:
				value[i] = ret_param1[1];
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <Request_return_system_state+0x62c>)
 800168a:	7859      	ldrb	r1, [r3, #1]
 800168c:	4a17      	ldr	r2, [pc, #92]	; (80016ec <Request_return_system_state+0x638>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	460a      	mov	r2, r1
 8001694:	701a      	strb	r2, [r3, #0]

				break ;
 8001696:	e04e      	b.n	8001736 <Request_return_system_state+0x682>
			case 11:
				value[i] = ret_param1[2];
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <Request_return_system_state+0x62c>)
 800169a:	7899      	ldrb	r1, [r3, #2]
 800169c:	4a13      	ldr	r2, [pc, #76]	; (80016ec <Request_return_system_state+0x638>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	460a      	mov	r2, r1
 80016a4:	701a      	strb	r2, [r3, #0]

			break ;
 80016a6:	e046      	b.n	8001736 <Request_return_system_state+0x682>

			case 12:
				value[i] = ':';
 80016a8:	4a10      	ldr	r2, [pc, #64]	; (80016ec <Request_return_system_state+0x638>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	223a      	movs	r2, #58	; 0x3a
 80016b0:	701a      	strb	r2, [r3, #0]

				break ;
 80016b2:	e040      	b.n	8001736 <Request_return_system_state+0x682>
			case 13:
				value[i] = ret_param2[0];
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <Request_return_system_state+0x634>)
 80016b6:	7819      	ldrb	r1, [r3, #0]
 80016b8:	4a0c      	ldr	r2, [pc, #48]	; (80016ec <Request_return_system_state+0x638>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	460a      	mov	r2, r1
 80016c0:	701a      	strb	r2, [r3, #0]

				break ;
 80016c2:	e038      	b.n	8001736 <Request_return_system_state+0x682>
 80016c4:	20000030 	.word	0x20000030
 80016c8:	20002436 	.word	0x20002436
 80016cc:	51eb851f 	.word	0x51eb851f
 80016d0:	2000005c 	.word	0x2000005c
 80016d4:	66666667 	.word	0x66666667
 80016d8:	cccccccd 	.word	0xcccccccd
 80016dc:	20002438 	.word	0x20002438
 80016e0:	20000060 	.word	0x20000060
 80016e4:	2000243a 	.word	0x2000243a
 80016e8:	20000064 	.word	0x20000064
 80016ec:	2000243c 	.word	0x2000243c
			case 14:
				value[i] = ret_param2[1];
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <Request_return_system_state+0x6a8>)
 80016f2:	7859      	ldrb	r1, [r3, #1]
 80016f4:	4a1a      	ldr	r2, [pc, #104]	; (8001760 <Request_return_system_state+0x6ac>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	460a      	mov	r2, r1
 80016fc:	701a      	strb	r2, [r3, #0]

				break ;
 80016fe:	e01a      	b.n	8001736 <Request_return_system_state+0x682>

			case 15:
				value[i] = ret_param2[2];
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <Request_return_system_state+0x6a8>)
 8001702:	7899      	ldrb	r1, [r3, #2]
 8001704:	4a16      	ldr	r2, [pc, #88]	; (8001760 <Request_return_system_state+0x6ac>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	460a      	mov	r2, r1
 800170c:	701a      	strb	r2, [r3, #0]

				break ;
 800170e:	e012      	b.n	8001736 <Request_return_system_state+0x682>
			case 16:
				value[i] = ':';
 8001710:	4a13      	ldr	r2, [pc, #76]	; (8001760 <Request_return_system_state+0x6ac>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	223a      	movs	r2, #58	; 0x3a
 8001718:	701a      	strb	r2, [r3, #0]

					break ;
 800171a:	e00c      	b.n	8001736 <Request_return_system_state+0x682>
			case 17:
				value[i] = '$';
 800171c:	4a10      	ldr	r2, [pc, #64]	; (8001760 <Request_return_system_state+0x6ac>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	2224      	movs	r2, #36	; 0x24
 8001724:	701a      	strb	r2, [r3, #0]

				break ;
 8001726:	e006      	b.n	8001736 <Request_return_system_state+0x682>
			case 18:
				value[i] = '\n' ;
 8001728:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <Request_return_system_state+0x6ac>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	220a      	movs	r2, #10
 8001730:	701a      	strb	r2, [r3, #0]
				break;
 8001732:	e000      	b.n	8001736 <Request_return_system_state+0x682>

			default:
				break;
 8001734:	bf00      	nop
		for(int i = 0; i<19  ; i++){
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3301      	adds	r3, #1
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b12      	cmp	r3, #18
 8001740:	f77f af2f 	ble.w	80015a2 <Request_return_system_state+0x4ee>

			}
		}

		HAL_UART_Transmit_IT(&huart2, (uint8_t*)value, 19) ;
 8001744:	2213      	movs	r2, #19
 8001746:	4906      	ldr	r1, [pc, #24]	; (8001760 <Request_return_system_state+0x6ac>)
 8001748:	4806      	ldr	r0, [pc, #24]	; (8001764 <Request_return_system_state+0x6b0>)
 800174a:	f006 f8d9 	bl	8007900 <HAL_UART_Transmit_IT>



		READ_SYS = 0 ;
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <Request_return_system_state+0x6b4>)
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]
	}
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000064 	.word	0x20000064
 8001760:	2000243c 	.word	0x2000243c
 8001764:	20000354 	.word	0x20000354
 8001768:	2000242c 	.word	0x2000242c

0800176c <ascii_to_morse>:

void ascii_to_morse(char *str) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b0b4      	sub	sp, #208	; 0xd0
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
    int i;
    char *morse[] = {".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---",
 8001774:	4a97      	ldr	r2, [pc, #604]	; (80019d4 <ascii_to_morse+0x268>)
 8001776:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800177a:	4611      	mov	r1, r2
 800177c:	2290      	movs	r2, #144	; 0x90
 800177e:	4618      	mov	r0, r3
 8001780:	f007 fbf2 	bl	8008f68 <memcpy>
                     "...--", "....-", ".....", "-....", "--...", "---..", "----."};
    char c;

   // char temp[18] ;
    //char tempMorse[10] ;
    char MorseChar1[10] ={};
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
 8001788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	809a      	strh	r2, [r3, #4]
    char MorseChar2[10] ={};
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	f107 0318 	add.w	r3, r7, #24
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	809a      	strh	r2, [r3, #4]
    char MorseChar3[10] ={} ;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	809a      	strh	r2, [r3, #4]
    int tempLenByte2 ;
    int tempLenByte3 ;

    //int len ;

    for (i = 0; i < strlen(str); i++) {
 80017ae:	2300      	movs	r3, #0
 80017b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80017b4:	e0ff      	b.n	80019b6 <ascii_to_morse+0x24a>
        c = toupper(str[i]); // convert to uppercase for simplicity
 80017b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 80017c4:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80017c8:	3301      	adds	r3, #1
 80017ca:	4a83      	ldr	r2, [pc, #524]	; (80019d8 <ascii_to_morse+0x26c>)
 80017cc:	4413      	add	r3, r2
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d103      	bne.n	80017e0 <ascii_to_morse+0x74>
 80017d8:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80017dc:	3b20      	subs	r3, #32
 80017de:	e001      	b.n	80017e4 <ascii_to_morse+0x78>
 80017e0:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80017e4:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
        if (c >= 'A' && c <= 'Z') { // convert letters
 80017e8:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 80017ec:	2b40      	cmp	r3, #64	; 0x40
 80017ee:	d969      	bls.n	80018c4 <ascii_to_morse+0x158>
 80017f0:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 80017f4:	2b5a      	cmp	r3, #90	; 0x5a
 80017f6:	d865      	bhi.n	80018c4 <ascii_to_morse+0x158>
            printf("%s ", morse[c - 'A']);
 80017f8:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 80017fc:	3b41      	subs	r3, #65	; 0x41
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	33d0      	adds	r3, #208	; 0xd0
 8001802:	443b      	add	r3, r7
 8001804:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8001808:	4619      	mov	r1, r3
 800180a:	4874      	ldr	r0, [pc, #464]	; (80019dc <ascii_to_morse+0x270>)
 800180c:	f007 fbc2 	bl	8008f94 <iprintf>
            //length of morse char

            if(i == 0){  //character 1
 8001810:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001814:	2b00      	cmp	r3, #0
 8001816:	d117      	bne.n	8001848 <ascii_to_morse+0xdc>
                tempLenByte1 = sprintf(MorseChar1, "%s ",morse[c - 'A'] ) ;
 8001818:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800181c:	3b41      	subs	r3, #65	; 0x41
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	33d0      	adds	r3, #208	; 0xd0
 8001822:	443b      	add	r3, r7
 8001824:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 8001828:	f107 0320 	add.w	r3, r7, #32
 800182c:	496b      	ldr	r1, [pc, #428]	; (80019dc <ascii_to_morse+0x270>)
 800182e:	4618      	mov	r0, r3
 8001830:	f007 fbde 	bl	8008ff0 <siprintf>
 8001834:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
                strncat(MorseOut, MorseChar1, tempLenByte1) ;
 8001838:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800183c:	f107 0320 	add.w	r3, r7, #32
 8001840:	4619      	mov	r1, r3
 8001842:	4867      	ldr	r0, [pc, #412]	; (80019e0 <ascii_to_morse+0x274>)
 8001844:	f007 fbf4 	bl	8009030 <strncat>
            }
            if(i == 1){//character 2
 8001848:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800184c:	2b01      	cmp	r3, #1
 800184e:	d117      	bne.n	8001880 <ascii_to_morse+0x114>
                tempLenByte2 = sprintf(MorseChar2, "%s ", morse[c - 'A']) ;
 8001850:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8001854:	3b41      	subs	r3, #65	; 0x41
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	33d0      	adds	r3, #208	; 0xd0
 800185a:	443b      	add	r3, r7
 800185c:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	495d      	ldr	r1, [pc, #372]	; (80019dc <ascii_to_morse+0x270>)
 8001866:	4618      	mov	r0, r3
 8001868:	f007 fbc2 	bl	8008ff0 <siprintf>
 800186c:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
                strncat(MorseOut, MorseChar2, tempLenByte2) ;
 8001870:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	4859      	ldr	r0, [pc, #356]	; (80019e0 <ascii_to_morse+0x274>)
 800187c:	f007 fbd8 	bl	8009030 <strncat>

            }
            if(i == 2){//character 3
 8001880:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001884:	2b02      	cmp	r3, #2
 8001886:	f040 8091 	bne.w	80019ac <ascii_to_morse+0x240>
                tempLenByte3 = sprintf(MorseChar3, "%s ", morse[c - 'A']);
 800188a:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800188e:	3b41      	subs	r3, #65	; 0x41
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	33d0      	adds	r3, #208	; 0xd0
 8001894:	443b      	add	r3, r7
 8001896:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 800189a:	f107 0308 	add.w	r3, r7, #8
 800189e:	494f      	ldr	r1, [pc, #316]	; (80019dc <ascii_to_morse+0x270>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f007 fba5 	bl	8008ff0 <siprintf>
 80018a6:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
                strncat(MorseOut, MorseChar3, tempLenByte3) ;
 80018aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018ae:	f107 0308 	add.w	r3, r7, #8
 80018b2:	4619      	mov	r1, r3
 80018b4:	484a      	ldr	r0, [pc, #296]	; (80019e0 <ascii_to_morse+0x274>)
 80018b6:	f007 fbbb 	bl	8009030 <strncat>

                printf("Morse Array: %s\n", MorseOut) ;
 80018ba:	4949      	ldr	r1, [pc, #292]	; (80019e0 <ascii_to_morse+0x274>)
 80018bc:	4849      	ldr	r0, [pc, #292]	; (80019e4 <ascii_to_morse+0x278>)
 80018be:	f007 fb69 	bl	8008f94 <iprintf>
            if(i == 2){//character 3
 80018c2:	e073      	b.n	80019ac <ascii_to_morse+0x240>
            }

        } else if (c >= '0' && c <= '9') { // convert digits
 80018c4:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 80018c8:	2b2f      	cmp	r3, #47	; 0x2f
 80018ca:	d968      	bls.n	800199e <ascii_to_morse+0x232>
 80018cc:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 80018d0:	2b39      	cmp	r3, #57	; 0x39
 80018d2:	d864      	bhi.n	800199e <ascii_to_morse+0x232>
            printf("%s ", morse[c - '0' + 26]);
 80018d4:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 80018d8:	3b16      	subs	r3, #22
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	33d0      	adds	r3, #208	; 0xd0
 80018de:	443b      	add	r3, r7
 80018e0:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 80018e4:	4619      	mov	r1, r3
 80018e6:	483d      	ldr	r0, [pc, #244]	; (80019dc <ascii_to_morse+0x270>)
 80018e8:	f007 fb54 	bl	8008f94 <iprintf>

            if(i == 0){  //character 1
 80018ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d117      	bne.n	8001924 <ascii_to_morse+0x1b8>
                tempLenByte1 = sprintf(MorseChar1, "%s ",morse[c - '0' + 26] ) ;
 80018f4:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 80018f8:	3b16      	subs	r3, #22
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	33d0      	adds	r3, #208	; 0xd0
 80018fe:	443b      	add	r3, r7
 8001900:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 8001904:	f107 0320 	add.w	r3, r7, #32
 8001908:	4934      	ldr	r1, [pc, #208]	; (80019dc <ascii_to_morse+0x270>)
 800190a:	4618      	mov	r0, r3
 800190c:	f007 fb70 	bl	8008ff0 <siprintf>
 8001910:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

                strncat(MorseOut, MorseChar1, tempLenByte1) ;
 8001914:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001918:	f107 0320 	add.w	r3, r7, #32
 800191c:	4619      	mov	r1, r3
 800191e:	4830      	ldr	r0, [pc, #192]	; (80019e0 <ascii_to_morse+0x274>)
 8001920:	f007 fb86 	bl	8009030 <strncat>
            }
            if(i == 1){//character 2
 8001924:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001928:	2b01      	cmp	r3, #1
 800192a:	d117      	bne.n	800195c <ascii_to_morse+0x1f0>
                tempLenByte2 = sprintf(MorseChar2, "%s ",morse[c - '0' + 26]) ;
 800192c:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8001930:	3b16      	subs	r3, #22
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	33d0      	adds	r3, #208	; 0xd0
 8001936:	443b      	add	r3, r7
 8001938:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4926      	ldr	r1, [pc, #152]	; (80019dc <ascii_to_morse+0x270>)
 8001942:	4618      	mov	r0, r3
 8001944:	f007 fb54 	bl	8008ff0 <siprintf>
 8001948:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
                strncat(MorseOut, MorseChar2, tempLenByte2) ;
 800194c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4619      	mov	r1, r3
 8001956:	4822      	ldr	r0, [pc, #136]	; (80019e0 <ascii_to_morse+0x274>)
 8001958:	f007 fb6a 	bl	8009030 <strncat>

            }
            if(i == 2){//character 3
 800195c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001960:	2b02      	cmp	r3, #2
 8001962:	d123      	bne.n	80019ac <ascii_to_morse+0x240>
                tempLenByte3 = sprintf(MorseChar3, "%s ",morse[c - '0' + 26]);
 8001964:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8001968:	3b16      	subs	r3, #22
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	33d0      	adds	r3, #208	; 0xd0
 800196e:	443b      	add	r3, r7
 8001970:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 8001974:	f107 0308 	add.w	r3, r7, #8
 8001978:	4918      	ldr	r1, [pc, #96]	; (80019dc <ascii_to_morse+0x270>)
 800197a:	4618      	mov	r0, r3
 800197c:	f007 fb38 	bl	8008ff0 <siprintf>
 8001980:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
                strncat(MorseOut, MorseChar3, tempLenByte3) ;
 8001984:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001988:	f107 0308 	add.w	r3, r7, #8
 800198c:	4619      	mov	r1, r3
 800198e:	4814      	ldr	r0, [pc, #80]	; (80019e0 <ascii_to_morse+0x274>)
 8001990:	f007 fb4e 	bl	8009030 <strncat>

                printf("Morse Array: %s\n", MorseOut) ;
 8001994:	4912      	ldr	r1, [pc, #72]	; (80019e0 <ascii_to_morse+0x274>)
 8001996:	4813      	ldr	r0, [pc, #76]	; (80019e4 <ascii_to_morse+0x278>)
 8001998:	f007 fafc 	bl	8008f94 <iprintf>
            if(i == 2){//character 3
 800199c:	e006      	b.n	80019ac <ascii_to_morse+0x240>
            }

        } else if (c == ' ') { // word separator
 800199e:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 80019a2:	2b20      	cmp	r3, #32
 80019a4:	d102      	bne.n	80019ac <ascii_to_morse+0x240>
            printf(" ");
 80019a6:	2020      	movs	r0, #32
 80019a8:	f007 fb0c 	bl	8008fc4 <putchar>
    for (i = 0; i < strlen(str); i++) {
 80019ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019b0:	3301      	adds	r3, #1
 80019b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7fe fc1c 	bl	80001f4 <strlen>
 80019bc:	4602      	mov	r2, r0
 80019be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019c2:	429a      	cmp	r2, r3
 80019c4:	f63f aef7 	bhi.w	80017b6 <ascii_to_morse+0x4a>
        }
    }
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	37d0      	adds	r7, #208	; 0xd0
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	0800a5a0 	.word	0x0800a5a0
 80019d8:	0800a670 	.word	0x0800a670
 80019dc:	0800a588 	.word	0x0800a588
 80019e0:	2000240c 	.word	0x2000240c
 80019e4:	0800a58c 	.word	0x0800a58c

080019e8 <blinkMorseCode>:
    "--...",// 7
    "---..",// 8
    "----." // 9
};

void blinkMorseCode(char c) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
    if (c >= 'A' && c <= 'Z') {
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	2b40      	cmp	r3, #64	; 0x40
 80019f6:	d906      	bls.n	8001a06 <blinkMorseCode+0x1e>
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	2b5a      	cmp	r3, #90	; 0x5a
 80019fc:	d803      	bhi.n	8001a06 <blinkMorseCode+0x1e>
        c -= 'A';
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	3b41      	subs	r3, #65	; 0x41
 8001a02:	71fb      	strb	r3, [r7, #7]
 8001a04:	e008      	b.n	8001a18 <blinkMorseCode+0x30>
    } else if (c >= '0' && c <= '9') {
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	2b2f      	cmp	r3, #47	; 0x2f
 8001a0a:	d964      	bls.n	8001ad6 <blinkMorseCode+0xee>
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	2b39      	cmp	r3, #57	; 0x39
 8001a10:	d861      	bhi.n	8001ad6 <blinkMorseCode+0xee>
        c -= '0' - 26;
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	3b16      	subs	r3, #22
 8001a16:	71fb      	strb	r3, [r7, #7]
    } else {
        // Unsupported character, ignore
        return;
    }

    const char* morse = morseCodeTable[(int)c];
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	4a31      	ldr	r2, [pc, #196]	; (8001ae0 <blinkMorseCode+0xf8>)
 8001a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a20:	60fb      	str	r3, [r7, #12]
    if(space_between_letters ==0 ){
 8001a22:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <blinkMorseCode+0xfc>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d13f      	bne.n	8001aaa <blinkMorseCode+0xc2>
		while (*morse) {
 8001a2a:	e03a      	b.n	8001aa2 <blinkMorseCode+0xba>
			switch (*morse) {
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b2d      	cmp	r3, #45	; 0x2d
 8001a32:	d013      	beq.n	8001a5c <blinkMorseCode+0x74>
 8001a34:	2b2e      	cmp	r3, #46	; 0x2e
 8001a36:	d123      	bne.n	8001a80 <blinkMorseCode+0x98>
				case '.':
					htim2.Instance->CCR1= 512;
 8001a38:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <blinkMorseCode+0x100>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a40:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_Delay(DOT_DURATION);
 8001a42:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a46:	f001 faad 	bl	8002fa4 <HAL_Delay>
					htim2.Instance->CCR1= 0;
 8001a4a:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <blinkMorseCode+0x100>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_Delay(SYMBOL_SPACE);
 8001a52:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a56:	f001 faa5 	bl	8002fa4 <HAL_Delay>
					break;
 8001a5a:	e012      	b.n	8001a82 <blinkMorseCode+0x9a>
				case '-':
					htim2.Instance->CCR1= 512;;
 8001a5c:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <blinkMorseCode+0x100>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a64:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_Delay(DASH_DURATION);
 8001a66:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8001a6a:	f001 fa9b 	bl	8002fa4 <HAL_Delay>
					htim2.Instance->CCR1= 0;
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <blinkMorseCode+0x100>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2200      	movs	r2, #0
 8001a74:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_Delay(SYMBOL_SPACE);
 8001a76:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a7a:	f001 fa93 	bl	8002fa4 <HAL_Delay>
					break;
 8001a7e:	e000      	b.n	8001a82 <blinkMorseCode+0x9a>
				default:
					break;
 8001a80:	bf00      	nop
			}
			morse++;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	3301      	adds	r3, #1
 8001a86:	60fb      	str	r3, [r7, #12]
			if(*morse == '\0'){
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d108      	bne.n	8001aa2 <blinkMorseCode+0xba>
				space_between_letters = 1 ;
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <blinkMorseCode+0xfc>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
				space_between_letter_time =  HAL_GetTick() ;
 8001a96:	f001 fa79 	bl	8002f8c <HAL_GetTick>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4a13      	ldr	r2, [pc, #76]	; (8001aec <blinkMorseCode+0x104>)
 8001a9e:	6013      	str	r3, [r2, #0]

				break ;
 8001aa0:	e003      	b.n	8001aaa <blinkMorseCode+0xc2>
		while (*morse) {
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1c0      	bne.n	8001a2c <blinkMorseCode+0x44>
			}
		}
    }
//    HAL_Delay(LETTER_SPACE - SYMBOL_SPACE); // Additional space after letter
    if(space_between_letters == 1){
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <blinkMorseCode+0xfc>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d112      	bne.n	8001ad8 <blinkMorseCode+0xf0>
    	 if(HAL_GetTick() -  space_between_letter_time >= 3*time_unit){
 8001ab2:	f001 fa6b 	bl	8002f8c <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <blinkMorseCode+0x104>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	1ad2      	subs	r2, r2, r3
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <blinkMorseCode+0x108>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	440b      	add	r3, r1
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d304      	bcc.n	8001ad8 <blinkMorseCode+0xf0>
			space_between_letters = 0 ;
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <blinkMorseCode+0xfc>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
 8001ad4:	e000      	b.n	8001ad8 <blinkMorseCode+0xf0>
        return;
 8001ad6:	bf00      	nop

    	 }
    }

}
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000068 	.word	0x20000068
 8001ae4:	20002408 	.word	0x20002408
 8001ae8:	20000270 	.word	0x20000270
 8001aec:	20002404 	.word	0x20002404
 8001af0:	20000016 	.word	0x20000016

08001af4 <encodeAndBlink>:


char c ;
char MSG[10] = {} ;
void encodeAndBlink(const char* str){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	if(wordTransmitted==0){
 8001afc:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <encodeAndBlink+0xa4>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d12c      	bne.n	8001b5e <encodeAndBlink+0x6a>
		while(*str){
 8001b04:	e027      	b.n	8001b56 <encodeAndBlink+0x62>
			c = *str ;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <encodeAndBlink+0xa8>)
 8001b0c:	701a      	strb	r2, [r3, #0]
			blinkMorseCode(toupper(*str)) ;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	73fb      	strb	r3, [r7, #15]
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	3301      	adds	r3, #1
 8001b18:	4a21      	ldr	r2, [pc, #132]	; (8001ba0 <encodeAndBlink+0xac>)
 8001b1a:	4413      	add	r3, r2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d102      	bne.n	8001b2c <encodeAndBlink+0x38>
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	3b20      	subs	r3, #32
 8001b2a:	e000      	b.n	8001b2e <encodeAndBlink+0x3a>
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff59 	bl	80019e8 <blinkMorseCode>
			str++ ;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	607b      	str	r3, [r7, #4]

			if(*str == '\0'){
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d108      	bne.n	8001b56 <encodeAndBlink+0x62>
				wordTransmitted =1 ;
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <encodeAndBlink+0xa4>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
				morse_current_time= HAL_GetTick() ;
 8001b4a:	f001 fa1f 	bl	8002f8c <HAL_GetTick>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <encodeAndBlink+0xb0>)
 8001b52:	6013      	str	r3, [r2, #0]
				break;
 8001b54:	e003      	b.n	8001b5e <encodeAndBlink+0x6a>
		while(*str){
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1d3      	bne.n	8001b06 <encodeAndBlink+0x12>
			}
		}
	}
	// NEXT word delay

	if(wordTransmitted ==1){
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <encodeAndBlink+0xa4>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d113      	bne.n	8001b8e <encodeAndBlink+0x9a>
		timePassed = HAL_GetTick() - morse_current_time ;
 8001b66:	f001 fa11 	bl	8002f8c <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <encodeAndBlink+0xb0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <encodeAndBlink+0xb4>)
 8001b74:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick() - morse_current_time > 7*DOT_DURATION){
 8001b76:	f001 fa09 	bl	8002f8c <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <encodeAndBlink+0xb0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8001b86:	d902      	bls.n	8001b8e <encodeAndBlink+0x9a>
			wordTransmitted = 0 ;
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <encodeAndBlink+0xa4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	2000244f 	.word	0x2000244f
 8001b9c:	20002450 	.word	0x20002450
 8001ba0:	0800a670 	.word	0x0800a670
 8001ba4:	20002400 	.word	0x20002400
 8001ba8:	200023fc 	.word	0x200023fc

08001bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bb2:	f001 f991 	bl	8002ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bb6:	f000 f9a1 	bl	8001efc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bba:	f000 fc7b 	bl	80024b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bbe:	f000 fc5b 	bl	8002478 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001bc2:	f000 fc27 	bl	8002414 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001bc6:	f000 fa03 	bl	8001fd0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001bca:	f000 fab1 	bl	8002130 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bce:	f000 fb31 	bl	8002234 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001bd2:	f000 fba7 	bl	8002324 <MX_TIM4_Init>
  MX_I2C1_Init();
 8001bd6:	f000 fa6b 	bl	80020b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(200);
 8001bda:	20c8      	movs	r0, #200	; 0xc8
 8001bdc:	f001 f9e2 	bl	8002fa4 <HAL_Delay>
  HAL_UART_Transmit(&huart2, studentNum, 13, 150); //transmit student number
 8001be0:	2396      	movs	r3, #150	; 0x96
 8001be2:	220d      	movs	r2, #13
 8001be4:	4996      	ldr	r1, [pc, #600]	; (8001e40 <main+0x294>)
 8001be6:	4897      	ldr	r0, [pc, #604]	; (8001e44 <main+0x298>)
 8001be8:	f005 fe00 	bl	80077ec <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)recvd_char, 1);
 8001bec:	2201      	movs	r2, #1
 8001bee:	4996      	ldr	r1, [pc, #600]	; (8001e48 <main+0x29c>)
 8001bf0:	4894      	ldr	r0, [pc, #592]	; (8001e44 <main+0x298>)
 8001bf2:	f005 fee3 	bl	80079bc <HAL_UART_Receive_IT>

  //Startup ADC
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, adc_buf_len) ;
 8001bf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bfa:	4994      	ldr	r1, [pc, #592]	; (8001e4c <main+0x2a0>)
 8001bfc:	4894      	ldr	r0, [pc, #592]	; (8001e50 <main+0x2a4>)
 8001bfe:	f001 fc03 	bl	8003408 <HAL_ADC_Start_DMA>

  // TIM2_CH1 start PWM
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1) ;
 8001c02:	2100      	movs	r1, #0
 8001c04:	4893      	ldr	r0, [pc, #588]	; (8001e54 <main+0x2a8>)
 8001c06:	f004 fdc9 	bl	800679c <HAL_TIM_PWM_Start>
  // TIM2_CH4 start PWM - red LED
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) ;
 8001c0a:	210c      	movs	r1, #12
 8001c0c:	4891      	ldr	r0, [pc, #580]	; (8001e54 <main+0x2a8>)
 8001c0e:	f004 fdc5 	bl	800679c <HAL_TIM_PWM_Start>
  // TIM3_CH4 start PWM - GREEN LED
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001c12:	210c      	movs	r1, #12
 8001c14:	4890      	ldr	r0, [pc, #576]	; (8001e58 <main+0x2ac>)
 8001c16:	f004 fdc1 	bl	800679c <HAL_TIM_PWM_Start>
  // TIM4_CH1 start PWM - BLUE LED
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) ;
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	488f      	ldr	r0, [pc, #572]	; (8001e5c <main+0x2b0>)
 8001c1e:	f004 fdbd 	bl	800679c <HAL_TIM_PWM_Start>

  strobe_ticks  = HAL_GetTick() ;
 8001c22:	f001 f9b3 	bl	8002f8c <HAL_GetTick>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4a8d      	ldr	r2, [pc, #564]	; (8001e60 <main+0x2b4>)
 8001c2a:	6013      	str	r3, [r2, #0]
  morse_current_time = HAL_GetTick() ;
 8001c2c:	f001 f9ae 	bl	8002f8c <HAL_GetTick>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4a8c      	ldr	r2, [pc, #560]	; (8001e64 <main+0x2b8>)
 8001c34:	6013      	str	r3, [r2, #0]
  int readCha = 1;
 8001c36:	2301      	movs	r3, #1
 8001c38:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Turn LED ON/OFF
	  TURN_LED_ON_OFF() ;
 8001c3a:	f7fe ffe1 	bl	8000c00 <TURN_LED_ON_OFF>
	  // REAS sys state
	  Request_return_system_state() ;
 8001c3e:	f7ff fa39 	bl	80010b4 <Request_return_system_state>
	  // left button press to update system state (MF -> ME -> MM)
	  system_state_update() ;
 8001c42:	f7fe ff11 	bl	8000a68 <system_state_update>
	  //run adc and capture previous snapshot of ADC value and adc movement processing
	  adc_dma_val_processing();
 8001c46:	f7fe fe7f 	bl	8000948 <adc_dma_val_processing>

	  // read UART params
	  convert_UART_state_params_to_Int() ;
 8001c4a:	f7ff f877 	bl	8000d3c <convert_UART_state_params_to_Int>

	 // system state
	 if(button_count == 0 || start_up == 1 ){
 8001c4e:	4b86      	ldr	r3, [pc, #536]	; (8001e68 <main+0x2bc>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <main+0xb2>
 8001c56:	4b85      	ldr	r3, [pc, #532]	; (8001e6c <main+0x2c0>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d165      	bne.n	8001d2a <main+0x17e>

		 start_up = 0 ; //for default MF state
 8001c5e:	4b83      	ldr	r3, [pc, #524]	; (8001e6c <main+0x2c0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]

		 MF_mode_LED() ; // sets the corresponding mode LED
 8001c64:	f000 fcd0 	bl	8002608 <MF_mode_LED>
		 em_count=0;     // reset the emergency mode count
 8001c68:	4b81      	ldr	r3, [pc, #516]	; (8001e70 <main+0x2c4>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
		 em_default = 1; // to re-enter the EM state
 8001c6e:	4b81      	ldr	r3, [pc, #516]	; (8001e74 <main+0x2c8>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]

		if(LED_ON == 1){
 8001c74:	4b80      	ldr	r3, [pc, #512]	; (8001e78 <main+0x2cc>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	f040 8099 	bne.w	8001db0 <main+0x204>
			 // if LED_ON and SLIDER MOVED -> updated LED intensity
			if(update_led_via_ADC == 1 && UART_state_update == 0){
 8001c7e:	4b7f      	ldr	r3, [pc, #508]	; (8001e7c <main+0x2d0>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d111      	bne.n	8001caa <main+0xfe>
 8001c86:	4b7e      	ldr	r3, [pc, #504]	; (8001e80 <main+0x2d4>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10d      	bne.n	8001caa <main+0xfe>

				htim2.Instance->CCR1 =  LED_intensity ; // vary the duty cycle of the LED [1:512]
 8001c8e:	4b7d      	ldr	r3, [pc, #500]	; (8001e84 <main+0x2d8>)
 8001c90:	881a      	ldrh	r2, [r3, #0]
 8001c92:	4b70      	ldr	r3, [pc, #448]	; (8001e54 <main+0x2a8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	635a      	str	r2, [r3, #52]	; 0x34
				MF_state = LED_intensity ;
 8001c98:	4b7a      	ldr	r3, [pc, #488]	; (8001e84 <main+0x2d8>)
 8001c9a:	881a      	ldrh	r2, [r3, #0]
 8001c9c:	4b7a      	ldr	r3, [pc, #488]	; (8001e88 <main+0x2dc>)
 8001c9e:	801a      	strh	r2, [r3, #0]
				MF_param1 = param1  ;
 8001ca0:	4b7a      	ldr	r3, [pc, #488]	; (8001e8c <main+0x2e0>)
 8001ca2:	881a      	ldrh	r2, [r3, #0]
 8001ca4:	4b7a      	ldr	r3, [pc, #488]	; (8001e90 <main+0x2e4>)
 8001ca6:	801a      	strh	r2, [r3, #0]
 8001ca8:	e03e      	b.n	8001d28 <main+0x17c>
			}
			else if(UART_state_update == 1 && state > 0 && set_or_ret_sys_state[3] =='F' ){
 8001caa:	4b75      	ldr	r3, [pc, #468]	; (8001e80 <main+0x2d4>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d133      	bne.n	8001d1a <main+0x16e>
 8001cb2:	4b78      	ldr	r3, [pc, #480]	; (8001e94 <main+0x2e8>)
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d02f      	beq.n	8001d1a <main+0x16e>
 8001cba:	4b77      	ldr	r3, [pc, #476]	; (8001e98 <main+0x2ec>)
 8001cbc:	78db      	ldrb	r3, [r3, #3]
 8001cbe:	2b46      	cmp	r3, #70	; 0x46
 8001cc0:	d12b      	bne.n	8001d1a <main+0x16e>

				htim2.Instance->CCR1 = state ;
 8001cc2:	4b74      	ldr	r3, [pc, #464]	; (8001e94 <main+0x2e8>)
 8001cc4:	881a      	ldrh	r2, [r3, #0]
 8001cc6:	4b63      	ldr	r3, [pc, #396]	; (8001e54 <main+0x2a8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	635a      	str	r2, [r3, #52]	; 0x34

				MF_state = state ;  // for when sys request made
 8001ccc:	4b71      	ldr	r3, [pc, #452]	; (8001e94 <main+0x2e8>)
 8001cce:	881a      	ldrh	r2, [r3, #0]
 8001cd0:	4b6d      	ldr	r3, [pc, #436]	; (8001e88 <main+0x2dc>)
 8001cd2:	801a      	strh	r2, [r3, #0]
				MF_param1 = param1  ;
 8001cd4:	4b6d      	ldr	r3, [pc, #436]	; (8001e8c <main+0x2e0>)
 8001cd6:	881a      	ldrh	r2, [r3, #0]
 8001cd8:	4b6d      	ldr	r3, [pc, #436]	; (8001e90 <main+0x2e4>)
 8001cda:	801a      	strh	r2, [r3, #0]

				if(strcmp(Custom_Morse_Msg, "000") == 0){
 8001cdc:	496f      	ldr	r1, [pc, #444]	; (8001e9c <main+0x2f0>)
 8001cde:	4870      	ldr	r0, [pc, #448]	; (8001ea0 <main+0x2f4>)
 8001ce0:	f7fe fa7e 	bl	80001e0 <strcmp>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d107      	bne.n	8001cfa <main+0x14e>
					sprintf(ME_param2, "%d", param2) ;
 8001cea:	4b6e      	ldr	r3, [pc, #440]	; (8001ea4 <main+0x2f8>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	496d      	ldr	r1, [pc, #436]	; (8001ea8 <main+0x2fc>)
 8001cf2:	486e      	ldr	r0, [pc, #440]	; (8001eac <main+0x300>)
 8001cf4:	f007 f97c 	bl	8008ff0 <siprintf>
 8001cf8:	e00b      	b.n	8001d12 <main+0x166>

				}else{
					MF_param2[0] = Custom_Morse_Msg[0];
 8001cfa:	4b69      	ldr	r3, [pc, #420]	; (8001ea0 <main+0x2f4>)
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	4b6c      	ldr	r3, [pc, #432]	; (8001eb0 <main+0x304>)
 8001d00:	701a      	strb	r2, [r3, #0]
					MF_param2[1] = Custom_Morse_Msg[1] ;
 8001d02:	4b67      	ldr	r3, [pc, #412]	; (8001ea0 <main+0x2f4>)
 8001d04:	785a      	ldrb	r2, [r3, #1]
 8001d06:	4b6a      	ldr	r3, [pc, #424]	; (8001eb0 <main+0x304>)
 8001d08:	705a      	strb	r2, [r3, #1]
					MF_param2[2] = Custom_Morse_Msg[2] ;
 8001d0a:	4b65      	ldr	r3, [pc, #404]	; (8001ea0 <main+0x2f4>)
 8001d0c:	789a      	ldrb	r2, [r3, #2]
 8001d0e:	4b68      	ldr	r3, [pc, #416]	; (8001eb0 <main+0x304>)
 8001d10:	709a      	strb	r2, [r3, #2]
				}
				UART_state_update = 0;
 8001d12:	4b5b      	ldr	r3, [pc, #364]	; (8001e80 <main+0x2d4>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
 8001d18:	e006      	b.n	8001d28 <main+0x17c>
			}else{
				MF_state = htim2.Instance->CCR1;
 8001d1a:	4b4e      	ldr	r3, [pc, #312]	; (8001e54 <main+0x2a8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	4b59      	ldr	r3, [pc, #356]	; (8001e88 <main+0x2dc>)
 8001d24:	801a      	strh	r2, [r3, #0]
		if(LED_ON == 1){
 8001d26:	e043      	b.n	8001db0 <main+0x204>
 8001d28:	e042      	b.n	8001db0 <main+0x204>
			}

		}
	 }else if(button_count == 1 ){// right button system state updated
 8001d2a:	4b4f      	ldr	r3, [pc, #316]	; (8001e68 <main+0x2bc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d104      	bne.n	8001d3c <main+0x190>
		 ME_mode_LED() ; // sets the corresponding modes LED
 8001d32:	f000 fc87 	bl	8002644 <ME_mode_LED>

		 Emergency_Mode_State_Update() ;// set EM mode states
 8001d36:	f7ff f90f 	bl	8000f58 <Emergency_Mode_State_Update>
 8001d3a:	e039      	b.n	8001db0 <main+0x204>

	 }else{
		 if(button_count == 2){ // Mood Mode
 8001d3c:	4b4a      	ldr	r3, [pc, #296]	; (8001e68 <main+0x2bc>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d135      	bne.n	8001db0 <main+0x204>
			 // SET THE NECESSARY STATES
			 em_count=0; // reset the emergency mode state
 8001d44:	4b4a      	ldr	r3, [pc, #296]	; (8001e70 <main+0x2c4>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
			 em_default = 1; // to re-enter EM state
 8001d4a:	4b4a      	ldr	r3, [pc, #296]	; (8001e74 <main+0x2c8>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]

			 MM_mode_LED() ; //sets the corresponding modes LED
 8001d50:	f000 fc90 	bl	8002674 <MM_mode_LED>

			 Mood_Mode_State_Update() ; // update the necessary MM states
 8001d54:	f7ff f980 	bl	8001058 <Mood_Mode_State_Update>
			 if(LED_ON == 1){
 8001d58:	4b47      	ldr	r3, [pc, #284]	; (8001e78 <main+0x2cc>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d11b      	bne.n	8001d98 <main+0x1ec>

				 //red channel
				 htim2.Instance->CCR4 = R_channel_Intensity ;
 8001d60:	4b54      	ldr	r3, [pc, #336]	; (8001eb4 <main+0x308>)
 8001d62:	881a      	ldrh	r2, [r3, #0]
 8001d64:	4b3b      	ldr	r3, [pc, #236]	; (8001e54 <main+0x2a8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	641a      	str	r2, [r3, #64]	; 0x40
				 MM_state = R_channel_Intensity ;
 8001d6a:	4b52      	ldr	r3, [pc, #328]	; (8001eb4 <main+0x308>)
 8001d6c:	881a      	ldrh	r2, [r3, #0]
 8001d6e:	4b52      	ldr	r3, [pc, #328]	; (8001eb8 <main+0x30c>)
 8001d70:	801a      	strh	r2, [r3, #0]
				 // GREEN channel
				 htim3.Instance->CCR4 = G_channel_Intensity ;
 8001d72:	4b52      	ldr	r3, [pc, #328]	; (8001ebc <main+0x310>)
 8001d74:	881a      	ldrh	r2, [r3, #0]
 8001d76:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <main+0x2ac>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40
				 MM_param1 = G_channel_Intensity ;
 8001d7c:	4b4f      	ldr	r3, [pc, #316]	; (8001ebc <main+0x310>)
 8001d7e:	881a      	ldrh	r2, [r3, #0]
 8001d80:	4b4f      	ldr	r3, [pc, #316]	; (8001ec0 <main+0x314>)
 8001d82:	801a      	strh	r2, [r3, #0]
				 // BLUE channel
				 htim4.Instance->CCR1 = B_channel_Intensity ;
 8001d84:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <main+0x318>)
 8001d86:	881a      	ldrh	r2, [r3, #0]
 8001d88:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <main+0x2b0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	635a      	str	r2, [r3, #52]	; 0x34
				 MM_param2 = B_channel_Intensity ;
 8001d8e:	4b4d      	ldr	r3, [pc, #308]	; (8001ec4 <main+0x318>)
 8001d90:	881a      	ldrh	r2, [r3, #0]
 8001d92:	4b4d      	ldr	r3, [pc, #308]	; (8001ec8 <main+0x31c>)
 8001d94:	801a      	strh	r2, [r3, #0]
 8001d96:	e00b      	b.n	8001db0 <main+0x204>


			 }else{
				 // put all channels off
				 //red channel
				 htim2.Instance->CCR4 =  0;
 8001d98:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <main+0x2a8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	641a      	str	r2, [r3, #64]	; 0x40
				 // GREEN channel
				 htim3.Instance->CCR4 = 0 ;
 8001da0:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <main+0x2ac>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2200      	movs	r2, #0
 8001da6:	641a      	str	r2, [r3, #64]	; 0x40
				 // BLUE channel
				 htim4.Instance->CCR1 = 0 ;
 8001da8:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <main+0x2b0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2200      	movs	r2, #0
 8001dae:	635a      	str	r2, [r3, #52]	; 0x34
		 }
	 }


	 //EMERGENCY MODES
	  if(button_count ==1 ){
 8001db0:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <main+0x2bc>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	f040 8091 	bne.w	8001edc <main+0x330>
		// update emergency mode states
		right_button_state_update() ;
 8001dba:	f7fe fefd 	bl	8000bb8 <right_button_state_update>

		 if(em_count == 0 || em_default ==1){ //strobe wit default intensity
 8001dbe:	4b2c      	ldr	r3, [pc, #176]	; (8001e70 <main+0x2c4>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <main+0x222>
 8001dc6:	4b2b      	ldr	r3, [pc, #172]	; (8001e74 <main+0x2c8>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d112      	bne.n	8001df4 <main+0x248>
			 em_default = 0 ; //default state reached
 8001dce:	4b29      	ldr	r3, [pc, #164]	; (8001e74 <main+0x2c8>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2120      	movs	r1, #32
 8001dd8:	483c      	ldr	r0, [pc, #240]	; (8001ecc <main+0x320>)
 8001dda:	f002 fe1d 	bl	8004a18 <HAL_GPIO_WritePin>

			 if(LED_ON){ //LED_on =?
 8001dde:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <main+0x2cc>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8084 	beq.w	8001ef0 <main+0x344>
				 // strobe LED with provided on time
				 EM_mode_Strobe(strobe_delay) ;
 8001de8:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <main+0x324>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe ff55 	bl	8000c9c <EM_mode_Strobe>
			 if(LED_ON){ //LED_on =?
 8001df2:	e07d      	b.n	8001ef0 <main+0x344>
			 }
		 }
		 else if(em_count ==1){ // SOS MOSRE
 8001df4:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <main+0x2c4>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	f47f af1e 	bne.w	8001c3a <main+0x8e>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001dfe:	2201      	movs	r2, #1
 8001e00:	2120      	movs	r1, #32
 8001e02:	4832      	ldr	r0, [pc, #200]	; (8001ecc <main+0x320>)
 8001e04:	f002 fe08 	bl	8004a18 <HAL_GPIO_WritePin>

			 if(LED_ON){
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <main+0x2cc>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f43f af14 	beq.w	8001c3a <main+0x8e>

				 if(readCha == 1){
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d10e      	bne.n	8001e36 <main+0x28a>
					 ascii_to_morse("SOS") ;
 8001e18:	482e      	ldr	r0, [pc, #184]	; (8001ed4 <main+0x328>)
 8001e1a:	f7ff fca7 	bl	800176c <ascii_to_morse>
					 HAL_UART_Transmit_IT(&huart2, (uint8_t*)MorseOut, strlen(MorseOut)) ;
 8001e1e:	482e      	ldr	r0, [pc, #184]	; (8001ed8 <main+0x32c>)
 8001e20:	f7fe f9e8 	bl	80001f4 <strlen>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	492b      	ldr	r1, [pc, #172]	; (8001ed8 <main+0x32c>)
 8001e2c:	4805      	ldr	r0, [pc, #20]	; (8001e44 <main+0x298>)
 8001e2e:	f005 fd67 	bl	8007900 <HAL_UART_Transmit_IT>
					 readCha = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]

				 }

				 encodeAndBlink("SOS") ;
 8001e36:	4827      	ldr	r0, [pc, #156]	; (8001ed4 <main+0x328>)
 8001e38:	f7ff fe5c 	bl	8001af4 <encodeAndBlink>
 8001e3c:	e6fd      	b.n	8001c3a <main+0x8e>
 8001e3e:	bf00      	nop
 8001e40:	20000020 	.word	0x20000020
 8001e44:	20000354 	.word	0x20000354
 8001e48:	20002420 	.word	0x20002420
 8001e4c:	200003e4 	.word	0x200003e4
 8001e50:	20000188 	.word	0x20000188
 8001e54:	20000270 	.word	0x20000270
 8001e58:	200002bc 	.word	0x200002bc
 8001e5c:	20000308 	.word	0x20000308
 8001e60:	200023f4 	.word	0x200023f4
 8001e64:	20002400 	.word	0x20002400
 8001e68:	200003dc 	.word	0x200003dc
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	200003e0 	.word	0x200003e0
 8001e74:	20000001 	.word	0x20000001
 8001e78:	200023f3 	.word	0x200023f3
 8001e7c:	200023f2 	.word	0x200023f2
 8001e80:	20002424 	.word	0x20002424
 8001e84:	20000010 	.word	0x20000010
 8001e88:	2000242e 	.word	0x2000242e
 8001e8c:	20002428 	.word	0x20002428
 8001e90:	20002430 	.word	0x20002430
 8001e94:	20002426 	.word	0x20002426
 8001e98:	20000030 	.word	0x20000030
 8001e9c:	0800a568 	.word	0x0800a568
 8001ea0:	20000050 	.word	0x20000050
 8001ea4:	2000242a 	.word	0x2000242a
 8001ea8:	0800a630 	.word	0x0800a630
 8001eac:	20000058 	.word	0x20000058
 8001eb0:	20000054 	.word	0x20000054
 8001eb4:	20000018 	.word	0x20000018
 8001eb8:	20002436 	.word	0x20002436
 8001ebc:	2000001a 	.word	0x2000001a
 8001ec0:	20002438 	.word	0x20002438
 8001ec4:	2000001c 	.word	0x2000001c
 8001ec8:	2000243a 	.word	0x2000243a
 8001ecc:	48000400 	.word	0x48000400
 8001ed0:	20000012 	.word	0x20000012
 8001ed4:	0800a634 	.word	0x0800a634
 8001ed8:	2000240c 	.word	0x2000240c
				 }

			 }
		 }
		 else{
			 if(em_count == 2){ // CUSTOM MORSE
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <main+0x348>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	f47f aeaa 	bne.w	8001c3a <main+0x8e>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	2120      	movs	r1, #32
 8001eea:	4803      	ldr	r0, [pc, #12]	; (8001ef8 <main+0x34c>)
 8001eec:	f002 fd94 	bl	8004a18 <HAL_GPIO_WritePin>
	  TURN_LED_ON_OFF() ;
 8001ef0:	e6a3      	b.n	8001c3a <main+0x8e>
 8001ef2:	bf00      	nop
 8001ef4:	200003e0 	.word	0x200003e0
 8001ef8:	48000400 	.word	0x48000400

08001efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b0a6      	sub	sp, #152	; 0x98
 8001f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f06:	2228      	movs	r2, #40	; 0x28
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f007 f83a 	bl	8008f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f10:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	2258      	movs	r2, #88	; 0x58
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f007 f82c 	bl	8008f84 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f30:	2301      	movs	r3, #1
 8001f32:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f34:	2310      	movs	r3, #16
 8001f36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f48:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f56:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f002 febe 	bl	8004cdc <HAL_RCC_OscConfig>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001f66:	f000 fbb3 	bl	80026d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f6a:	230f      	movs	r3, #15
 8001f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f7a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f80:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f84:	2102      	movs	r1, #2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 fefc 	bl	8005d84 <HAL_RCC_ClockConfig>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001f92:	f000 fb9d 	bl	80026d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001f96:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <SystemClock_Config+0xd0>)
 8001f98:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f004 f91c 	bl	80061f0 <HAL_RCCEx_PeriphCLKConfig>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001fbe:	f000 fb87 	bl	80026d0 <Error_Handler>
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	3798      	adds	r7, #152	; 0x98
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	003000a2 	.word	0x003000a2

08001fd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	; 0x28
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001fd6:	f107 031c 	add.w	r3, r7, #28
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
 8001ff0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ff2:	4b2e      	ldr	r3, [pc, #184]	; (80020ac <MX_ADC1_Init+0xdc>)
 8001ff4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001ff8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001ffa:	4b2c      	ldr	r3, [pc, #176]	; (80020ac <MX_ADC1_Init+0xdc>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002000:	4b2a      	ldr	r3, [pc, #168]	; (80020ac <MX_ADC1_Init+0xdc>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002006:	4b29      	ldr	r3, [pc, #164]	; (80020ac <MX_ADC1_Init+0xdc>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800200c:	4b27      	ldr	r3, [pc, #156]	; (80020ac <MX_ADC1_Init+0xdc>)
 800200e:	2201      	movs	r2, #1
 8002010:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002012:	4b26      	ldr	r3, [pc, #152]	; (80020ac <MX_ADC1_Init+0xdc>)
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800201a:	4b24      	ldr	r3, [pc, #144]	; (80020ac <MX_ADC1_Init+0xdc>)
 800201c:	2200      	movs	r2, #0
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002020:	4b22      	ldr	r3, [pc, #136]	; (80020ac <MX_ADC1_Init+0xdc>)
 8002022:	2201      	movs	r2, #1
 8002024:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002026:	4b21      	ldr	r3, [pc, #132]	; (80020ac <MX_ADC1_Init+0xdc>)
 8002028:	2200      	movs	r2, #0
 800202a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800202c:	4b1f      	ldr	r3, [pc, #124]	; (80020ac <MX_ADC1_Init+0xdc>)
 800202e:	2201      	movs	r2, #1
 8002030:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002032:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <MX_ADC1_Init+0xdc>)
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800203a:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <MX_ADC1_Init+0xdc>)
 800203c:	2204      	movs	r2, #4
 800203e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002040:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <MX_ADC1_Init+0xdc>)
 8002042:	2200      	movs	r2, #0
 8002044:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002046:	4b19      	ldr	r3, [pc, #100]	; (80020ac <MX_ADC1_Init+0xdc>)
 8002048:	2200      	movs	r2, #0
 800204a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800204c:	4817      	ldr	r0, [pc, #92]	; (80020ac <MX_ADC1_Init+0xdc>)
 800204e:	f000 ffe1 	bl	8003014 <HAL_ADC_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8002058:	f000 fb3a 	bl	80026d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002060:	f107 031c 	add.w	r3, r7, #28
 8002064:	4619      	mov	r1, r3
 8002066:	4811      	ldr	r0, [pc, #68]	; (80020ac <MX_ADC1_Init+0xdc>)
 8002068:	f001 fdd6 	bl	8003c18 <HAL_ADCEx_MultiModeConfigChannel>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002072:	f000 fb2d 	bl	80026d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002076:	2301      	movs	r3, #1
 8002078:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800207a:	2301      	movs	r3, #1
 800207c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	4619      	mov	r1, r3
 8002092:	4806      	ldr	r0, [pc, #24]	; (80020ac <MX_ADC1_Init+0xdc>)
 8002094:	f001 fad4 	bl	8003640 <HAL_ADC_ConfigChannel>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800209e:	f000 fb17 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	3728      	adds	r7, #40	; 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000188 	.word	0x20000188

080020b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020b4:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <MX_I2C1_Init+0x74>)
 80020b6:	4a1c      	ldr	r2, [pc, #112]	; (8002128 <MX_I2C1_Init+0x78>)
 80020b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <MX_I2C1_Init+0x74>)
 80020bc:	4a1b      	ldr	r2, [pc, #108]	; (800212c <MX_I2C1_Init+0x7c>)
 80020be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80020c0:	4b18      	ldr	r3, [pc, #96]	; (8002124 <MX_I2C1_Init+0x74>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020c6:	4b17      	ldr	r3, [pc, #92]	; (8002124 <MX_I2C1_Init+0x74>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020cc:	4b15      	ldr	r3, [pc, #84]	; (8002124 <MX_I2C1_Init+0x74>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <MX_I2C1_Init+0x74>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <MX_I2C1_Init+0x74>)
 80020da:	2200      	movs	r2, #0
 80020dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <MX_I2C1_Init+0x74>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <MX_I2C1_Init+0x74>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020ea:	480e      	ldr	r0, [pc, #56]	; (8002124 <MX_I2C1_Init+0x74>)
 80020ec:	f002 fccf 	bl	8004a8e <HAL_I2C_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80020f6:	f000 faeb 	bl	80026d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020fa:	2100      	movs	r1, #0
 80020fc:	4809      	ldr	r0, [pc, #36]	; (8002124 <MX_I2C1_Init+0x74>)
 80020fe:	f002 fd55 	bl	8004bac <HAL_I2CEx_ConfigAnalogFilter>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002108:	f000 fae2 	bl	80026d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800210c:	2100      	movs	r1, #0
 800210e:	4805      	ldr	r0, [pc, #20]	; (8002124 <MX_I2C1_Init+0x74>)
 8002110:	f002 fd97 	bl	8004c42 <HAL_I2CEx_ConfigDigitalFilter>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800211a:	f000 fad9 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	2000021c 	.word	0x2000021c
 8002128:	40005400 	.word	0x40005400
 800212c:	2000090e 	.word	0x2000090e

08002130 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08e      	sub	sp, #56	; 0x38
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002136:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002144:	f107 031c 	add.w	r3, r7, #28
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002150:	463b      	mov	r3, r7
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	60da      	str	r2, [r3, #12]
 800215c:	611a      	str	r2, [r3, #16]
 800215e:	615a      	str	r2, [r3, #20]
 8002160:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002162:	4b33      	ldr	r3, [pc, #204]	; (8002230 <MX_TIM2_Init+0x100>)
 8002164:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002168:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36;
 800216a:	4b31      	ldr	r3, [pc, #196]	; (8002230 <MX_TIM2_Init+0x100>)
 800216c:	2224      	movs	r2, #36	; 0x24
 800216e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002170:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <MX_TIM2_Init+0x100>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 512;
 8002176:	4b2e      	ldr	r3, [pc, #184]	; (8002230 <MX_TIM2_Init+0x100>)
 8002178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800217c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800217e:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <MX_TIM2_Init+0x100>)
 8002180:	2200      	movs	r2, #0
 8002182:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002184:	4b2a      	ldr	r3, [pc, #168]	; (8002230 <MX_TIM2_Init+0x100>)
 8002186:	2200      	movs	r2, #0
 8002188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800218a:	4829      	ldr	r0, [pc, #164]	; (8002230 <MX_TIM2_Init+0x100>)
 800218c:	f004 fa4e 	bl	800662c <HAL_TIM_Base_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002196:	f000 fa9b 	bl	80026d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800219a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021a4:	4619      	mov	r1, r3
 80021a6:	4822      	ldr	r0, [pc, #136]	; (8002230 <MX_TIM2_Init+0x100>)
 80021a8:	f004 fd18 	bl	8006bdc <HAL_TIM_ConfigClockSource>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80021b2:	f000 fa8d 	bl	80026d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021b6:	481e      	ldr	r0, [pc, #120]	; (8002230 <MX_TIM2_Init+0x100>)
 80021b8:	f004 fa8f 	bl	80066da <HAL_TIM_PWM_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80021c2:	f000 fa85 	bl	80026d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021ce:	f107 031c 	add.w	r3, r7, #28
 80021d2:	4619      	mov	r1, r3
 80021d4:	4816      	ldr	r0, [pc, #88]	; (8002230 <MX_TIM2_Init+0x100>)
 80021d6:	f005 fa2f 	bl	8007638 <HAL_TIMEx_MasterConfigSynchronization>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80021e0:	f000 fa76 	bl	80026d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021e4:	2360      	movs	r3, #96	; 0x60
 80021e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021f4:	463b      	mov	r3, r7
 80021f6:	2200      	movs	r2, #0
 80021f8:	4619      	mov	r1, r3
 80021fa:	480d      	ldr	r0, [pc, #52]	; (8002230 <MX_TIM2_Init+0x100>)
 80021fc:	f004 fbda 	bl	80069b4 <HAL_TIM_PWM_ConfigChannel>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002206:	f000 fa63 	bl	80026d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800220a:	463b      	mov	r3, r7
 800220c:	220c      	movs	r2, #12
 800220e:	4619      	mov	r1, r3
 8002210:	4807      	ldr	r0, [pc, #28]	; (8002230 <MX_TIM2_Init+0x100>)
 8002212:	f004 fbcf 	bl	80069b4 <HAL_TIM_PWM_ConfigChannel>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800221c:	f000 fa58 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002220:	4803      	ldr	r0, [pc, #12]	; (8002230 <MX_TIM2_Init+0x100>)
 8002222:	f000 fb71 	bl	8002908 <HAL_TIM_MspPostInit>

}
 8002226:	bf00      	nop
 8002228:	3738      	adds	r7, #56	; 0x38
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000270 	.word	0x20000270

08002234 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08e      	sub	sp, #56	; 0x38
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800223a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	609a      	str	r2, [r3, #8]
 8002246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002254:	463b      	mov	r3, r7
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
 8002260:	611a      	str	r2, [r3, #16]
 8002262:	615a      	str	r2, [r3, #20]
 8002264:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002266:	4b2d      	ldr	r3, [pc, #180]	; (800231c <MX_TIM3_Init+0xe8>)
 8002268:	4a2d      	ldr	r2, [pc, #180]	; (8002320 <MX_TIM3_Init+0xec>)
 800226a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36;
 800226c:	4b2b      	ldr	r3, [pc, #172]	; (800231c <MX_TIM3_Init+0xe8>)
 800226e:	2224      	movs	r2, #36	; 0x24
 8002270:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002272:	4b2a      	ldr	r3, [pc, #168]	; (800231c <MX_TIM3_Init+0xe8>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 512;
 8002278:	4b28      	ldr	r3, [pc, #160]	; (800231c <MX_TIM3_Init+0xe8>)
 800227a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800227e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002280:	4b26      	ldr	r3, [pc, #152]	; (800231c <MX_TIM3_Init+0xe8>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002286:	4b25      	ldr	r3, [pc, #148]	; (800231c <MX_TIM3_Init+0xe8>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800228c:	4823      	ldr	r0, [pc, #140]	; (800231c <MX_TIM3_Init+0xe8>)
 800228e:	f004 f9cd 	bl	800662c <HAL_TIM_Base_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002298:	f000 fa1a 	bl	80026d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800229c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022a6:	4619      	mov	r1, r3
 80022a8:	481c      	ldr	r0, [pc, #112]	; (800231c <MX_TIM3_Init+0xe8>)
 80022aa:	f004 fc97 	bl	8006bdc <HAL_TIM_ConfigClockSource>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80022b4:	f000 fa0c 	bl	80026d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022b8:	4818      	ldr	r0, [pc, #96]	; (800231c <MX_TIM3_Init+0xe8>)
 80022ba:	f004 fa0e 	bl	80066da <HAL_TIM_PWM_Init>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80022c4:	f000 fa04 	bl	80026d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022cc:	2300      	movs	r3, #0
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022d0:	f107 031c 	add.w	r3, r7, #28
 80022d4:	4619      	mov	r1, r3
 80022d6:	4811      	ldr	r0, [pc, #68]	; (800231c <MX_TIM3_Init+0xe8>)
 80022d8:	f005 f9ae 	bl	8007638 <HAL_TIMEx_MasterConfigSynchronization>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80022e2:	f000 f9f5 	bl	80026d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022e6:	2360      	movs	r3, #96	; 0x60
 80022e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022f6:	463b      	mov	r3, r7
 80022f8:	220c      	movs	r2, #12
 80022fa:	4619      	mov	r1, r3
 80022fc:	4807      	ldr	r0, [pc, #28]	; (800231c <MX_TIM3_Init+0xe8>)
 80022fe:	f004 fb59 	bl	80069b4 <HAL_TIM_PWM_ConfigChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002308:	f000 f9e2 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800230c:	4803      	ldr	r0, [pc, #12]	; (800231c <MX_TIM3_Init+0xe8>)
 800230e:	f000 fafb 	bl	8002908 <HAL_TIM_MspPostInit>

}
 8002312:	bf00      	nop
 8002314:	3738      	adds	r7, #56	; 0x38
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	200002bc 	.word	0x200002bc
 8002320:	40000400 	.word	0x40000400

08002324 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08e      	sub	sp, #56	; 0x38
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800232a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002338:	f107 031c 	add.w	r3, r7, #28
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002344:	463b      	mov	r3, r7
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	609a      	str	r2, [r3, #8]
 800234e:	60da      	str	r2, [r3, #12]
 8002350:	611a      	str	r2, [r3, #16]
 8002352:	615a      	str	r2, [r3, #20]
 8002354:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002356:	4b2d      	ldr	r3, [pc, #180]	; (800240c <MX_TIM4_Init+0xe8>)
 8002358:	4a2d      	ldr	r2, [pc, #180]	; (8002410 <MX_TIM4_Init+0xec>)
 800235a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36;
 800235c:	4b2b      	ldr	r3, [pc, #172]	; (800240c <MX_TIM4_Init+0xe8>)
 800235e:	2224      	movs	r2, #36	; 0x24
 8002360:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002362:	4b2a      	ldr	r3, [pc, #168]	; (800240c <MX_TIM4_Init+0xe8>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002368:	4b28      	ldr	r3, [pc, #160]	; (800240c <MX_TIM4_Init+0xe8>)
 800236a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800236e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002370:	4b26      	ldr	r3, [pc, #152]	; (800240c <MX_TIM4_Init+0xe8>)
 8002372:	2200      	movs	r2, #0
 8002374:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002376:	4b25      	ldr	r3, [pc, #148]	; (800240c <MX_TIM4_Init+0xe8>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800237c:	4823      	ldr	r0, [pc, #140]	; (800240c <MX_TIM4_Init+0xe8>)
 800237e:	f004 f955 	bl	800662c <HAL_TIM_Base_Init>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002388:	f000 f9a2 	bl	80026d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800238c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002396:	4619      	mov	r1, r3
 8002398:	481c      	ldr	r0, [pc, #112]	; (800240c <MX_TIM4_Init+0xe8>)
 800239a:	f004 fc1f 	bl	8006bdc <HAL_TIM_ConfigClockSource>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80023a4:	f000 f994 	bl	80026d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80023a8:	4818      	ldr	r0, [pc, #96]	; (800240c <MX_TIM4_Init+0xe8>)
 80023aa:	f004 f996 	bl	80066da <HAL_TIM_PWM_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80023b4:	f000 f98c 	bl	80026d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023c0:	f107 031c 	add.w	r3, r7, #28
 80023c4:	4619      	mov	r1, r3
 80023c6:	4811      	ldr	r0, [pc, #68]	; (800240c <MX_TIM4_Init+0xe8>)
 80023c8:	f005 f936 	bl	8007638 <HAL_TIMEx_MasterConfigSynchronization>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80023d2:	f000 f97d 	bl	80026d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d6:	2360      	movs	r3, #96	; 0x60
 80023d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023de:	2300      	movs	r3, #0
 80023e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023e6:	463b      	mov	r3, r7
 80023e8:	2200      	movs	r2, #0
 80023ea:	4619      	mov	r1, r3
 80023ec:	4807      	ldr	r0, [pc, #28]	; (800240c <MX_TIM4_Init+0xe8>)
 80023ee:	f004 fae1 	bl	80069b4 <HAL_TIM_PWM_ConfigChannel>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80023f8:	f000 f96a 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80023fc:	4803      	ldr	r0, [pc, #12]	; (800240c <MX_TIM4_Init+0xe8>)
 80023fe:	f000 fa83 	bl	8002908 <HAL_TIM_MspPostInit>

}
 8002402:	bf00      	nop
 8002404:	3738      	adds	r7, #56	; 0x38
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000308 	.word	0x20000308
 8002410:	40000800 	.word	0x40000800

08002414 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002418:	4b15      	ldr	r3, [pc, #84]	; (8002470 <MX_USART2_UART_Init+0x5c>)
 800241a:	4a16      	ldr	r2, [pc, #88]	; (8002474 <MX_USART2_UART_Init+0x60>)
 800241c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800241e:	4b14      	ldr	r3, [pc, #80]	; (8002470 <MX_USART2_UART_Init+0x5c>)
 8002420:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <MX_USART2_UART_Init+0x5c>)
 8002428:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800242c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <MX_USART2_UART_Init+0x5c>)
 8002430:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002434:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002436:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <MX_USART2_UART_Init+0x5c>)
 8002438:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800243c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800243e:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <MX_USART2_UART_Init+0x5c>)
 8002440:	220c      	movs	r2, #12
 8002442:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <MX_USART2_UART_Init+0x5c>)
 8002446:	2200      	movs	r2, #0
 8002448:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <MX_USART2_UART_Init+0x5c>)
 800244c:	2200      	movs	r2, #0
 800244e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <MX_USART2_UART_Init+0x5c>)
 8002452:	2200      	movs	r2, #0
 8002454:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <MX_USART2_UART_Init+0x5c>)
 8002458:	2200      	movs	r2, #0
 800245a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800245c:	4804      	ldr	r0, [pc, #16]	; (8002470 <MX_USART2_UART_Init+0x5c>)
 800245e:	f005 f977 	bl	8007750 <HAL_UART_Init>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002468:	f000 f932 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000354 	.word	0x20000354
 8002474:	40004400 	.word	0x40004400

08002478 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <MX_DMA_Init+0x38>)
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <MX_DMA_Init+0x38>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6153      	str	r3, [r2, #20]
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <MX_DMA_Init+0x38>)
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002496:	2200      	movs	r2, #0
 8002498:	2100      	movs	r1, #0
 800249a:	200b      	movs	r0, #11
 800249c:	f001 feb9 	bl	8004212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80024a0:	200b      	movs	r0, #11
 80024a2:	f001 fed2 	bl	800424a <HAL_NVIC_EnableIRQ>

}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000

080024b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	; 0x28
 80024b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]
 80024c4:	609a      	str	r2, [r3, #8]
 80024c6:	60da      	str	r2, [r3, #12]
 80024c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ca:	4b4d      	ldr	r3, [pc, #308]	; (8002600 <MX_GPIO_Init+0x14c>)
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	4a4c      	ldr	r2, [pc, #304]	; (8002600 <MX_GPIO_Init+0x14c>)
 80024d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024d4:	6153      	str	r3, [r2, #20]
 80024d6:	4b4a      	ldr	r3, [pc, #296]	; (8002600 <MX_GPIO_Init+0x14c>)
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024e2:	4b47      	ldr	r3, [pc, #284]	; (8002600 <MX_GPIO_Init+0x14c>)
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	4a46      	ldr	r2, [pc, #280]	; (8002600 <MX_GPIO_Init+0x14c>)
 80024e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024ec:	6153      	str	r3, [r2, #20]
 80024ee:	4b44      	ldr	r3, [pc, #272]	; (8002600 <MX_GPIO_Init+0x14c>)
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fa:	4b41      	ldr	r3, [pc, #260]	; (8002600 <MX_GPIO_Init+0x14c>)
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	4a40      	ldr	r2, [pc, #256]	; (8002600 <MX_GPIO_Init+0x14c>)
 8002500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002504:	6153      	str	r3, [r2, #20]
 8002506:	4b3e      	ldr	r3, [pc, #248]	; (8002600 <MX_GPIO_Init+0x14c>)
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002512:	4b3b      	ldr	r3, [pc, #236]	; (8002600 <MX_GPIO_Init+0x14c>)
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	4a3a      	ldr	r2, [pc, #232]	; (8002600 <MX_GPIO_Init+0x14c>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800251c:	6153      	str	r3, [r2, #20]
 800251e:	4b38      	ldr	r3, [pc, #224]	; (8002600 <MX_GPIO_Init+0x14c>)
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002526:	607b      	str	r3, [r7, #4]
 8002528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D3_Pin|MCLR_Line_Pin|LED_D4_Pin|LED_D5_Pin, GPIO_PIN_RESET);
 800252a:	2200      	movs	r2, #0
 800252c:	f241 4130 	movw	r1, #5168	; 0x1430
 8002530:	4834      	ldr	r0, [pc, #208]	; (8002604 <MX_GPIO_Init+0x150>)
 8002532:	f002 fa71 	bl	8004a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET);
 8002536:	2200      	movs	r2, #0
 8002538:	f44f 7180 	mov.w	r1, #256	; 0x100
 800253c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002540:	f002 fa6a 	bl	8004a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002544:	23c0      	movs	r3, #192	; 0xc0
 8002546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002548:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800254c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800254e:	2301      	movs	r3, #1
 8002550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002552:	f107 0314 	add.w	r3, r7, #20
 8002556:	4619      	mov	r1, r3
 8002558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800255c:	f002 f8ba 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D3_Pin MCLR_Line_Pin LED_D4_Pin LED_D5_Pin */
  GPIO_InitStruct.Pin = LED_D3_Pin|MCLR_Line_Pin|LED_D4_Pin|LED_D5_Pin;
 8002560:	f241 4330 	movw	r3, #5168	; 0x1430
 8002564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002566:	2301      	movs	r3, #1
 8002568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256e:	2300      	movs	r3, #0
 8002570:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002572:	f107 0314 	add.w	r3, r7, #20
 8002576:	4619      	mov	r1, r3
 8002578:	4822      	ldr	r0, [pc, #136]	; (8002604 <MX_GPIO_Init+0x150>)
 800257a:	f002 f8ab 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800257e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002584:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	4619      	mov	r1, r3
 8002594:	481b      	ldr	r0, [pc, #108]	; (8002604 <MX_GPIO_Init+0x150>)
 8002596:	f002 f89d 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D2_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 800259a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800259e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a0:	2301      	movs	r3, #1
 80025a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a8:	2300      	movs	r3, #0
 80025aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4619      	mov	r1, r3
 80025b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b6:	f002 f88d 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80025c0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80025c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c6:	2301      	movs	r3, #1
 80025c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4619      	mov	r1, r3
 80025d0:	480c      	ldr	r0, [pc, #48]	; (8002604 <MX_GPIO_Init+0x150>)
 80025d2:	f002 f87f 	bl	80046d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2100      	movs	r1, #0
 80025da:	2017      	movs	r0, #23
 80025dc:	f001 fe19 	bl	8004212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80025e0:	2017      	movs	r0, #23
 80025e2:	f001 fe32 	bl	800424a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2100      	movs	r1, #0
 80025ea:	2028      	movs	r0, #40	; 0x28
 80025ec:	f001 fe11 	bl	8004212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025f0:	2028      	movs	r0, #40	; 0x28
 80025f2:	f001 fe2a 	bl	800424a <HAL_NVIC_EnableIRQ>

}
 80025f6:	bf00      	nop
 80025f8:	3728      	adds	r7, #40	; 0x28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	48000400 	.word	0x48000400

08002608 <MF_mode_LED>:

/* USER CODE BEGIN 4 */
// FUNCTIONS
void MF_mode_LED(){
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800260c:	2201      	movs	r2, #1
 800260e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002616:	f002 f9ff 	bl	8004a18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800261a:	2200      	movs	r2, #0
 800261c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002620:	4807      	ldr	r0, [pc, #28]	; (8002640 <MF_mode_LED+0x38>)
 8002622:	f002 f9f9 	bl	8004a18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002626:	2200      	movs	r2, #0
 8002628:	2110      	movs	r1, #16
 800262a:	4805      	ldr	r0, [pc, #20]	; (8002640 <MF_mode_LED+0x38>)
 800262c:	f002 f9f4 	bl	8004a18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002630:	2200      	movs	r2, #0
 8002632:	2120      	movs	r1, #32
 8002634:	4802      	ldr	r0, [pc, #8]	; (8002640 <MF_mode_LED+0x38>)
 8002636:	f002 f9ef 	bl	8004a18 <HAL_GPIO_WritePin>
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	48000400 	.word	0x48000400

08002644 <ME_mode_LED>:

void ME_mode_LED(){
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002648:	2200      	movs	r2, #0
 800264a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800264e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002652:	f002 f9e1 	bl	8004a18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8002656:	2201      	movs	r2, #1
 8002658:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800265c:	4804      	ldr	r0, [pc, #16]	; (8002670 <ME_mode_LED+0x2c>)
 800265e:	f002 f9db 	bl	8004a18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002662:	2200      	movs	r2, #0
 8002664:	2110      	movs	r1, #16
 8002666:	4802      	ldr	r0, [pc, #8]	; (8002670 <ME_mode_LED+0x2c>)
 8002668:	f002 f9d6 	bl	8004a18 <HAL_GPIO_WritePin>
}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	48000400 	.word	0x48000400

08002674 <MM_mode_LED>:

void MM_mode_LED(){
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002678:	2200      	movs	r2, #0
 800267a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800267e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002682:	f002 f9c9 	bl	8004a18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002686:	2200      	movs	r2, #0
 8002688:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800268c:	4807      	ldr	r0, [pc, #28]	; (80026ac <MM_mode_LED+0x38>)
 800268e:	f002 f9c3 	bl	8004a18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002692:	2201      	movs	r2, #1
 8002694:	2110      	movs	r1, #16
 8002696:	4805      	ldr	r0, [pc, #20]	; (80026ac <MM_mode_LED+0x38>)
 8002698:	f002 f9be 	bl	8004a18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800269c:	2200      	movs	r2, #0
 800269e:	2120      	movs	r1, #32
 80026a0:	4802      	ldr	r0, [pc, #8]	; (80026ac <MM_mode_LED+0x38>)
 80026a2:	f002 f9b9 	bl	8004a18 <HAL_GPIO_WritePin>
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	48000400 	.word	0x48000400

080026b0 <HAL_ADC_ConvCpltCallback>:


// adc buffer filled by dma circular sampling
// data should not be processed in the interrupt, it makes rest of the
// progam inaccessible
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	adc_conv_complete = 1 ;
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <HAL_ADC_ConvCpltCallback+0x1c>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]

}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	200023ee 	.word	0x200023ee

080026d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026d4:	b672      	cpsid	i
}
 80026d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026d8:	e7fe      	b.n	80026d8 <Error_Handler+0x8>
	...

080026dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e2:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <HAL_MspInit+0x44>)
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	4a0e      	ldr	r2, [pc, #56]	; (8002720 <HAL_MspInit+0x44>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6193      	str	r3, [r2, #24]
 80026ee:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <HAL_MspInit+0x44>)
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_MspInit+0x44>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	4a08      	ldr	r2, [pc, #32]	; (8002720 <HAL_MspInit+0x44>)
 8002700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002704:	61d3      	str	r3, [r2, #28]
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_MspInit+0x44>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002712:	2007      	movs	r0, #7
 8002714:	f001 fd72 	bl	80041fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40021000 	.word	0x40021000

08002724 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002744:	d14c      	bne.n	80027e0 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002746:	4b28      	ldr	r3, [pc, #160]	; (80027e8 <HAL_ADC_MspInit+0xc4>)
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	4a27      	ldr	r2, [pc, #156]	; (80027e8 <HAL_ADC_MspInit+0xc4>)
 800274c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002750:	6153      	str	r3, [r2, #20]
 8002752:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <HAL_ADC_MspInit+0xc4>)
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <HAL_ADC_MspInit+0xc4>)
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	4a21      	ldr	r2, [pc, #132]	; (80027e8 <HAL_ADC_MspInit+0xc4>)
 8002764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002768:	6153      	str	r3, [r2, #20]
 800276a:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <HAL_ADC_MspInit+0xc4>)
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002776:	2301      	movs	r3, #1
 8002778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800277a:	2303      	movs	r3, #3
 800277c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002782:	f107 0314 	add.w	r3, r7, #20
 8002786:	4619      	mov	r1, r3
 8002788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800278c:	f001 ffa2 	bl	80046d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002790:	4b16      	ldr	r3, [pc, #88]	; (80027ec <HAL_ADC_MspInit+0xc8>)
 8002792:	4a17      	ldr	r2, [pc, #92]	; (80027f0 <HAL_ADC_MspInit+0xcc>)
 8002794:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <HAL_ADC_MspInit+0xc8>)
 8002798:	2200      	movs	r2, #0
 800279a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <HAL_ADC_MspInit+0xc8>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027a2:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_ADC_MspInit+0xc8>)
 80027a4:	2280      	movs	r2, #128	; 0x80
 80027a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027a8:	4b10      	ldr	r3, [pc, #64]	; (80027ec <HAL_ADC_MspInit+0xc8>)
 80027aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027b0:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <HAL_ADC_MspInit+0xc8>)
 80027b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <HAL_ADC_MspInit+0xc8>)
 80027ba:	2220      	movs	r2, #32
 80027bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027be:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_ADC_MspInit+0xc8>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027c4:	4809      	ldr	r0, [pc, #36]	; (80027ec <HAL_ADC_MspInit+0xc8>)
 80027c6:	f001 fd5a 	bl	800427e <HAL_DMA_Init>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80027d0:	f7ff ff7e 	bl	80026d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a05      	ldr	r2, [pc, #20]	; (80027ec <HAL_ADC_MspInit+0xc8>)
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38
 80027da:	4a04      	ldr	r2, [pc, #16]	; (80027ec <HAL_ADC_MspInit+0xc8>)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027e0:	bf00      	nop
 80027e2:	3728      	adds	r7, #40	; 0x28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	200001d8 	.word	0x200001d8
 80027f0:	40020008 	.word	0x40020008

080027f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	; 0x28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a17      	ldr	r2, [pc, #92]	; (8002870 <HAL_I2C_MspInit+0x7c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d127      	bne.n	8002866 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002816:	4b17      	ldr	r3, [pc, #92]	; (8002874 <HAL_I2C_MspInit+0x80>)
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	4a16      	ldr	r2, [pc, #88]	; (8002874 <HAL_I2C_MspInit+0x80>)
 800281c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002820:	6153      	str	r3, [r2, #20]
 8002822:	4b14      	ldr	r3, [pc, #80]	; (8002874 <HAL_I2C_MspInit+0x80>)
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800282e:	23c0      	movs	r3, #192	; 0xc0
 8002830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002832:	2312      	movs	r3, #18
 8002834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800283a:	2303      	movs	r3, #3
 800283c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800283e:	2304      	movs	r3, #4
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002842:	f107 0314 	add.w	r3, r7, #20
 8002846:	4619      	mov	r1, r3
 8002848:	480b      	ldr	r0, [pc, #44]	; (8002878 <HAL_I2C_MspInit+0x84>)
 800284a:	f001 ff43 	bl	80046d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800284e:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HAL_I2C_MspInit+0x80>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	4a08      	ldr	r2, [pc, #32]	; (8002874 <HAL_I2C_MspInit+0x80>)
 8002854:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002858:	61d3      	str	r3, [r2, #28]
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_I2C_MspInit+0x80>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002866:	bf00      	nop
 8002868:	3728      	adds	r7, #40	; 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40005400 	.word	0x40005400
 8002874:	40021000 	.word	0x40021000
 8002878:	48000400 	.word	0x48000400

0800287c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288c:	d10c      	bne.n	80028a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800288e:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <HAL_TIM_Base_MspInit+0x80>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	4a1a      	ldr	r2, [pc, #104]	; (80028fc <HAL_TIM_Base_MspInit+0x80>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	61d3      	str	r3, [r2, #28]
 800289a:	4b18      	ldr	r3, [pc, #96]	; (80028fc <HAL_TIM_Base_MspInit+0x80>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028a6:	e022      	b.n	80028ee <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a14      	ldr	r2, [pc, #80]	; (8002900 <HAL_TIM_Base_MspInit+0x84>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d10c      	bne.n	80028cc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028b2:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_TIM_Base_MspInit+0x80>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	4a11      	ldr	r2, [pc, #68]	; (80028fc <HAL_TIM_Base_MspInit+0x80>)
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	61d3      	str	r3, [r2, #28]
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <HAL_TIM_Base_MspInit+0x80>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]
}
 80028ca:	e010      	b.n	80028ee <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0c      	ldr	r2, [pc, #48]	; (8002904 <HAL_TIM_Base_MspInit+0x88>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d10b      	bne.n	80028ee <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_TIM_Base_MspInit+0x80>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	4a08      	ldr	r2, [pc, #32]	; (80028fc <HAL_TIM_Base_MspInit+0x80>)
 80028dc:	f043 0304 	orr.w	r3, r3, #4
 80028e0:	61d3      	str	r3, [r2, #28]
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_TIM_Base_MspInit+0x80>)
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
}
 80028ee:	bf00      	nop
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
 8002900:	40000400 	.word	0x40000400
 8002904:	40000800 	.word	0x40000800

08002908 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08c      	sub	sp, #48	; 0x30
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	f107 031c 	add.w	r3, r7, #28
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002928:	d13a      	bne.n	80029a0 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	4b42      	ldr	r3, [pc, #264]	; (8002a34 <HAL_TIM_MspPostInit+0x12c>)
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	4a41      	ldr	r2, [pc, #260]	; (8002a34 <HAL_TIM_MspPostInit+0x12c>)
 8002930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002934:	6153      	str	r3, [r2, #20]
 8002936:	4b3f      	ldr	r3, [pc, #252]	; (8002a34 <HAL_TIM_MspPostInit+0x12c>)
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002942:	4b3c      	ldr	r3, [pc, #240]	; (8002a34 <HAL_TIM_MspPostInit+0x12c>)
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	4a3b      	ldr	r2, [pc, #236]	; (8002a34 <HAL_TIM_MspPostInit+0x12c>)
 8002948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800294c:	6153      	str	r3, [r2, #20]
 800294e:	4b39      	ldr	r3, [pc, #228]	; (8002a34 <HAL_TIM_MspPostInit+0x12c>)
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800295a:	2320      	movs	r3, #32
 800295c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002966:	2300      	movs	r3, #0
 8002968:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800296a:	2301      	movs	r3, #1
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296e:	f107 031c 	add.w	r3, r7, #28
 8002972:	4619      	mov	r1, r3
 8002974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002978:	f001 feac 	bl	80046d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800297c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	2302      	movs	r3, #2
 8002984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298a:	2300      	movs	r3, #0
 800298c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800298e:	2301      	movs	r3, #1
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002992:	f107 031c 	add.w	r3, r7, #28
 8002996:	4619      	mov	r1, r3
 8002998:	4827      	ldr	r0, [pc, #156]	; (8002a38 <HAL_TIM_MspPostInit+0x130>)
 800299a:	f001 fe9b 	bl	80046d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800299e:	e044      	b.n	8002a2a <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM3)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a25      	ldr	r2, [pc, #148]	; (8002a3c <HAL_TIM_MspPostInit+0x134>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d11c      	bne.n	80029e4 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029aa:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <HAL_TIM_MspPostInit+0x12c>)
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	4a21      	ldr	r2, [pc, #132]	; (8002a34 <HAL_TIM_MspPostInit+0x12c>)
 80029b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b4:	6153      	str	r3, [r2, #20]
 80029b6:	4b1f      	ldr	r3, [pc, #124]	; (8002a34 <HAL_TIM_MspPostInit+0x12c>)
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80029c2:	2302      	movs	r3, #2
 80029c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ce:	2300      	movs	r3, #0
 80029d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029d2:	2302      	movs	r3, #2
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d6:	f107 031c 	add.w	r3, r7, #28
 80029da:	4619      	mov	r1, r3
 80029dc:	4816      	ldr	r0, [pc, #88]	; (8002a38 <HAL_TIM_MspPostInit+0x130>)
 80029de:	f001 fe79 	bl	80046d4 <HAL_GPIO_Init>
}
 80029e2:	e022      	b.n	8002a2a <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM4)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a15      	ldr	r2, [pc, #84]	; (8002a40 <HAL_TIM_MspPostInit+0x138>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d11d      	bne.n	8002a2a <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ee:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <HAL_TIM_MspPostInit+0x12c>)
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	4a10      	ldr	r2, [pc, #64]	; (8002a34 <HAL_TIM_MspPostInit+0x12c>)
 80029f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f8:	6153      	str	r3, [r2, #20]
 80029fa:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <HAL_TIM_MspPostInit+0x12c>)
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	2300      	movs	r3, #0
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002a18:	230a      	movs	r3, #10
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1c:	f107 031c 	add.w	r3, r7, #28
 8002a20:	4619      	mov	r1, r3
 8002a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a26:	f001 fe55 	bl	80046d4 <HAL_GPIO_Init>
}
 8002a2a:	bf00      	nop
 8002a2c:	3730      	adds	r7, #48	; 0x30
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000
 8002a38:	48000400 	.word	0x48000400
 8002a3c:	40000400 	.word	0x40000400
 8002a40:	40000800 	.word	0x40000800

08002a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08a      	sub	sp, #40	; 0x28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4c:	f107 0314 	add.w	r3, r7, #20
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	60da      	str	r2, [r3, #12]
 8002a5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a1b      	ldr	r2, [pc, #108]	; (8002ad0 <HAL_UART_MspInit+0x8c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d130      	bne.n	8002ac8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a66:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_UART_MspInit+0x90>)
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	4a1a      	ldr	r2, [pc, #104]	; (8002ad4 <HAL_UART_MspInit+0x90>)
 8002a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a70:	61d3      	str	r3, [r2, #28]
 8002a72:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <HAL_UART_MspInit+0x90>)
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_UART_MspInit+0x90>)
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <HAL_UART_MspInit+0x90>)
 8002a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a88:	6153      	str	r3, [r2, #20]
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_UART_MspInit+0x90>)
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a96:	230c      	movs	r3, #12
 8002a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002aa6:	2307      	movs	r3, #7
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aaa:	f107 0314 	add.w	r3, r7, #20
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ab4:	f001 fe0e 	bl	80046d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2100      	movs	r1, #0
 8002abc:	2026      	movs	r0, #38	; 0x26
 8002abe:	f001 fba8 	bl	8004212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ac2:	2026      	movs	r0, #38	; 0x26
 8002ac4:	f001 fbc1 	bl	800424a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ac8:	bf00      	nop
 8002aca:	3728      	adds	r7, #40	; 0x28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40004400 	.word	0x40004400
 8002ad4:	40021000 	.word	0x40021000

08002ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002adc:	e7fe      	b.n	8002adc <NMI_Handler+0x4>

08002ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ae2:	e7fe      	b.n	8002ae2 <HardFault_Handler+0x4>

08002ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ae8:	e7fe      	b.n	8002ae8 <MemManage_Handler+0x4>

08002aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aee:	e7fe      	b.n	8002aee <BusFault_Handler+0x4>

08002af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002af4:	e7fe      	b.n	8002af4 <UsageFault_Handler+0x4>

08002af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b24:	f000 fa1e 	bl	8002f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b28:	bf00      	nop
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b30:	4802      	ldr	r0, [pc, #8]	; (8002b3c <DMA1_Channel1_IRQHandler+0x10>)
 8002b32:	f001 fcc1 	bl	80044b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	200001d8 	.word	0x200001d8

08002b40 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 8002b44:	4b64      	ldr	r3, [pc, #400]	; (8002cd8 <EXTI9_5_IRQHandler+0x198>)
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d038      	beq.n	8002bc2 <EXTI9_5_IRQHandler+0x82>

		if(HAL_GetTick() - ticks_pressed >= 20){
 8002b50:	f000 fa1c 	bl	8002f8c <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b61      	ldr	r3, [pc, #388]	; (8002cdc <EXTI9_5_IRQHandler+0x19c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b13      	cmp	r3, #19
 8002b5e:	d92c      	bls.n	8002bba <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 8002b60:	4b5f      	ldr	r3, [pc, #380]	; (8002ce0 <EXTI9_5_IRQHandler+0x1a0>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d112      	bne.n	8002b90 <EXTI9_5_IRQHandler+0x50>
 8002b6a:	2140      	movs	r1, #64	; 0x40
 8002b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b70:	f001 ff3a 	bl	80049e8 <HAL_GPIO_ReadPin>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10a      	bne.n	8002b90 <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 8002b7a:	4b59      	ldr	r3, [pc, #356]	; (8002ce0 <EXTI9_5_IRQHandler+0x1a0>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8002b80:	f000 fa04 	bl	8002f8c <HAL_GetTick>
 8002b84:	4603      	mov	r3, r0
 8002b86:	4a55      	ldr	r2, [pc, #340]	; (8002cdc <EXTI9_5_IRQHandler+0x19c>)
 8002b88:	6013      	str	r3, [r2, #0]

				middle_button_pressed = 1;
 8002b8a:	4b56      	ldr	r3, [pc, #344]	; (8002ce4 <EXTI9_5_IRQHandler+0x1a4>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 8002b90:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <EXTI9_5_IRQHandler+0x1a0>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10f      	bne.n	8002bba <EXTI9_5_IRQHandler+0x7a>
 8002b9a:	2140      	movs	r1, #64	; 0x40
 8002b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba0:	f001 ff22 	bl	80049e8 <HAL_GPIO_ReadPin>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d107      	bne.n	8002bba <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 8002baa:	f000 f9ef 	bl	8002f8c <HAL_GetTick>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4a4a      	ldr	r2, [pc, #296]	; (8002cdc <EXTI9_5_IRQHandler+0x19c>)
 8002bb2:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8002bb4:	4b4a      	ldr	r3, [pc, #296]	; (8002ce0 <EXTI9_5_IRQHandler+0x1a0>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 8002bba:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <EXTI9_5_IRQHandler+0x198>)
 8002bbc:	2240      	movs	r2, #64	; 0x40
 8002bbe:	615a      	str	r2, [r3, #20]
 8002bc0:	e07d      	b.n	8002cbe <EXTI9_5_IRQHandler+0x17e>
	}
	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8002bc2:	4b45      	ldr	r3, [pc, #276]	; (8002cd8 <EXTI9_5_IRQHandler+0x198>)
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d038      	beq.n	8002c40 <EXTI9_5_IRQHandler+0x100>

			if(HAL_GetTick() - ticks_pressed >= 20){
 8002bce:	f000 f9dd 	bl	8002f8c <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	4b41      	ldr	r3, [pc, #260]	; (8002cdc <EXTI9_5_IRQHandler+0x19c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b13      	cmp	r3, #19
 8002bdc:	d92c      	bls.n	8002c38 <EXTI9_5_IRQHandler+0xf8>
				// stable low state
				if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 8002bde:	4b40      	ldr	r3, [pc, #256]	; (8002ce0 <EXTI9_5_IRQHandler+0x1a0>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d112      	bne.n	8002c0e <EXTI9_5_IRQHandler+0xce>
 8002be8:	2180      	movs	r1, #128	; 0x80
 8002bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bee:	f001 fefb 	bl	80049e8 <HAL_GPIO_ReadPin>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <EXTI9_5_IRQHandler+0xce>
					button_state =0 ; // stable low reached
 8002bf8:	4b39      	ldr	r3, [pc, #228]	; (8002ce0 <EXTI9_5_IRQHandler+0x1a0>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
					ticks_pressed = HAL_GetTick() ;
 8002bfe:	f000 f9c5 	bl	8002f8c <HAL_GetTick>
 8002c02:	4603      	mov	r3, r0
 8002c04:	4a35      	ldr	r2, [pc, #212]	; (8002cdc <EXTI9_5_IRQHandler+0x19c>)
 8002c06:	6013      	str	r3, [r2, #0]

					right_button_pressed = 1;
 8002c08:	4b37      	ldr	r3, [pc, #220]	; (8002ce8 <EXTI9_5_IRQHandler+0x1a8>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
				}

				// stable high state
				if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 8002c0e:	4b34      	ldr	r3, [pc, #208]	; (8002ce0 <EXTI9_5_IRQHandler+0x1a0>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10f      	bne.n	8002c38 <EXTI9_5_IRQHandler+0xf8>
 8002c18:	2180      	movs	r1, #128	; 0x80
 8002c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c1e:	f001 fee3 	bl	80049e8 <HAL_GPIO_ReadPin>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d107      	bne.n	8002c38 <EXTI9_5_IRQHandler+0xf8>
					ticks_pressed = HAL_GetTick() ;
 8002c28:	f000 f9b0 	bl	8002f8c <HAL_GetTick>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4a2b      	ldr	r2, [pc, #172]	; (8002cdc <EXTI9_5_IRQHandler+0x19c>)
 8002c30:	6013      	str	r3, [r2, #0]
					button_state =1 ; // stable high state
 8002c32:	4b2b      	ldr	r3, [pc, #172]	; (8002ce0 <EXTI9_5_IRQHandler+0x1a0>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]

				}
			}


			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8002c38:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <EXTI9_5_IRQHandler+0x198>)
 8002c3a:	2280      	movs	r2, #128	; 0x80
 8002c3c:	615a      	str	r2, [r3, #20]
 8002c3e:	e03e      	b.n	8002cbe <EXTI9_5_IRQHandler+0x17e>
	}
	else{
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 8002c40:	4b25      	ldr	r3, [pc, #148]	; (8002cd8 <EXTI9_5_IRQHandler+0x198>)
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d038      	beq.n	8002cbe <EXTI9_5_IRQHandler+0x17e>

				if(HAL_GetTick() - ticks_pressed >= 20){
 8002c4c:	f000 f99e 	bl	8002f8c <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <EXTI9_5_IRQHandler+0x19c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b13      	cmp	r3, #19
 8002c5a:	d92c      	bls.n	8002cb6 <EXTI9_5_IRQHandler+0x176>
					// stable low state
					if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 8002c5c:	4b20      	ldr	r3, [pc, #128]	; (8002ce0 <EXTI9_5_IRQHandler+0x1a0>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d112      	bne.n	8002c8c <EXTI9_5_IRQHandler+0x14c>
 8002c66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c6a:	4820      	ldr	r0, [pc, #128]	; (8002cec <EXTI9_5_IRQHandler+0x1ac>)
 8002c6c:	f001 febc 	bl	80049e8 <HAL_GPIO_ReadPin>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <EXTI9_5_IRQHandler+0x14c>
						button_state =0 ; // stable low reached
 8002c76:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <EXTI9_5_IRQHandler+0x1a0>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
						ticks_pressed = HAL_GetTick() ;
 8002c7c:	f000 f986 	bl	8002f8c <HAL_GetTick>
 8002c80:	4603      	mov	r3, r0
 8002c82:	4a16      	ldr	r2, [pc, #88]	; (8002cdc <EXTI9_5_IRQHandler+0x19c>)
 8002c84:	6013      	str	r3, [r2, #0]

						left_button_pressed = 1;
 8002c86:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <EXTI9_5_IRQHandler+0x1b0>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
					}

					// stable high state
					if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 8002c8c:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <EXTI9_5_IRQHandler+0x1a0>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10f      	bne.n	8002cb6 <EXTI9_5_IRQHandler+0x176>
 8002c96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c9a:	4814      	ldr	r0, [pc, #80]	; (8002cec <EXTI9_5_IRQHandler+0x1ac>)
 8002c9c:	f001 fea4 	bl	80049e8 <HAL_GPIO_ReadPin>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d107      	bne.n	8002cb6 <EXTI9_5_IRQHandler+0x176>
						ticks_pressed = HAL_GetTick() ;
 8002ca6:	f000 f971 	bl	8002f8c <HAL_GetTick>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4a0b      	ldr	r2, [pc, #44]	; (8002cdc <EXTI9_5_IRQHandler+0x19c>)
 8002cae:	6013      	str	r3, [r2, #0]
						button_state =1 ; // stable high state
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <EXTI9_5_IRQHandler+0x1a0>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]

					}
				}
				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 8002cb6:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <EXTI9_5_IRQHandler+0x198>)
 8002cb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cbc:	615a      	str	r2, [r3, #20]
			}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002cbe:	2040      	movs	r0, #64	; 0x40
 8002cc0:	f001 fec2 	bl	8004a48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002cc4:	2080      	movs	r0, #128	; 0x80
 8002cc6:	f001 febf 	bl	8004a48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002cca:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002cce:	f001 febb 	bl	8004a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40010400 	.word	0x40010400
 8002cdc:	20002454 	.word	0x20002454
 8002ce0:	200000f8 	.word	0x200000f8
 8002ce4:	20002458 	.word	0x20002458
 8002ce8:	20002459 	.word	0x20002459
 8002cec:	48000400 	.word	0x48000400
 8002cf0:	2000245a 	.word	0x2000245a

08002cf4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002cf8:	4802      	ldr	r0, [pc, #8]	; (8002d04 <USART2_IRQHandler+0x10>)
 8002cfa:	f004 fea3 	bl	8007a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000354 	.word	0x20000354

08002d08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002d0c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002d10:	f001 fe9a 	bl	8004a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	e00a      	b.n	8002d40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d2a:	f3af 8000 	nop.w
 8002d2e:	4601      	mov	r1, r0
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	60ba      	str	r2, [r7, #8]
 8002d36:	b2ca      	uxtb	r2, r1
 8002d38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	dbf0      	blt.n	8002d2a <_read+0x12>
  }

  return len;
 8002d48:	687b      	ldr	r3, [r7, #4]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b086      	sub	sp, #24
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	e009      	b.n	8002d78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	60ba      	str	r2, [r7, #8]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	3301      	adds	r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	dbf1      	blt.n	8002d64 <_write+0x12>
  }
  return len;
 8002d80:	687b      	ldr	r3, [r7, #4]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <_close>:

int _close(int file)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002db2:	605a      	str	r2, [r3, #4]
  return 0;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <_isatty>:

int _isatty(int file)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dca:	2301      	movs	r3, #1
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dfc:	4a14      	ldr	r2, [pc, #80]	; (8002e50 <_sbrk+0x5c>)
 8002dfe:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <_sbrk+0x60>)
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e08:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <_sbrk+0x64>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d102      	bne.n	8002e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e10:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <_sbrk+0x64>)
 8002e12:	4a12      	ldr	r2, [pc, #72]	; (8002e5c <_sbrk+0x68>)
 8002e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <_sbrk+0x64>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d207      	bcs.n	8002e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e24:	f006 f876 	bl	8008f14 <__errno>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	220c      	movs	r2, #12
 8002e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e32:	e009      	b.n	8002e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e34:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <_sbrk+0x64>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e3a:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <_sbrk+0x64>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	4a05      	ldr	r2, [pc, #20]	; (8002e58 <_sbrk+0x64>)
 8002e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e46:	68fb      	ldr	r3, [r7, #12]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	20010000 	.word	0x20010000
 8002e54:	00000400 	.word	0x00000400
 8002e58:	2000245c 	.word	0x2000245c
 8002e5c:	20002478 	.word	0x20002478

08002e60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <SystemInit+0x20>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	4a05      	ldr	r2, [pc, #20]	; (8002e80 <SystemInit+0x20>)
 8002e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ebc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e88:	f7ff ffea 	bl	8002e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e8c:	480c      	ldr	r0, [pc, #48]	; (8002ec0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e8e:	490d      	ldr	r1, [pc, #52]	; (8002ec4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e90:	4a0d      	ldr	r2, [pc, #52]	; (8002ec8 <LoopForever+0xe>)
  movs r3, #0
 8002e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e94:	e002      	b.n	8002e9c <LoopCopyDataInit>

08002e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e9a:	3304      	adds	r3, #4

08002e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ea0:	d3f9      	bcc.n	8002e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ea2:	4a0a      	ldr	r2, [pc, #40]	; (8002ecc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ea4:	4c0a      	ldr	r4, [pc, #40]	; (8002ed0 <LoopForever+0x16>)
  movs r3, #0
 8002ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ea8:	e001      	b.n	8002eae <LoopFillZerobss>

08002eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eac:	3204      	adds	r2, #4

08002eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eb0:	d3fb      	bcc.n	8002eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eb2:	f006 f835 	bl	8008f20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002eb6:	f7fe fe79 	bl	8001bac <main>

08002eba <LoopForever>:

LoopForever:
    b LoopForever
 8002eba:	e7fe      	b.n	8002eba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ebc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ec4:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8002ec8:	0800a814 	.word	0x0800a814
  ldr r2, =_sbss
 8002ecc:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8002ed0:	20002474 	.word	0x20002474

08002ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ed4:	e7fe      	b.n	8002ed4 <ADC1_2_IRQHandler>
	...

08002ed8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002edc:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <HAL_Init+0x28>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a07      	ldr	r2, [pc, #28]	; (8002f00 <HAL_Init+0x28>)
 8002ee2:	f043 0310 	orr.w	r3, r3, #16
 8002ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ee8:	2003      	movs	r0, #3
 8002eea:	f001 f987 	bl	80041fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f000 f808 	bl	8002f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ef4:	f7ff fbf2 	bl	80026dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40022000 	.word	0x40022000

08002f04 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f0c:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <HAL_InitTick+0x54>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_InitTick+0x58>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	4619      	mov	r1, r3
 8002f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f22:	4618      	mov	r0, r3
 8002f24:	f001 f99f 	bl	8004266 <HAL_SYSTICK_Config>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e00e      	b.n	8002f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b0f      	cmp	r3, #15
 8002f36:	d80a      	bhi.n	8002f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f38:	2200      	movs	r2, #0
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f40:	f001 f967 	bl	8004212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f44:	4a06      	ldr	r2, [pc, #24]	; (8002f60 <HAL_InitTick+0x5c>)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	e000      	b.n	8002f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	200000fc 	.word	0x200000fc
 8002f5c:	20000104 	.word	0x20000104
 8002f60:	20000100 	.word	0x20000100

08002f64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <HAL_IncTick+0x20>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_IncTick+0x24>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4413      	add	r3, r2
 8002f74:	4a04      	ldr	r2, [pc, #16]	; (8002f88 <HAL_IncTick+0x24>)
 8002f76:	6013      	str	r3, [r2, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	20000104 	.word	0x20000104
 8002f88:	20002460 	.word	0x20002460

08002f8c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <HAL_GetTick+0x14>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20002460 	.word	0x20002460

08002fa4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fac:	f7ff ffee 	bl	8002f8c <HAL_GetTick>
 8002fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbc:	d005      	beq.n	8002fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <HAL_Delay+0x44>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002fca:	bf00      	nop
 8002fcc:	f7ff ffde 	bl	8002f8c <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d8f7      	bhi.n	8002fcc <HAL_Delay+0x28>
  {
  }
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000104 	.word	0x20000104

08002fec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b09a      	sub	sp, #104	; 0x68
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e1e3      	b.n	80033fc <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b00      	cmp	r3, #0
 8003044:	d176      	bne.n	8003134 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d152      	bne.n	80030f4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff fb5b 	bl	8002724 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d13b      	bne.n	80030f4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 ff87 	bl	8003f90 <ADC_Disable>
 8003082:	4603      	mov	r3, r0
 8003084:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	2b00      	cmp	r3, #0
 8003092:	d12f      	bne.n	80030f4 <HAL_ADC_Init+0xe0>
 8003094:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003098:	2b00      	cmp	r3, #0
 800309a:	d12b      	bne.n	80030f4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030a4:	f023 0302 	bic.w	r3, r3, #2
 80030a8:	f043 0202 	orr.w	r2, r3, #2
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030be:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030ce:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030d0:	4b92      	ldr	r3, [pc, #584]	; (800331c <HAL_ADC_Init+0x308>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a92      	ldr	r2, [pc, #584]	; (8003320 <HAL_ADC_Init+0x30c>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	0c9a      	lsrs	r2, r3, #18
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030e6:	e002      	b.n	80030ee <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f9      	bne.n	80030e8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d007      	beq.n	8003112 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800310c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003110:	d110      	bne.n	8003134 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f023 0312 	bic.w	r3, r3, #18
 800311a:	f043 0210 	orr.w	r2, r3, #16
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	f043 0201 	orr.w	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b00      	cmp	r3, #0
 800313e:	f040 8150 	bne.w	80033e2 <HAL_ADC_Init+0x3ce>
 8003142:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003146:	2b00      	cmp	r3, #0
 8003148:	f040 814b 	bne.w	80033e2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003156:	2b00      	cmp	r3, #0
 8003158:	f040 8143 	bne.w	80033e2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003164:	f043 0202 	orr.w	r2, r3, #2
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003174:	d004      	beq.n	8003180 <HAL_ADC_Init+0x16c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a6a      	ldr	r2, [pc, #424]	; (8003324 <HAL_ADC_Init+0x310>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d101      	bne.n	8003184 <HAL_ADC_Init+0x170>
 8003180:	4b69      	ldr	r3, [pc, #420]	; (8003328 <HAL_ADC_Init+0x314>)
 8003182:	e000      	b.n	8003186 <HAL_ADC_Init+0x172>
 8003184:	4b69      	ldr	r3, [pc, #420]	; (800332c <HAL_ADC_Init+0x318>)
 8003186:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003190:	d102      	bne.n	8003198 <HAL_ADC_Init+0x184>
 8003192:	4b64      	ldr	r3, [pc, #400]	; (8003324 <HAL_ADC_Init+0x310>)
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	e01a      	b.n	80031ce <HAL_ADC_Init+0x1ba>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a61      	ldr	r2, [pc, #388]	; (8003324 <HAL_ADC_Init+0x310>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d103      	bne.n	80031aa <HAL_ADC_Init+0x196>
 80031a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	e011      	b.n	80031ce <HAL_ADC_Init+0x1ba>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a60      	ldr	r2, [pc, #384]	; (8003330 <HAL_ADC_Init+0x31c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d102      	bne.n	80031ba <HAL_ADC_Init+0x1a6>
 80031b4:	4b5f      	ldr	r3, [pc, #380]	; (8003334 <HAL_ADC_Init+0x320>)
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	e009      	b.n	80031ce <HAL_ADC_Init+0x1ba>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a5d      	ldr	r2, [pc, #372]	; (8003334 <HAL_ADC_Init+0x320>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d102      	bne.n	80031ca <HAL_ADC_Init+0x1b6>
 80031c4:	4b5a      	ldr	r3, [pc, #360]	; (8003330 <HAL_ADC_Init+0x31c>)
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	e001      	b.n	80031ce <HAL_ADC_Init+0x1ba>
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d108      	bne.n	80031ee <HAL_ADC_Init+0x1da>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_ADC_Init+0x1da>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_ADC_Init+0x1dc>
 80031ee:	2300      	movs	r3, #0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d11c      	bne.n	800322e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80031f4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d010      	beq.n	800321c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b01      	cmp	r3, #1
 8003204:	d107      	bne.n	8003216 <HAL_ADC_Init+0x202>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_ADC_Init+0x202>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HAL_ADC_Init+0x204>
 8003216:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003218:	2b00      	cmp	r3, #0
 800321a:	d108      	bne.n	800322e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800321c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	431a      	orrs	r2, r3
 800322a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800322c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	7e5b      	ldrb	r3, [r3, #25]
 8003232:	035b      	lsls	r3, r3, #13
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003238:	2a01      	cmp	r2, #1
 800323a:	d002      	beq.n	8003242 <HAL_ADC_Init+0x22e>
 800323c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003240:	e000      	b.n	8003244 <HAL_ADC_Init+0x230>
 8003242:	2200      	movs	r2, #0
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4313      	orrs	r3, r2
 8003252:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003254:	4313      	orrs	r3, r2
 8003256:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d11b      	bne.n	800329a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	7e5b      	ldrb	r3, [r3, #25]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	3b01      	subs	r3, #1
 8003270:	045a      	lsls	r2, r3, #17
 8003272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003274:	4313      	orrs	r3, r2
 8003276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327a:	663b      	str	r3, [r7, #96]	; 0x60
 800327c:	e00d      	b.n	800329a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003286:	f043 0220 	orr.w	r2, r3, #32
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003292:	f043 0201 	orr.w	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d054      	beq.n	800334c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a22      	ldr	r2, [pc, #136]	; (8003330 <HAL_ADC_Init+0x31c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d004      	beq.n	80032b6 <HAL_ADC_Init+0x2a2>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a20      	ldr	r2, [pc, #128]	; (8003334 <HAL_ADC_Init+0x320>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d140      	bne.n	8003338 <HAL_ADC_Init+0x324>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80032be:	d02a      	beq.n	8003316 <HAL_ADC_Init+0x302>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c8:	d022      	beq.n	8003310 <HAL_ADC_Init+0x2fc>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ce:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80032d2:	d01a      	beq.n	800330a <HAL_ADC_Init+0x2f6>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80032dc:	d012      	beq.n	8003304 <HAL_ADC_Init+0x2f0>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80032e6:	d00a      	beq.n	80032fe <HAL_ADC_Init+0x2ea>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80032f0:	d002      	beq.n	80032f8 <HAL_ADC_Init+0x2e4>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	e023      	b.n	8003340 <HAL_ADC_Init+0x32c>
 80032f8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80032fc:	e020      	b.n	8003340 <HAL_ADC_Init+0x32c>
 80032fe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003302:	e01d      	b.n	8003340 <HAL_ADC_Init+0x32c>
 8003304:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003308:	e01a      	b.n	8003340 <HAL_ADC_Init+0x32c>
 800330a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800330e:	e017      	b.n	8003340 <HAL_ADC_Init+0x32c>
 8003310:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003314:	e014      	b.n	8003340 <HAL_ADC_Init+0x32c>
 8003316:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800331a:	e011      	b.n	8003340 <HAL_ADC_Init+0x32c>
 800331c:	200000fc 	.word	0x200000fc
 8003320:	431bde83 	.word	0x431bde83
 8003324:	50000100 	.word	0x50000100
 8003328:	50000300 	.word	0x50000300
 800332c:	50000700 	.word	0x50000700
 8003330:	50000400 	.word	0x50000400
 8003334:	50000500 	.word	0x50000500
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003344:	4313      	orrs	r3, r2
 8003346:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003348:	4313      	orrs	r3, r2
 800334a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b00      	cmp	r3, #0
 8003358:	d114      	bne.n	8003384 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003368:	f023 0302 	bic.w	r3, r3, #2
 800336c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	7e1b      	ldrb	r3, [r3, #24]
 8003372:	039a      	lsls	r2, r3, #14
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4313      	orrs	r3, r2
 800337e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003380:	4313      	orrs	r3, r2
 8003382:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <HAL_ADC_Init+0x3f0>)
 800338c:	4013      	ands	r3, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003394:	430b      	orrs	r3, r1
 8003396:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d10c      	bne.n	80033ba <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f023 010f 	bic.w	r1, r3, #15
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	1e5a      	subs	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
 80033b8:	e007      	b.n	80033ca <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 020f 	bic.w	r2, r2, #15
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	f023 0303 	bic.w	r3, r3, #3
 80033d8:	f043 0201 	orr.w	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	641a      	str	r2, [r3, #64]	; 0x40
 80033e0:	e00a      	b.n	80033f8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f023 0312 	bic.w	r3, r3, #18
 80033ea:	f043 0210 	orr.w	r2, r3, #16
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80033f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3768      	adds	r7, #104	; 0x68
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	fff0c007 	.word	0xfff0c007

08003408 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	f040 80f7 	bne.w	8003616 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_ADC_Start_DMA+0x2e>
 8003432:	2302      	movs	r3, #2
 8003434:	e0f2      	b.n	800361c <HAL_ADC_Start_DMA+0x214>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003446:	d004      	beq.n	8003452 <HAL_ADC_Start_DMA+0x4a>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a75      	ldr	r2, [pc, #468]	; (8003624 <HAL_ADC_Start_DMA+0x21c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d109      	bne.n	8003466 <HAL_ADC_Start_DMA+0x5e>
 8003452:	4b75      	ldr	r3, [pc, #468]	; (8003628 <HAL_ADC_Start_DMA+0x220>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	2b00      	cmp	r3, #0
 800345c:	bf0c      	ite	eq
 800345e:	2301      	moveq	r3, #1
 8003460:	2300      	movne	r3, #0
 8003462:	b2db      	uxtb	r3, r3
 8003464:	e008      	b.n	8003478 <HAL_ADC_Start_DMA+0x70>
 8003466:	4b71      	ldr	r3, [pc, #452]	; (800362c <HAL_ADC_Start_DMA+0x224>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 031f 	and.w	r3, r3, #31
 800346e:	2b00      	cmp	r3, #0
 8003470:	bf0c      	ite	eq
 8003472:	2301      	moveq	r3, #1
 8003474:	2300      	movne	r3, #0
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80c5 	beq.w	8003608 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 fd22 	bl	8003ec8 <ADC_Enable>
 8003484:	4603      	mov	r3, r0
 8003486:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003488:	7dfb      	ldrb	r3, [r7, #23]
 800348a:	2b00      	cmp	r3, #0
 800348c:	f040 80b7 	bne.w	80035fe <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034ac:	d004      	beq.n	80034b8 <HAL_ADC_Start_DMA+0xb0>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a5c      	ldr	r2, [pc, #368]	; (8003624 <HAL_ADC_Start_DMA+0x21c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d106      	bne.n	80034c6 <HAL_ADC_Start_DMA+0xbe>
 80034b8:	4b5b      	ldr	r3, [pc, #364]	; (8003628 <HAL_ADC_Start_DMA+0x220>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d010      	beq.n	80034e6 <HAL_ADC_Start_DMA+0xde>
 80034c4:	e005      	b.n	80034d2 <HAL_ADC_Start_DMA+0xca>
 80034c6:	4b59      	ldr	r3, [pc, #356]	; (800362c <HAL_ADC_Start_DMA+0x224>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <HAL_ADC_Start_DMA+0xde>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034da:	d004      	beq.n	80034e6 <HAL_ADC_Start_DMA+0xde>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a53      	ldr	r2, [pc, #332]	; (8003630 <HAL_ADC_Start_DMA+0x228>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d115      	bne.n	8003512 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d036      	beq.n	800356e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003508:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003510:	e02d      	b.n	800356e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003526:	d004      	beq.n	8003532 <HAL_ADC_Start_DMA+0x12a>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a3d      	ldr	r2, [pc, #244]	; (8003624 <HAL_ADC_Start_DMA+0x21c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d10a      	bne.n	8003548 <HAL_ADC_Start_DMA+0x140>
 8003532:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	bf14      	ite	ne
 8003540:	2301      	movne	r3, #1
 8003542:	2300      	moveq	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	e008      	b.n	800355a <HAL_ADC_Start_DMA+0x152>
 8003548:	4b39      	ldr	r3, [pc, #228]	; (8003630 <HAL_ADC_Start_DMA+0x228>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	bf14      	ite	ne
 8003554:	2301      	movne	r3, #1
 8003556:	2300      	moveq	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003566:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357a:	d106      	bne.n	800358a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003580:	f023 0206 	bic.w	r2, r3, #6
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	645a      	str	r2, [r3, #68]	; 0x44
 8003588:	e002      	b.n	8003590 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359c:	4a25      	ldr	r2, [pc, #148]	; (8003634 <HAL_ADC_Start_DMA+0x22c>)
 800359e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a4:	4a24      	ldr	r2, [pc, #144]	; (8003638 <HAL_ADC_Start_DMA+0x230>)
 80035a6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	4a23      	ldr	r2, [pc, #140]	; (800363c <HAL_ADC_Start_DMA+0x234>)
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	221c      	movs	r2, #28
 80035b6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0210 	orr.w	r2, r2, #16
 80035c6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3340      	adds	r3, #64	; 0x40
 80035e2:	4619      	mov	r1, r3
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f000 fe90 	bl	800430c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0204 	orr.w	r2, r2, #4
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	e00d      	b.n	800361a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003606:	e008      	b.n	800361a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003614:	e001      	b.n	800361a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003616:	2302      	movs	r3, #2
 8003618:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800361a:	7dfb      	ldrb	r3, [r7, #23]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	50000100 	.word	0x50000100
 8003628:	50000300 	.word	0x50000300
 800362c:	50000700 	.word	0x50000700
 8003630:	50000400 	.word	0x50000400
 8003634:	08003dfd 	.word	0x08003dfd
 8003638:	08003e77 	.word	0x08003e77
 800363c:	08003e93 	.word	0x08003e93

08003640 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003640:	b480      	push	{r7}
 8003642:	b09b      	sub	sp, #108	; 0x6c
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x22>
 800365e:	2302      	movs	r3, #2
 8003660:	e2ca      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x5b8>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	f040 82ae 	bne.w	8003bd6 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b04      	cmp	r3, #4
 8003680:	d81c      	bhi.n	80036bc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4413      	add	r3, r2
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	461a      	mov	r2, r3
 8003696:	231f      	movs	r3, #31
 8003698:	4093      	lsls	r3, r2
 800369a:	43db      	mvns	r3, r3
 800369c:	4019      	ands	r1, r3
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	4413      	add	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	fa00 f203 	lsl.w	r2, r0, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	631a      	str	r2, [r3, #48]	; 0x30
 80036ba:	e063      	b.n	8003784 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b09      	cmp	r3, #9
 80036c2:	d81e      	bhi.n	8003702 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	4413      	add	r3, r2
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	3b1e      	subs	r3, #30
 80036d8:	221f      	movs	r2, #31
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	4019      	ands	r1, r3
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	3b1e      	subs	r3, #30
 80036f4:	fa00 f203 	lsl.w	r2, r0, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	635a      	str	r2, [r3, #52]	; 0x34
 8003700:	e040      	b.n	8003784 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b0e      	cmp	r3, #14
 8003708:	d81e      	bhi.n	8003748 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	4413      	add	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	3b3c      	subs	r3, #60	; 0x3c
 800371e:	221f      	movs	r2, #31
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	4019      	ands	r1, r3
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	4413      	add	r3, r2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	3b3c      	subs	r3, #60	; 0x3c
 800373a:	fa00 f203 	lsl.w	r2, r0, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	639a      	str	r2, [r3, #56]	; 0x38
 8003746:	e01d      	b.n	8003784 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	3b5a      	subs	r3, #90	; 0x5a
 800375c:	221f      	movs	r2, #31
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	4019      	ands	r1, r3
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	4413      	add	r3, r2
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	3b5a      	subs	r3, #90	; 0x5a
 8003778:	fa00 f203 	lsl.w	r2, r0, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b00      	cmp	r3, #0
 8003790:	f040 80e5 	bne.w	800395e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b09      	cmp	r3, #9
 800379a:	d91c      	bls.n	80037d6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6999      	ldr	r1, [r3, #24]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	4613      	mov	r3, r2
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	4413      	add	r3, r2
 80037ac:	3b1e      	subs	r3, #30
 80037ae:	2207      	movs	r2, #7
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	4019      	ands	r1, r3
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	6898      	ldr	r0, [r3, #8]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4613      	mov	r3, r2
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	4413      	add	r3, r2
 80037c6:	3b1e      	subs	r3, #30
 80037c8:	fa00 f203 	lsl.w	r2, r0, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	619a      	str	r2, [r3, #24]
 80037d4:	e019      	b.n	800380a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6959      	ldr	r1, [r3, #20]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	2207      	movs	r2, #7
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	4019      	ands	r1, r3
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	6898      	ldr	r0, [r3, #8]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	4413      	add	r3, r2
 80037fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	08db      	lsrs	r3, r3, #3
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	3b01      	subs	r3, #1
 8003828:	2b03      	cmp	r3, #3
 800382a:	d84f      	bhi.n	80038cc <HAL_ADC_ConfigChannel+0x28c>
 800382c:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <HAL_ADC_ConfigChannel+0x1f4>)
 800382e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003832:	bf00      	nop
 8003834:	08003845 	.word	0x08003845
 8003838:	08003867 	.word	0x08003867
 800383c:	08003889 	.word	0x08003889
 8003840:	080038ab 	.word	0x080038ab
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800384a:	4b9a      	ldr	r3, [pc, #616]	; (8003ab4 <HAL_ADC_ConfigChannel+0x474>)
 800384c:	4013      	ands	r3, r2
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	6812      	ldr	r2, [r2, #0]
 8003852:	0691      	lsls	r1, r2, #26
 8003854:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003856:	430a      	orrs	r2, r1
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003862:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003864:	e07e      	b.n	8003964 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800386c:	4b91      	ldr	r3, [pc, #580]	; (8003ab4 <HAL_ADC_ConfigChannel+0x474>)
 800386e:	4013      	ands	r3, r2
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	0691      	lsls	r1, r2, #26
 8003876:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003878:	430a      	orrs	r2, r1
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003884:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003886:	e06d      	b.n	8003964 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800388e:	4b89      	ldr	r3, [pc, #548]	; (8003ab4 <HAL_ADC_ConfigChannel+0x474>)
 8003890:	4013      	ands	r3, r2
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	0691      	lsls	r1, r2, #26
 8003898:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800389a:	430a      	orrs	r2, r1
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80038a6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80038a8:	e05c      	b.n	8003964 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80038b0:	4b80      	ldr	r3, [pc, #512]	; (8003ab4 <HAL_ADC_ConfigChannel+0x474>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	0691      	lsls	r1, r2, #26
 80038ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038bc:	430a      	orrs	r2, r1
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80038c8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80038ca:	e04b      	b.n	8003964 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	069b      	lsls	r3, r3, #26
 80038dc:	429a      	cmp	r2, r3
 80038de:	d107      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038ee:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	069b      	lsls	r3, r3, #26
 8003900:	429a      	cmp	r2, r3
 8003902:	d107      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003912:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800391a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	069b      	lsls	r3, r3, #26
 8003924:	429a      	cmp	r2, r3
 8003926:	d107      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003936:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800393e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	069b      	lsls	r3, r3, #26
 8003948:	429a      	cmp	r2, r3
 800394a:	d10a      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800395a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800395c:	e001      	b.n	8003962 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800395e:	bf00      	nop
 8003960:	e000      	b.n	8003964 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003962:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	2b01      	cmp	r3, #1
 8003970:	d108      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x344>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x344>
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <HAL_ADC_ConfigChannel+0x346>
 8003984:	2300      	movs	r3, #0
 8003986:	2b00      	cmp	r3, #0
 8003988:	f040 8130 	bne.w	8003bec <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d00f      	beq.n	80039b4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2201      	movs	r2, #1
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43da      	mvns	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	400a      	ands	r2, r1
 80039ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80039b2:	e049      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2201      	movs	r2, #1
 80039c2:	409a      	lsls	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b09      	cmp	r3, #9
 80039d4:	d91c      	bls.n	8003a10 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6999      	ldr	r1, [r3, #24]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4613      	mov	r3, r2
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	4413      	add	r3, r2
 80039e6:	3b1b      	subs	r3, #27
 80039e8:	2207      	movs	r2, #7
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	4019      	ands	r1, r3
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	6898      	ldr	r0, [r3, #8]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4613      	mov	r3, r2
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	4413      	add	r3, r2
 8003a00:	3b1b      	subs	r3, #27
 8003a02:	fa00 f203 	lsl.w	r2, r0, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	619a      	str	r2, [r3, #24]
 8003a0e:	e01b      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6959      	ldr	r1, [r3, #20]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	4413      	add	r3, r2
 8003a22:	2207      	movs	r2, #7
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	4019      	ands	r1, r3
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	6898      	ldr	r0, [r3, #8]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	4613      	mov	r3, r2
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	4413      	add	r3, r2
 8003a3c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a50:	d004      	beq.n	8003a5c <HAL_ADC_ConfigChannel+0x41c>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a18      	ldr	r2, [pc, #96]	; (8003ab8 <HAL_ADC_ConfigChannel+0x478>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x420>
 8003a5c:	4b17      	ldr	r3, [pc, #92]	; (8003abc <HAL_ADC_ConfigChannel+0x47c>)
 8003a5e:	e000      	b.n	8003a62 <HAL_ADC_ConfigChannel+0x422>
 8003a60:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <HAL_ADC_ConfigChannel+0x480>)
 8003a62:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b10      	cmp	r3, #16
 8003a6a:	d105      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d015      	beq.n	8003aa4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003a7c:	2b11      	cmp	r3, #17
 8003a7e:	d105      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00b      	beq.n	8003aa4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003a90:	2b12      	cmp	r3, #18
 8003a92:	f040 80ab 	bne.w	8003bec <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f040 80a4 	bne.w	8003bec <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aac:	d10a      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x484>
 8003aae:	4b02      	ldr	r3, [pc, #8]	; (8003ab8 <HAL_ADC_ConfigChannel+0x478>)
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	e022      	b.n	8003afa <HAL_ADC_ConfigChannel+0x4ba>
 8003ab4:	83fff000 	.word	0x83fff000
 8003ab8:	50000100 	.word	0x50000100
 8003abc:	50000300 	.word	0x50000300
 8003ac0:	50000700 	.word	0x50000700
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a4e      	ldr	r2, [pc, #312]	; (8003c04 <HAL_ADC_ConfigChannel+0x5c4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d103      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x496>
 8003ace:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	e011      	b.n	8003afa <HAL_ADC_ConfigChannel+0x4ba>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a4b      	ldr	r2, [pc, #300]	; (8003c08 <HAL_ADC_ConfigChannel+0x5c8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d102      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x4a6>
 8003ae0:	4b4a      	ldr	r3, [pc, #296]	; (8003c0c <HAL_ADC_ConfigChannel+0x5cc>)
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	e009      	b.n	8003afa <HAL_ADC_ConfigChannel+0x4ba>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a48      	ldr	r2, [pc, #288]	; (8003c0c <HAL_ADC_ConfigChannel+0x5cc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d102      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x4b6>
 8003af0:	4b45      	ldr	r3, [pc, #276]	; (8003c08 <HAL_ADC_ConfigChannel+0x5c8>)
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	e001      	b.n	8003afa <HAL_ADC_ConfigChannel+0x4ba>
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d108      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x4da>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x4da>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x4dc>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d150      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003b20:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d010      	beq.n	8003b48 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d107      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x502>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x502>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x504>
 8003b42:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d13c      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b10      	cmp	r3, #16
 8003b4e:	d11d      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x54c>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b58:	d118      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b64:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b66:	4b2a      	ldr	r3, [pc, #168]	; (8003c10 <HAL_ADC_ConfigChannel+0x5d0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a2a      	ldr	r2, [pc, #168]	; (8003c14 <HAL_ADC_ConfigChannel+0x5d4>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	0c9a      	lsrs	r2, r3, #18
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b7c:	e002      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	3b01      	subs	r3, #1
 8003b82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f9      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003b8a:	e02e      	b.n	8003bea <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b11      	cmp	r3, #17
 8003b92:	d10b      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x56c>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b9c:	d106      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ba8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003baa:	e01e      	b.n	8003bea <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b12      	cmp	r3, #18
 8003bb2:	d11a      	bne.n	8003bea <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bbe:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003bc0:	e013      	b.n	8003bea <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f043 0220 	orr.w	r2, r3, #32
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003bd4:	e00a      	b.n	8003bec <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f043 0220 	orr.w	r2, r3, #32
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003be8:	e000      	b.n	8003bec <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003bea:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003bf4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	376c      	adds	r7, #108	; 0x6c
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	50000100 	.word	0x50000100
 8003c08:	50000400 	.word	0x50000400
 8003c0c:	50000500 	.word	0x50000500
 8003c10:	200000fc 	.word	0x200000fc
 8003c14:	431bde83 	.word	0x431bde83

08003c18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b099      	sub	sp, #100	; 0x64
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c30:	d102      	bne.n	8003c38 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003c32:	4b6d      	ldr	r3, [pc, #436]	; (8003de8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	e01a      	b.n	8003c6e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a6a      	ldr	r2, [pc, #424]	; (8003de8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d103      	bne.n	8003c4a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003c42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	e011      	b.n	8003c6e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a67      	ldr	r2, [pc, #412]	; (8003dec <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d102      	bne.n	8003c5a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003c54:	4b66      	ldr	r3, [pc, #408]	; (8003df0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003c56:	60bb      	str	r3, [r7, #8]
 8003c58:	e009      	b.n	8003c6e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a64      	ldr	r2, [pc, #400]	; (8003df0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d102      	bne.n	8003c6a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003c64:	4b61      	ldr	r3, [pc, #388]	; (8003dec <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	e001      	b.n	8003c6e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0b0      	b.n	8003dda <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e0a9      	b.n	8003dda <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f040 808d 	bne.w	8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f040 8086 	bne.w	8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cb4:	d004      	beq.n	8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a4b      	ldr	r2, [pc, #300]	; (8003de8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d101      	bne.n	8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003cc0:	4b4c      	ldr	r3, [pc, #304]	; (8003df4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003cc2:	e000      	b.n	8003cc6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003cc4:	4b4c      	ldr	r3, [pc, #304]	; (8003df8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003cc6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d040      	beq.n	8003d52 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003cd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	6859      	ldr	r1, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ce2:	035b      	lsls	r3, r3, #13
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cea:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d108      	bne.n	8003d0c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d15c      	bne.n	8003dcc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d107      	bne.n	8003d2e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003d2e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d14b      	bne.n	8003dcc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003d34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d3c:	f023 030f 	bic.w	r3, r3, #15
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	6811      	ldr	r1, [r2, #0]
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	6892      	ldr	r2, [r2, #8]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d4e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d50:	e03c      	b.n	8003dcc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d5c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d108      	bne.n	8003d7e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d123      	bne.n	8003dcc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d107      	bne.n	8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e000      	b.n	8003da2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003da0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d112      	bne.n	8003dcc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003da6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003dae:	f023 030f 	bic.w	r3, r3, #15
 8003db2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003db4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003db6:	e009      	b.n	8003dcc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	f043 0220 	orr.w	r2, r3, #32
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003dca:	e000      	b.n	8003dce <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dcc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003dd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3764      	adds	r7, #100	; 0x64
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	50000100 	.word	0x50000100
 8003dec:	50000400 	.word	0x50000400
 8003df0:	50000500 	.word	0x50000500
 8003df4:	50000300 	.word	0x50000300
 8003df8:	50000700 	.word	0x50000700

08003dfc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d126      	bne.n	8003e64 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d115      	bne.n	8003e5c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d111      	bne.n	8003e5c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d105      	bne.n	8003e5c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	f043 0201 	orr.w	r2, r3, #1
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f7fe fc27 	bl	80026b0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003e62:	e004      	b.n	8003e6e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
}
 8003e6e:	bf00      	nop
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f7ff f8b1 	bl	8002fec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003e8a:	bf00      	nop
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb0:	f043 0204 	orr.w	r2, r3, #4
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f7ff f8a1 	bl	8003000 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d108      	bne.n	8003ef4 <ADC_Enable+0x2c>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <ADC_Enable+0x2c>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <ADC_Enable+0x2e>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d143      	bne.n	8003f82 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <ADC_Enable+0xc4>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00d      	beq.n	8003f24 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	f043 0210 	orr.w	r2, r3, #16
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f18:	f043 0201 	orr.w	r2, r3, #1
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e02f      	b.n	8003f84 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003f34:	f7ff f82a 	bl	8002f8c <HAL_GetTick>
 8003f38:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003f3a:	e01b      	b.n	8003f74 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f3c:	f7ff f826 	bl	8002f8c <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d914      	bls.n	8003f74 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d00d      	beq.n	8003f74 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	f043 0210 	orr.w	r2, r3, #16
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f68:	f043 0201 	orr.w	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e007      	b.n	8003f84 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d1dc      	bne.n	8003f3c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	8000003f 	.word	0x8000003f

08003f90 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d108      	bne.n	8003fbc <ADC_Disable+0x2c>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <ADC_Disable+0x2c>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <ADC_Disable+0x2e>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d047      	beq.n	8004052 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 030d 	and.w	r3, r3, #13
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d10f      	bne.n	8003ff0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0202 	orr.w	r2, r2, #2
 8003fde:	609a      	str	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003fe8:	f7fe ffd0 	bl	8002f8c <HAL_GetTick>
 8003fec:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003fee:	e029      	b.n	8004044 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	f043 0210 	orr.w	r2, r3, #16
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004000:	f043 0201 	orr.w	r2, r3, #1
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e023      	b.n	8004054 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800400c:	f7fe ffbe 	bl	8002f8c <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d914      	bls.n	8004044 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b01      	cmp	r3, #1
 8004026:	d10d      	bne.n	8004044 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	f043 0210 	orr.w	r2, r3, #16
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004038:	f043 0201 	orr.w	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e007      	b.n	8004054 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b01      	cmp	r3, #1
 8004050:	d0dc      	beq.n	800400c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800406c:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <__NVIC_SetPriorityGrouping+0x44>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004078:	4013      	ands	r3, r2
 800407a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800408c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800408e:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	60d3      	str	r3, [r2, #12]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	e000ed00 	.word	0xe000ed00

080040a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040a8:	4b04      	ldr	r3, [pc, #16]	; (80040bc <__NVIC_GetPriorityGrouping+0x18>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	0a1b      	lsrs	r3, r3, #8
 80040ae:	f003 0307 	and.w	r3, r3, #7
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	e000ed00 	.word	0xe000ed00

080040c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	db0b      	blt.n	80040ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	f003 021f 	and.w	r2, r3, #31
 80040d8:	4907      	ldr	r1, [pc, #28]	; (80040f8 <__NVIC_EnableIRQ+0x38>)
 80040da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2001      	movs	r0, #1
 80040e2:	fa00 f202 	lsl.w	r2, r0, r2
 80040e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	e000e100 	.word	0xe000e100

080040fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	6039      	str	r1, [r7, #0]
 8004106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410c:	2b00      	cmp	r3, #0
 800410e:	db0a      	blt.n	8004126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	b2da      	uxtb	r2, r3
 8004114:	490c      	ldr	r1, [pc, #48]	; (8004148 <__NVIC_SetPriority+0x4c>)
 8004116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411a:	0112      	lsls	r2, r2, #4
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	440b      	add	r3, r1
 8004120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004124:	e00a      	b.n	800413c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	4908      	ldr	r1, [pc, #32]	; (800414c <__NVIC_SetPriority+0x50>)
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	3b04      	subs	r3, #4
 8004134:	0112      	lsls	r2, r2, #4
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	440b      	add	r3, r1
 800413a:	761a      	strb	r2, [r3, #24]
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	e000e100 	.word	0xe000e100
 800414c:	e000ed00 	.word	0xe000ed00

08004150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004150:	b480      	push	{r7}
 8004152:	b089      	sub	sp, #36	; 0x24
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f1c3 0307 	rsb	r3, r3, #7
 800416a:	2b04      	cmp	r3, #4
 800416c:	bf28      	it	cs
 800416e:	2304      	movcs	r3, #4
 8004170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	3304      	adds	r3, #4
 8004176:	2b06      	cmp	r3, #6
 8004178:	d902      	bls.n	8004180 <NVIC_EncodePriority+0x30>
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3b03      	subs	r3, #3
 800417e:	e000      	b.n	8004182 <NVIC_EncodePriority+0x32>
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004184:	f04f 32ff 	mov.w	r2, #4294967295
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43da      	mvns	r2, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	401a      	ands	r2, r3
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004198:	f04f 31ff 	mov.w	r1, #4294967295
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	fa01 f303 	lsl.w	r3, r1, r3
 80041a2:	43d9      	mvns	r1, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a8:	4313      	orrs	r3, r2
         );
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3724      	adds	r7, #36	; 0x24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041c8:	d301      	bcc.n	80041ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041ca:	2301      	movs	r3, #1
 80041cc:	e00f      	b.n	80041ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041ce:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <SysTick_Config+0x40>)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041d6:	210f      	movs	r1, #15
 80041d8:	f04f 30ff 	mov.w	r0, #4294967295
 80041dc:	f7ff ff8e 	bl	80040fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041e0:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <SysTick_Config+0x40>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041e6:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <SysTick_Config+0x40>)
 80041e8:	2207      	movs	r2, #7
 80041ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	e000e010 	.word	0xe000e010

080041fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ff29 	bl	800405c <__NVIC_SetPriorityGrouping>
}
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b086      	sub	sp, #24
 8004216:	af00      	add	r7, sp, #0
 8004218:	4603      	mov	r3, r0
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004220:	2300      	movs	r3, #0
 8004222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004224:	f7ff ff3e 	bl	80040a4 <__NVIC_GetPriorityGrouping>
 8004228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	6978      	ldr	r0, [r7, #20]
 8004230:	f7ff ff8e 	bl	8004150 <NVIC_EncodePriority>
 8004234:	4602      	mov	r2, r0
 8004236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800423a:	4611      	mov	r1, r2
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff ff5d 	bl	80040fc <__NVIC_SetPriority>
}
 8004242:	bf00      	nop
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	4603      	mov	r3, r0
 8004252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff ff31 	bl	80040c0 <__NVIC_EnableIRQ>
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff ffa2 	bl	80041b8 <SysTick_Config>
 8004274:	4603      	mov	r3, r0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e037      	b.n	8004304 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80042aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80042ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80042b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f9b8 	bl	800465c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}  
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
 8004318:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800431a:	2300      	movs	r3, #0
 800431c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_DMA_Start_IT+0x20>
 8004328:	2302      	movs	r3, #2
 800432a:	e04a      	b.n	80043c2 <HAL_DMA_Start_IT+0xb6>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800433a:	2b01      	cmp	r3, #1
 800433c:	d13a      	bne.n	80043b4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2202      	movs	r2, #2
 8004342:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0201 	bic.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f94b 	bl	80045fe <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 020e 	orr.w	r2, r2, #14
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	e00f      	b.n	80043a2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 020a 	orr.w	r2, r2, #10
 8004390:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0204 	bic.w	r2, r2, #4
 80043a0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0201 	orr.w	r2, r2, #1
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	e005      	b.n	80043c0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80043bc:	2302      	movs	r3, #2
 80043be:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
} 
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d008      	beq.n	80043ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2204      	movs	r2, #4
 80043e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e020      	b.n	8004430 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 020e 	bic.w	r2, r2, #14
 80043fc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0201 	bic.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004416:	2101      	movs	r1, #1
 8004418:	fa01 f202 	lsl.w	r2, r1, r2
 800441c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800444e:	2b02      	cmp	r3, #2
 8004450:	d005      	beq.n	800445e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2204      	movs	r2, #4
 8004456:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	73fb      	strb	r3, [r7, #15]
 800445c:	e027      	b.n	80044ae <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 020e 	bic.w	r2, r2, #14
 800446c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0201 	bic.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004486:	2101      	movs	r1, #1
 8004488:	fa01 f202 	lsl.w	r2, r1, r2
 800448c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	4798      	blx	r3
    } 
  }
  return status;
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	2204      	movs	r2, #4
 80044d6:	409a      	lsls	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4013      	ands	r3, r2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d024      	beq.n	800452a <HAL_DMA_IRQHandler+0x72>
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d01f      	beq.n	800452a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0320 	and.w	r3, r3, #32
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d107      	bne.n	8004508 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0204 	bic.w	r2, r2, #4
 8004506:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004510:	2104      	movs	r1, #4
 8004512:	fa01 f202 	lsl.w	r2, r1, r2
 8004516:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d06a      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004528:	e065      	b.n	80045f6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	2202      	movs	r2, #2
 8004530:	409a      	lsls	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4013      	ands	r3, r2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d02c      	beq.n	8004594 <HAL_DMA_IRQHandler+0xdc>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d027      	beq.n	8004594 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10b      	bne.n	800456a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 020a 	bic.w	r2, r2, #10
 8004560:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004572:	2102      	movs	r1, #2
 8004574:	fa01 f202 	lsl.w	r2, r1, r2
 8004578:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004586:	2b00      	cmp	r3, #0
 8004588:	d035      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004592:	e030      	b.n	80045f6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	2208      	movs	r2, #8
 800459a:	409a      	lsls	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4013      	ands	r3, r2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d028      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x13e>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d023      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 020e 	bic.w	r2, r2, #14
 80045bc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c6:	2101      	movs	r1, #1
 80045c8:	fa01 f202 	lsl.w	r2, r1, r2
 80045cc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d004      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	4798      	blx	r3
    }
  }
}  
 80045f4:	e7ff      	b.n	80045f6 <HAL_DMA_IRQHandler+0x13e>
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045fe:	b480      	push	{r7}
 8004600:	b085      	sub	sp, #20
 8004602:	af00      	add	r7, sp, #0
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	607a      	str	r2, [r7, #4]
 800460a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004614:	2101      	movs	r1, #1
 8004616:	fa01 f202 	lsl.w	r2, r1, r2
 800461a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b10      	cmp	r3, #16
 800462a:	d108      	bne.n	800463e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800463c:	e007      	b.n	800464e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	60da      	str	r2, [r3, #12]
}
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
	...

0800465c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	4b14      	ldr	r3, [pc, #80]	; (80046bc <DMA_CalcBaseAndBitshift+0x60>)
 800466c:	429a      	cmp	r2, r3
 800466e:	d80f      	bhi.n	8004690 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <DMA_CalcBaseAndBitshift+0x64>)
 8004678:	4413      	add	r3, r2
 800467a:	4a12      	ldr	r2, [pc, #72]	; (80046c4 <DMA_CalcBaseAndBitshift+0x68>)
 800467c:	fba2 2303 	umull	r2, r3, r2, r3
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	009a      	lsls	r2, r3, #2
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a0f      	ldr	r2, [pc, #60]	; (80046c8 <DMA_CalcBaseAndBitshift+0x6c>)
 800468c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800468e:	e00e      	b.n	80046ae <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <DMA_CalcBaseAndBitshift+0x70>)
 8004698:	4413      	add	r3, r2
 800469a:	4a0a      	ldr	r2, [pc, #40]	; (80046c4 <DMA_CalcBaseAndBitshift+0x68>)
 800469c:	fba2 2303 	umull	r2, r3, r2, r3
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	009a      	lsls	r2, r3, #2
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a09      	ldr	r2, [pc, #36]	; (80046d0 <DMA_CalcBaseAndBitshift+0x74>)
 80046ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40020407 	.word	0x40020407
 80046c0:	bffdfff8 	.word	0xbffdfff8
 80046c4:	cccccccd 	.word	0xcccccccd
 80046c8:	40020000 	.word	0x40020000
 80046cc:	bffdfbf8 	.word	0xbffdfbf8
 80046d0:	40020400 	.word	0x40020400

080046d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046e2:	e160      	b.n	80049a6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	2101      	movs	r1, #1
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	fa01 f303 	lsl.w	r3, r1, r3
 80046f0:	4013      	ands	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 8152 	beq.w	80049a0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	2b01      	cmp	r3, #1
 8004706:	d005      	beq.n	8004714 <HAL_GPIO_Init+0x40>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d130      	bne.n	8004776 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	2203      	movs	r2, #3
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43db      	mvns	r3, r3
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4013      	ands	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800474a:	2201      	movs	r2, #1
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	43db      	mvns	r3, r3
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4013      	ands	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	091b      	lsrs	r3, r3, #4
 8004760:	f003 0201 	and.w	r2, r3, #1
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	2b03      	cmp	r3, #3
 8004780:	d017      	beq.n	80047b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	2203      	movs	r2, #3
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	43db      	mvns	r3, r3
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4013      	ands	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d123      	bne.n	8004806 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	08da      	lsrs	r2, r3, #3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3208      	adds	r2, #8
 80047c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	220f      	movs	r2, #15
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	43db      	mvns	r3, r3
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4013      	ands	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	691a      	ldr	r2, [r3, #16]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	08da      	lsrs	r2, r3, #3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3208      	adds	r2, #8
 8004800:	6939      	ldr	r1, [r7, #16]
 8004802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	2203      	movs	r2, #3
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	43db      	mvns	r3, r3
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4013      	ands	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 0203 	and.w	r2, r3, #3
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 80ac 	beq.w	80049a0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004848:	4b5e      	ldr	r3, [pc, #376]	; (80049c4 <HAL_GPIO_Init+0x2f0>)
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	4a5d      	ldr	r2, [pc, #372]	; (80049c4 <HAL_GPIO_Init+0x2f0>)
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	6193      	str	r3, [r2, #24]
 8004854:	4b5b      	ldr	r3, [pc, #364]	; (80049c4 <HAL_GPIO_Init+0x2f0>)
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004860:	4a59      	ldr	r2, [pc, #356]	; (80049c8 <HAL_GPIO_Init+0x2f4>)
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	089b      	lsrs	r3, r3, #2
 8004866:	3302      	adds	r3, #2
 8004868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800486c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	220f      	movs	r2, #15
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	43db      	mvns	r3, r3
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	4013      	ands	r3, r2
 8004882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800488a:	d025      	beq.n	80048d8 <HAL_GPIO_Init+0x204>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a4f      	ldr	r2, [pc, #316]	; (80049cc <HAL_GPIO_Init+0x2f8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d01f      	beq.n	80048d4 <HAL_GPIO_Init+0x200>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a4e      	ldr	r2, [pc, #312]	; (80049d0 <HAL_GPIO_Init+0x2fc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d019      	beq.n	80048d0 <HAL_GPIO_Init+0x1fc>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a4d      	ldr	r2, [pc, #308]	; (80049d4 <HAL_GPIO_Init+0x300>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d013      	beq.n	80048cc <HAL_GPIO_Init+0x1f8>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a4c      	ldr	r2, [pc, #304]	; (80049d8 <HAL_GPIO_Init+0x304>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00d      	beq.n	80048c8 <HAL_GPIO_Init+0x1f4>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a4b      	ldr	r2, [pc, #300]	; (80049dc <HAL_GPIO_Init+0x308>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d007      	beq.n	80048c4 <HAL_GPIO_Init+0x1f0>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a4a      	ldr	r2, [pc, #296]	; (80049e0 <HAL_GPIO_Init+0x30c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d101      	bne.n	80048c0 <HAL_GPIO_Init+0x1ec>
 80048bc:	2306      	movs	r3, #6
 80048be:	e00c      	b.n	80048da <HAL_GPIO_Init+0x206>
 80048c0:	2307      	movs	r3, #7
 80048c2:	e00a      	b.n	80048da <HAL_GPIO_Init+0x206>
 80048c4:	2305      	movs	r3, #5
 80048c6:	e008      	b.n	80048da <HAL_GPIO_Init+0x206>
 80048c8:	2304      	movs	r3, #4
 80048ca:	e006      	b.n	80048da <HAL_GPIO_Init+0x206>
 80048cc:	2303      	movs	r3, #3
 80048ce:	e004      	b.n	80048da <HAL_GPIO_Init+0x206>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e002      	b.n	80048da <HAL_GPIO_Init+0x206>
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <HAL_GPIO_Init+0x206>
 80048d8:	2300      	movs	r3, #0
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	f002 0203 	and.w	r2, r2, #3
 80048e0:	0092      	lsls	r2, r2, #2
 80048e2:	4093      	lsls	r3, r2
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048ea:	4937      	ldr	r1, [pc, #220]	; (80049c8 <HAL_GPIO_Init+0x2f4>)
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	089b      	lsrs	r3, r3, #2
 80048f0:	3302      	adds	r3, #2
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048f8:	4b3a      	ldr	r3, [pc, #232]	; (80049e4 <HAL_GPIO_Init+0x310>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	43db      	mvns	r3, r3
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4013      	ands	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800491c:	4a31      	ldr	r2, [pc, #196]	; (80049e4 <HAL_GPIO_Init+0x310>)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004922:	4b30      	ldr	r3, [pc, #192]	; (80049e4 <HAL_GPIO_Init+0x310>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	43db      	mvns	r3, r3
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4013      	ands	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004946:	4a27      	ldr	r2, [pc, #156]	; (80049e4 <HAL_GPIO_Init+0x310>)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800494c:	4b25      	ldr	r3, [pc, #148]	; (80049e4 <HAL_GPIO_Init+0x310>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	43db      	mvns	r3, r3
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4013      	ands	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004970:	4a1c      	ldr	r2, [pc, #112]	; (80049e4 <HAL_GPIO_Init+0x310>)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004976:	4b1b      	ldr	r3, [pc, #108]	; (80049e4 <HAL_GPIO_Init+0x310>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	43db      	mvns	r3, r3
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4013      	ands	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800499a:	4a12      	ldr	r2, [pc, #72]	; (80049e4 <HAL_GPIO_Init+0x310>)
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	3301      	adds	r3, #1
 80049a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	fa22 f303 	lsr.w	r3, r2, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f47f ae97 	bne.w	80046e4 <HAL_GPIO_Init+0x10>
  }
}
 80049b6:	bf00      	nop
 80049b8:	bf00      	nop
 80049ba:	371c      	adds	r7, #28
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	40021000 	.word	0x40021000
 80049c8:	40010000 	.word	0x40010000
 80049cc:	48000400 	.word	0x48000400
 80049d0:	48000800 	.word	0x48000800
 80049d4:	48000c00 	.word	0x48000c00
 80049d8:	48001000 	.word	0x48001000
 80049dc:	48001400 	.word	0x48001400
 80049e0:	48001800 	.word	0x48001800
 80049e4:	40010400 	.word	0x40010400

080049e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	887b      	ldrh	r3, [r7, #2]
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a00:	2301      	movs	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
 8004a04:	e001      	b.n	8004a0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a06:	2300      	movs	r3, #0
 8004a08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	807b      	strh	r3, [r7, #2]
 8004a24:	4613      	mov	r3, r2
 8004a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a28:	787b      	ldrb	r3, [r7, #1]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a2e:	887a      	ldrh	r2, [r7, #2]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a34:	e002      	b.n	8004a3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a36:	887a      	ldrh	r2, [r7, #2]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a52:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a54:	695a      	ldr	r2, [r3, #20]
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d006      	beq.n	8004a6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a5e:	4a05      	ldr	r2, [pc, #20]	; (8004a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a60:	88fb      	ldrh	r3, [r7, #6]
 8004a62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a64:	88fb      	ldrh	r3, [r7, #6]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 f806 	bl	8004a78 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40010400 	.word	0x40010400

08004a78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b082      	sub	sp, #8
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e081      	b.n	8004ba4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d106      	bne.n	8004aba <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7fd fe9d 	bl	80027f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2224      	movs	r2, #36	; 0x24
 8004abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0201 	bic.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ade:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d107      	bne.n	8004b08 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b04:	609a      	str	r2, [r3, #8]
 8004b06:	e006      	b.n	8004b16 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004b14:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d104      	bne.n	8004b28 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b26:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6812      	ldr	r2, [r2, #0]
 8004b32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b3a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b4a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69d9      	ldr	r1, [r3, #28]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1a      	ldr	r2, [r3, #32]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0201 	orr.w	r2, r2, #1
 8004b84:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b20      	cmp	r3, #32
 8004bc0:	d138      	bne.n	8004c34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d101      	bne.n	8004bd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	e032      	b.n	8004c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2224      	movs	r2, #36	; 0x24
 8004bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0201 	bic.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6819      	ldr	r1, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	e000      	b.n	8004c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c34:	2302      	movs	r3, #2
  }
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b085      	sub	sp, #20
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	d139      	bne.n	8004ccc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c62:	2302      	movs	r3, #2
 8004c64:	e033      	b.n	8004cce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2224      	movs	r2, #36	; 0x24
 8004c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0201 	bic.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	021b      	lsls	r3, r3, #8
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0201 	orr.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	e000      	b.n	8004cce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ccc:	2302      	movs	r3, #2
  }
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
	...

08004cdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ce8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cf2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	f001 b83a 	b.w	8005d76 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 816f 	beq.w	8004ff6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004d18:	4bb5      	ldr	r3, [pc, #724]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f003 030c 	and.w	r3, r3, #12
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d00c      	beq.n	8004d3e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d24:	4bb2      	ldr	r3, [pc, #712]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f003 030c 	and.w	r3, r3, #12
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d15c      	bne.n	8004dea <HAL_RCC_OscConfig+0x10e>
 8004d30:	4baf      	ldr	r3, [pc, #700]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d3c:	d155      	bne.n	8004dea <HAL_RCC_OscConfig+0x10e>
 8004d3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d42:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d46:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004d4a:	fa93 f3a3 	rbit	r3, r3
 8004d4e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004d52:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d56:	fab3 f383 	clz	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	095b      	lsrs	r3, r3, #5
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	f043 0301 	orr.w	r3, r3, #1
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d102      	bne.n	8004d70 <HAL_RCC_OscConfig+0x94>
 8004d6a:	4ba1      	ldr	r3, [pc, #644]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	e015      	b.n	8004d9c <HAL_RCC_OscConfig+0xc0>
 8004d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d74:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d78:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004d7c:	fa93 f3a3 	rbit	r3, r3
 8004d80:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d88:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004d8c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004d90:	fa93 f3a3 	rbit	r3, r3
 8004d94:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004d98:	4b95      	ldr	r3, [pc, #596]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004da0:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004da4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004da8:	fa92 f2a2 	rbit	r2, r2
 8004dac:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004db0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004db4:	fab2 f282 	clz	r2, r2
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	f042 0220 	orr.w	r2, r2, #32
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	f002 021f 	and.w	r2, r2, #31
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 8111 	beq.w	8004ff4 <HAL_RCC_OscConfig+0x318>
 8004dd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f040 8108 	bne.w	8004ff4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	f000 bfc6 	b.w	8005d76 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dfa:	d106      	bne.n	8004e0a <HAL_RCC_OscConfig+0x12e>
 8004dfc:	4b7c      	ldr	r3, [pc, #496]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a7b      	ldr	r2, [pc, #492]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	e036      	b.n	8004e78 <HAL_RCC_OscConfig+0x19c>
 8004e0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10c      	bne.n	8004e34 <HAL_RCC_OscConfig+0x158>
 8004e1a:	4b75      	ldr	r3, [pc, #468]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a74      	ldr	r2, [pc, #464]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	4b72      	ldr	r3, [pc, #456]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a71      	ldr	r2, [pc, #452]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	e021      	b.n	8004e78 <HAL_RCC_OscConfig+0x19c>
 8004e34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e44:	d10c      	bne.n	8004e60 <HAL_RCC_OscConfig+0x184>
 8004e46:	4b6a      	ldr	r3, [pc, #424]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a69      	ldr	r2, [pc, #420]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	4b67      	ldr	r3, [pc, #412]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a66      	ldr	r2, [pc, #408]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	e00b      	b.n	8004e78 <HAL_RCC_OscConfig+0x19c>
 8004e60:	4b63      	ldr	r3, [pc, #396]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a62      	ldr	r2, [pc, #392]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	4b60      	ldr	r3, [pc, #384]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a5f      	ldr	r2, [pc, #380]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e76:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e7c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d059      	beq.n	8004f3c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e88:	f7fe f880 	bl	8002f8c <HAL_GetTick>
 8004e8c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e90:	e00a      	b.n	8004ea8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e92:	f7fe f87b 	bl	8002f8c <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b64      	cmp	r3, #100	; 0x64
 8004ea0:	d902      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	f000 bf67 	b.w	8005d76 <HAL_RCC_OscConfig+0x109a>
 8004ea8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004eac:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004eb4:	fa93 f3a3 	rbit	r3, r3
 8004eb8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004ebc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec0:	fab3 f383 	clz	r3, r3
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d102      	bne.n	8004eda <HAL_RCC_OscConfig+0x1fe>
 8004ed4:	4b46      	ldr	r3, [pc, #280]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	e015      	b.n	8004f06 <HAL_RCC_OscConfig+0x22a>
 8004eda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ede:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004ee6:	fa93 f3a3 	rbit	r3, r3
 8004eea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ef2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004ef6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004efa:	fa93 f3a3 	rbit	r3, r3
 8004efe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004f02:	4b3b      	ldr	r3, [pc, #236]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f0a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004f0e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004f12:	fa92 f2a2 	rbit	r2, r2
 8004f16:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004f1a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004f1e:	fab2 f282 	clz	r2, r2
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	f042 0220 	orr.w	r2, r2, #32
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	f002 021f 	and.w	r2, r2, #31
 8004f2e:	2101      	movs	r1, #1
 8004f30:	fa01 f202 	lsl.w	r2, r1, r2
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0ab      	beq.n	8004e92 <HAL_RCC_OscConfig+0x1b6>
 8004f3a:	e05c      	b.n	8004ff6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3c:	f7fe f826 	bl	8002f8c <HAL_GetTick>
 8004f40:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f44:	e00a      	b.n	8004f5c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f46:	f7fe f821 	bl	8002f8c <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b64      	cmp	r3, #100	; 0x64
 8004f54:	d902      	bls.n	8004f5c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	f000 bf0d 	b.w	8005d76 <HAL_RCC_OscConfig+0x109a>
 8004f5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f60:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004f68:	fa93 f3a3 	rbit	r3, r3
 8004f6c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004f70:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f74:	fab3 f383 	clz	r3, r3
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d102      	bne.n	8004f8e <HAL_RCC_OscConfig+0x2b2>
 8004f88:	4b19      	ldr	r3, [pc, #100]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	e015      	b.n	8004fba <HAL_RCC_OscConfig+0x2de>
 8004f8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f92:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f96:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004f9a:	fa93 f3a3 	rbit	r3, r3
 8004f9e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004fa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fa6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004faa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004fae:	fa93 f3a3 	rbit	r3, r3
 8004fb2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004fb6:	4b0e      	ldr	r3, [pc, #56]	; (8004ff0 <HAL_RCC_OscConfig+0x314>)
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fbe:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004fc2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004fc6:	fa92 f2a2 	rbit	r2, r2
 8004fca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004fce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004fd2:	fab2 f282 	clz	r2, r2
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	f042 0220 	orr.w	r2, r2, #32
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	f002 021f 	and.w	r2, r2, #31
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1ab      	bne.n	8004f46 <HAL_RCC_OscConfig+0x26a>
 8004fee:	e002      	b.n	8004ff6 <HAL_RCC_OscConfig+0x31a>
 8004ff0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ff6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ffa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 817f 	beq.w	800530a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800500c:	4ba7      	ldr	r3, [pc, #668]	; (80052ac <HAL_RCC_OscConfig+0x5d0>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 030c 	and.w	r3, r3, #12
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00c      	beq.n	8005032 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005018:	4ba4      	ldr	r3, [pc, #656]	; (80052ac <HAL_RCC_OscConfig+0x5d0>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f003 030c 	and.w	r3, r3, #12
 8005020:	2b08      	cmp	r3, #8
 8005022:	d173      	bne.n	800510c <HAL_RCC_OscConfig+0x430>
 8005024:	4ba1      	ldr	r3, [pc, #644]	; (80052ac <HAL_RCC_OscConfig+0x5d0>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800502c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005030:	d16c      	bne.n	800510c <HAL_RCC_OscConfig+0x430>
 8005032:	2302      	movs	r3, #2
 8005034:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005038:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800503c:	fa93 f3a3 	rbit	r3, r3
 8005040:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8005044:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005048:	fab3 f383 	clz	r3, r3
 800504c:	b2db      	uxtb	r3, r3
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	b2db      	uxtb	r3, r3
 8005052:	f043 0301 	orr.w	r3, r3, #1
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b01      	cmp	r3, #1
 800505a:	d102      	bne.n	8005062 <HAL_RCC_OscConfig+0x386>
 800505c:	4b93      	ldr	r3, [pc, #588]	; (80052ac <HAL_RCC_OscConfig+0x5d0>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	e013      	b.n	800508a <HAL_RCC_OscConfig+0x3ae>
 8005062:	2302      	movs	r3, #2
 8005064:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005068:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800506c:	fa93 f3a3 	rbit	r3, r3
 8005070:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005074:	2302      	movs	r3, #2
 8005076:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800507a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800507e:	fa93 f3a3 	rbit	r3, r3
 8005082:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005086:	4b89      	ldr	r3, [pc, #548]	; (80052ac <HAL_RCC_OscConfig+0x5d0>)
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	2202      	movs	r2, #2
 800508c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8005090:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8005094:	fa92 f2a2 	rbit	r2, r2
 8005098:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800509c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80050a0:	fab2 f282 	clz	r2, r2
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	f042 0220 	orr.w	r2, r2, #32
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	f002 021f 	and.w	r2, r2, #31
 80050b0:	2101      	movs	r1, #1
 80050b2:	fa01 f202 	lsl.w	r2, r1, r2
 80050b6:	4013      	ands	r3, r2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <HAL_RCC_OscConfig+0x3f6>
 80050bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d002      	beq.n	80050d2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	f000 be52 	b.w	8005d76 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d2:	4b76      	ldr	r3, [pc, #472]	; (80052ac <HAL_RCC_OscConfig+0x5d0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	21f8      	movs	r1, #248	; 0xf8
 80050e8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ec:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80050f0:	fa91 f1a1 	rbit	r1, r1
 80050f4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80050f8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80050fc:	fab1 f181 	clz	r1, r1
 8005100:	b2c9      	uxtb	r1, r1
 8005102:	408b      	lsls	r3, r1
 8005104:	4969      	ldr	r1, [pc, #420]	; (80052ac <HAL_RCC_OscConfig+0x5d0>)
 8005106:	4313      	orrs	r3, r2
 8005108:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800510a:	e0fe      	b.n	800530a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800510c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005110:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 8088 	beq.w	800522e <HAL_RCC_OscConfig+0x552>
 800511e:	2301      	movs	r3, #1
 8005120:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005124:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005128:	fa93 f3a3 	rbit	r3, r3
 800512c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8005130:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005134:	fab3 f383 	clz	r3, r3
 8005138:	b2db      	uxtb	r3, r3
 800513a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800513e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	461a      	mov	r2, r3
 8005146:	2301      	movs	r3, #1
 8005148:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514a:	f7fd ff1f 	bl	8002f8c <HAL_GetTick>
 800514e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005152:	e00a      	b.n	800516a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005154:	f7fd ff1a 	bl	8002f8c <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d902      	bls.n	800516a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	f000 be06 	b.w	8005d76 <HAL_RCC_OscConfig+0x109a>
 800516a:	2302      	movs	r3, #2
 800516c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005170:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005174:	fa93 f3a3 	rbit	r3, r3
 8005178:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800517c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005180:	fab3 f383 	clz	r3, r3
 8005184:	b2db      	uxtb	r3, r3
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	b2db      	uxtb	r3, r3
 800518a:	f043 0301 	orr.w	r3, r3, #1
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	d102      	bne.n	800519a <HAL_RCC_OscConfig+0x4be>
 8005194:	4b45      	ldr	r3, [pc, #276]	; (80052ac <HAL_RCC_OscConfig+0x5d0>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	e013      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e6>
 800519a:	2302      	movs	r3, #2
 800519c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80051a4:	fa93 f3a3 	rbit	r3, r3
 80051a8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80051ac:	2302      	movs	r3, #2
 80051ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80051b2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80051b6:	fa93 f3a3 	rbit	r3, r3
 80051ba:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80051be:	4b3b      	ldr	r3, [pc, #236]	; (80052ac <HAL_RCC_OscConfig+0x5d0>)
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	2202      	movs	r2, #2
 80051c4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80051c8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80051cc:	fa92 f2a2 	rbit	r2, r2
 80051d0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80051d4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80051d8:	fab2 f282 	clz	r2, r2
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	f042 0220 	orr.w	r2, r2, #32
 80051e2:	b2d2      	uxtb	r2, r2
 80051e4:	f002 021f 	and.w	r2, r2, #31
 80051e8:	2101      	movs	r1, #1
 80051ea:	fa01 f202 	lsl.w	r2, r1, r2
 80051ee:	4013      	ands	r3, r2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0af      	beq.n	8005154 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f4:	4b2d      	ldr	r3, [pc, #180]	; (80052ac <HAL_RCC_OscConfig+0x5d0>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005200:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	21f8      	movs	r1, #248	; 0xf8
 800520a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8005212:	fa91 f1a1 	rbit	r1, r1
 8005216:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800521a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800521e:	fab1 f181 	clz	r1, r1
 8005222:	b2c9      	uxtb	r1, r1
 8005224:	408b      	lsls	r3, r1
 8005226:	4921      	ldr	r1, [pc, #132]	; (80052ac <HAL_RCC_OscConfig+0x5d0>)
 8005228:	4313      	orrs	r3, r2
 800522a:	600b      	str	r3, [r1, #0]
 800522c:	e06d      	b.n	800530a <HAL_RCC_OscConfig+0x62e>
 800522e:	2301      	movs	r3, #1
 8005230:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005234:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005238:	fa93 f3a3 	rbit	r3, r3
 800523c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8005240:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005244:	fab3 f383 	clz	r3, r3
 8005248:	b2db      	uxtb	r3, r3
 800524a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800524e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	461a      	mov	r2, r3
 8005256:	2300      	movs	r3, #0
 8005258:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525a:	f7fd fe97 	bl	8002f8c <HAL_GetTick>
 800525e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005262:	e00a      	b.n	800527a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005264:	f7fd fe92 	bl	8002f8c <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d902      	bls.n	800527a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	f000 bd7e 	b.w	8005d76 <HAL_RCC_OscConfig+0x109a>
 800527a:	2302      	movs	r3, #2
 800527c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005280:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005284:	fa93 f3a3 	rbit	r3, r3
 8005288:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800528c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005290:	fab3 f383 	clz	r3, r3
 8005294:	b2db      	uxtb	r3, r3
 8005296:	095b      	lsrs	r3, r3, #5
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d105      	bne.n	80052b0 <HAL_RCC_OscConfig+0x5d4>
 80052a4:	4b01      	ldr	r3, [pc, #4]	; (80052ac <HAL_RCC_OscConfig+0x5d0>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	e016      	b.n	80052d8 <HAL_RCC_OscConfig+0x5fc>
 80052aa:	bf00      	nop
 80052ac:	40021000 	.word	0x40021000
 80052b0:	2302      	movs	r3, #2
 80052b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ba:	fa93 f3a3 	rbit	r3, r3
 80052be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80052c2:	2302      	movs	r3, #2
 80052c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80052c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80052cc:	fa93 f3a3 	rbit	r3, r3
 80052d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80052d4:	4bbf      	ldr	r3, [pc, #764]	; (80055d4 <HAL_RCC_OscConfig+0x8f8>)
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	2202      	movs	r2, #2
 80052da:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80052de:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80052e2:	fa92 f2a2 	rbit	r2, r2
 80052e6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80052ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80052ee:	fab2 f282 	clz	r2, r2
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	f042 0220 	orr.w	r2, r2, #32
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	f002 021f 	and.w	r2, r2, #31
 80052fe:	2101      	movs	r1, #1
 8005300:	fa01 f202 	lsl.w	r2, r1, r2
 8005304:	4013      	ands	r3, r2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1ac      	bne.n	8005264 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800530a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800530e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 8113 	beq.w	8005546 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005320:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005324:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d07c      	beq.n	800542a <HAL_RCC_OscConfig+0x74e>
 8005330:	2301      	movs	r3, #1
 8005332:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800533a:	fa93 f3a3 	rbit	r3, r3
 800533e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8005342:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005346:	fab3 f383 	clz	r3, r3
 800534a:	b2db      	uxtb	r3, r3
 800534c:	461a      	mov	r2, r3
 800534e:	4ba2      	ldr	r3, [pc, #648]	; (80055d8 <HAL_RCC_OscConfig+0x8fc>)
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	461a      	mov	r2, r3
 8005356:	2301      	movs	r3, #1
 8005358:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800535a:	f7fd fe17 	bl	8002f8c <HAL_GetTick>
 800535e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005362:	e00a      	b.n	800537a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005364:	f7fd fe12 	bl	8002f8c <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d902      	bls.n	800537a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	f000 bcfe 	b.w	8005d76 <HAL_RCC_OscConfig+0x109a>
 800537a:	2302      	movs	r3, #2
 800537c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005384:	fa93 f2a3 	rbit	r2, r3
 8005388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800538c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005396:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800539a:	2202      	movs	r2, #2
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	fa93 f2a3 	rbit	r2, r3
 80053ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053be:	2202      	movs	r2, #2
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	fa93 f2a3 	rbit	r2, r3
 80053d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80053d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053da:	4b7e      	ldr	r3, [pc, #504]	; (80055d4 <HAL_RCC_OscConfig+0x8f8>)
 80053dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80053e6:	2102      	movs	r1, #2
 80053e8:	6019      	str	r1, [r3, #0]
 80053ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	fa93 f1a3 	rbit	r1, r3
 80053f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005400:	6019      	str	r1, [r3, #0]
  return result;
 8005402:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005406:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	fab3 f383 	clz	r3, r3
 8005410:	b2db      	uxtb	r3, r3
 8005412:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005416:	b2db      	uxtb	r3, r3
 8005418:	f003 031f 	and.w	r3, r3, #31
 800541c:	2101      	movs	r1, #1
 800541e:	fa01 f303 	lsl.w	r3, r1, r3
 8005422:	4013      	ands	r3, r2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d09d      	beq.n	8005364 <HAL_RCC_OscConfig+0x688>
 8005428:	e08d      	b.n	8005546 <HAL_RCC_OscConfig+0x86a>
 800542a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800542e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005432:	2201      	movs	r2, #1
 8005434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005436:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800543a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	fa93 f2a3 	rbit	r2, r3
 8005444:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005448:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800544c:	601a      	str	r2, [r3, #0]
  return result;
 800544e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005452:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005456:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005458:	fab3 f383 	clz	r3, r3
 800545c:	b2db      	uxtb	r3, r3
 800545e:	461a      	mov	r2, r3
 8005460:	4b5d      	ldr	r3, [pc, #372]	; (80055d8 <HAL_RCC_OscConfig+0x8fc>)
 8005462:	4413      	add	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	461a      	mov	r2, r3
 8005468:	2300      	movs	r3, #0
 800546a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800546c:	f7fd fd8e 	bl	8002f8c <HAL_GetTick>
 8005470:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005474:	e00a      	b.n	800548c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005476:	f7fd fd89 	bl	8002f8c <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d902      	bls.n	800548c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	f000 bc75 	b.w	8005d76 <HAL_RCC_OscConfig+0x109a>
 800548c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005490:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005494:	2202      	movs	r2, #2
 8005496:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005498:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800549c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	fa93 f2a3 	rbit	r2, r3
 80054a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054b8:	2202      	movs	r2, #2
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	fa93 f2a3 	rbit	r2, r3
 80054ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054d8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80054dc:	2202      	movs	r2, #2
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	fa93 f2a3 	rbit	r2, r3
 80054ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054f2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80054f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054f8:	4b36      	ldr	r3, [pc, #216]	; (80055d4 <HAL_RCC_OscConfig+0x8f8>)
 80054fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005500:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005504:	2102      	movs	r1, #2
 8005506:	6019      	str	r1, [r3, #0]
 8005508:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800550c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	fa93 f1a3 	rbit	r1, r3
 8005516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800551a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800551e:	6019      	str	r1, [r3, #0]
  return result;
 8005520:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005524:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	fab3 f383 	clz	r3, r3
 800552e:	b2db      	uxtb	r3, r3
 8005530:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005534:	b2db      	uxtb	r3, r3
 8005536:	f003 031f 	and.w	r3, r3, #31
 800553a:	2101      	movs	r1, #1
 800553c:	fa01 f303 	lsl.w	r3, r1, r3
 8005540:	4013      	ands	r3, r2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d197      	bne.n	8005476 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005546:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800554a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0304 	and.w	r3, r3, #4
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 81a5 	beq.w	80058a6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800555c:	2300      	movs	r3, #0
 800555e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005562:	4b1c      	ldr	r3, [pc, #112]	; (80055d4 <HAL_RCC_OscConfig+0x8f8>)
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d116      	bne.n	800559c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800556e:	4b19      	ldr	r3, [pc, #100]	; (80055d4 <HAL_RCC_OscConfig+0x8f8>)
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	4a18      	ldr	r2, [pc, #96]	; (80055d4 <HAL_RCC_OscConfig+0x8f8>)
 8005574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005578:	61d3      	str	r3, [r2, #28]
 800557a:	4b16      	ldr	r3, [pc, #88]	; (80055d4 <HAL_RCC_OscConfig+0x8f8>)
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005582:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005586:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005590:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005594:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005596:	2301      	movs	r3, #1
 8005598:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800559c:	4b0f      	ldr	r3, [pc, #60]	; (80055dc <HAL_RCC_OscConfig+0x900>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d121      	bne.n	80055ec <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055a8:	4b0c      	ldr	r3, [pc, #48]	; (80055dc <HAL_RCC_OscConfig+0x900>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a0b      	ldr	r2, [pc, #44]	; (80055dc <HAL_RCC_OscConfig+0x900>)
 80055ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055b4:	f7fd fcea 	bl	8002f8c <HAL_GetTick>
 80055b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055bc:	e010      	b.n	80055e0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055be:	f7fd fce5 	bl	8002f8c <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b64      	cmp	r3, #100	; 0x64
 80055cc:	d908      	bls.n	80055e0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e3d1      	b.n	8005d76 <HAL_RCC_OscConfig+0x109a>
 80055d2:	bf00      	nop
 80055d4:	40021000 	.word	0x40021000
 80055d8:	10908120 	.word	0x10908120
 80055dc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e0:	4b8d      	ldr	r3, [pc, #564]	; (8005818 <HAL_RCC_OscConfig+0xb3c>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0e8      	beq.n	80055be <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d106      	bne.n	800560a <HAL_RCC_OscConfig+0x92e>
 80055fc:	4b87      	ldr	r3, [pc, #540]	; (800581c <HAL_RCC_OscConfig+0xb40>)
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	4a86      	ldr	r2, [pc, #536]	; (800581c <HAL_RCC_OscConfig+0xb40>)
 8005602:	f043 0301 	orr.w	r3, r3, #1
 8005606:	6213      	str	r3, [r2, #32]
 8005608:	e035      	b.n	8005676 <HAL_RCC_OscConfig+0x99a>
 800560a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800560e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10c      	bne.n	8005634 <HAL_RCC_OscConfig+0x958>
 800561a:	4b80      	ldr	r3, [pc, #512]	; (800581c <HAL_RCC_OscConfig+0xb40>)
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	4a7f      	ldr	r2, [pc, #508]	; (800581c <HAL_RCC_OscConfig+0xb40>)
 8005620:	f023 0301 	bic.w	r3, r3, #1
 8005624:	6213      	str	r3, [r2, #32]
 8005626:	4b7d      	ldr	r3, [pc, #500]	; (800581c <HAL_RCC_OscConfig+0xb40>)
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	4a7c      	ldr	r2, [pc, #496]	; (800581c <HAL_RCC_OscConfig+0xb40>)
 800562c:	f023 0304 	bic.w	r3, r3, #4
 8005630:	6213      	str	r3, [r2, #32]
 8005632:	e020      	b.n	8005676 <HAL_RCC_OscConfig+0x99a>
 8005634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005638:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2b05      	cmp	r3, #5
 8005642:	d10c      	bne.n	800565e <HAL_RCC_OscConfig+0x982>
 8005644:	4b75      	ldr	r3, [pc, #468]	; (800581c <HAL_RCC_OscConfig+0xb40>)
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	4a74      	ldr	r2, [pc, #464]	; (800581c <HAL_RCC_OscConfig+0xb40>)
 800564a:	f043 0304 	orr.w	r3, r3, #4
 800564e:	6213      	str	r3, [r2, #32]
 8005650:	4b72      	ldr	r3, [pc, #456]	; (800581c <HAL_RCC_OscConfig+0xb40>)
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	4a71      	ldr	r2, [pc, #452]	; (800581c <HAL_RCC_OscConfig+0xb40>)
 8005656:	f043 0301 	orr.w	r3, r3, #1
 800565a:	6213      	str	r3, [r2, #32]
 800565c:	e00b      	b.n	8005676 <HAL_RCC_OscConfig+0x99a>
 800565e:	4b6f      	ldr	r3, [pc, #444]	; (800581c <HAL_RCC_OscConfig+0xb40>)
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	4a6e      	ldr	r2, [pc, #440]	; (800581c <HAL_RCC_OscConfig+0xb40>)
 8005664:	f023 0301 	bic.w	r3, r3, #1
 8005668:	6213      	str	r3, [r2, #32]
 800566a:	4b6c      	ldr	r3, [pc, #432]	; (800581c <HAL_RCC_OscConfig+0xb40>)
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	4a6b      	ldr	r2, [pc, #428]	; (800581c <HAL_RCC_OscConfig+0xb40>)
 8005670:	f023 0304 	bic.w	r3, r3, #4
 8005674:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005676:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800567a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 8081 	beq.w	800578a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005688:	f7fd fc80 	bl	8002f8c <HAL_GetTick>
 800568c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005690:	e00b      	b.n	80056aa <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005692:	f7fd fc7b 	bl	8002f8c <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e365      	b.n	8005d76 <HAL_RCC_OscConfig+0x109a>
 80056aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056ae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80056b2:	2202      	movs	r2, #2
 80056b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056ba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	fa93 f2a3 	rbit	r2, r3
 80056c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056d2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80056d6:	2202      	movs	r2, #2
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056de:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	fa93 f2a3 	rbit	r2, r3
 80056e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80056f0:	601a      	str	r2, [r3, #0]
  return result;
 80056f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056f6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80056fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056fc:	fab3 f383 	clz	r3, r3
 8005700:	b2db      	uxtb	r3, r3
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	b2db      	uxtb	r3, r3
 8005706:	f043 0302 	orr.w	r3, r3, #2
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d102      	bne.n	8005716 <HAL_RCC_OscConfig+0xa3a>
 8005710:	4b42      	ldr	r3, [pc, #264]	; (800581c <HAL_RCC_OscConfig+0xb40>)
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	e013      	b.n	800573e <HAL_RCC_OscConfig+0xa62>
 8005716:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800571a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800571e:	2202      	movs	r2, #2
 8005720:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005726:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	fa93 f2a3 	rbit	r2, r3
 8005730:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005734:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	4b38      	ldr	r3, [pc, #224]	; (800581c <HAL_RCC_OscConfig+0xb40>)
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005742:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005746:	2102      	movs	r1, #2
 8005748:	6011      	str	r1, [r2, #0]
 800574a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800574e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005752:	6812      	ldr	r2, [r2, #0]
 8005754:	fa92 f1a2 	rbit	r1, r2
 8005758:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800575c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005760:	6011      	str	r1, [r2, #0]
  return result;
 8005762:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005766:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800576a:	6812      	ldr	r2, [r2, #0]
 800576c:	fab2 f282 	clz	r2, r2
 8005770:	b2d2      	uxtb	r2, r2
 8005772:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	f002 021f 	and.w	r2, r2, #31
 800577c:	2101      	movs	r1, #1
 800577e:	fa01 f202 	lsl.w	r2, r1, r2
 8005782:	4013      	ands	r3, r2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d084      	beq.n	8005692 <HAL_RCC_OscConfig+0x9b6>
 8005788:	e083      	b.n	8005892 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800578a:	f7fd fbff 	bl	8002f8c <HAL_GetTick>
 800578e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005792:	e00b      	b.n	80057ac <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005794:	f7fd fbfa 	bl	8002f8c <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d901      	bls.n	80057ac <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e2e4      	b.n	8005d76 <HAL_RCC_OscConfig+0x109a>
 80057ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057b0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80057b4:	2202      	movs	r2, #2
 80057b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057bc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	fa93 f2a3 	rbit	r2, r3
 80057c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057d4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80057d8:	2202      	movs	r2, #2
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057e0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	fa93 f2a3 	rbit	r2, r3
 80057ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80057f2:	601a      	str	r2, [r3, #0]
  return result;
 80057f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057f8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80057fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057fe:	fab3 f383 	clz	r3, r3
 8005802:	b2db      	uxtb	r3, r3
 8005804:	095b      	lsrs	r3, r3, #5
 8005806:	b2db      	uxtb	r3, r3
 8005808:	f043 0302 	orr.w	r3, r3, #2
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d106      	bne.n	8005820 <HAL_RCC_OscConfig+0xb44>
 8005812:	4b02      	ldr	r3, [pc, #8]	; (800581c <HAL_RCC_OscConfig+0xb40>)
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	e017      	b.n	8005848 <HAL_RCC_OscConfig+0xb6c>
 8005818:	40007000 	.word	0x40007000
 800581c:	40021000 	.word	0x40021000
 8005820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005824:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005828:	2202      	movs	r2, #2
 800582a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005830:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	fa93 f2a3 	rbit	r2, r3
 800583a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800583e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	4bb3      	ldr	r3, [pc, #716]	; (8005b14 <HAL_RCC_OscConfig+0xe38>)
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800584c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005850:	2102      	movs	r1, #2
 8005852:	6011      	str	r1, [r2, #0]
 8005854:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005858:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800585c:	6812      	ldr	r2, [r2, #0]
 800585e:	fa92 f1a2 	rbit	r1, r2
 8005862:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005866:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800586a:	6011      	str	r1, [r2, #0]
  return result;
 800586c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005870:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	fab2 f282 	clz	r2, r2
 800587a:	b2d2      	uxtb	r2, r2
 800587c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	f002 021f 	and.w	r2, r2, #31
 8005886:	2101      	movs	r1, #1
 8005888:	fa01 f202 	lsl.w	r2, r1, r2
 800588c:	4013      	ands	r3, r2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d180      	bne.n	8005794 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005892:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8005896:	2b01      	cmp	r3, #1
 8005898:	d105      	bne.n	80058a6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800589a:	4b9e      	ldr	r3, [pc, #632]	; (8005b14 <HAL_RCC_OscConfig+0xe38>)
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	4a9d      	ldr	r2, [pc, #628]	; (8005b14 <HAL_RCC_OscConfig+0xe38>)
 80058a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058a4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 825e 	beq.w	8005d74 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058b8:	4b96      	ldr	r3, [pc, #600]	; (8005b14 <HAL_RCC_OscConfig+0xe38>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f003 030c 	and.w	r3, r3, #12
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	f000 821f 	beq.w	8005d04 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	f040 8170 	bne.w	8005bb8 <HAL_RCC_OscConfig+0xedc>
 80058d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058dc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80058e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058ea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	fa93 f2a3 	rbit	r2, r3
 80058f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058f8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80058fc:	601a      	str	r2, [r3, #0]
  return result;
 80058fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005902:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005906:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005908:	fab3 f383 	clz	r3, r3
 800590c:	b2db      	uxtb	r3, r3
 800590e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005912:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	461a      	mov	r2, r3
 800591a:	2300      	movs	r3, #0
 800591c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591e:	f7fd fb35 	bl	8002f8c <HAL_GetTick>
 8005922:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005926:	e009      	b.n	800593c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005928:	f7fd fb30 	bl	8002f8c <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e21c      	b.n	8005d76 <HAL_RCC_OscConfig+0x109a>
 800593c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005940:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005944:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005948:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800594a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800594e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	fa93 f2a3 	rbit	r2, r3
 8005958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800595c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005960:	601a      	str	r2, [r3, #0]
  return result;
 8005962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005966:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800596a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800596c:	fab3 f383 	clz	r3, r3
 8005970:	b2db      	uxtb	r3, r3
 8005972:	095b      	lsrs	r3, r3, #5
 8005974:	b2db      	uxtb	r3, r3
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b01      	cmp	r3, #1
 800597e:	d102      	bne.n	8005986 <HAL_RCC_OscConfig+0xcaa>
 8005980:	4b64      	ldr	r3, [pc, #400]	; (8005b14 <HAL_RCC_OscConfig+0xe38>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	e027      	b.n	80059d6 <HAL_RCC_OscConfig+0xcfa>
 8005986:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800598a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800598e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005992:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005994:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005998:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	fa93 f2a3 	rbit	r2, r3
 80059a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059a6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059b0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80059b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059be:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	fa93 f2a3 	rbit	r2, r3
 80059c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059cc:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	4b50      	ldr	r3, [pc, #320]	; (8005b14 <HAL_RCC_OscConfig+0xe38>)
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80059da:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80059de:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80059e2:	6011      	str	r1, [r2, #0]
 80059e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80059e8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80059ec:	6812      	ldr	r2, [r2, #0]
 80059ee:	fa92 f1a2 	rbit	r1, r2
 80059f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80059f6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80059fa:	6011      	str	r1, [r2, #0]
  return result;
 80059fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005a00:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8005a04:	6812      	ldr	r2, [r2, #0]
 8005a06:	fab2 f282 	clz	r2, r2
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	f042 0220 	orr.w	r2, r2, #32
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	f002 021f 	and.w	r2, r2, #31
 8005a16:	2101      	movs	r1, #1
 8005a18:	fa01 f202 	lsl.w	r2, r1, r2
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d182      	bne.n	8005928 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a22:	4b3c      	ldr	r3, [pc, #240]	; (8005b14 <HAL_RCC_OscConfig+0xe38>)
 8005a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a26:	f023 020f 	bic.w	r2, r3, #15
 8005a2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	4937      	ldr	r1, [pc, #220]	; (8005b14 <HAL_RCC_OscConfig+0xe38>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005a3c:	4b35      	ldr	r3, [pc, #212]	; (8005b14 <HAL_RCC_OscConfig+0xe38>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005a44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6a19      	ldr	r1, [r3, #32]
 8005a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	430b      	orrs	r3, r1
 8005a5e:	492d      	ldr	r1, [pc, #180]	; (8005b14 <HAL_RCC_OscConfig+0xe38>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	604b      	str	r3, [r1, #4]
 8005a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a68:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005a6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a76:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	fa93 f2a3 	rbit	r2, r3
 8005a80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a84:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005a88:	601a      	str	r2, [r3, #0]
  return result;
 8005a8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a8e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005a92:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a94:	fab3 f383 	clz	r3, r3
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aaa:	f7fd fa6f 	bl	8002f8c <HAL_GetTick>
 8005aae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ab2:	e009      	b.n	8005ac8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ab4:	f7fd fa6a 	bl	8002f8c <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e156      	b.n	8005d76 <HAL_RCC_OscConfig+0x109a>
 8005ac8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005acc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005ad0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ad4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ada:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	fa93 f2a3 	rbit	r2, r3
 8005ae4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ae8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005aec:	601a      	str	r2, [r3, #0]
  return result;
 8005aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005af2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005af6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005af8:	fab3 f383 	clz	r3, r3
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	095b      	lsrs	r3, r3, #5
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	f043 0301 	orr.w	r3, r3, #1
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d105      	bne.n	8005b18 <HAL_RCC_OscConfig+0xe3c>
 8005b0c:	4b01      	ldr	r3, [pc, #4]	; (8005b14 <HAL_RCC_OscConfig+0xe38>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	e02a      	b.n	8005b68 <HAL_RCC_OscConfig+0xe8c>
 8005b12:	bf00      	nop
 8005b14:	40021000 	.word	0x40021000
 8005b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b1c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005b20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b2a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	fa93 f2a3 	rbit	r2, r3
 8005b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b38:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b42:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005b46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b50:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	fa93 f2a3 	rbit	r2, r3
 8005b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b5e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	4b86      	ldr	r3, [pc, #536]	; (8005d80 <HAL_RCC_OscConfig+0x10a4>)
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b6c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005b70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005b74:	6011      	str	r1, [r2, #0]
 8005b76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b7a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005b7e:	6812      	ldr	r2, [r2, #0]
 8005b80:	fa92 f1a2 	rbit	r1, r2
 8005b84:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b88:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005b8c:	6011      	str	r1, [r2, #0]
  return result;
 8005b8e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b92:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005b96:	6812      	ldr	r2, [r2, #0]
 8005b98:	fab2 f282 	clz	r2, r2
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	f042 0220 	orr.w	r2, r2, #32
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	f002 021f 	and.w	r2, r2, #31
 8005ba8:	2101      	movs	r1, #1
 8005baa:	fa01 f202 	lsl.w	r2, r1, r2
 8005bae:	4013      	ands	r3, r2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f43f af7f 	beq.w	8005ab4 <HAL_RCC_OscConfig+0xdd8>
 8005bb6:	e0dd      	b.n	8005d74 <HAL_RCC_OscConfig+0x1098>
 8005bb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bbc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005bc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	fa93 f2a3 	rbit	r2, r3
 8005bd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bd8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005bdc:	601a      	str	r2, [r3, #0]
  return result;
 8005bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005be2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005be6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be8:	fab3 f383 	clz	r3, r3
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005bf2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bfe:	f7fd f9c5 	bl	8002f8c <HAL_GetTick>
 8005c02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c06:	e009      	b.n	8005c1c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c08:	f7fd f9c0 	bl	8002f8c <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e0ac      	b.n	8005d76 <HAL_RCC_OscConfig+0x109a>
 8005c1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c20:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005c24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c2e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	fa93 f2a3 	rbit	r2, r3
 8005c38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c3c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005c40:	601a      	str	r2, [r3, #0]
  return result;
 8005c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c46:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005c4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c4c:	fab3 f383 	clz	r3, r3
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	f043 0301 	orr.w	r3, r3, #1
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d102      	bne.n	8005c66 <HAL_RCC_OscConfig+0xf8a>
 8005c60:	4b47      	ldr	r3, [pc, #284]	; (8005d80 <HAL_RCC_OscConfig+0x10a4>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	e027      	b.n	8005cb6 <HAL_RCC_OscConfig+0xfda>
 8005c66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c6a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005c6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c78:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	fa93 f2a3 	rbit	r2, r3
 8005c82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c86:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c90:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005c94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c9e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	fa93 f2a3 	rbit	r2, r3
 8005ca8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005cac:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	4b33      	ldr	r3, [pc, #204]	; (8005d80 <HAL_RCC_OscConfig+0x10a4>)
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005cba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005cbe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005cc2:	6011      	str	r1, [r2, #0]
 8005cc4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005cc8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005ccc:	6812      	ldr	r2, [r2, #0]
 8005cce:	fa92 f1a2 	rbit	r1, r2
 8005cd2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005cd6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005cda:	6011      	str	r1, [r2, #0]
  return result;
 8005cdc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005ce0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005ce4:	6812      	ldr	r2, [r2, #0]
 8005ce6:	fab2 f282 	clz	r2, r2
 8005cea:	b2d2      	uxtb	r2, r2
 8005cec:	f042 0220 	orr.w	r2, r2, #32
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	f002 021f 	and.w	r2, r2, #31
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d182      	bne.n	8005c08 <HAL_RCC_OscConfig+0xf2c>
 8005d02:	e037      	b.n	8005d74 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d08:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e02e      	b.n	8005d76 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d18:	4b19      	ldr	r3, [pc, #100]	; (8005d80 <HAL_RCC_OscConfig+0x10a4>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005d20:	4b17      	ldr	r3, [pc, #92]	; (8005d80 <HAL_RCC_OscConfig+0x10a4>)
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005d28:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005d2c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d117      	bne.n	8005d70 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005d40:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005d44:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d10b      	bne.n	8005d70 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005d58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d5c:	f003 020f 	and.w	r2, r3, #15
 8005d60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d001      	beq.n	8005d74 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e000      	b.n	8005d76 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40021000 	.word	0x40021000

08005d84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b09e      	sub	sp, #120	; 0x78
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e162      	b.n	8006062 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d9c:	4b90      	ldr	r3, [pc, #576]	; (8005fe0 <HAL_RCC_ClockConfig+0x25c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d910      	bls.n	8005dcc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005daa:	4b8d      	ldr	r3, [pc, #564]	; (8005fe0 <HAL_RCC_ClockConfig+0x25c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f023 0207 	bic.w	r2, r3, #7
 8005db2:	498b      	ldr	r1, [pc, #556]	; (8005fe0 <HAL_RCC_ClockConfig+0x25c>)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dba:	4b89      	ldr	r3, [pc, #548]	; (8005fe0 <HAL_RCC_ClockConfig+0x25c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d001      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e14a      	b.n	8006062 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d008      	beq.n	8005dea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dd8:	4b82      	ldr	r3, [pc, #520]	; (8005fe4 <HAL_RCC_ClockConfig+0x260>)
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	497f      	ldr	r1, [pc, #508]	; (8005fe4 <HAL_RCC_ClockConfig+0x260>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 80dc 	beq.w	8005fb0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d13c      	bne.n	8005e7a <HAL_RCC_ClockConfig+0xf6>
 8005e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e04:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e08:	fa93 f3a3 	rbit	r3, r3
 8005e0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e10:	fab3 f383 	clz	r3, r3
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	f043 0301 	orr.w	r3, r3, #1
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d102      	bne.n	8005e2a <HAL_RCC_ClockConfig+0xa6>
 8005e24:	4b6f      	ldr	r3, [pc, #444]	; (8005fe4 <HAL_RCC_ClockConfig+0x260>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	e00f      	b.n	8005e4a <HAL_RCC_ClockConfig+0xc6>
 8005e2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e32:	fa93 f3a3 	rbit	r3, r3
 8005e36:	667b      	str	r3, [r7, #100]	; 0x64
 8005e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e3c:	663b      	str	r3, [r7, #96]	; 0x60
 8005e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e40:	fa93 f3a3 	rbit	r3, r3
 8005e44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e46:	4b67      	ldr	r3, [pc, #412]	; (8005fe4 <HAL_RCC_ClockConfig+0x260>)
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005e4e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e52:	fa92 f2a2 	rbit	r2, r2
 8005e56:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005e58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e5a:	fab2 f282 	clz	r2, r2
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	f042 0220 	orr.w	r2, r2, #32
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	f002 021f 	and.w	r2, r2, #31
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e70:	4013      	ands	r3, r2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d17b      	bne.n	8005f6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e0f3      	b.n	8006062 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d13c      	bne.n	8005efc <HAL_RCC_ClockConfig+0x178>
 8005e82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e8a:	fa93 f3a3 	rbit	r3, r3
 8005e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e92:	fab3 f383 	clz	r3, r3
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	095b      	lsrs	r3, r3, #5
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	f043 0301 	orr.w	r3, r3, #1
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d102      	bne.n	8005eac <HAL_RCC_ClockConfig+0x128>
 8005ea6:	4b4f      	ldr	r3, [pc, #316]	; (8005fe4 <HAL_RCC_ClockConfig+0x260>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	e00f      	b.n	8005ecc <HAL_RCC_ClockConfig+0x148>
 8005eac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005eb0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb4:	fa93 f3a3 	rbit	r3, r3
 8005eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8005eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ebe:	643b      	str	r3, [r7, #64]	; 0x40
 8005ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec2:	fa93 f3a3 	rbit	r3, r3
 8005ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ec8:	4b46      	ldr	r3, [pc, #280]	; (8005fe4 <HAL_RCC_ClockConfig+0x260>)
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ed0:	63ba      	str	r2, [r7, #56]	; 0x38
 8005ed2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ed4:	fa92 f2a2 	rbit	r2, r2
 8005ed8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005eda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005edc:	fab2 f282 	clz	r2, r2
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	f042 0220 	orr.w	r2, r2, #32
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	f002 021f 	and.w	r2, r2, #31
 8005eec:	2101      	movs	r1, #1
 8005eee:	fa01 f202 	lsl.w	r2, r1, r2
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d13a      	bne.n	8005f6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e0b2      	b.n	8006062 <HAL_RCC_ClockConfig+0x2de>
 8005efc:	2302      	movs	r3, #2
 8005efe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	fa93 f3a3 	rbit	r3, r3
 8005f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f0a:	fab3 f383 	clz	r3, r3
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	095b      	lsrs	r3, r3, #5
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	f043 0301 	orr.w	r3, r3, #1
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d102      	bne.n	8005f24 <HAL_RCC_ClockConfig+0x1a0>
 8005f1e:	4b31      	ldr	r3, [pc, #196]	; (8005fe4 <HAL_RCC_ClockConfig+0x260>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	e00d      	b.n	8005f40 <HAL_RCC_ClockConfig+0x1bc>
 8005f24:	2302      	movs	r3, #2
 8005f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2a:	fa93 f3a3 	rbit	r3, r3
 8005f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f30:	2302      	movs	r3, #2
 8005f32:	623b      	str	r3, [r7, #32]
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	fa93 f3a3 	rbit	r3, r3
 8005f3a:	61fb      	str	r3, [r7, #28]
 8005f3c:	4b29      	ldr	r3, [pc, #164]	; (8005fe4 <HAL_RCC_ClockConfig+0x260>)
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	2202      	movs	r2, #2
 8005f42:	61ba      	str	r2, [r7, #24]
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	fa92 f2a2 	rbit	r2, r2
 8005f4a:	617a      	str	r2, [r7, #20]
  return result;
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	fab2 f282 	clz	r2, r2
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	f042 0220 	orr.w	r2, r2, #32
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	f002 021f 	and.w	r2, r2, #31
 8005f5e:	2101      	movs	r1, #1
 8005f60:	fa01 f202 	lsl.w	r2, r1, r2
 8005f64:	4013      	ands	r3, r2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e079      	b.n	8006062 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f6e:	4b1d      	ldr	r3, [pc, #116]	; (8005fe4 <HAL_RCC_ClockConfig+0x260>)
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f023 0203 	bic.w	r2, r3, #3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	491a      	ldr	r1, [pc, #104]	; (8005fe4 <HAL_RCC_ClockConfig+0x260>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f80:	f7fd f804 	bl	8002f8c <HAL_GetTick>
 8005f84:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f86:	e00a      	b.n	8005f9e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f88:	f7fd f800 	bl	8002f8c <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e061      	b.n	8006062 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f9e:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <HAL_RCC_ClockConfig+0x260>)
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f003 020c 	and.w	r2, r3, #12
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d1eb      	bne.n	8005f88 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <HAL_RCC_ClockConfig+0x25c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d214      	bcs.n	8005fe8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fbe:	4b08      	ldr	r3, [pc, #32]	; (8005fe0 <HAL_RCC_ClockConfig+0x25c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f023 0207 	bic.w	r2, r3, #7
 8005fc6:	4906      	ldr	r1, [pc, #24]	; (8005fe0 <HAL_RCC_ClockConfig+0x25c>)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fce:	4b04      	ldr	r3, [pc, #16]	; (8005fe0 <HAL_RCC_ClockConfig+0x25c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0307 	and.w	r3, r3, #7
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d005      	beq.n	8005fe8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e040      	b.n	8006062 <HAL_RCC_ClockConfig+0x2de>
 8005fe0:	40022000 	.word	0x40022000
 8005fe4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d008      	beq.n	8006006 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ff4:	4b1d      	ldr	r3, [pc, #116]	; (800606c <HAL_RCC_ClockConfig+0x2e8>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	491a      	ldr	r1, [pc, #104]	; (800606c <HAL_RCC_ClockConfig+0x2e8>)
 8006002:	4313      	orrs	r3, r2
 8006004:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0308 	and.w	r3, r3, #8
 800600e:	2b00      	cmp	r3, #0
 8006010:	d009      	beq.n	8006026 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006012:	4b16      	ldr	r3, [pc, #88]	; (800606c <HAL_RCC_ClockConfig+0x2e8>)
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	4912      	ldr	r1, [pc, #72]	; (800606c <HAL_RCC_ClockConfig+0x2e8>)
 8006022:	4313      	orrs	r3, r2
 8006024:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006026:	f000 f829 	bl	800607c <HAL_RCC_GetSysClockFreq>
 800602a:	4601      	mov	r1, r0
 800602c:	4b0f      	ldr	r3, [pc, #60]	; (800606c <HAL_RCC_ClockConfig+0x2e8>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006034:	22f0      	movs	r2, #240	; 0xf0
 8006036:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	fa92 f2a2 	rbit	r2, r2
 800603e:	60fa      	str	r2, [r7, #12]
  return result;
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	fab2 f282 	clz	r2, r2
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	40d3      	lsrs	r3, r2
 800604a:	4a09      	ldr	r2, [pc, #36]	; (8006070 <HAL_RCC_ClockConfig+0x2ec>)
 800604c:	5cd3      	ldrb	r3, [r2, r3]
 800604e:	fa21 f303 	lsr.w	r3, r1, r3
 8006052:	4a08      	ldr	r2, [pc, #32]	; (8006074 <HAL_RCC_ClockConfig+0x2f0>)
 8006054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006056:	4b08      	ldr	r3, [pc, #32]	; (8006078 <HAL_RCC_ClockConfig+0x2f4>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4618      	mov	r0, r3
 800605c:	f7fc ff52 	bl	8002f04 <HAL_InitTick>
  
  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3778      	adds	r7, #120	; 0x78
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	40021000 	.word	0x40021000
 8006070:	0800a638 	.word	0x0800a638
 8006074:	200000fc 	.word	0x200000fc
 8006078:	20000100 	.word	0x20000100

0800607c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800607c:	b480      	push	{r7}
 800607e:	b08b      	sub	sp, #44	; 0x2c
 8006080:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	61fb      	str	r3, [r7, #28]
 8006086:	2300      	movs	r3, #0
 8006088:	61bb      	str	r3, [r7, #24]
 800608a:	2300      	movs	r3, #0
 800608c:	627b      	str	r3, [r7, #36]	; 0x24
 800608e:	2300      	movs	r3, #0
 8006090:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006096:	4b2a      	ldr	r3, [pc, #168]	; (8006140 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	f003 030c 	and.w	r3, r3, #12
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	d002      	beq.n	80060ac <HAL_RCC_GetSysClockFreq+0x30>
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d003      	beq.n	80060b2 <HAL_RCC_GetSysClockFreq+0x36>
 80060aa:	e03f      	b.n	800612c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80060ac:	4b25      	ldr	r3, [pc, #148]	; (8006144 <HAL_RCC_GetSysClockFreq+0xc8>)
 80060ae:	623b      	str	r3, [r7, #32]
      break;
 80060b0:	e03f      	b.n	8006132 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80060b8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80060bc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	fa92 f2a2 	rbit	r2, r2
 80060c4:	607a      	str	r2, [r7, #4]
  return result;
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	fab2 f282 	clz	r2, r2
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	40d3      	lsrs	r3, r2
 80060d0:	4a1d      	ldr	r2, [pc, #116]	; (8006148 <HAL_RCC_GetSysClockFreq+0xcc>)
 80060d2:	5cd3      	ldrb	r3, [r2, r3]
 80060d4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80060d6:	4b1a      	ldr	r3, [pc, #104]	; (8006140 <HAL_RCC_GetSysClockFreq+0xc4>)
 80060d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060da:	f003 030f 	and.w	r3, r3, #15
 80060de:	220f      	movs	r2, #15
 80060e0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	fa92 f2a2 	rbit	r2, r2
 80060e8:	60fa      	str	r2, [r7, #12]
  return result;
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	fab2 f282 	clz	r2, r2
 80060f0:	b2d2      	uxtb	r2, r2
 80060f2:	40d3      	lsrs	r3, r2
 80060f4:	4a15      	ldr	r2, [pc, #84]	; (800614c <HAL_RCC_GetSysClockFreq+0xd0>)
 80060f6:	5cd3      	ldrb	r3, [r2, r3]
 80060f8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d008      	beq.n	8006116 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006104:	4a0f      	ldr	r2, [pc, #60]	; (8006144 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	fbb2 f2f3 	udiv	r2, r2, r3
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	fb02 f303 	mul.w	r3, r2, r3
 8006112:	627b      	str	r3, [r7, #36]	; 0x24
 8006114:	e007      	b.n	8006126 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006116:	4a0b      	ldr	r2, [pc, #44]	; (8006144 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	fbb2 f2f3 	udiv	r2, r2, r3
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	fb02 f303 	mul.w	r3, r2, r3
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	623b      	str	r3, [r7, #32]
      break;
 800612a:	e002      	b.n	8006132 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800612c:	4b05      	ldr	r3, [pc, #20]	; (8006144 <HAL_RCC_GetSysClockFreq+0xc8>)
 800612e:	623b      	str	r3, [r7, #32]
      break;
 8006130:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006132:	6a3b      	ldr	r3, [r7, #32]
}
 8006134:	4618      	mov	r0, r3
 8006136:	372c      	adds	r7, #44	; 0x2c
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	40021000 	.word	0x40021000
 8006144:	007a1200 	.word	0x007a1200
 8006148:	0800a650 	.word	0x0800a650
 800614c:	0800a660 	.word	0x0800a660

08006150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006154:	4b03      	ldr	r3, [pc, #12]	; (8006164 <HAL_RCC_GetHCLKFreq+0x14>)
 8006156:	681b      	ldr	r3, [r3, #0]
}
 8006158:	4618      	mov	r0, r3
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	200000fc 	.word	0x200000fc

08006168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800616e:	f7ff ffef 	bl	8006150 <HAL_RCC_GetHCLKFreq>
 8006172:	4601      	mov	r1, r0
 8006174:	4b0b      	ldr	r3, [pc, #44]	; (80061a4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800617c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006180:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	fa92 f2a2 	rbit	r2, r2
 8006188:	603a      	str	r2, [r7, #0]
  return result;
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	fab2 f282 	clz	r2, r2
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	40d3      	lsrs	r3, r2
 8006194:	4a04      	ldr	r2, [pc, #16]	; (80061a8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006196:	5cd3      	ldrb	r3, [r2, r3]
 8006198:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800619c:	4618      	mov	r0, r3
 800619e:	3708      	adds	r7, #8
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	40021000 	.word	0x40021000
 80061a8:	0800a648 	.word	0x0800a648

080061ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80061b2:	f7ff ffcd 	bl	8006150 <HAL_RCC_GetHCLKFreq>
 80061b6:	4601      	mov	r1, r0
 80061b8:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80061c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80061c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	fa92 f2a2 	rbit	r2, r2
 80061cc:	603a      	str	r2, [r7, #0]
  return result;
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	fab2 f282 	clz	r2, r2
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	40d3      	lsrs	r3, r2
 80061d8:	4a04      	ldr	r2, [pc, #16]	; (80061ec <HAL_RCC_GetPCLK2Freq+0x40>)
 80061da:	5cd3      	ldrb	r3, [r2, r3]
 80061dc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80061e0:	4618      	mov	r0, r3
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	40021000 	.word	0x40021000
 80061ec:	0800a648 	.word	0x0800a648

080061f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b092      	sub	sp, #72	; 0x48
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006200:	2300      	movs	r3, #0
 8006202:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 80d4 	beq.w	80063bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006214:	4b4e      	ldr	r3, [pc, #312]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10e      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006220:	4b4b      	ldr	r3, [pc, #300]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	4a4a      	ldr	r2, [pc, #296]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800622a:	61d3      	str	r3, [r2, #28]
 800622c:	4b48      	ldr	r3, [pc, #288]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006234:	60bb      	str	r3, [r7, #8]
 8006236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006238:	2301      	movs	r3, #1
 800623a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800623e:	4b45      	ldr	r3, [pc, #276]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006246:	2b00      	cmp	r3, #0
 8006248:	d118      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800624a:	4b42      	ldr	r3, [pc, #264]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a41      	ldr	r2, [pc, #260]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006254:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006256:	f7fc fe99 	bl	8002f8c <HAL_GetTick>
 800625a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800625c:	e008      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800625e:	f7fc fe95 	bl	8002f8c <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2b64      	cmp	r3, #100	; 0x64
 800626a:	d901      	bls.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e1d6      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006270:	4b38      	ldr	r3, [pc, #224]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0f0      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800627c:	4b34      	ldr	r3, [pc, #208]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006284:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 8084 	beq.w	8006396 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006296:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006298:	429a      	cmp	r2, r3
 800629a:	d07c      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800629c:	4b2c      	ldr	r3, [pc, #176]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	fa93 f3a3 	rbit	r3, r3
 80062b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80062b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062b6:	fab3 f383 	clz	r3, r3
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	461a      	mov	r2, r3
 80062be:	4b26      	ldr	r3, [pc, #152]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	461a      	mov	r2, r3
 80062c6:	2301      	movs	r3, #1
 80062c8:	6013      	str	r3, [r2, #0]
 80062ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d2:	fa93 f3a3 	rbit	r3, r3
 80062d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80062d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062da:	fab3 f383 	clz	r3, r3
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	461a      	mov	r2, r3
 80062e2:	4b1d      	ldr	r3, [pc, #116]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062e4:	4413      	add	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	461a      	mov	r2, r3
 80062ea:	2300      	movs	r3, #0
 80062ec:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80062ee:	4a18      	ldr	r2, [pc, #96]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80062f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d04b      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062fe:	f7fc fe45 	bl	8002f8c <HAL_GetTick>
 8006302:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006304:	e00a      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006306:	f7fc fe41 	bl	8002f8c <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	f241 3288 	movw	r2, #5000	; 0x1388
 8006314:	4293      	cmp	r3, r2
 8006316:	d901      	bls.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e180      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800631c:	2302      	movs	r3, #2
 800631e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006322:	fa93 f3a3 	rbit	r3, r3
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
 8006328:	2302      	movs	r3, #2
 800632a:	623b      	str	r3, [r7, #32]
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	fa93 f3a3 	rbit	r3, r3
 8006332:	61fb      	str	r3, [r7, #28]
  return result;
 8006334:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006336:	fab3 f383 	clz	r3, r3
 800633a:	b2db      	uxtb	r3, r3
 800633c:	095b      	lsrs	r3, r3, #5
 800633e:	b2db      	uxtb	r3, r3
 8006340:	f043 0302 	orr.w	r3, r3, #2
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d108      	bne.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800634a:	4b01      	ldr	r3, [pc, #4]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	e00d      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006350:	40021000 	.word	0x40021000
 8006354:	40007000 	.word	0x40007000
 8006358:	10908100 	.word	0x10908100
 800635c:	2302      	movs	r3, #2
 800635e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	fa93 f3a3 	rbit	r3, r3
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	4b9a      	ldr	r3, [pc, #616]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	2202      	movs	r2, #2
 800636e:	613a      	str	r2, [r7, #16]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	fa92 f2a2 	rbit	r2, r2
 8006376:	60fa      	str	r2, [r7, #12]
  return result;
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	fab2 f282 	clz	r2, r2
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006384:	b2d2      	uxtb	r2, r2
 8006386:	f002 021f 	and.w	r2, r2, #31
 800638a:	2101      	movs	r1, #1
 800638c:	fa01 f202 	lsl.w	r2, r1, r2
 8006390:	4013      	ands	r3, r2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0b7      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006396:	4b8f      	ldr	r3, [pc, #572]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	498c      	ldr	r1, [pc, #560]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80063a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d105      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063b0:	4b88      	ldr	r3, [pc, #544]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	4a87      	ldr	r2, [pc, #540]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d008      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063c8:	4b82      	ldr	r3, [pc, #520]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063cc:	f023 0203 	bic.w	r2, r3, #3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	497f      	ldr	r1, [pc, #508]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d008      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063e6:	4b7b      	ldr	r3, [pc, #492]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	4978      	ldr	r1, [pc, #480]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b00      	cmp	r3, #0
 8006402:	d008      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006404:	4b73      	ldr	r3, [pc, #460]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006408:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	4970      	ldr	r1, [pc, #448]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006412:	4313      	orrs	r3, r2
 8006414:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b00      	cmp	r3, #0
 8006420:	d008      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006422:	4b6c      	ldr	r3, [pc, #432]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006426:	f023 0210 	bic.w	r2, r3, #16
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	4969      	ldr	r1, [pc, #420]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006430:	4313      	orrs	r3, r2
 8006432:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d008      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006440:	4b64      	ldr	r3, [pc, #400]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644c:	4961      	ldr	r1, [pc, #388]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800644e:	4313      	orrs	r3, r2
 8006450:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645a:	2b00      	cmp	r3, #0
 800645c:	d008      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800645e:	4b5d      	ldr	r3, [pc, #372]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006462:	f023 0220 	bic.w	r2, r3, #32
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	495a      	ldr	r1, [pc, #360]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800646c:	4313      	orrs	r3, r2
 800646e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d008      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800647c:	4b55      	ldr	r3, [pc, #340]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800647e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006480:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	4952      	ldr	r1, [pc, #328]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800648a:	4313      	orrs	r3, r2
 800648c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0308 	and.w	r3, r3, #8
 8006496:	2b00      	cmp	r3, #0
 8006498:	d008      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800649a:	4b4e      	ldr	r3, [pc, #312]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800649c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	494b      	ldr	r1, [pc, #300]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d008      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80064b8:	4b46      	ldr	r3, [pc, #280]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	4943      	ldr	r1, [pc, #268]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d008      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80064d6:	4b3f      	ldr	r3, [pc, #252]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e2:	493c      	ldr	r1, [pc, #240]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d008      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80064f4:	4b37      	ldr	r3, [pc, #220]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006500:	4934      	ldr	r1, [pc, #208]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006502:	4313      	orrs	r3, r2
 8006504:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800650e:	2b00      	cmp	r3, #0
 8006510:	d008      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006512:	4b30      	ldr	r3, [pc, #192]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006516:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651e:	492d      	ldr	r1, [pc, #180]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006520:	4313      	orrs	r3, r2
 8006522:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d008      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006530:	4b28      	ldr	r3, [pc, #160]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006534:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653c:	4925      	ldr	r1, [pc, #148]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800653e:	4313      	orrs	r3, r2
 8006540:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d008      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800654e:	4b21      	ldr	r3, [pc, #132]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006552:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	491e      	ldr	r1, [pc, #120]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800655c:	4313      	orrs	r3, r2
 800655e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d008      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800656c:	4b19      	ldr	r3, [pc, #100]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800656e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006570:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006578:	4916      	ldr	r1, [pc, #88]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800657a:	4313      	orrs	r3, r2
 800657c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d008      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800658a:	4b12      	ldr	r3, [pc, #72]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800658c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006596:	490f      	ldr	r1, [pc, #60]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006598:	4313      	orrs	r3, r2
 800659a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d008      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80065a8:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80065aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ac:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b4:	4907      	ldr	r1, [pc, #28]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00c      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80065c6:	4b03      	ldr	r3, [pc, #12]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80065c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	e002      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80065d2:	bf00      	nop
 80065d4:	40021000 	.word	0x40021000
 80065d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065da:	4913      	ldr	r1, [pc, #76]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d008      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80065ec:	4b0e      	ldr	r3, [pc, #56]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80065ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065f8:	490b      	ldr	r1, [pc, #44]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d008      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800660a:	4b07      	ldr	r3, [pc, #28]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800660c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006616:	4904      	ldr	r1, [pc, #16]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006618:	4313      	orrs	r3, r2
 800661a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3748      	adds	r7, #72	; 0x48
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	40021000 	.word	0x40021000

0800662c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e049      	b.n	80066d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d106      	bne.n	8006658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7fc f912 	bl	800287c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3304      	adds	r3, #4
 8006668:	4619      	mov	r1, r3
 800666a:	4610      	mov	r0, r2
 800666c:	f000 fb80 	bl	8006d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b082      	sub	sp, #8
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e049      	b.n	8006780 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d106      	bne.n	8006706 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f841 	bl	8006788 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2202      	movs	r2, #2
 800670a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3304      	adds	r3, #4
 8006716:	4619      	mov	r1, r3
 8006718:	4610      	mov	r0, r2
 800671a:	f000 fb29 	bl	8006d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d109      	bne.n	80067c0 <HAL_TIM_PWM_Start+0x24>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	bf14      	ite	ne
 80067b8:	2301      	movne	r3, #1
 80067ba:	2300      	moveq	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	e03c      	b.n	800683a <HAL_TIM_PWM_Start+0x9e>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d109      	bne.n	80067da <HAL_TIM_PWM_Start+0x3e>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	bf14      	ite	ne
 80067d2:	2301      	movne	r3, #1
 80067d4:	2300      	moveq	r3, #0
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	e02f      	b.n	800683a <HAL_TIM_PWM_Start+0x9e>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b08      	cmp	r3, #8
 80067de:	d109      	bne.n	80067f4 <HAL_TIM_PWM_Start+0x58>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	bf14      	ite	ne
 80067ec:	2301      	movne	r3, #1
 80067ee:	2300      	moveq	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	e022      	b.n	800683a <HAL_TIM_PWM_Start+0x9e>
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	2b0c      	cmp	r3, #12
 80067f8:	d109      	bne.n	800680e <HAL_TIM_PWM_Start+0x72>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b01      	cmp	r3, #1
 8006804:	bf14      	ite	ne
 8006806:	2301      	movne	r3, #1
 8006808:	2300      	moveq	r3, #0
 800680a:	b2db      	uxtb	r3, r3
 800680c:	e015      	b.n	800683a <HAL_TIM_PWM_Start+0x9e>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b10      	cmp	r3, #16
 8006812:	d109      	bne.n	8006828 <HAL_TIM_PWM_Start+0x8c>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b01      	cmp	r3, #1
 800681e:	bf14      	ite	ne
 8006820:	2301      	movne	r3, #1
 8006822:	2300      	moveq	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	e008      	b.n	800683a <HAL_TIM_PWM_Start+0x9e>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b01      	cmp	r3, #1
 8006832:	bf14      	ite	ne
 8006834:	2301      	movne	r3, #1
 8006836:	2300      	moveq	r3, #0
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e0a1      	b.n	8006986 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d104      	bne.n	8006852 <HAL_TIM_PWM_Start+0xb6>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006850:	e023      	b.n	800689a <HAL_TIM_PWM_Start+0xfe>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b04      	cmp	r3, #4
 8006856:	d104      	bne.n	8006862 <HAL_TIM_PWM_Start+0xc6>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006860:	e01b      	b.n	800689a <HAL_TIM_PWM_Start+0xfe>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b08      	cmp	r3, #8
 8006866:	d104      	bne.n	8006872 <HAL_TIM_PWM_Start+0xd6>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006870:	e013      	b.n	800689a <HAL_TIM_PWM_Start+0xfe>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b0c      	cmp	r3, #12
 8006876:	d104      	bne.n	8006882 <HAL_TIM_PWM_Start+0xe6>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006880:	e00b      	b.n	800689a <HAL_TIM_PWM_Start+0xfe>
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b10      	cmp	r3, #16
 8006886:	d104      	bne.n	8006892 <HAL_TIM_PWM_Start+0xf6>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006890:	e003      	b.n	800689a <HAL_TIM_PWM_Start+0xfe>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2202      	movs	r2, #2
 8006896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2201      	movs	r2, #1
 80068a0:	6839      	ldr	r1, [r7, #0]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fea2 	bl	80075ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a38      	ldr	r2, [pc, #224]	; (8006990 <HAL_TIM_PWM_Start+0x1f4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d018      	beq.n	80068e4 <HAL_TIM_PWM_Start+0x148>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a37      	ldr	r2, [pc, #220]	; (8006994 <HAL_TIM_PWM_Start+0x1f8>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d013      	beq.n	80068e4 <HAL_TIM_PWM_Start+0x148>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a35      	ldr	r2, [pc, #212]	; (8006998 <HAL_TIM_PWM_Start+0x1fc>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00e      	beq.n	80068e4 <HAL_TIM_PWM_Start+0x148>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a34      	ldr	r2, [pc, #208]	; (800699c <HAL_TIM_PWM_Start+0x200>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d009      	beq.n	80068e4 <HAL_TIM_PWM_Start+0x148>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a32      	ldr	r2, [pc, #200]	; (80069a0 <HAL_TIM_PWM_Start+0x204>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d004      	beq.n	80068e4 <HAL_TIM_PWM_Start+0x148>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a31      	ldr	r2, [pc, #196]	; (80069a4 <HAL_TIM_PWM_Start+0x208>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d101      	bne.n	80068e8 <HAL_TIM_PWM_Start+0x14c>
 80068e4:	2301      	movs	r3, #1
 80068e6:	e000      	b.n	80068ea <HAL_TIM_PWM_Start+0x14e>
 80068e8:	2300      	movs	r3, #0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d007      	beq.n	80068fe <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a23      	ldr	r2, [pc, #140]	; (8006990 <HAL_TIM_PWM_Start+0x1f4>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d01d      	beq.n	8006944 <HAL_TIM_PWM_Start+0x1a8>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006910:	d018      	beq.n	8006944 <HAL_TIM_PWM_Start+0x1a8>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a24      	ldr	r2, [pc, #144]	; (80069a8 <HAL_TIM_PWM_Start+0x20c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d013      	beq.n	8006944 <HAL_TIM_PWM_Start+0x1a8>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a22      	ldr	r2, [pc, #136]	; (80069ac <HAL_TIM_PWM_Start+0x210>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00e      	beq.n	8006944 <HAL_TIM_PWM_Start+0x1a8>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a1a      	ldr	r2, [pc, #104]	; (8006994 <HAL_TIM_PWM_Start+0x1f8>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d009      	beq.n	8006944 <HAL_TIM_PWM_Start+0x1a8>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a18      	ldr	r2, [pc, #96]	; (8006998 <HAL_TIM_PWM_Start+0x1fc>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d004      	beq.n	8006944 <HAL_TIM_PWM_Start+0x1a8>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a19      	ldr	r2, [pc, #100]	; (80069a4 <HAL_TIM_PWM_Start+0x208>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d115      	bne.n	8006970 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	4b19      	ldr	r3, [pc, #100]	; (80069b0 <HAL_TIM_PWM_Start+0x214>)
 800694c:	4013      	ands	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b06      	cmp	r3, #6
 8006954:	d015      	beq.n	8006982 <HAL_TIM_PWM_Start+0x1e6>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800695c:	d011      	beq.n	8006982 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 0201 	orr.w	r2, r2, #1
 800696c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800696e:	e008      	b.n	8006982 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0201 	orr.w	r2, r2, #1
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	e000      	b.n	8006984 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006982:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	40012c00 	.word	0x40012c00
 8006994:	40013400 	.word	0x40013400
 8006998:	40014000 	.word	0x40014000
 800699c:	40014400 	.word	0x40014400
 80069a0:	40014800 	.word	0x40014800
 80069a4:	40015000 	.word	0x40015000
 80069a8:	40000400 	.word	0x40000400
 80069ac:	40000800 	.word	0x40000800
 80069b0:	00010007 	.word	0x00010007

080069b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d101      	bne.n	80069d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069ce:	2302      	movs	r3, #2
 80069d0:	e0ff      	b.n	8006bd2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b14      	cmp	r3, #20
 80069de:	f200 80f0 	bhi.w	8006bc2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80069e2:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e8:	08006a3d 	.word	0x08006a3d
 80069ec:	08006bc3 	.word	0x08006bc3
 80069f0:	08006bc3 	.word	0x08006bc3
 80069f4:	08006bc3 	.word	0x08006bc3
 80069f8:	08006a7d 	.word	0x08006a7d
 80069fc:	08006bc3 	.word	0x08006bc3
 8006a00:	08006bc3 	.word	0x08006bc3
 8006a04:	08006bc3 	.word	0x08006bc3
 8006a08:	08006abf 	.word	0x08006abf
 8006a0c:	08006bc3 	.word	0x08006bc3
 8006a10:	08006bc3 	.word	0x08006bc3
 8006a14:	08006bc3 	.word	0x08006bc3
 8006a18:	08006aff 	.word	0x08006aff
 8006a1c:	08006bc3 	.word	0x08006bc3
 8006a20:	08006bc3 	.word	0x08006bc3
 8006a24:	08006bc3 	.word	0x08006bc3
 8006a28:	08006b41 	.word	0x08006b41
 8006a2c:	08006bc3 	.word	0x08006bc3
 8006a30:	08006bc3 	.word	0x08006bc3
 8006a34:	08006bc3 	.word	0x08006bc3
 8006a38:	08006b81 	.word	0x08006b81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68b9      	ldr	r1, [r7, #8]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fa32 	bl	8006eac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699a      	ldr	r2, [r3, #24]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0208 	orr.w	r2, r2, #8
 8006a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 0204 	bic.w	r2, r2, #4
 8006a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6999      	ldr	r1, [r3, #24]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	691a      	ldr	r2, [r3, #16]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	619a      	str	r2, [r3, #24]
      break;
 8006a7a:	e0a5      	b.n	8006bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68b9      	ldr	r1, [r7, #8]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 faac 	bl	8006fe0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	699a      	ldr	r2, [r3, #24]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	699a      	ldr	r2, [r3, #24]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6999      	ldr	r1, [r3, #24]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	021a      	lsls	r2, r3, #8
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	619a      	str	r2, [r3, #24]
      break;
 8006abc:	e084      	b.n	8006bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68b9      	ldr	r1, [r7, #8]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 fb1f 	bl	8007108 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69da      	ldr	r2, [r3, #28]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f042 0208 	orr.w	r2, r2, #8
 8006ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69da      	ldr	r2, [r3, #28]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 0204 	bic.w	r2, r2, #4
 8006ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69d9      	ldr	r1, [r3, #28]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	691a      	ldr	r2, [r3, #16]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	61da      	str	r2, [r3, #28]
      break;
 8006afc:	e064      	b.n	8006bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68b9      	ldr	r1, [r7, #8]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 fb91 	bl	800722c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	69da      	ldr	r2, [r3, #28]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69da      	ldr	r2, [r3, #28]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69d9      	ldr	r1, [r3, #28]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	021a      	lsls	r2, r3, #8
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	61da      	str	r2, [r3, #28]
      break;
 8006b3e:	e043      	b.n	8006bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fbe0 	bl	800730c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 0208 	orr.w	r2, r2, #8
 8006b5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0204 	bic.w	r2, r2, #4
 8006b6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	691a      	ldr	r2, [r3, #16]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b7e:	e023      	b.n	8006bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68b9      	ldr	r1, [r7, #8]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 fc2a 	bl	80073e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006baa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	021a      	lsls	r2, r3, #8
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006bc0:	e002      	b.n	8006bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop

08006bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e0b6      	b.n	8006d66 <HAL_TIM_ConfigClockSource+0x18a>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c34:	d03e      	beq.n	8006cb4 <HAL_TIM_ConfigClockSource+0xd8>
 8006c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c3a:	f200 8087 	bhi.w	8006d4c <HAL_TIM_ConfigClockSource+0x170>
 8006c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c42:	f000 8086 	beq.w	8006d52 <HAL_TIM_ConfigClockSource+0x176>
 8006c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c4a:	d87f      	bhi.n	8006d4c <HAL_TIM_ConfigClockSource+0x170>
 8006c4c:	2b70      	cmp	r3, #112	; 0x70
 8006c4e:	d01a      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0xaa>
 8006c50:	2b70      	cmp	r3, #112	; 0x70
 8006c52:	d87b      	bhi.n	8006d4c <HAL_TIM_ConfigClockSource+0x170>
 8006c54:	2b60      	cmp	r3, #96	; 0x60
 8006c56:	d050      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x11e>
 8006c58:	2b60      	cmp	r3, #96	; 0x60
 8006c5a:	d877      	bhi.n	8006d4c <HAL_TIM_ConfigClockSource+0x170>
 8006c5c:	2b50      	cmp	r3, #80	; 0x50
 8006c5e:	d03c      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0xfe>
 8006c60:	2b50      	cmp	r3, #80	; 0x50
 8006c62:	d873      	bhi.n	8006d4c <HAL_TIM_ConfigClockSource+0x170>
 8006c64:	2b40      	cmp	r3, #64	; 0x40
 8006c66:	d058      	beq.n	8006d1a <HAL_TIM_ConfigClockSource+0x13e>
 8006c68:	2b40      	cmp	r3, #64	; 0x40
 8006c6a:	d86f      	bhi.n	8006d4c <HAL_TIM_ConfigClockSource+0x170>
 8006c6c:	2b30      	cmp	r3, #48	; 0x30
 8006c6e:	d064      	beq.n	8006d3a <HAL_TIM_ConfigClockSource+0x15e>
 8006c70:	2b30      	cmp	r3, #48	; 0x30
 8006c72:	d86b      	bhi.n	8006d4c <HAL_TIM_ConfigClockSource+0x170>
 8006c74:	2b20      	cmp	r3, #32
 8006c76:	d060      	beq.n	8006d3a <HAL_TIM_ConfigClockSource+0x15e>
 8006c78:	2b20      	cmp	r3, #32
 8006c7a:	d867      	bhi.n	8006d4c <HAL_TIM_ConfigClockSource+0x170>
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d05c      	beq.n	8006d3a <HAL_TIM_ConfigClockSource+0x15e>
 8006c80:	2b10      	cmp	r3, #16
 8006c82:	d05a      	beq.n	8006d3a <HAL_TIM_ConfigClockSource+0x15e>
 8006c84:	e062      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6818      	ldr	r0, [r3, #0]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	6899      	ldr	r1, [r3, #8]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f000 fc89 	bl	80075ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ca8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	609a      	str	r2, [r3, #8]
      break;
 8006cb2:	e04f      	b.n	8006d54 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6818      	ldr	r0, [r3, #0]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	6899      	ldr	r1, [r3, #8]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f000 fc72 	bl	80075ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cd6:	609a      	str	r2, [r3, #8]
      break;
 8006cd8:	e03c      	b.n	8006d54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6818      	ldr	r0, [r3, #0]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	6859      	ldr	r1, [r3, #4]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f000 fbe6 	bl	80074b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2150      	movs	r1, #80	; 0x50
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 fc3f 	bl	8007576 <TIM_ITRx_SetConfig>
      break;
 8006cf8:	e02c      	b.n	8006d54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6818      	ldr	r0, [r3, #0]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	6859      	ldr	r1, [r3, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	461a      	mov	r2, r3
 8006d08:	f000 fc05 	bl	8007516 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2160      	movs	r1, #96	; 0x60
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 fc2f 	bl	8007576 <TIM_ITRx_SetConfig>
      break;
 8006d18:	e01c      	b.n	8006d54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6818      	ldr	r0, [r3, #0]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	6859      	ldr	r1, [r3, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	461a      	mov	r2, r3
 8006d28:	f000 fbc6 	bl	80074b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2140      	movs	r1, #64	; 0x40
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 fc1f 	bl	8007576 <TIM_ITRx_SetConfig>
      break;
 8006d38:	e00c      	b.n	8006d54 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4619      	mov	r1, r3
 8006d44:	4610      	mov	r0, r2
 8006d46:	f000 fc16 	bl	8007576 <TIM_ITRx_SetConfig>
      break;
 8006d4a:	e003      	b.n	8006d54 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d50:	e000      	b.n	8006d54 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006d52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
	...

08006d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a42      	ldr	r2, [pc, #264]	; (8006e8c <TIM_Base_SetConfig+0x11c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d013      	beq.n	8006db0 <TIM_Base_SetConfig+0x40>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d8e:	d00f      	beq.n	8006db0 <TIM_Base_SetConfig+0x40>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a3f      	ldr	r2, [pc, #252]	; (8006e90 <TIM_Base_SetConfig+0x120>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d00b      	beq.n	8006db0 <TIM_Base_SetConfig+0x40>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a3e      	ldr	r2, [pc, #248]	; (8006e94 <TIM_Base_SetConfig+0x124>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d007      	beq.n	8006db0 <TIM_Base_SetConfig+0x40>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a3d      	ldr	r2, [pc, #244]	; (8006e98 <TIM_Base_SetConfig+0x128>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d003      	beq.n	8006db0 <TIM_Base_SetConfig+0x40>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a3c      	ldr	r2, [pc, #240]	; (8006e9c <TIM_Base_SetConfig+0x12c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d108      	bne.n	8006dc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a31      	ldr	r2, [pc, #196]	; (8006e8c <TIM_Base_SetConfig+0x11c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d01f      	beq.n	8006e0a <TIM_Base_SetConfig+0x9a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd0:	d01b      	beq.n	8006e0a <TIM_Base_SetConfig+0x9a>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a2e      	ldr	r2, [pc, #184]	; (8006e90 <TIM_Base_SetConfig+0x120>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d017      	beq.n	8006e0a <TIM_Base_SetConfig+0x9a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a2d      	ldr	r2, [pc, #180]	; (8006e94 <TIM_Base_SetConfig+0x124>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d013      	beq.n	8006e0a <TIM_Base_SetConfig+0x9a>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a2c      	ldr	r2, [pc, #176]	; (8006e98 <TIM_Base_SetConfig+0x128>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d00f      	beq.n	8006e0a <TIM_Base_SetConfig+0x9a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a2c      	ldr	r2, [pc, #176]	; (8006ea0 <TIM_Base_SetConfig+0x130>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00b      	beq.n	8006e0a <TIM_Base_SetConfig+0x9a>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a2b      	ldr	r2, [pc, #172]	; (8006ea4 <TIM_Base_SetConfig+0x134>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d007      	beq.n	8006e0a <TIM_Base_SetConfig+0x9a>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a2a      	ldr	r2, [pc, #168]	; (8006ea8 <TIM_Base_SetConfig+0x138>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d003      	beq.n	8006e0a <TIM_Base_SetConfig+0x9a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a25      	ldr	r2, [pc, #148]	; (8006e9c <TIM_Base_SetConfig+0x12c>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d108      	bne.n	8006e1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a12      	ldr	r2, [pc, #72]	; (8006e8c <TIM_Base_SetConfig+0x11c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d013      	beq.n	8006e70 <TIM_Base_SetConfig+0x100>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a13      	ldr	r2, [pc, #76]	; (8006e98 <TIM_Base_SetConfig+0x128>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d00f      	beq.n	8006e70 <TIM_Base_SetConfig+0x100>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a13      	ldr	r2, [pc, #76]	; (8006ea0 <TIM_Base_SetConfig+0x130>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d00b      	beq.n	8006e70 <TIM_Base_SetConfig+0x100>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a12      	ldr	r2, [pc, #72]	; (8006ea4 <TIM_Base_SetConfig+0x134>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d007      	beq.n	8006e70 <TIM_Base_SetConfig+0x100>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a11      	ldr	r2, [pc, #68]	; (8006ea8 <TIM_Base_SetConfig+0x138>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d003      	beq.n	8006e70 <TIM_Base_SetConfig+0x100>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a0c      	ldr	r2, [pc, #48]	; (8006e9c <TIM_Base_SetConfig+0x12c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d103      	bne.n	8006e78 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	691a      	ldr	r2, [r3, #16]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	615a      	str	r2, [r3, #20]
}
 8006e7e:	bf00      	nop
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	40012c00 	.word	0x40012c00
 8006e90:	40000400 	.word	0x40000400
 8006e94:	40000800 	.word	0x40000800
 8006e98:	40013400 	.word	0x40013400
 8006e9c:	40015000 	.word	0x40015000
 8006ea0:	40014000 	.word	0x40014000
 8006ea4:	40014400 	.word	0x40014400
 8006ea8:	40014800 	.word	0x40014800

08006eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	f023 0201 	bic.w	r2, r3, #1
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 0303 	bic.w	r3, r3, #3
 8006ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f023 0302 	bic.w	r3, r3, #2
 8006ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a30      	ldr	r2, [pc, #192]	; (8006fc8 <TIM_OC1_SetConfig+0x11c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d013      	beq.n	8006f34 <TIM_OC1_SetConfig+0x88>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a2f      	ldr	r2, [pc, #188]	; (8006fcc <TIM_OC1_SetConfig+0x120>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00f      	beq.n	8006f34 <TIM_OC1_SetConfig+0x88>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a2e      	ldr	r2, [pc, #184]	; (8006fd0 <TIM_OC1_SetConfig+0x124>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d00b      	beq.n	8006f34 <TIM_OC1_SetConfig+0x88>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a2d      	ldr	r2, [pc, #180]	; (8006fd4 <TIM_OC1_SetConfig+0x128>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d007      	beq.n	8006f34 <TIM_OC1_SetConfig+0x88>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a2c      	ldr	r2, [pc, #176]	; (8006fd8 <TIM_OC1_SetConfig+0x12c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d003      	beq.n	8006f34 <TIM_OC1_SetConfig+0x88>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a2b      	ldr	r2, [pc, #172]	; (8006fdc <TIM_OC1_SetConfig+0x130>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d10c      	bne.n	8006f4e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f023 0308 	bic.w	r3, r3, #8
 8006f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f023 0304 	bic.w	r3, r3, #4
 8006f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a1d      	ldr	r2, [pc, #116]	; (8006fc8 <TIM_OC1_SetConfig+0x11c>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d013      	beq.n	8006f7e <TIM_OC1_SetConfig+0xd2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a1c      	ldr	r2, [pc, #112]	; (8006fcc <TIM_OC1_SetConfig+0x120>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d00f      	beq.n	8006f7e <TIM_OC1_SetConfig+0xd2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a1b      	ldr	r2, [pc, #108]	; (8006fd0 <TIM_OC1_SetConfig+0x124>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00b      	beq.n	8006f7e <TIM_OC1_SetConfig+0xd2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a1a      	ldr	r2, [pc, #104]	; (8006fd4 <TIM_OC1_SetConfig+0x128>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d007      	beq.n	8006f7e <TIM_OC1_SetConfig+0xd2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a19      	ldr	r2, [pc, #100]	; (8006fd8 <TIM_OC1_SetConfig+0x12c>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d003      	beq.n	8006f7e <TIM_OC1_SetConfig+0xd2>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a18      	ldr	r2, [pc, #96]	; (8006fdc <TIM_OC1_SetConfig+0x130>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d111      	bne.n	8006fa2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	621a      	str	r2, [r3, #32]
}
 8006fbc:	bf00      	nop
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	40012c00 	.word	0x40012c00
 8006fcc:	40013400 	.word	0x40013400
 8006fd0:	40014000 	.word	0x40014000
 8006fd4:	40014400 	.word	0x40014400
 8006fd8:	40014800 	.word	0x40014800
 8006fdc:	40015000 	.word	0x40015000

08006fe0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b087      	sub	sp, #28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	f023 0210 	bic.w	r2, r3, #16
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800700e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	021b      	lsls	r3, r3, #8
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f023 0320 	bic.w	r3, r3, #32
 800702e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	011b      	lsls	r3, r3, #4
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4313      	orrs	r3, r2
 800703a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a2c      	ldr	r2, [pc, #176]	; (80070f0 <TIM_OC2_SetConfig+0x110>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d007      	beq.n	8007054 <TIM_OC2_SetConfig+0x74>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a2b      	ldr	r2, [pc, #172]	; (80070f4 <TIM_OC2_SetConfig+0x114>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d003      	beq.n	8007054 <TIM_OC2_SetConfig+0x74>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a2a      	ldr	r2, [pc, #168]	; (80070f8 <TIM_OC2_SetConfig+0x118>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d10d      	bne.n	8007070 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800705a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	011b      	lsls	r3, r3, #4
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	4313      	orrs	r3, r2
 8007066:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800706e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a1f      	ldr	r2, [pc, #124]	; (80070f0 <TIM_OC2_SetConfig+0x110>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d013      	beq.n	80070a0 <TIM_OC2_SetConfig+0xc0>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a1e      	ldr	r2, [pc, #120]	; (80070f4 <TIM_OC2_SetConfig+0x114>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d00f      	beq.n	80070a0 <TIM_OC2_SetConfig+0xc0>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a1e      	ldr	r2, [pc, #120]	; (80070fc <TIM_OC2_SetConfig+0x11c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d00b      	beq.n	80070a0 <TIM_OC2_SetConfig+0xc0>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a1d      	ldr	r2, [pc, #116]	; (8007100 <TIM_OC2_SetConfig+0x120>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d007      	beq.n	80070a0 <TIM_OC2_SetConfig+0xc0>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a1c      	ldr	r2, [pc, #112]	; (8007104 <TIM_OC2_SetConfig+0x124>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d003      	beq.n	80070a0 <TIM_OC2_SetConfig+0xc0>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a17      	ldr	r2, [pc, #92]	; (80070f8 <TIM_OC2_SetConfig+0x118>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d113      	bne.n	80070c8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070a6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070ae:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	621a      	str	r2, [r3, #32]
}
 80070e2:	bf00      	nop
 80070e4:	371c      	adds	r7, #28
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	40012c00 	.word	0x40012c00
 80070f4:	40013400 	.word	0x40013400
 80070f8:	40015000 	.word	0x40015000
 80070fc:	40014000 	.word	0x40014000
 8007100:	40014400 	.word	0x40014400
 8007104:	40014800 	.word	0x40014800

08007108 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f023 0303 	bic.w	r3, r3, #3
 8007142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	4313      	orrs	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	021b      	lsls	r3, r3, #8
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	4313      	orrs	r3, r2
 8007160:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a2b      	ldr	r2, [pc, #172]	; (8007214 <TIM_OC3_SetConfig+0x10c>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d007      	beq.n	800717a <TIM_OC3_SetConfig+0x72>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a2a      	ldr	r2, [pc, #168]	; (8007218 <TIM_OC3_SetConfig+0x110>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d003      	beq.n	800717a <TIM_OC3_SetConfig+0x72>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a29      	ldr	r2, [pc, #164]	; (800721c <TIM_OC3_SetConfig+0x114>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d10d      	bne.n	8007196 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	021b      	lsls	r3, r3, #8
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	4313      	orrs	r3, r2
 800718c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007194:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a1e      	ldr	r2, [pc, #120]	; (8007214 <TIM_OC3_SetConfig+0x10c>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d013      	beq.n	80071c6 <TIM_OC3_SetConfig+0xbe>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a1d      	ldr	r2, [pc, #116]	; (8007218 <TIM_OC3_SetConfig+0x110>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d00f      	beq.n	80071c6 <TIM_OC3_SetConfig+0xbe>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a1d      	ldr	r2, [pc, #116]	; (8007220 <TIM_OC3_SetConfig+0x118>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d00b      	beq.n	80071c6 <TIM_OC3_SetConfig+0xbe>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a1c      	ldr	r2, [pc, #112]	; (8007224 <TIM_OC3_SetConfig+0x11c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d007      	beq.n	80071c6 <TIM_OC3_SetConfig+0xbe>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a1b      	ldr	r2, [pc, #108]	; (8007228 <TIM_OC3_SetConfig+0x120>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d003      	beq.n	80071c6 <TIM_OC3_SetConfig+0xbe>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a16      	ldr	r2, [pc, #88]	; (800721c <TIM_OC3_SetConfig+0x114>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d113      	bne.n	80071ee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	4313      	orrs	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	621a      	str	r2, [r3, #32]
}
 8007208:	bf00      	nop
 800720a:	371c      	adds	r7, #28
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	40012c00 	.word	0x40012c00
 8007218:	40013400 	.word	0x40013400
 800721c:	40015000 	.word	0x40015000
 8007220:	40014000 	.word	0x40014000
 8007224:	40014400 	.word	0x40014400
 8007228:	40014800 	.word	0x40014800

0800722c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800722c:	b480      	push	{r7}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800725a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800725e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	021b      	lsls	r3, r3, #8
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	4313      	orrs	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800727a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	031b      	lsls	r3, r3, #12
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	4313      	orrs	r3, r2
 8007286:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a1a      	ldr	r2, [pc, #104]	; (80072f4 <TIM_OC4_SetConfig+0xc8>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d013      	beq.n	80072b8 <TIM_OC4_SetConfig+0x8c>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a19      	ldr	r2, [pc, #100]	; (80072f8 <TIM_OC4_SetConfig+0xcc>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00f      	beq.n	80072b8 <TIM_OC4_SetConfig+0x8c>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a18      	ldr	r2, [pc, #96]	; (80072fc <TIM_OC4_SetConfig+0xd0>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d00b      	beq.n	80072b8 <TIM_OC4_SetConfig+0x8c>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a17      	ldr	r2, [pc, #92]	; (8007300 <TIM_OC4_SetConfig+0xd4>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d007      	beq.n	80072b8 <TIM_OC4_SetConfig+0x8c>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a16      	ldr	r2, [pc, #88]	; (8007304 <TIM_OC4_SetConfig+0xd8>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d003      	beq.n	80072b8 <TIM_OC4_SetConfig+0x8c>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a15      	ldr	r2, [pc, #84]	; (8007308 <TIM_OC4_SetConfig+0xdc>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d109      	bne.n	80072cc <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	019b      	lsls	r3, r3, #6
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	621a      	str	r2, [r3, #32]
}
 80072e6:	bf00      	nop
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40012c00 	.word	0x40012c00
 80072f8:	40013400 	.word	0x40013400
 80072fc:	40014000 	.word	0x40014000
 8007300:	40014400 	.word	0x40014400
 8007304:	40014800 	.word	0x40014800
 8007308:	40015000 	.word	0x40015000

0800730c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800730c:	b480      	push	{r7}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800733a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	4313      	orrs	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007350:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	041b      	lsls	r3, r3, #16
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	4313      	orrs	r3, r2
 800735c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a19      	ldr	r2, [pc, #100]	; (80073c8 <TIM_OC5_SetConfig+0xbc>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d013      	beq.n	800738e <TIM_OC5_SetConfig+0x82>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a18      	ldr	r2, [pc, #96]	; (80073cc <TIM_OC5_SetConfig+0xc0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d00f      	beq.n	800738e <TIM_OC5_SetConfig+0x82>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a17      	ldr	r2, [pc, #92]	; (80073d0 <TIM_OC5_SetConfig+0xc4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d00b      	beq.n	800738e <TIM_OC5_SetConfig+0x82>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a16      	ldr	r2, [pc, #88]	; (80073d4 <TIM_OC5_SetConfig+0xc8>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d007      	beq.n	800738e <TIM_OC5_SetConfig+0x82>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a15      	ldr	r2, [pc, #84]	; (80073d8 <TIM_OC5_SetConfig+0xcc>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d003      	beq.n	800738e <TIM_OC5_SetConfig+0x82>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a14      	ldr	r2, [pc, #80]	; (80073dc <TIM_OC5_SetConfig+0xd0>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d109      	bne.n	80073a2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007394:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	021b      	lsls	r3, r3, #8
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	4313      	orrs	r3, r2
 80073a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	621a      	str	r2, [r3, #32]
}
 80073bc:	bf00      	nop
 80073be:	371c      	adds	r7, #28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	40012c00 	.word	0x40012c00
 80073cc:	40013400 	.word	0x40013400
 80073d0:	40014000 	.word	0x40014000
 80073d4:	40014400 	.word	0x40014400
 80073d8:	40014800 	.word	0x40014800
 80073dc:	40015000 	.word	0x40015000

080073e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800740e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	021b      	lsls	r3, r3, #8
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	4313      	orrs	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007426:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	051b      	lsls	r3, r3, #20
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	4313      	orrs	r3, r2
 8007432:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a1a      	ldr	r2, [pc, #104]	; (80074a0 <TIM_OC6_SetConfig+0xc0>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d013      	beq.n	8007464 <TIM_OC6_SetConfig+0x84>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a19      	ldr	r2, [pc, #100]	; (80074a4 <TIM_OC6_SetConfig+0xc4>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d00f      	beq.n	8007464 <TIM_OC6_SetConfig+0x84>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a18      	ldr	r2, [pc, #96]	; (80074a8 <TIM_OC6_SetConfig+0xc8>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d00b      	beq.n	8007464 <TIM_OC6_SetConfig+0x84>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a17      	ldr	r2, [pc, #92]	; (80074ac <TIM_OC6_SetConfig+0xcc>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d007      	beq.n	8007464 <TIM_OC6_SetConfig+0x84>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a16      	ldr	r2, [pc, #88]	; (80074b0 <TIM_OC6_SetConfig+0xd0>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d003      	beq.n	8007464 <TIM_OC6_SetConfig+0x84>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a15      	ldr	r2, [pc, #84]	; (80074b4 <TIM_OC6_SetConfig+0xd4>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d109      	bne.n	8007478 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800746a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	029b      	lsls	r3, r3, #10
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	4313      	orrs	r3, r2
 8007476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	621a      	str	r2, [r3, #32]
}
 8007492:	bf00      	nop
 8007494:	371c      	adds	r7, #28
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	40012c00 	.word	0x40012c00
 80074a4:	40013400 	.word	0x40013400
 80074a8:	40014000 	.word	0x40014000
 80074ac:	40014400 	.word	0x40014400
 80074b0:	40014800 	.word	0x40014800
 80074b4:	40015000 	.word	0x40015000

080074b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	f023 0201 	bic.w	r2, r3, #1
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	011b      	lsls	r3, r3, #4
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f023 030a 	bic.w	r3, r3, #10
 80074f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	621a      	str	r2, [r3, #32]
}
 800750a:	bf00      	nop
 800750c:	371c      	adds	r7, #28
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007516:	b480      	push	{r7}
 8007518:	b087      	sub	sp, #28
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	f023 0210 	bic.w	r2, r3, #16
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007540:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	031b      	lsls	r3, r3, #12
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	4313      	orrs	r3, r2
 800754a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007552:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	011b      	lsls	r3, r3, #4
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	4313      	orrs	r3, r2
 800755c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	621a      	str	r2, [r3, #32]
}
 800756a:	bf00      	nop
 800756c:	371c      	adds	r7, #28
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007576:	b480      	push	{r7}
 8007578:	b085      	sub	sp, #20
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4313      	orrs	r3, r2
 8007594:	f043 0307 	orr.w	r3, r3, #7
 8007598:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	609a      	str	r2, [r3, #8]
}
 80075a0:	bf00      	nop
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	021a      	lsls	r2, r3, #8
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	431a      	orrs	r2, r3
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	609a      	str	r2, [r3, #8]
}
 80075e0:	bf00      	nop
 80075e2:	371c      	adds	r7, #28
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b087      	sub	sp, #28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f003 031f 	and.w	r3, r3, #31
 80075fe:	2201      	movs	r2, #1
 8007600:	fa02 f303 	lsl.w	r3, r2, r3
 8007604:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6a1a      	ldr	r2, [r3, #32]
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	43db      	mvns	r3, r3
 800760e:	401a      	ands	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6a1a      	ldr	r2, [r3, #32]
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	f003 031f 	and.w	r3, r3, #31
 800761e:	6879      	ldr	r1, [r7, #4]
 8007620:	fa01 f303 	lsl.w	r3, r1, r3
 8007624:	431a      	orrs	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	621a      	str	r2, [r3, #32]
}
 800762a:	bf00      	nop
 800762c:	371c      	adds	r7, #28
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
	...

08007638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007648:	2b01      	cmp	r3, #1
 800764a:	d101      	bne.n	8007650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800764c:	2302      	movs	r3, #2
 800764e:	e06d      	b.n	800772c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2202      	movs	r2, #2
 800765c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a30      	ldr	r2, [pc, #192]	; (8007738 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d009      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a2f      	ldr	r2, [pc, #188]	; (800773c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d004      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a2d      	ldr	r2, [pc, #180]	; (8007740 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d108      	bne.n	80076a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007694:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	4313      	orrs	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a1e      	ldr	r2, [pc, #120]	; (8007738 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d01d      	beq.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076cc:	d018      	beq.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a1c      	ldr	r2, [pc, #112]	; (8007744 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d013      	beq.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a1a      	ldr	r2, [pc, #104]	; (8007748 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00e      	beq.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a15      	ldr	r2, [pc, #84]	; (800773c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d009      	beq.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a16      	ldr	r2, [pc, #88]	; (800774c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d004      	beq.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a11      	ldr	r2, [pc, #68]	; (8007740 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d10c      	bne.n	800771a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007706:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	4313      	orrs	r3, r2
 8007710:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	40012c00 	.word	0x40012c00
 800773c:	40013400 	.word	0x40013400
 8007740:	40015000 	.word	0x40015000
 8007744:	40000400 	.word	0x40000400
 8007748:	40000800 	.word	0x40000800
 800774c:	40014000 	.word	0x40014000

08007750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e040      	b.n	80077e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007766:	2b00      	cmp	r3, #0
 8007768:	d106      	bne.n	8007778 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7fb f966 	bl	8002a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2224      	movs	r2, #36	; 0x24
 800777c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0201 	bic.w	r2, r2, #1
 800778c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fc5e 	bl	8008050 <UART_SetConfig>
 8007794:	4603      	mov	r3, r0
 8007796:	2b01      	cmp	r3, #1
 8007798:	d101      	bne.n	800779e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e022      	b.n	80077e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fe26 	bl	80083f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f042 0201 	orr.w	r2, r2, #1
 80077da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fead 	bl	800853c <UART_CheckIdleState>
 80077e2:	4603      	mov	r3, r0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08a      	sub	sp, #40	; 0x28
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	603b      	str	r3, [r7, #0]
 80077f8:	4613      	mov	r3, r2
 80077fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007800:	2b20      	cmp	r3, #32
 8007802:	d178      	bne.n	80078f6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d002      	beq.n	8007810 <HAL_UART_Transmit+0x24>
 800780a:	88fb      	ldrh	r3, [r7, #6]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e071      	b.n	80078f8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2221      	movs	r2, #33	; 0x21
 8007820:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007822:	f7fb fbb3 	bl	8002f8c <HAL_GetTick>
 8007826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	88fa      	ldrh	r2, [r7, #6]
 800782c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	88fa      	ldrh	r2, [r7, #6]
 8007834:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007840:	d108      	bne.n	8007854 <HAL_UART_Transmit+0x68>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d104      	bne.n	8007854 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800784a:	2300      	movs	r3, #0
 800784c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	61bb      	str	r3, [r7, #24]
 8007852:	e003      	b.n	800785c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007858:	2300      	movs	r3, #0
 800785a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800785c:	e030      	b.n	80078c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2200      	movs	r2, #0
 8007866:	2180      	movs	r1, #128	; 0x80
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f000 ff0f 	bl	800868c <UART_WaitOnFlagUntilTimeout>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d004      	beq.n	800787e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2220      	movs	r2, #32
 8007878:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e03c      	b.n	80078f8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10b      	bne.n	800789c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	881a      	ldrh	r2, [r3, #0]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007890:	b292      	uxth	r2, r2
 8007892:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	3302      	adds	r3, #2
 8007898:	61bb      	str	r3, [r7, #24]
 800789a:	e008      	b.n	80078ae <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	781a      	ldrb	r2, [r3, #0]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	b292      	uxth	r2, r2
 80078a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	3301      	adds	r3, #1
 80078ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	3b01      	subs	r3, #1
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1c8      	bne.n	800785e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	2200      	movs	r2, #0
 80078d4:	2140      	movs	r1, #64	; 0x40
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f000 fed8 	bl	800868c <UART_WaitOnFlagUntilTimeout>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d004      	beq.n	80078ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2220      	movs	r2, #32
 80078e6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e005      	b.n	80078f8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2220      	movs	r2, #32
 80078f0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	e000      	b.n	80078f8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80078f6:	2302      	movs	r3, #2
  }
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3720      	adds	r7, #32
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007900:	b480      	push	{r7}
 8007902:	b08b      	sub	sp, #44	; 0x2c
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	4613      	mov	r3, r2
 800790c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007912:	2b20      	cmp	r3, #32
 8007914:	d147      	bne.n	80079a6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <HAL_UART_Transmit_IT+0x22>
 800791c:	88fb      	ldrh	r3, [r7, #6]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e040      	b.n	80079a8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	88fa      	ldrh	r2, [r7, #6]
 8007930:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	88fa      	ldrh	r2, [r7, #6]
 8007938:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2221      	movs	r2, #33	; 0x21
 800794e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007958:	d107      	bne.n	800796a <HAL_UART_Transmit_IT+0x6a>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d103      	bne.n	800796a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	4a13      	ldr	r2, [pc, #76]	; (80079b4 <HAL_UART_Transmit_IT+0xb4>)
 8007966:	66da      	str	r2, [r3, #108]	; 0x6c
 8007968:	e002      	b.n	8007970 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	4a12      	ldr	r2, [pc, #72]	; (80079b8 <HAL_UART_Transmit_IT+0xb8>)
 800796e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	e853 3f00 	ldrex	r3, [r3]
 800797c:	613b      	str	r3, [r7, #16]
   return(result);
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007984:	627b      	str	r3, [r7, #36]	; 0x24
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	461a      	mov	r2, r3
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	623b      	str	r3, [r7, #32]
 8007990:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007992:	69f9      	ldr	r1, [r7, #28]
 8007994:	6a3a      	ldr	r2, [r7, #32]
 8007996:	e841 2300 	strex	r3, r2, [r1]
 800799a:	61bb      	str	r3, [r7, #24]
   return(result);
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1e6      	bne.n	8007970 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	e000      	b.n	80079a8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80079a6:	2302      	movs	r3, #2
  }
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	372c      	adds	r7, #44	; 0x2c
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr
 80079b4:	08008a95 	.word	0x08008a95
 80079b8:	080089dd 	.word	0x080089dd

080079bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08a      	sub	sp, #40	; 0x28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	4613      	mov	r3, r2
 80079c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079d0:	2b20      	cmp	r3, #32
 80079d2:	d132      	bne.n	8007a3a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d002      	beq.n	80079e0 <HAL_UART_Receive_IT+0x24>
 80079da:	88fb      	ldrh	r3, [r7, #6]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e02b      	b.n	8007a3c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d018      	beq.n	8007a2a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	613b      	str	r3, [r7, #16]
   return(result);
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	623b      	str	r3, [r7, #32]
 8007a18:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1a:	69f9      	ldr	r1, [r7, #28]
 8007a1c:	6a3a      	ldr	r2, [r7, #32]
 8007a1e:	e841 2300 	strex	r3, r2, [r1]
 8007a22:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1e6      	bne.n	80079f8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a2a:	88fb      	ldrh	r3, [r7, #6]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	68b9      	ldr	r1, [r7, #8]
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 fe93 	bl	800875c <UART_Start_Receive_IT>
 8007a36:	4603      	mov	r3, r0
 8007a38:	e000      	b.n	8007a3c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007a3a:	2302      	movs	r3, #2
  }
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3728      	adds	r7, #40	; 0x28
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b0ba      	sub	sp, #232	; 0xe8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007a6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a72:	4013      	ands	r3, r2
 8007a74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007a78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d115      	bne.n	8007aac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a84:	f003 0320 	and.w	r3, r3, #32
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00f      	beq.n	8007aac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a90:	f003 0320 	and.w	r3, r3, #32
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d009      	beq.n	8007aac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 82ab 	beq.w	8007ff8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	4798      	blx	r3
      }
      return;
 8007aaa:	e2a5      	b.n	8007ff8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007aac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 8117 	beq.w	8007ce4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d106      	bne.n	8007ad0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007ac2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007ac6:	4b85      	ldr	r3, [pc, #532]	; (8007cdc <HAL_UART_IRQHandler+0x298>)
 8007ac8:	4013      	ands	r3, r2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 810a 	beq.w	8007ce4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d011      	beq.n	8007b00 <HAL_UART_IRQHandler+0xbc>
 8007adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00b      	beq.n	8007b00 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2201      	movs	r2, #1
 8007aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007af6:	f043 0201 	orr.w	r2, r3, #1
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d011      	beq.n	8007b30 <HAL_UART_IRQHandler+0xec>
 8007b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00b      	beq.n	8007b30 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2202      	movs	r2, #2
 8007b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b26:	f043 0204 	orr.w	r2, r3, #4
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b34:	f003 0304 	and.w	r3, r3, #4
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d011      	beq.n	8007b60 <HAL_UART_IRQHandler+0x11c>
 8007b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00b      	beq.n	8007b60 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2204      	movs	r2, #4
 8007b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b56:	f043 0202 	orr.w	r2, r3, #2
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b64:	f003 0308 	and.w	r3, r3, #8
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d017      	beq.n	8007b9c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b70:	f003 0320 	and.w	r3, r3, #32
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d105      	bne.n	8007b84 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b7c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00b      	beq.n	8007b9c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2208      	movs	r2, #8
 8007b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b92:	f043 0208 	orr.w	r2, r3, #8
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d012      	beq.n	8007bce <HAL_UART_IRQHandler+0x18a>
 8007ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00c      	beq.n	8007bce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bc4:	f043 0220 	orr.w	r2, r3, #32
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f000 8211 	beq.w	8007ffc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bde:	f003 0320 	and.w	r3, r3, #32
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00d      	beq.n	8007c02 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bea:	f003 0320 	and.w	r3, r3, #32
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d007      	beq.n	8007c02 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c16:	2b40      	cmp	r3, #64	; 0x40
 8007c18:	d005      	beq.n	8007c26 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d04f      	beq.n	8007cc6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fe5e 	bl	80088e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c36:	2b40      	cmp	r3, #64	; 0x40
 8007c38:	d141      	bne.n	8007cbe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3308      	adds	r3, #8
 8007c40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c48:	e853 3f00 	ldrex	r3, [r3]
 8007c4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3308      	adds	r3, #8
 8007c62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1d9      	bne.n	8007c3a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d013      	beq.n	8007cb6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c92:	4a13      	ldr	r2, [pc, #76]	; (8007ce0 <HAL_UART_IRQHandler+0x29c>)
 8007c94:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fc fbce 	bl	800443c <HAL_DMA_Abort_IT>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d017      	beq.n	8007cd6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cb4:	e00f      	b.n	8007cd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f9b4 	bl	8008024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cbc:	e00b      	b.n	8007cd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f9b0 	bl	8008024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc4:	e007      	b.n	8007cd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f9ac 	bl	8008024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007cd4:	e192      	b.n	8007ffc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd6:	bf00      	nop
    return;
 8007cd8:	e190      	b.n	8007ffc <HAL_UART_IRQHandler+0x5b8>
 8007cda:	bf00      	nop
 8007cdc:	04000120 	.word	0x04000120
 8007ce0:	080089b1 	.word	0x080089b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	f040 814b 	bne.w	8007f84 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cf2:	f003 0310 	and.w	r3, r3, #16
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 8144 	beq.w	8007f84 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d00:	f003 0310 	and.w	r3, r3, #16
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f000 813d 	beq.w	8007f84 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2210      	movs	r2, #16
 8007d10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d1c:	2b40      	cmp	r3, #64	; 0x40
 8007d1e:	f040 80b5 	bne.w	8007e8c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d2e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f000 8164 	beq.w	8008000 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d42:	429a      	cmp	r2, r3
 8007d44:	f080 815c 	bcs.w	8008000 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	2b20      	cmp	r3, #32
 8007d5a:	f000 8086 	beq.w	8007e6a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d6a:	e853 3f00 	ldrex	r3, [r3]
 8007d6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	461a      	mov	r2, r3
 8007d84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d8c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d90:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1da      	bne.n	8007d5e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3308      	adds	r3, #8
 8007dae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007db2:	e853 3f00 	ldrex	r3, [r3]
 8007db6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007db8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dba:	f023 0301 	bic.w	r3, r3, #1
 8007dbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	3308      	adds	r3, #8
 8007dc8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007dcc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007dd0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007dd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007dd8:	e841 2300 	strex	r3, r2, [r1]
 8007ddc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e1      	bne.n	8007da8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3308      	adds	r3, #8
 8007dea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dee:	e853 3f00 	ldrex	r3, [r3]
 8007df2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007df4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007df6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3308      	adds	r3, #8
 8007e04:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e08:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e10:	e841 2300 	strex	r3, r2, [r1]
 8007e14:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1e3      	bne.n	8007de4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2220      	movs	r2, #32
 8007e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e32:	e853 3f00 	ldrex	r3, [r3]
 8007e36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e3a:	f023 0310 	bic.w	r3, r3, #16
 8007e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	461a      	mov	r2, r3
 8007e48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e4e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e54:	e841 2300 	strex	r3, r2, [r1]
 8007e58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1e4      	bne.n	8007e2a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fc fab0 	bl	80043ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2202      	movs	r2, #2
 8007e6e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f8d7 	bl	8008038 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e8a:	e0b9      	b.n	8008000 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 80ab 	beq.w	8008004 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007eae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 80a6 	beq.w	8008004 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec0:	e853 3f00 	ldrex	r3, [r3]
 8007ec4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ecc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007eda:	647b      	str	r3, [r7, #68]	; 0x44
 8007edc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ede:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ee0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ee2:	e841 2300 	strex	r3, r2, [r1]
 8007ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1e4      	bne.n	8007eb8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3308      	adds	r3, #8
 8007ef4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	e853 3f00 	ldrex	r3, [r3]
 8007efc:	623b      	str	r3, [r7, #32]
   return(result);
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	f023 0301 	bic.w	r3, r3, #1
 8007f04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	3308      	adds	r3, #8
 8007f0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f12:	633a      	str	r2, [r7, #48]	; 0x30
 8007f14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f1a:	e841 2300 	strex	r3, r2, [r1]
 8007f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1e3      	bne.n	8007eee <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	e853 3f00 	ldrex	r3, [r3]
 8007f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f023 0310 	bic.w	r3, r3, #16
 8007f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	461a      	mov	r2, r3
 8007f58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f5c:	61fb      	str	r3, [r7, #28]
 8007f5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	69b9      	ldr	r1, [r7, #24]
 8007f62:	69fa      	ldr	r2, [r7, #28]
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	617b      	str	r3, [r7, #20]
   return(result);
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e4      	bne.n	8007f3a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2202      	movs	r2, #2
 8007f74:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f85b 	bl	8008038 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f82:	e03f      	b.n	8008004 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00e      	beq.n	8007fae <HAL_UART_IRQHandler+0x56a>
 8007f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d008      	beq.n	8007fae <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007fa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 ffa6 	bl	8008ef8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fac:	e02d      	b.n	800800a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00e      	beq.n	8007fd8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d008      	beq.n	8007fd8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d01c      	beq.n	8008008 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	4798      	blx	r3
    }
    return;
 8007fd6:	e017      	b.n	8008008 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d012      	beq.n	800800a <HAL_UART_IRQHandler+0x5c6>
 8007fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00c      	beq.n	800800a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fdaf 	bl	8008b54 <UART_EndTransmit_IT>
    return;
 8007ff6:	e008      	b.n	800800a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007ff8:	bf00      	nop
 8007ffa:	e006      	b.n	800800a <HAL_UART_IRQHandler+0x5c6>
    return;
 8007ffc:	bf00      	nop
 8007ffe:	e004      	b.n	800800a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008000:	bf00      	nop
 8008002:	e002      	b.n	800800a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008004:	bf00      	nop
 8008006:	e000      	b.n	800800a <HAL_UART_IRQHandler+0x5c6>
    return;
 8008008:	bf00      	nop
  }

}
 800800a:	37e8      	adds	r7, #232	; 0xe8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	460b      	mov	r3, r1
 8008042:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008058:	2300      	movs	r3, #0
 800805a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689a      	ldr	r2, [r3, #8]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	431a      	orrs	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	431a      	orrs	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	4313      	orrs	r3, r2
 8008072:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	4b92      	ldr	r3, [pc, #584]	; (80082c4 <UART_SetConfig+0x274>)
 800807c:	4013      	ands	r3, r2
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	6812      	ldr	r2, [r2, #0]
 8008082:	6979      	ldr	r1, [r7, #20]
 8008084:	430b      	orrs	r3, r1
 8008086:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	68da      	ldr	r2, [r3, #12]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a1b      	ldr	r3, [r3, #32]
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	430a      	orrs	r2, r1
 80080c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a80      	ldr	r2, [pc, #512]	; (80082c8 <UART_SetConfig+0x278>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d120      	bne.n	800810e <UART_SetConfig+0xbe>
 80080cc:	4b7f      	ldr	r3, [pc, #508]	; (80082cc <UART_SetConfig+0x27c>)
 80080ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d0:	f003 0303 	and.w	r3, r3, #3
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d817      	bhi.n	8008108 <UART_SetConfig+0xb8>
 80080d8:	a201      	add	r2, pc, #4	; (adr r2, 80080e0 <UART_SetConfig+0x90>)
 80080da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080de:	bf00      	nop
 80080e0:	080080f1 	.word	0x080080f1
 80080e4:	080080fd 	.word	0x080080fd
 80080e8:	08008103 	.word	0x08008103
 80080ec:	080080f7 	.word	0x080080f7
 80080f0:	2301      	movs	r3, #1
 80080f2:	77fb      	strb	r3, [r7, #31]
 80080f4:	e0b5      	b.n	8008262 <UART_SetConfig+0x212>
 80080f6:	2302      	movs	r3, #2
 80080f8:	77fb      	strb	r3, [r7, #31]
 80080fa:	e0b2      	b.n	8008262 <UART_SetConfig+0x212>
 80080fc:	2304      	movs	r3, #4
 80080fe:	77fb      	strb	r3, [r7, #31]
 8008100:	e0af      	b.n	8008262 <UART_SetConfig+0x212>
 8008102:	2308      	movs	r3, #8
 8008104:	77fb      	strb	r3, [r7, #31]
 8008106:	e0ac      	b.n	8008262 <UART_SetConfig+0x212>
 8008108:	2310      	movs	r3, #16
 800810a:	77fb      	strb	r3, [r7, #31]
 800810c:	e0a9      	b.n	8008262 <UART_SetConfig+0x212>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a6f      	ldr	r2, [pc, #444]	; (80082d0 <UART_SetConfig+0x280>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d124      	bne.n	8008162 <UART_SetConfig+0x112>
 8008118:	4b6c      	ldr	r3, [pc, #432]	; (80082cc <UART_SetConfig+0x27c>)
 800811a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008120:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008124:	d011      	beq.n	800814a <UART_SetConfig+0xfa>
 8008126:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800812a:	d817      	bhi.n	800815c <UART_SetConfig+0x10c>
 800812c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008130:	d011      	beq.n	8008156 <UART_SetConfig+0x106>
 8008132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008136:	d811      	bhi.n	800815c <UART_SetConfig+0x10c>
 8008138:	2b00      	cmp	r3, #0
 800813a:	d003      	beq.n	8008144 <UART_SetConfig+0xf4>
 800813c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008140:	d006      	beq.n	8008150 <UART_SetConfig+0x100>
 8008142:	e00b      	b.n	800815c <UART_SetConfig+0x10c>
 8008144:	2300      	movs	r3, #0
 8008146:	77fb      	strb	r3, [r7, #31]
 8008148:	e08b      	b.n	8008262 <UART_SetConfig+0x212>
 800814a:	2302      	movs	r3, #2
 800814c:	77fb      	strb	r3, [r7, #31]
 800814e:	e088      	b.n	8008262 <UART_SetConfig+0x212>
 8008150:	2304      	movs	r3, #4
 8008152:	77fb      	strb	r3, [r7, #31]
 8008154:	e085      	b.n	8008262 <UART_SetConfig+0x212>
 8008156:	2308      	movs	r3, #8
 8008158:	77fb      	strb	r3, [r7, #31]
 800815a:	e082      	b.n	8008262 <UART_SetConfig+0x212>
 800815c:	2310      	movs	r3, #16
 800815e:	77fb      	strb	r3, [r7, #31]
 8008160:	e07f      	b.n	8008262 <UART_SetConfig+0x212>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a5b      	ldr	r2, [pc, #364]	; (80082d4 <UART_SetConfig+0x284>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d124      	bne.n	80081b6 <UART_SetConfig+0x166>
 800816c:	4b57      	ldr	r3, [pc, #348]	; (80082cc <UART_SetConfig+0x27c>)
 800816e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008170:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008174:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008178:	d011      	beq.n	800819e <UART_SetConfig+0x14e>
 800817a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800817e:	d817      	bhi.n	80081b0 <UART_SetConfig+0x160>
 8008180:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008184:	d011      	beq.n	80081aa <UART_SetConfig+0x15a>
 8008186:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800818a:	d811      	bhi.n	80081b0 <UART_SetConfig+0x160>
 800818c:	2b00      	cmp	r3, #0
 800818e:	d003      	beq.n	8008198 <UART_SetConfig+0x148>
 8008190:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008194:	d006      	beq.n	80081a4 <UART_SetConfig+0x154>
 8008196:	e00b      	b.n	80081b0 <UART_SetConfig+0x160>
 8008198:	2300      	movs	r3, #0
 800819a:	77fb      	strb	r3, [r7, #31]
 800819c:	e061      	b.n	8008262 <UART_SetConfig+0x212>
 800819e:	2302      	movs	r3, #2
 80081a0:	77fb      	strb	r3, [r7, #31]
 80081a2:	e05e      	b.n	8008262 <UART_SetConfig+0x212>
 80081a4:	2304      	movs	r3, #4
 80081a6:	77fb      	strb	r3, [r7, #31]
 80081a8:	e05b      	b.n	8008262 <UART_SetConfig+0x212>
 80081aa:	2308      	movs	r3, #8
 80081ac:	77fb      	strb	r3, [r7, #31]
 80081ae:	e058      	b.n	8008262 <UART_SetConfig+0x212>
 80081b0:	2310      	movs	r3, #16
 80081b2:	77fb      	strb	r3, [r7, #31]
 80081b4:	e055      	b.n	8008262 <UART_SetConfig+0x212>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a47      	ldr	r2, [pc, #284]	; (80082d8 <UART_SetConfig+0x288>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d124      	bne.n	800820a <UART_SetConfig+0x1ba>
 80081c0:	4b42      	ldr	r3, [pc, #264]	; (80082cc <UART_SetConfig+0x27c>)
 80081c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80081c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081cc:	d011      	beq.n	80081f2 <UART_SetConfig+0x1a2>
 80081ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081d2:	d817      	bhi.n	8008204 <UART_SetConfig+0x1b4>
 80081d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081d8:	d011      	beq.n	80081fe <UART_SetConfig+0x1ae>
 80081da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081de:	d811      	bhi.n	8008204 <UART_SetConfig+0x1b4>
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d003      	beq.n	80081ec <UART_SetConfig+0x19c>
 80081e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081e8:	d006      	beq.n	80081f8 <UART_SetConfig+0x1a8>
 80081ea:	e00b      	b.n	8008204 <UART_SetConfig+0x1b4>
 80081ec:	2300      	movs	r3, #0
 80081ee:	77fb      	strb	r3, [r7, #31]
 80081f0:	e037      	b.n	8008262 <UART_SetConfig+0x212>
 80081f2:	2302      	movs	r3, #2
 80081f4:	77fb      	strb	r3, [r7, #31]
 80081f6:	e034      	b.n	8008262 <UART_SetConfig+0x212>
 80081f8:	2304      	movs	r3, #4
 80081fa:	77fb      	strb	r3, [r7, #31]
 80081fc:	e031      	b.n	8008262 <UART_SetConfig+0x212>
 80081fe:	2308      	movs	r3, #8
 8008200:	77fb      	strb	r3, [r7, #31]
 8008202:	e02e      	b.n	8008262 <UART_SetConfig+0x212>
 8008204:	2310      	movs	r3, #16
 8008206:	77fb      	strb	r3, [r7, #31]
 8008208:	e02b      	b.n	8008262 <UART_SetConfig+0x212>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a33      	ldr	r2, [pc, #204]	; (80082dc <UART_SetConfig+0x28c>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d124      	bne.n	800825e <UART_SetConfig+0x20e>
 8008214:	4b2d      	ldr	r3, [pc, #180]	; (80082cc <UART_SetConfig+0x27c>)
 8008216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008218:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800821c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008220:	d011      	beq.n	8008246 <UART_SetConfig+0x1f6>
 8008222:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008226:	d817      	bhi.n	8008258 <UART_SetConfig+0x208>
 8008228:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800822c:	d011      	beq.n	8008252 <UART_SetConfig+0x202>
 800822e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008232:	d811      	bhi.n	8008258 <UART_SetConfig+0x208>
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <UART_SetConfig+0x1f0>
 8008238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800823c:	d006      	beq.n	800824c <UART_SetConfig+0x1fc>
 800823e:	e00b      	b.n	8008258 <UART_SetConfig+0x208>
 8008240:	2300      	movs	r3, #0
 8008242:	77fb      	strb	r3, [r7, #31]
 8008244:	e00d      	b.n	8008262 <UART_SetConfig+0x212>
 8008246:	2302      	movs	r3, #2
 8008248:	77fb      	strb	r3, [r7, #31]
 800824a:	e00a      	b.n	8008262 <UART_SetConfig+0x212>
 800824c:	2304      	movs	r3, #4
 800824e:	77fb      	strb	r3, [r7, #31]
 8008250:	e007      	b.n	8008262 <UART_SetConfig+0x212>
 8008252:	2308      	movs	r3, #8
 8008254:	77fb      	strb	r3, [r7, #31]
 8008256:	e004      	b.n	8008262 <UART_SetConfig+0x212>
 8008258:	2310      	movs	r3, #16
 800825a:	77fb      	strb	r3, [r7, #31]
 800825c:	e001      	b.n	8008262 <UART_SetConfig+0x212>
 800825e:	2310      	movs	r3, #16
 8008260:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800826a:	d16b      	bne.n	8008344 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800826c:	7ffb      	ldrb	r3, [r7, #31]
 800826e:	2b08      	cmp	r3, #8
 8008270:	d838      	bhi.n	80082e4 <UART_SetConfig+0x294>
 8008272:	a201      	add	r2, pc, #4	; (adr r2, 8008278 <UART_SetConfig+0x228>)
 8008274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008278:	0800829d 	.word	0x0800829d
 800827c:	080082a5 	.word	0x080082a5
 8008280:	080082ad 	.word	0x080082ad
 8008284:	080082e5 	.word	0x080082e5
 8008288:	080082b3 	.word	0x080082b3
 800828c:	080082e5 	.word	0x080082e5
 8008290:	080082e5 	.word	0x080082e5
 8008294:	080082e5 	.word	0x080082e5
 8008298:	080082bb 	.word	0x080082bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800829c:	f7fd ff64 	bl	8006168 <HAL_RCC_GetPCLK1Freq>
 80082a0:	61b8      	str	r0, [r7, #24]
        break;
 80082a2:	e024      	b.n	80082ee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082a4:	f7fd ff82 	bl	80061ac <HAL_RCC_GetPCLK2Freq>
 80082a8:	61b8      	str	r0, [r7, #24]
        break;
 80082aa:	e020      	b.n	80082ee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082ac:	4b0c      	ldr	r3, [pc, #48]	; (80082e0 <UART_SetConfig+0x290>)
 80082ae:	61bb      	str	r3, [r7, #24]
        break;
 80082b0:	e01d      	b.n	80082ee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082b2:	f7fd fee3 	bl	800607c <HAL_RCC_GetSysClockFreq>
 80082b6:	61b8      	str	r0, [r7, #24]
        break;
 80082b8:	e019      	b.n	80082ee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082be:	61bb      	str	r3, [r7, #24]
        break;
 80082c0:	e015      	b.n	80082ee <UART_SetConfig+0x29e>
 80082c2:	bf00      	nop
 80082c4:	efff69f3 	.word	0xefff69f3
 80082c8:	40013800 	.word	0x40013800
 80082cc:	40021000 	.word	0x40021000
 80082d0:	40004400 	.word	0x40004400
 80082d4:	40004800 	.word	0x40004800
 80082d8:	40004c00 	.word	0x40004c00
 80082dc:	40005000 	.word	0x40005000
 80082e0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80082e4:	2300      	movs	r3, #0
 80082e6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	77bb      	strb	r3, [r7, #30]
        break;
 80082ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d073      	beq.n	80083dc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	005a      	lsls	r2, r3, #1
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	085b      	lsrs	r3, r3, #1
 80082fe:	441a      	add	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	fbb2 f3f3 	udiv	r3, r2, r3
 8008308:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	2b0f      	cmp	r3, #15
 800830e:	d916      	bls.n	800833e <UART_SetConfig+0x2ee>
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008316:	d212      	bcs.n	800833e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	b29b      	uxth	r3, r3
 800831c:	f023 030f 	bic.w	r3, r3, #15
 8008320:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	085b      	lsrs	r3, r3, #1
 8008326:	b29b      	uxth	r3, r3
 8008328:	f003 0307 	and.w	r3, r3, #7
 800832c:	b29a      	uxth	r2, r3
 800832e:	89fb      	ldrh	r3, [r7, #14]
 8008330:	4313      	orrs	r3, r2
 8008332:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	89fa      	ldrh	r2, [r7, #14]
 800833a:	60da      	str	r2, [r3, #12]
 800833c:	e04e      	b.n	80083dc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	77bb      	strb	r3, [r7, #30]
 8008342:	e04b      	b.n	80083dc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008344:	7ffb      	ldrb	r3, [r7, #31]
 8008346:	2b08      	cmp	r3, #8
 8008348:	d827      	bhi.n	800839a <UART_SetConfig+0x34a>
 800834a:	a201      	add	r2, pc, #4	; (adr r2, 8008350 <UART_SetConfig+0x300>)
 800834c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008350:	08008375 	.word	0x08008375
 8008354:	0800837d 	.word	0x0800837d
 8008358:	08008385 	.word	0x08008385
 800835c:	0800839b 	.word	0x0800839b
 8008360:	0800838b 	.word	0x0800838b
 8008364:	0800839b 	.word	0x0800839b
 8008368:	0800839b 	.word	0x0800839b
 800836c:	0800839b 	.word	0x0800839b
 8008370:	08008393 	.word	0x08008393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008374:	f7fd fef8 	bl	8006168 <HAL_RCC_GetPCLK1Freq>
 8008378:	61b8      	str	r0, [r7, #24]
        break;
 800837a:	e013      	b.n	80083a4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800837c:	f7fd ff16 	bl	80061ac <HAL_RCC_GetPCLK2Freq>
 8008380:	61b8      	str	r0, [r7, #24]
        break;
 8008382:	e00f      	b.n	80083a4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008384:	4b1b      	ldr	r3, [pc, #108]	; (80083f4 <UART_SetConfig+0x3a4>)
 8008386:	61bb      	str	r3, [r7, #24]
        break;
 8008388:	e00c      	b.n	80083a4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800838a:	f7fd fe77 	bl	800607c <HAL_RCC_GetSysClockFreq>
 800838e:	61b8      	str	r0, [r7, #24]
        break;
 8008390:	e008      	b.n	80083a4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008396:	61bb      	str	r3, [r7, #24]
        break;
 8008398:	e004      	b.n	80083a4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800839a:	2300      	movs	r3, #0
 800839c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	77bb      	strb	r3, [r7, #30]
        break;
 80083a2:	bf00      	nop
    }

    if (pclk != 0U)
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d018      	beq.n	80083dc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	085a      	lsrs	r2, r3, #1
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	441a      	add	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	2b0f      	cmp	r3, #15
 80083c2:	d909      	bls.n	80083d8 <UART_SetConfig+0x388>
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083ca:	d205      	bcs.n	80083d8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	60da      	str	r2, [r3, #12]
 80083d6:	e001      	b.n	80083dc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80083e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3720      	adds	r7, #32
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	007a1200 	.word	0x007a1200

080083f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008404:	f003 0301 	and.w	r3, r3, #1
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00a      	beq.n	8008422 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	430a      	orrs	r2, r1
 8008420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008426:	f003 0302 	and.w	r3, r3, #2
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	430a      	orrs	r2, r1
 8008442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008448:	f003 0304 	and.w	r3, r3, #4
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00a      	beq.n	8008466 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	430a      	orrs	r2, r1
 8008464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846a:	f003 0308 	and.w	r3, r3, #8
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00a      	beq.n	8008488 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	f003 0310 	and.w	r3, r3, #16
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00a      	beq.n	80084aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	430a      	orrs	r2, r1
 80084a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ae:	f003 0320 	and.w	r3, r3, #32
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00a      	beq.n	80084cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	430a      	orrs	r2, r1
 80084ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d01a      	beq.n	800850e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084f6:	d10a      	bne.n	800850e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	430a      	orrs	r2, r1
 800850c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	430a      	orrs	r2, r1
 800852e:	605a      	str	r2, [r3, #4]
  }
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b098      	sub	sp, #96	; 0x60
 8008540:	af02      	add	r7, sp, #8
 8008542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800854c:	f7fa fd1e 	bl	8002f8c <HAL_GetTick>
 8008550:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0308 	and.w	r3, r3, #8
 800855c:	2b08      	cmp	r3, #8
 800855e:	d12e      	bne.n	80085be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008560:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008568:	2200      	movs	r2, #0
 800856a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f88c 	bl	800868c <UART_WaitOnFlagUntilTimeout>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d021      	beq.n	80085be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008582:	e853 3f00 	ldrex	r3, [r3]
 8008586:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800858e:	653b      	str	r3, [r7, #80]	; 0x50
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	461a      	mov	r2, r3
 8008596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008598:	647b      	str	r3, [r7, #68]	; 0x44
 800859a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800859e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085a0:	e841 2300 	strex	r3, r2, [r1]
 80085a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1e6      	bne.n	800857a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2220      	movs	r2, #32
 80085b0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e062      	b.n	8008684 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b04      	cmp	r3, #4
 80085ca:	d149      	bne.n	8008660 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085d4:	2200      	movs	r2, #0
 80085d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f856 	bl	800868c <UART_WaitOnFlagUntilTimeout>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d03c      	beq.n	8008660 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	e853 3f00 	ldrex	r3, [r3]
 80085f2:	623b      	str	r3, [r7, #32]
   return(result);
 80085f4:	6a3b      	ldr	r3, [r7, #32]
 80085f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	461a      	mov	r2, r3
 8008602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008604:	633b      	str	r3, [r7, #48]	; 0x30
 8008606:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008608:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800860a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800860c:	e841 2300 	strex	r3, r2, [r1]
 8008610:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1e6      	bne.n	80085e6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3308      	adds	r3, #8
 800861e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	e853 3f00 	ldrex	r3, [r3]
 8008626:	60fb      	str	r3, [r7, #12]
   return(result);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f023 0301 	bic.w	r3, r3, #1
 800862e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	3308      	adds	r3, #8
 8008636:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008638:	61fa      	str	r2, [r7, #28]
 800863a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863c:	69b9      	ldr	r1, [r7, #24]
 800863e:	69fa      	ldr	r2, [r7, #28]
 8008640:	e841 2300 	strex	r3, r2, [r1]
 8008644:	617b      	str	r3, [r7, #20]
   return(result);
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1e5      	bne.n	8008618 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2220      	movs	r2, #32
 8008650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e011      	b.n	8008684 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2220      	movs	r2, #32
 8008664:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2220      	movs	r2, #32
 800866a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3758      	adds	r7, #88	; 0x58
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	603b      	str	r3, [r7, #0]
 8008698:	4613      	mov	r3, r2
 800869a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800869c:	e049      	b.n	8008732 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a4:	d045      	beq.n	8008732 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086a6:	f7fa fc71 	bl	8002f8c <HAL_GetTick>
 80086aa:	4602      	mov	r2, r0
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d302      	bcc.n	80086bc <UART_WaitOnFlagUntilTimeout+0x30>
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d101      	bne.n	80086c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	e048      	b.n	8008752 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0304 	and.w	r3, r3, #4
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d031      	beq.n	8008732 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	f003 0308 	and.w	r3, r3, #8
 80086d8:	2b08      	cmp	r3, #8
 80086da:	d110      	bne.n	80086fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2208      	movs	r2, #8
 80086e2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f000 f8ff 	bl	80088e8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2208      	movs	r2, #8
 80086ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e029      	b.n	8008752 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	69db      	ldr	r3, [r3, #28]
 8008704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800870c:	d111      	bne.n	8008732 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008716:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f000 f8e5 	bl	80088e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2220      	movs	r2, #32
 8008722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e00f      	b.n	8008752 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	69da      	ldr	r2, [r3, #28]
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	4013      	ands	r3, r2
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	429a      	cmp	r2, r3
 8008740:	bf0c      	ite	eq
 8008742:	2301      	moveq	r3, #1
 8008744:	2300      	movne	r3, #0
 8008746:	b2db      	uxtb	r3, r3
 8008748:	461a      	mov	r2, r3
 800874a:	79fb      	ldrb	r3, [r7, #7]
 800874c:	429a      	cmp	r2, r3
 800874e:	d0a6      	beq.n	800869e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
	...

0800875c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800875c:	b480      	push	{r7}
 800875e:	b097      	sub	sp, #92	; 0x5c
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	4613      	mov	r3, r2
 8008768:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	88fa      	ldrh	r2, [r7, #6]
 8008774:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	88fa      	ldrh	r2, [r7, #6]
 800877c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800878e:	d10e      	bne.n	80087ae <UART_Start_Receive_IT+0x52>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d105      	bne.n	80087a4 <UART_Start_Receive_IT+0x48>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800879e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087a2:	e02d      	b.n	8008800 <UART_Start_Receive_IT+0xa4>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	22ff      	movs	r2, #255	; 0xff
 80087a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087ac:	e028      	b.n	8008800 <UART_Start_Receive_IT+0xa4>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10d      	bne.n	80087d2 <UART_Start_Receive_IT+0x76>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d104      	bne.n	80087c8 <UART_Start_Receive_IT+0x6c>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	22ff      	movs	r2, #255	; 0xff
 80087c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087c6:	e01b      	b.n	8008800 <UART_Start_Receive_IT+0xa4>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	227f      	movs	r2, #127	; 0x7f
 80087cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087d0:	e016      	b.n	8008800 <UART_Start_Receive_IT+0xa4>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087da:	d10d      	bne.n	80087f8 <UART_Start_Receive_IT+0x9c>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d104      	bne.n	80087ee <UART_Start_Receive_IT+0x92>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	227f      	movs	r2, #127	; 0x7f
 80087e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087ec:	e008      	b.n	8008800 <UART_Start_Receive_IT+0xa4>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	223f      	movs	r2, #63	; 0x3f
 80087f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087f6:	e003      	b.n	8008800 <UART_Start_Receive_IT+0xa4>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2222      	movs	r2, #34	; 0x22
 800880c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	3308      	adds	r3, #8
 8008816:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800881a:	e853 3f00 	ldrex	r3, [r3]
 800881e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008822:	f043 0301 	orr.w	r3, r3, #1
 8008826:	657b      	str	r3, [r7, #84]	; 0x54
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	3308      	adds	r3, #8
 800882e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008830:	64ba      	str	r2, [r7, #72]	; 0x48
 8008832:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008834:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008838:	e841 2300 	strex	r3, r2, [r1]
 800883c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800883e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1e5      	bne.n	8008810 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800884c:	d107      	bne.n	800885e <UART_Start_Receive_IT+0x102>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d103      	bne.n	800885e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	4a21      	ldr	r2, [pc, #132]	; (80088e0 <UART_Start_Receive_IT+0x184>)
 800885a:	669a      	str	r2, [r3, #104]	; 0x68
 800885c:	e002      	b.n	8008864 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	4a20      	ldr	r2, [pc, #128]	; (80088e4 <UART_Start_Receive_IT+0x188>)
 8008862:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d019      	beq.n	80088a0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008874:	e853 3f00 	ldrex	r3, [r3]
 8008878:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008880:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800888a:	637b      	str	r3, [r7, #52]	; 0x34
 800888c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008890:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008892:	e841 2300 	strex	r3, r2, [r1]
 8008896:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1e6      	bne.n	800886c <UART_Start_Receive_IT+0x110>
 800889e:	e018      	b.n	80088d2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	e853 3f00 	ldrex	r3, [r3]
 80088ac:	613b      	str	r3, [r7, #16]
   return(result);
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	f043 0320 	orr.w	r3, r3, #32
 80088b4:	653b      	str	r3, [r7, #80]	; 0x50
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088be:	623b      	str	r3, [r7, #32]
 80088c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c2:	69f9      	ldr	r1, [r7, #28]
 80088c4:	6a3a      	ldr	r2, [r7, #32]
 80088c6:	e841 2300 	strex	r3, r2, [r1]
 80088ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e6      	bne.n	80088a0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	375c      	adds	r7, #92	; 0x5c
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr
 80088e0:	08008d51 	.word	0x08008d51
 80088e4:	08008ba9 	.word	0x08008ba9

080088e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b095      	sub	sp, #84	; 0x54
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f8:	e853 3f00 	ldrex	r3, [r3]
 80088fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008904:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800890e:	643b      	str	r3, [r7, #64]	; 0x40
 8008910:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008912:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008914:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008916:	e841 2300 	strex	r3, r2, [r1]
 800891a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800891c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1e6      	bne.n	80088f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3308      	adds	r3, #8
 8008928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	61fb      	str	r3, [r7, #28]
   return(result);
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	f023 0301 	bic.w	r3, r3, #1
 8008938:	64bb      	str	r3, [r7, #72]	; 0x48
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3308      	adds	r3, #8
 8008940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008944:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e5      	bne.n	8008922 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800895a:	2b01      	cmp	r3, #1
 800895c:	d118      	bne.n	8008990 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	e853 3f00 	ldrex	r3, [r3]
 800896a:	60bb      	str	r3, [r7, #8]
   return(result);
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f023 0310 	bic.w	r3, r3, #16
 8008972:	647b      	str	r3, [r7, #68]	; 0x44
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	461a      	mov	r2, r3
 800897a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800897c:	61bb      	str	r3, [r7, #24]
 800897e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	6979      	ldr	r1, [r7, #20]
 8008982:	69ba      	ldr	r2, [r7, #24]
 8008984:	e841 2300 	strex	r3, r2, [r1]
 8008988:	613b      	str	r3, [r7, #16]
   return(result);
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e6      	bne.n	800895e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2220      	movs	r2, #32
 8008994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80089a4:	bf00      	nop
 80089a6:	3754      	adds	r7, #84	; 0x54
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f7ff fb28 	bl	8008024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089d4:	bf00      	nop
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80089dc:	b480      	push	{r7}
 80089de:	b08f      	sub	sp, #60	; 0x3c
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089e8:	2b21      	cmp	r3, #33	; 0x21
 80089ea:	d14d      	bne.n	8008a88 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d132      	bne.n	8008a5e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fe:	6a3b      	ldr	r3, [r7, #32]
 8008a00:	e853 3f00 	ldrex	r3, [r3]
 8008a04:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	461a      	mov	r2, r3
 8008a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a18:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a1e:	e841 2300 	strex	r3, r2, [r1]
 8008a22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1e6      	bne.n	80089f8 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a3e:	633b      	str	r3, [r7, #48]	; 0x30
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	461a      	mov	r2, r3
 8008a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a48:	61bb      	str	r3, [r7, #24]
 8008a4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	6979      	ldr	r1, [r7, #20]
 8008a4e:	69ba      	ldr	r2, [r7, #24]
 8008a50:	e841 2300 	strex	r3, r2, [r1]
 8008a54:	613b      	str	r3, [r7, #16]
   return(result);
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e6      	bne.n	8008a2a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008a5c:	e014      	b.n	8008a88 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a62:	781a      	ldrb	r2, [r3, #0]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	b292      	uxth	r2, r2
 8008a6a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a70:	1c5a      	adds	r2, r3, #1
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008a88:	bf00      	nop
 8008a8a:	373c      	adds	r7, #60	; 0x3c
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b091      	sub	sp, #68	; 0x44
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aa0:	2b21      	cmp	r3, #33	; 0x21
 8008aa2:	d151      	bne.n	8008b48 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d132      	bne.n	8008b16 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab8:	e853 3f00 	ldrex	r3, [r3]
 8008abc:	623b      	str	r3, [r7, #32]
   return(result);
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ac4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ace:	633b      	str	r3, [r7, #48]	; 0x30
 8008ad0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ad6:	e841 2300 	strex	r3, r2, [r1]
 8008ada:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1e6      	bne.n	8008ab0 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	e853 3f00 	ldrex	r3, [r3]
 8008aee:	60fb      	str	r3, [r7, #12]
   return(result);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008af6:	637b      	str	r3, [r7, #52]	; 0x34
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	461a      	mov	r2, r3
 8008afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b00:	61fb      	str	r3, [r7, #28]
 8008b02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b04:	69b9      	ldr	r1, [r7, #24]
 8008b06:	69fa      	ldr	r2, [r7, #28]
 8008b08:	e841 2300 	strex	r3, r2, [r1]
 8008b0c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1e6      	bne.n	8008ae2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008b14:	e018      	b.n	8008b48 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b1e:	881a      	ldrh	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b28:	b292      	uxth	r2, r2
 8008b2a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b30:	1c9a      	adds	r2, r3, #2
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008b48:	bf00      	nop
 8008b4a:	3744      	adds	r7, #68	; 0x44
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b088      	sub	sp, #32
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	e853 3f00 	ldrex	r3, [r3]
 8008b68:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b70:	61fb      	str	r3, [r7, #28]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	461a      	mov	r2, r3
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	61bb      	str	r3, [r7, #24]
 8008b7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7e:	6979      	ldr	r1, [r7, #20]
 8008b80:	69ba      	ldr	r2, [r7, #24]
 8008b82:	e841 2300 	strex	r3, r2, [r1]
 8008b86:	613b      	str	r3, [r7, #16]
   return(result);
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1e6      	bne.n	8008b5c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2220      	movs	r2, #32
 8008b92:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7ff fa38 	bl	8008010 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ba0:	bf00      	nop
 8008ba2:	3720      	adds	r7, #32
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b09c      	sub	sp, #112	; 0x70
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008bb6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bc0:	2b22      	cmp	r3, #34	; 0x22
 8008bc2:	f040 80b9 	bne.w	8008d38 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008bcc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008bd0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008bd4:	b2d9      	uxtb	r1, r3
 8008bd6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008bda:	b2da      	uxtb	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008be0:	400a      	ands	r2, r1
 8008be2:	b2d2      	uxtb	r2, r2
 8008be4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bea:	1c5a      	adds	r2, r3, #1
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f040 809c 	bne.w	8008d48 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c18:	e853 3f00 	ldrex	r3, [r3]
 8008c1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c24:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c30:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c36:	e841 2300 	strex	r3, r2, [r1]
 8008c3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1e6      	bne.n	8008c10 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	3308      	adds	r3, #8
 8008c48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4c:	e853 3f00 	ldrex	r3, [r3]
 8008c50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c54:	f023 0301 	bic.w	r3, r3, #1
 8008c58:	667b      	str	r3, [r7, #100]	; 0x64
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3308      	adds	r3, #8
 8008c60:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c62:	647a      	str	r2, [r7, #68]	; 0x44
 8008c64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c6a:	e841 2300 	strex	r3, r2, [r1]
 8008c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1e5      	bne.n	8008c42 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2220      	movs	r2, #32
 8008c7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d018      	beq.n	8008cca <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ca6:	6a3b      	ldr	r3, [r7, #32]
 8008ca8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008cac:	663b      	str	r3, [r7, #96]	; 0x60
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cb6:	633b      	str	r3, [r7, #48]	; 0x30
 8008cb8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cbe:	e841 2300 	strex	r3, r2, [r1]
 8008cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1e6      	bne.n	8008c98 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d12e      	bne.n	8008d30 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	e853 3f00 	ldrex	r3, [r3]
 8008ce4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f023 0310 	bic.w	r3, r3, #16
 8008cec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cf6:	61fb      	str	r3, [r7, #28]
 8008cf8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfa:	69b9      	ldr	r1, [r7, #24]
 8008cfc:	69fa      	ldr	r2, [r7, #28]
 8008cfe:	e841 2300 	strex	r3, r2, [r1]
 8008d02:	617b      	str	r3, [r7, #20]
   return(result);
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1e6      	bne.n	8008cd8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	69db      	ldr	r3, [r3, #28]
 8008d10:	f003 0310 	and.w	r3, r3, #16
 8008d14:	2b10      	cmp	r3, #16
 8008d16:	d103      	bne.n	8008d20 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2210      	movs	r2, #16
 8008d1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7ff f985 	bl	8008038 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d2e:	e00b      	b.n	8008d48 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f7f7 fdc3 	bl	80008bc <HAL_UART_RxCpltCallback>
}
 8008d36:	e007      	b.n	8008d48 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	699a      	ldr	r2, [r3, #24]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f042 0208 	orr.w	r2, r2, #8
 8008d46:	619a      	str	r2, [r3, #24]
}
 8008d48:	bf00      	nop
 8008d4a:	3770      	adds	r7, #112	; 0x70
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b09c      	sub	sp, #112	; 0x70
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d5e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d68:	2b22      	cmp	r3, #34	; 0x22
 8008d6a:	f040 80b9 	bne.w	8008ee0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008d74:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d7c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008d7e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008d82:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008d86:	4013      	ands	r3, r2
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d8c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d92:	1c9a      	adds	r2, r3, #2
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	3b01      	subs	r3, #1
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f040 809c 	bne.w	8008ef0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dc0:	e853 3f00 	ldrex	r3, [r3]
 8008dc4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dcc:	667b      	str	r3, [r7, #100]	; 0x64
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dd6:	657b      	str	r3, [r7, #84]	; 0x54
 8008dd8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ddc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008dde:	e841 2300 	strex	r3, r2, [r1]
 8008de2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1e6      	bne.n	8008db8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3308      	adds	r3, #8
 8008df0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	f023 0301 	bic.w	r3, r3, #1
 8008e00:	663b      	str	r3, [r7, #96]	; 0x60
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3308      	adds	r3, #8
 8008e08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e0a:	643a      	str	r2, [r7, #64]	; 0x40
 8008e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e5      	bne.n	8008dea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2220      	movs	r2, #32
 8008e22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d018      	beq.n	8008e72 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e46:	6a3b      	ldr	r3, [r7, #32]
 8008e48:	e853 3f00 	ldrex	r3, [r3]
 8008e4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e60:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e66:	e841 2300 	strex	r3, r2, [r1]
 8008e6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1e6      	bne.n	8008e40 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d12e      	bne.n	8008ed8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	e853 3f00 	ldrex	r3, [r3]
 8008e8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	f023 0310 	bic.w	r3, r3, #16
 8008e94:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e9e:	61bb      	str	r3, [r7, #24]
 8008ea0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea2:	6979      	ldr	r1, [r7, #20]
 8008ea4:	69ba      	ldr	r2, [r7, #24]
 8008ea6:	e841 2300 	strex	r3, r2, [r1]
 8008eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1e6      	bne.n	8008e80 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	69db      	ldr	r3, [r3, #28]
 8008eb8:	f003 0310 	and.w	r3, r3, #16
 8008ebc:	2b10      	cmp	r3, #16
 8008ebe:	d103      	bne.n	8008ec8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2210      	movs	r2, #16
 8008ec6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008ece:	4619      	mov	r1, r3
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f7ff f8b1 	bl	8008038 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ed6:	e00b      	b.n	8008ef0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f7f7 fcef 	bl	80008bc <HAL_UART_RxCpltCallback>
}
 8008ede:	e007      	b.n	8008ef0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	699a      	ldr	r2, [r3, #24]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f042 0208 	orr.w	r2, r2, #8
 8008eee:	619a      	str	r2, [r3, #24]
}
 8008ef0:	bf00      	nop
 8008ef2:	3770      	adds	r7, #112	; 0x70
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <atoi>:
 8008f0c:	220a      	movs	r2, #10
 8008f0e:	2100      	movs	r1, #0
 8008f10:	f000 b924 	b.w	800915c <strtol>

08008f14 <__errno>:
 8008f14:	4b01      	ldr	r3, [pc, #4]	; (8008f1c <__errno+0x8>)
 8008f16:	6818      	ldr	r0, [r3, #0]
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	20000108 	.word	0x20000108

08008f20 <__libc_init_array>:
 8008f20:	b570      	push	{r4, r5, r6, lr}
 8008f22:	4d0d      	ldr	r5, [pc, #52]	; (8008f58 <__libc_init_array+0x38>)
 8008f24:	4c0d      	ldr	r4, [pc, #52]	; (8008f5c <__libc_init_array+0x3c>)
 8008f26:	1b64      	subs	r4, r4, r5
 8008f28:	10a4      	asrs	r4, r4, #2
 8008f2a:	2600      	movs	r6, #0
 8008f2c:	42a6      	cmp	r6, r4
 8008f2e:	d109      	bne.n	8008f44 <__libc_init_array+0x24>
 8008f30:	4d0b      	ldr	r5, [pc, #44]	; (8008f60 <__libc_init_array+0x40>)
 8008f32:	4c0c      	ldr	r4, [pc, #48]	; (8008f64 <__libc_init_array+0x44>)
 8008f34:	f001 fa88 	bl	800a448 <_init>
 8008f38:	1b64      	subs	r4, r4, r5
 8008f3a:	10a4      	asrs	r4, r4, #2
 8008f3c:	2600      	movs	r6, #0
 8008f3e:	42a6      	cmp	r6, r4
 8008f40:	d105      	bne.n	8008f4e <__libc_init_array+0x2e>
 8008f42:	bd70      	pop	{r4, r5, r6, pc}
 8008f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f48:	4798      	blx	r3
 8008f4a:	3601      	adds	r6, #1
 8008f4c:	e7ee      	b.n	8008f2c <__libc_init_array+0xc>
 8008f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f52:	4798      	blx	r3
 8008f54:	3601      	adds	r6, #1
 8008f56:	e7f2      	b.n	8008f3e <__libc_init_array+0x1e>
 8008f58:	0800a80c 	.word	0x0800a80c
 8008f5c:	0800a80c 	.word	0x0800a80c
 8008f60:	0800a80c 	.word	0x0800a80c
 8008f64:	0800a810 	.word	0x0800a810

08008f68 <memcpy>:
 8008f68:	440a      	add	r2, r1
 8008f6a:	4291      	cmp	r1, r2
 8008f6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f70:	d100      	bne.n	8008f74 <memcpy+0xc>
 8008f72:	4770      	bx	lr
 8008f74:	b510      	push	{r4, lr}
 8008f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f7e:	4291      	cmp	r1, r2
 8008f80:	d1f9      	bne.n	8008f76 <memcpy+0xe>
 8008f82:	bd10      	pop	{r4, pc}

08008f84 <memset>:
 8008f84:	4402      	add	r2, r0
 8008f86:	4603      	mov	r3, r0
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d100      	bne.n	8008f8e <memset+0xa>
 8008f8c:	4770      	bx	lr
 8008f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f92:	e7f9      	b.n	8008f88 <memset+0x4>

08008f94 <iprintf>:
 8008f94:	b40f      	push	{r0, r1, r2, r3}
 8008f96:	4b0a      	ldr	r3, [pc, #40]	; (8008fc0 <iprintf+0x2c>)
 8008f98:	b513      	push	{r0, r1, r4, lr}
 8008f9a:	681c      	ldr	r4, [r3, #0]
 8008f9c:	b124      	cbz	r4, 8008fa8 <iprintf+0x14>
 8008f9e:	69a3      	ldr	r3, [r4, #24]
 8008fa0:	b913      	cbnz	r3, 8008fa8 <iprintf+0x14>
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 f93c 	bl	8009220 <__sinit>
 8008fa8:	ab05      	add	r3, sp, #20
 8008faa:	9a04      	ldr	r2, [sp, #16]
 8008fac:	68a1      	ldr	r1, [r4, #8]
 8008fae:	9301      	str	r3, [sp, #4]
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f000 fbef 	bl	8009794 <_vfiprintf_r>
 8008fb6:	b002      	add	sp, #8
 8008fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fbc:	b004      	add	sp, #16
 8008fbe:	4770      	bx	lr
 8008fc0:	20000108 	.word	0x20000108

08008fc4 <putchar>:
 8008fc4:	4b09      	ldr	r3, [pc, #36]	; (8008fec <putchar+0x28>)
 8008fc6:	b513      	push	{r0, r1, r4, lr}
 8008fc8:	681c      	ldr	r4, [r3, #0]
 8008fca:	4601      	mov	r1, r0
 8008fcc:	b134      	cbz	r4, 8008fdc <putchar+0x18>
 8008fce:	69a3      	ldr	r3, [r4, #24]
 8008fd0:	b923      	cbnz	r3, 8008fdc <putchar+0x18>
 8008fd2:	9001      	str	r0, [sp, #4]
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	f000 f923 	bl	8009220 <__sinit>
 8008fda:	9901      	ldr	r1, [sp, #4]
 8008fdc:	68a2      	ldr	r2, [r4, #8]
 8008fde:	4620      	mov	r0, r4
 8008fe0:	b002      	add	sp, #8
 8008fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fe6:	f000 be99 	b.w	8009d1c <_putc_r>
 8008fea:	bf00      	nop
 8008fec:	20000108 	.word	0x20000108

08008ff0 <siprintf>:
 8008ff0:	b40e      	push	{r1, r2, r3}
 8008ff2:	b500      	push	{lr}
 8008ff4:	b09c      	sub	sp, #112	; 0x70
 8008ff6:	ab1d      	add	r3, sp, #116	; 0x74
 8008ff8:	9002      	str	r0, [sp, #8]
 8008ffa:	9006      	str	r0, [sp, #24]
 8008ffc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009000:	4809      	ldr	r0, [pc, #36]	; (8009028 <siprintf+0x38>)
 8009002:	9107      	str	r1, [sp, #28]
 8009004:	9104      	str	r1, [sp, #16]
 8009006:	4909      	ldr	r1, [pc, #36]	; (800902c <siprintf+0x3c>)
 8009008:	f853 2b04 	ldr.w	r2, [r3], #4
 800900c:	9105      	str	r1, [sp, #20]
 800900e:	6800      	ldr	r0, [r0, #0]
 8009010:	9301      	str	r3, [sp, #4]
 8009012:	a902      	add	r1, sp, #8
 8009014:	f000 fa94 	bl	8009540 <_svfiprintf_r>
 8009018:	9b02      	ldr	r3, [sp, #8]
 800901a:	2200      	movs	r2, #0
 800901c:	701a      	strb	r2, [r3, #0]
 800901e:	b01c      	add	sp, #112	; 0x70
 8009020:	f85d eb04 	ldr.w	lr, [sp], #4
 8009024:	b003      	add	sp, #12
 8009026:	4770      	bx	lr
 8009028:	20000108 	.word	0x20000108
 800902c:	ffff0208 	.word	0xffff0208

08009030 <strncat>:
 8009030:	b530      	push	{r4, r5, lr}
 8009032:	4604      	mov	r4, r0
 8009034:	7825      	ldrb	r5, [r4, #0]
 8009036:	4623      	mov	r3, r4
 8009038:	3401      	adds	r4, #1
 800903a:	2d00      	cmp	r5, #0
 800903c:	d1fa      	bne.n	8009034 <strncat+0x4>
 800903e:	3a01      	subs	r2, #1
 8009040:	d304      	bcc.n	800904c <strncat+0x1c>
 8009042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009046:	f803 4b01 	strb.w	r4, [r3], #1
 800904a:	b904      	cbnz	r4, 800904e <strncat+0x1e>
 800904c:	bd30      	pop	{r4, r5, pc}
 800904e:	2a00      	cmp	r2, #0
 8009050:	d1f5      	bne.n	800903e <strncat+0xe>
 8009052:	701a      	strb	r2, [r3, #0]
 8009054:	e7f3      	b.n	800903e <strncat+0xe>
	...

08009058 <_strtol_l.constprop.0>:
 8009058:	2b01      	cmp	r3, #1
 800905a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800905e:	d001      	beq.n	8009064 <_strtol_l.constprop.0+0xc>
 8009060:	2b24      	cmp	r3, #36	; 0x24
 8009062:	d906      	bls.n	8009072 <_strtol_l.constprop.0+0x1a>
 8009064:	f7ff ff56 	bl	8008f14 <__errno>
 8009068:	2316      	movs	r3, #22
 800906a:	6003      	str	r3, [r0, #0]
 800906c:	2000      	movs	r0, #0
 800906e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009072:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009158 <_strtol_l.constprop.0+0x100>
 8009076:	460d      	mov	r5, r1
 8009078:	462e      	mov	r6, r5
 800907a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800907e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009082:	f017 0708 	ands.w	r7, r7, #8
 8009086:	d1f7      	bne.n	8009078 <_strtol_l.constprop.0+0x20>
 8009088:	2c2d      	cmp	r4, #45	; 0x2d
 800908a:	d132      	bne.n	80090f2 <_strtol_l.constprop.0+0x9a>
 800908c:	782c      	ldrb	r4, [r5, #0]
 800908e:	2701      	movs	r7, #1
 8009090:	1cb5      	adds	r5, r6, #2
 8009092:	2b00      	cmp	r3, #0
 8009094:	d05b      	beq.n	800914e <_strtol_l.constprop.0+0xf6>
 8009096:	2b10      	cmp	r3, #16
 8009098:	d109      	bne.n	80090ae <_strtol_l.constprop.0+0x56>
 800909a:	2c30      	cmp	r4, #48	; 0x30
 800909c:	d107      	bne.n	80090ae <_strtol_l.constprop.0+0x56>
 800909e:	782c      	ldrb	r4, [r5, #0]
 80090a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80090a4:	2c58      	cmp	r4, #88	; 0x58
 80090a6:	d14d      	bne.n	8009144 <_strtol_l.constprop.0+0xec>
 80090a8:	786c      	ldrb	r4, [r5, #1]
 80090aa:	2310      	movs	r3, #16
 80090ac:	3502      	adds	r5, #2
 80090ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80090b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80090b6:	f04f 0c00 	mov.w	ip, #0
 80090ba:	fbb8 f9f3 	udiv	r9, r8, r3
 80090be:	4666      	mov	r6, ip
 80090c0:	fb03 8a19 	mls	sl, r3, r9, r8
 80090c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80090c8:	f1be 0f09 	cmp.w	lr, #9
 80090cc:	d816      	bhi.n	80090fc <_strtol_l.constprop.0+0xa4>
 80090ce:	4674      	mov	r4, lr
 80090d0:	42a3      	cmp	r3, r4
 80090d2:	dd24      	ble.n	800911e <_strtol_l.constprop.0+0xc6>
 80090d4:	f1bc 0f00 	cmp.w	ip, #0
 80090d8:	db1e      	blt.n	8009118 <_strtol_l.constprop.0+0xc0>
 80090da:	45b1      	cmp	r9, r6
 80090dc:	d31c      	bcc.n	8009118 <_strtol_l.constprop.0+0xc0>
 80090de:	d101      	bne.n	80090e4 <_strtol_l.constprop.0+0x8c>
 80090e0:	45a2      	cmp	sl, r4
 80090e2:	db19      	blt.n	8009118 <_strtol_l.constprop.0+0xc0>
 80090e4:	fb06 4603 	mla	r6, r6, r3, r4
 80090e8:	f04f 0c01 	mov.w	ip, #1
 80090ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090f0:	e7e8      	b.n	80090c4 <_strtol_l.constprop.0+0x6c>
 80090f2:	2c2b      	cmp	r4, #43	; 0x2b
 80090f4:	bf04      	itt	eq
 80090f6:	782c      	ldrbeq	r4, [r5, #0]
 80090f8:	1cb5      	addeq	r5, r6, #2
 80090fa:	e7ca      	b.n	8009092 <_strtol_l.constprop.0+0x3a>
 80090fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009100:	f1be 0f19 	cmp.w	lr, #25
 8009104:	d801      	bhi.n	800910a <_strtol_l.constprop.0+0xb2>
 8009106:	3c37      	subs	r4, #55	; 0x37
 8009108:	e7e2      	b.n	80090d0 <_strtol_l.constprop.0+0x78>
 800910a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800910e:	f1be 0f19 	cmp.w	lr, #25
 8009112:	d804      	bhi.n	800911e <_strtol_l.constprop.0+0xc6>
 8009114:	3c57      	subs	r4, #87	; 0x57
 8009116:	e7db      	b.n	80090d0 <_strtol_l.constprop.0+0x78>
 8009118:	f04f 3cff 	mov.w	ip, #4294967295
 800911c:	e7e6      	b.n	80090ec <_strtol_l.constprop.0+0x94>
 800911e:	f1bc 0f00 	cmp.w	ip, #0
 8009122:	da05      	bge.n	8009130 <_strtol_l.constprop.0+0xd8>
 8009124:	2322      	movs	r3, #34	; 0x22
 8009126:	6003      	str	r3, [r0, #0]
 8009128:	4646      	mov	r6, r8
 800912a:	b942      	cbnz	r2, 800913e <_strtol_l.constprop.0+0xe6>
 800912c:	4630      	mov	r0, r6
 800912e:	e79e      	b.n	800906e <_strtol_l.constprop.0+0x16>
 8009130:	b107      	cbz	r7, 8009134 <_strtol_l.constprop.0+0xdc>
 8009132:	4276      	negs	r6, r6
 8009134:	2a00      	cmp	r2, #0
 8009136:	d0f9      	beq.n	800912c <_strtol_l.constprop.0+0xd4>
 8009138:	f1bc 0f00 	cmp.w	ip, #0
 800913c:	d000      	beq.n	8009140 <_strtol_l.constprop.0+0xe8>
 800913e:	1e69      	subs	r1, r5, #1
 8009140:	6011      	str	r1, [r2, #0]
 8009142:	e7f3      	b.n	800912c <_strtol_l.constprop.0+0xd4>
 8009144:	2430      	movs	r4, #48	; 0x30
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1b1      	bne.n	80090ae <_strtol_l.constprop.0+0x56>
 800914a:	2308      	movs	r3, #8
 800914c:	e7af      	b.n	80090ae <_strtol_l.constprop.0+0x56>
 800914e:	2c30      	cmp	r4, #48	; 0x30
 8009150:	d0a5      	beq.n	800909e <_strtol_l.constprop.0+0x46>
 8009152:	230a      	movs	r3, #10
 8009154:	e7ab      	b.n	80090ae <_strtol_l.constprop.0+0x56>
 8009156:	bf00      	nop
 8009158:	0800a671 	.word	0x0800a671

0800915c <strtol>:
 800915c:	4613      	mov	r3, r2
 800915e:	460a      	mov	r2, r1
 8009160:	4601      	mov	r1, r0
 8009162:	4802      	ldr	r0, [pc, #8]	; (800916c <strtol+0x10>)
 8009164:	6800      	ldr	r0, [r0, #0]
 8009166:	f7ff bf77 	b.w	8009058 <_strtol_l.constprop.0>
 800916a:	bf00      	nop
 800916c:	20000108 	.word	0x20000108

08009170 <std>:
 8009170:	2300      	movs	r3, #0
 8009172:	b510      	push	{r4, lr}
 8009174:	4604      	mov	r4, r0
 8009176:	e9c0 3300 	strd	r3, r3, [r0]
 800917a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800917e:	6083      	str	r3, [r0, #8]
 8009180:	8181      	strh	r1, [r0, #12]
 8009182:	6643      	str	r3, [r0, #100]	; 0x64
 8009184:	81c2      	strh	r2, [r0, #14]
 8009186:	6183      	str	r3, [r0, #24]
 8009188:	4619      	mov	r1, r3
 800918a:	2208      	movs	r2, #8
 800918c:	305c      	adds	r0, #92	; 0x5c
 800918e:	f7ff fef9 	bl	8008f84 <memset>
 8009192:	4b05      	ldr	r3, [pc, #20]	; (80091a8 <std+0x38>)
 8009194:	6263      	str	r3, [r4, #36]	; 0x24
 8009196:	4b05      	ldr	r3, [pc, #20]	; (80091ac <std+0x3c>)
 8009198:	62a3      	str	r3, [r4, #40]	; 0x28
 800919a:	4b05      	ldr	r3, [pc, #20]	; (80091b0 <std+0x40>)
 800919c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800919e:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <std+0x44>)
 80091a0:	6224      	str	r4, [r4, #32]
 80091a2:	6323      	str	r3, [r4, #48]	; 0x30
 80091a4:	bd10      	pop	{r4, pc}
 80091a6:	bf00      	nop
 80091a8:	08009dcd 	.word	0x08009dcd
 80091ac:	08009def 	.word	0x08009def
 80091b0:	08009e27 	.word	0x08009e27
 80091b4:	08009e4b 	.word	0x08009e4b

080091b8 <_cleanup_r>:
 80091b8:	4901      	ldr	r1, [pc, #4]	; (80091c0 <_cleanup_r+0x8>)
 80091ba:	f000 b8af 	b.w	800931c <_fwalk_reent>
 80091be:	bf00      	nop
 80091c0:	0800a125 	.word	0x0800a125

080091c4 <__sfmoreglue>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	2268      	movs	r2, #104	; 0x68
 80091c8:	1e4d      	subs	r5, r1, #1
 80091ca:	4355      	muls	r5, r2
 80091cc:	460e      	mov	r6, r1
 80091ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091d2:	f000 f8e5 	bl	80093a0 <_malloc_r>
 80091d6:	4604      	mov	r4, r0
 80091d8:	b140      	cbz	r0, 80091ec <__sfmoreglue+0x28>
 80091da:	2100      	movs	r1, #0
 80091dc:	e9c0 1600 	strd	r1, r6, [r0]
 80091e0:	300c      	adds	r0, #12
 80091e2:	60a0      	str	r0, [r4, #8]
 80091e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091e8:	f7ff fecc 	bl	8008f84 <memset>
 80091ec:	4620      	mov	r0, r4
 80091ee:	bd70      	pop	{r4, r5, r6, pc}

080091f0 <__sfp_lock_acquire>:
 80091f0:	4801      	ldr	r0, [pc, #4]	; (80091f8 <__sfp_lock_acquire+0x8>)
 80091f2:	f000 b8b3 	b.w	800935c <__retarget_lock_acquire_recursive>
 80091f6:	bf00      	nop
 80091f8:	20002465 	.word	0x20002465

080091fc <__sfp_lock_release>:
 80091fc:	4801      	ldr	r0, [pc, #4]	; (8009204 <__sfp_lock_release+0x8>)
 80091fe:	f000 b8ae 	b.w	800935e <__retarget_lock_release_recursive>
 8009202:	bf00      	nop
 8009204:	20002465 	.word	0x20002465

08009208 <__sinit_lock_acquire>:
 8009208:	4801      	ldr	r0, [pc, #4]	; (8009210 <__sinit_lock_acquire+0x8>)
 800920a:	f000 b8a7 	b.w	800935c <__retarget_lock_acquire_recursive>
 800920e:	bf00      	nop
 8009210:	20002466 	.word	0x20002466

08009214 <__sinit_lock_release>:
 8009214:	4801      	ldr	r0, [pc, #4]	; (800921c <__sinit_lock_release+0x8>)
 8009216:	f000 b8a2 	b.w	800935e <__retarget_lock_release_recursive>
 800921a:	bf00      	nop
 800921c:	20002466 	.word	0x20002466

08009220 <__sinit>:
 8009220:	b510      	push	{r4, lr}
 8009222:	4604      	mov	r4, r0
 8009224:	f7ff fff0 	bl	8009208 <__sinit_lock_acquire>
 8009228:	69a3      	ldr	r3, [r4, #24]
 800922a:	b11b      	cbz	r3, 8009234 <__sinit+0x14>
 800922c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009230:	f7ff bff0 	b.w	8009214 <__sinit_lock_release>
 8009234:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009238:	6523      	str	r3, [r4, #80]	; 0x50
 800923a:	4b13      	ldr	r3, [pc, #76]	; (8009288 <__sinit+0x68>)
 800923c:	4a13      	ldr	r2, [pc, #76]	; (800928c <__sinit+0x6c>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	62a2      	str	r2, [r4, #40]	; 0x28
 8009242:	42a3      	cmp	r3, r4
 8009244:	bf04      	itt	eq
 8009246:	2301      	moveq	r3, #1
 8009248:	61a3      	streq	r3, [r4, #24]
 800924a:	4620      	mov	r0, r4
 800924c:	f000 f820 	bl	8009290 <__sfp>
 8009250:	6060      	str	r0, [r4, #4]
 8009252:	4620      	mov	r0, r4
 8009254:	f000 f81c 	bl	8009290 <__sfp>
 8009258:	60a0      	str	r0, [r4, #8]
 800925a:	4620      	mov	r0, r4
 800925c:	f000 f818 	bl	8009290 <__sfp>
 8009260:	2200      	movs	r2, #0
 8009262:	60e0      	str	r0, [r4, #12]
 8009264:	2104      	movs	r1, #4
 8009266:	6860      	ldr	r0, [r4, #4]
 8009268:	f7ff ff82 	bl	8009170 <std>
 800926c:	68a0      	ldr	r0, [r4, #8]
 800926e:	2201      	movs	r2, #1
 8009270:	2109      	movs	r1, #9
 8009272:	f7ff ff7d 	bl	8009170 <std>
 8009276:	68e0      	ldr	r0, [r4, #12]
 8009278:	2202      	movs	r2, #2
 800927a:	2112      	movs	r1, #18
 800927c:	f7ff ff78 	bl	8009170 <std>
 8009280:	2301      	movs	r3, #1
 8009282:	61a3      	str	r3, [r4, #24]
 8009284:	e7d2      	b.n	800922c <__sinit+0xc>
 8009286:	bf00      	nop
 8009288:	0800a774 	.word	0x0800a774
 800928c:	080091b9 	.word	0x080091b9

08009290 <__sfp>:
 8009290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009292:	4607      	mov	r7, r0
 8009294:	f7ff ffac 	bl	80091f0 <__sfp_lock_acquire>
 8009298:	4b1e      	ldr	r3, [pc, #120]	; (8009314 <__sfp+0x84>)
 800929a:	681e      	ldr	r6, [r3, #0]
 800929c:	69b3      	ldr	r3, [r6, #24]
 800929e:	b913      	cbnz	r3, 80092a6 <__sfp+0x16>
 80092a0:	4630      	mov	r0, r6
 80092a2:	f7ff ffbd 	bl	8009220 <__sinit>
 80092a6:	3648      	adds	r6, #72	; 0x48
 80092a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092ac:	3b01      	subs	r3, #1
 80092ae:	d503      	bpl.n	80092b8 <__sfp+0x28>
 80092b0:	6833      	ldr	r3, [r6, #0]
 80092b2:	b30b      	cbz	r3, 80092f8 <__sfp+0x68>
 80092b4:	6836      	ldr	r6, [r6, #0]
 80092b6:	e7f7      	b.n	80092a8 <__sfp+0x18>
 80092b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092bc:	b9d5      	cbnz	r5, 80092f4 <__sfp+0x64>
 80092be:	4b16      	ldr	r3, [pc, #88]	; (8009318 <__sfp+0x88>)
 80092c0:	60e3      	str	r3, [r4, #12]
 80092c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092c6:	6665      	str	r5, [r4, #100]	; 0x64
 80092c8:	f000 f847 	bl	800935a <__retarget_lock_init_recursive>
 80092cc:	f7ff ff96 	bl	80091fc <__sfp_lock_release>
 80092d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092d8:	6025      	str	r5, [r4, #0]
 80092da:	61a5      	str	r5, [r4, #24]
 80092dc:	2208      	movs	r2, #8
 80092de:	4629      	mov	r1, r5
 80092e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092e4:	f7ff fe4e 	bl	8008f84 <memset>
 80092e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092f0:	4620      	mov	r0, r4
 80092f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092f4:	3468      	adds	r4, #104	; 0x68
 80092f6:	e7d9      	b.n	80092ac <__sfp+0x1c>
 80092f8:	2104      	movs	r1, #4
 80092fa:	4638      	mov	r0, r7
 80092fc:	f7ff ff62 	bl	80091c4 <__sfmoreglue>
 8009300:	4604      	mov	r4, r0
 8009302:	6030      	str	r0, [r6, #0]
 8009304:	2800      	cmp	r0, #0
 8009306:	d1d5      	bne.n	80092b4 <__sfp+0x24>
 8009308:	f7ff ff78 	bl	80091fc <__sfp_lock_release>
 800930c:	230c      	movs	r3, #12
 800930e:	603b      	str	r3, [r7, #0]
 8009310:	e7ee      	b.n	80092f0 <__sfp+0x60>
 8009312:	bf00      	nop
 8009314:	0800a774 	.word	0x0800a774
 8009318:	ffff0001 	.word	0xffff0001

0800931c <_fwalk_reent>:
 800931c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009320:	4606      	mov	r6, r0
 8009322:	4688      	mov	r8, r1
 8009324:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009328:	2700      	movs	r7, #0
 800932a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800932e:	f1b9 0901 	subs.w	r9, r9, #1
 8009332:	d505      	bpl.n	8009340 <_fwalk_reent+0x24>
 8009334:	6824      	ldr	r4, [r4, #0]
 8009336:	2c00      	cmp	r4, #0
 8009338:	d1f7      	bne.n	800932a <_fwalk_reent+0xe>
 800933a:	4638      	mov	r0, r7
 800933c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009340:	89ab      	ldrh	r3, [r5, #12]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d907      	bls.n	8009356 <_fwalk_reent+0x3a>
 8009346:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800934a:	3301      	adds	r3, #1
 800934c:	d003      	beq.n	8009356 <_fwalk_reent+0x3a>
 800934e:	4629      	mov	r1, r5
 8009350:	4630      	mov	r0, r6
 8009352:	47c0      	blx	r8
 8009354:	4307      	orrs	r7, r0
 8009356:	3568      	adds	r5, #104	; 0x68
 8009358:	e7e9      	b.n	800932e <_fwalk_reent+0x12>

0800935a <__retarget_lock_init_recursive>:
 800935a:	4770      	bx	lr

0800935c <__retarget_lock_acquire_recursive>:
 800935c:	4770      	bx	lr

0800935e <__retarget_lock_release_recursive>:
 800935e:	4770      	bx	lr

08009360 <sbrk_aligned>:
 8009360:	b570      	push	{r4, r5, r6, lr}
 8009362:	4e0e      	ldr	r6, [pc, #56]	; (800939c <sbrk_aligned+0x3c>)
 8009364:	460c      	mov	r4, r1
 8009366:	6831      	ldr	r1, [r6, #0]
 8009368:	4605      	mov	r5, r0
 800936a:	b911      	cbnz	r1, 8009372 <sbrk_aligned+0x12>
 800936c:	f000 fd1e 	bl	8009dac <_sbrk_r>
 8009370:	6030      	str	r0, [r6, #0]
 8009372:	4621      	mov	r1, r4
 8009374:	4628      	mov	r0, r5
 8009376:	f000 fd19 	bl	8009dac <_sbrk_r>
 800937a:	1c43      	adds	r3, r0, #1
 800937c:	d00a      	beq.n	8009394 <sbrk_aligned+0x34>
 800937e:	1cc4      	adds	r4, r0, #3
 8009380:	f024 0403 	bic.w	r4, r4, #3
 8009384:	42a0      	cmp	r0, r4
 8009386:	d007      	beq.n	8009398 <sbrk_aligned+0x38>
 8009388:	1a21      	subs	r1, r4, r0
 800938a:	4628      	mov	r0, r5
 800938c:	f000 fd0e 	bl	8009dac <_sbrk_r>
 8009390:	3001      	adds	r0, #1
 8009392:	d101      	bne.n	8009398 <sbrk_aligned+0x38>
 8009394:	f04f 34ff 	mov.w	r4, #4294967295
 8009398:	4620      	mov	r0, r4
 800939a:	bd70      	pop	{r4, r5, r6, pc}
 800939c:	2000246c 	.word	0x2000246c

080093a0 <_malloc_r>:
 80093a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a4:	1ccd      	adds	r5, r1, #3
 80093a6:	f025 0503 	bic.w	r5, r5, #3
 80093aa:	3508      	adds	r5, #8
 80093ac:	2d0c      	cmp	r5, #12
 80093ae:	bf38      	it	cc
 80093b0:	250c      	movcc	r5, #12
 80093b2:	2d00      	cmp	r5, #0
 80093b4:	4607      	mov	r7, r0
 80093b6:	db01      	blt.n	80093bc <_malloc_r+0x1c>
 80093b8:	42a9      	cmp	r1, r5
 80093ba:	d905      	bls.n	80093c8 <_malloc_r+0x28>
 80093bc:	230c      	movs	r3, #12
 80093be:	603b      	str	r3, [r7, #0]
 80093c0:	2600      	movs	r6, #0
 80093c2:	4630      	mov	r0, r6
 80093c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093c8:	4e2e      	ldr	r6, [pc, #184]	; (8009484 <_malloc_r+0xe4>)
 80093ca:	f000 ff79 	bl	800a2c0 <__malloc_lock>
 80093ce:	6833      	ldr	r3, [r6, #0]
 80093d0:	461c      	mov	r4, r3
 80093d2:	bb34      	cbnz	r4, 8009422 <_malloc_r+0x82>
 80093d4:	4629      	mov	r1, r5
 80093d6:	4638      	mov	r0, r7
 80093d8:	f7ff ffc2 	bl	8009360 <sbrk_aligned>
 80093dc:	1c43      	adds	r3, r0, #1
 80093de:	4604      	mov	r4, r0
 80093e0:	d14d      	bne.n	800947e <_malloc_r+0xde>
 80093e2:	6834      	ldr	r4, [r6, #0]
 80093e4:	4626      	mov	r6, r4
 80093e6:	2e00      	cmp	r6, #0
 80093e8:	d140      	bne.n	800946c <_malloc_r+0xcc>
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	4631      	mov	r1, r6
 80093ee:	4638      	mov	r0, r7
 80093f0:	eb04 0803 	add.w	r8, r4, r3
 80093f4:	f000 fcda 	bl	8009dac <_sbrk_r>
 80093f8:	4580      	cmp	r8, r0
 80093fa:	d13a      	bne.n	8009472 <_malloc_r+0xd2>
 80093fc:	6821      	ldr	r1, [r4, #0]
 80093fe:	3503      	adds	r5, #3
 8009400:	1a6d      	subs	r5, r5, r1
 8009402:	f025 0503 	bic.w	r5, r5, #3
 8009406:	3508      	adds	r5, #8
 8009408:	2d0c      	cmp	r5, #12
 800940a:	bf38      	it	cc
 800940c:	250c      	movcc	r5, #12
 800940e:	4629      	mov	r1, r5
 8009410:	4638      	mov	r0, r7
 8009412:	f7ff ffa5 	bl	8009360 <sbrk_aligned>
 8009416:	3001      	adds	r0, #1
 8009418:	d02b      	beq.n	8009472 <_malloc_r+0xd2>
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	442b      	add	r3, r5
 800941e:	6023      	str	r3, [r4, #0]
 8009420:	e00e      	b.n	8009440 <_malloc_r+0xa0>
 8009422:	6822      	ldr	r2, [r4, #0]
 8009424:	1b52      	subs	r2, r2, r5
 8009426:	d41e      	bmi.n	8009466 <_malloc_r+0xc6>
 8009428:	2a0b      	cmp	r2, #11
 800942a:	d916      	bls.n	800945a <_malloc_r+0xba>
 800942c:	1961      	adds	r1, r4, r5
 800942e:	42a3      	cmp	r3, r4
 8009430:	6025      	str	r5, [r4, #0]
 8009432:	bf18      	it	ne
 8009434:	6059      	strne	r1, [r3, #4]
 8009436:	6863      	ldr	r3, [r4, #4]
 8009438:	bf08      	it	eq
 800943a:	6031      	streq	r1, [r6, #0]
 800943c:	5162      	str	r2, [r4, r5]
 800943e:	604b      	str	r3, [r1, #4]
 8009440:	4638      	mov	r0, r7
 8009442:	f104 060b 	add.w	r6, r4, #11
 8009446:	f000 ff41 	bl	800a2cc <__malloc_unlock>
 800944a:	f026 0607 	bic.w	r6, r6, #7
 800944e:	1d23      	adds	r3, r4, #4
 8009450:	1af2      	subs	r2, r6, r3
 8009452:	d0b6      	beq.n	80093c2 <_malloc_r+0x22>
 8009454:	1b9b      	subs	r3, r3, r6
 8009456:	50a3      	str	r3, [r4, r2]
 8009458:	e7b3      	b.n	80093c2 <_malloc_r+0x22>
 800945a:	6862      	ldr	r2, [r4, #4]
 800945c:	42a3      	cmp	r3, r4
 800945e:	bf0c      	ite	eq
 8009460:	6032      	streq	r2, [r6, #0]
 8009462:	605a      	strne	r2, [r3, #4]
 8009464:	e7ec      	b.n	8009440 <_malloc_r+0xa0>
 8009466:	4623      	mov	r3, r4
 8009468:	6864      	ldr	r4, [r4, #4]
 800946a:	e7b2      	b.n	80093d2 <_malloc_r+0x32>
 800946c:	4634      	mov	r4, r6
 800946e:	6876      	ldr	r6, [r6, #4]
 8009470:	e7b9      	b.n	80093e6 <_malloc_r+0x46>
 8009472:	230c      	movs	r3, #12
 8009474:	603b      	str	r3, [r7, #0]
 8009476:	4638      	mov	r0, r7
 8009478:	f000 ff28 	bl	800a2cc <__malloc_unlock>
 800947c:	e7a1      	b.n	80093c2 <_malloc_r+0x22>
 800947e:	6025      	str	r5, [r4, #0]
 8009480:	e7de      	b.n	8009440 <_malloc_r+0xa0>
 8009482:	bf00      	nop
 8009484:	20002468 	.word	0x20002468

08009488 <__ssputs_r>:
 8009488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800948c:	688e      	ldr	r6, [r1, #8]
 800948e:	429e      	cmp	r6, r3
 8009490:	4682      	mov	sl, r0
 8009492:	460c      	mov	r4, r1
 8009494:	4690      	mov	r8, r2
 8009496:	461f      	mov	r7, r3
 8009498:	d838      	bhi.n	800950c <__ssputs_r+0x84>
 800949a:	898a      	ldrh	r2, [r1, #12]
 800949c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094a0:	d032      	beq.n	8009508 <__ssputs_r+0x80>
 80094a2:	6825      	ldr	r5, [r4, #0]
 80094a4:	6909      	ldr	r1, [r1, #16]
 80094a6:	eba5 0901 	sub.w	r9, r5, r1
 80094aa:	6965      	ldr	r5, [r4, #20]
 80094ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094b4:	3301      	adds	r3, #1
 80094b6:	444b      	add	r3, r9
 80094b8:	106d      	asrs	r5, r5, #1
 80094ba:	429d      	cmp	r5, r3
 80094bc:	bf38      	it	cc
 80094be:	461d      	movcc	r5, r3
 80094c0:	0553      	lsls	r3, r2, #21
 80094c2:	d531      	bpl.n	8009528 <__ssputs_r+0xa0>
 80094c4:	4629      	mov	r1, r5
 80094c6:	f7ff ff6b 	bl	80093a0 <_malloc_r>
 80094ca:	4606      	mov	r6, r0
 80094cc:	b950      	cbnz	r0, 80094e4 <__ssputs_r+0x5c>
 80094ce:	230c      	movs	r3, #12
 80094d0:	f8ca 3000 	str.w	r3, [sl]
 80094d4:	89a3      	ldrh	r3, [r4, #12]
 80094d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094da:	81a3      	strh	r3, [r4, #12]
 80094dc:	f04f 30ff 	mov.w	r0, #4294967295
 80094e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e4:	6921      	ldr	r1, [r4, #16]
 80094e6:	464a      	mov	r2, r9
 80094e8:	f7ff fd3e 	bl	8008f68 <memcpy>
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094f6:	81a3      	strh	r3, [r4, #12]
 80094f8:	6126      	str	r6, [r4, #16]
 80094fa:	6165      	str	r5, [r4, #20]
 80094fc:	444e      	add	r6, r9
 80094fe:	eba5 0509 	sub.w	r5, r5, r9
 8009502:	6026      	str	r6, [r4, #0]
 8009504:	60a5      	str	r5, [r4, #8]
 8009506:	463e      	mov	r6, r7
 8009508:	42be      	cmp	r6, r7
 800950a:	d900      	bls.n	800950e <__ssputs_r+0x86>
 800950c:	463e      	mov	r6, r7
 800950e:	6820      	ldr	r0, [r4, #0]
 8009510:	4632      	mov	r2, r6
 8009512:	4641      	mov	r1, r8
 8009514:	f000 feba 	bl	800a28c <memmove>
 8009518:	68a3      	ldr	r3, [r4, #8]
 800951a:	1b9b      	subs	r3, r3, r6
 800951c:	60a3      	str	r3, [r4, #8]
 800951e:	6823      	ldr	r3, [r4, #0]
 8009520:	4433      	add	r3, r6
 8009522:	6023      	str	r3, [r4, #0]
 8009524:	2000      	movs	r0, #0
 8009526:	e7db      	b.n	80094e0 <__ssputs_r+0x58>
 8009528:	462a      	mov	r2, r5
 800952a:	f000 ff21 	bl	800a370 <_realloc_r>
 800952e:	4606      	mov	r6, r0
 8009530:	2800      	cmp	r0, #0
 8009532:	d1e1      	bne.n	80094f8 <__ssputs_r+0x70>
 8009534:	6921      	ldr	r1, [r4, #16]
 8009536:	4650      	mov	r0, sl
 8009538:	f000 fece 	bl	800a2d8 <_free_r>
 800953c:	e7c7      	b.n	80094ce <__ssputs_r+0x46>
	...

08009540 <_svfiprintf_r>:
 8009540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009544:	4698      	mov	r8, r3
 8009546:	898b      	ldrh	r3, [r1, #12]
 8009548:	061b      	lsls	r3, r3, #24
 800954a:	b09d      	sub	sp, #116	; 0x74
 800954c:	4607      	mov	r7, r0
 800954e:	460d      	mov	r5, r1
 8009550:	4614      	mov	r4, r2
 8009552:	d50e      	bpl.n	8009572 <_svfiprintf_r+0x32>
 8009554:	690b      	ldr	r3, [r1, #16]
 8009556:	b963      	cbnz	r3, 8009572 <_svfiprintf_r+0x32>
 8009558:	2140      	movs	r1, #64	; 0x40
 800955a:	f7ff ff21 	bl	80093a0 <_malloc_r>
 800955e:	6028      	str	r0, [r5, #0]
 8009560:	6128      	str	r0, [r5, #16]
 8009562:	b920      	cbnz	r0, 800956e <_svfiprintf_r+0x2e>
 8009564:	230c      	movs	r3, #12
 8009566:	603b      	str	r3, [r7, #0]
 8009568:	f04f 30ff 	mov.w	r0, #4294967295
 800956c:	e0d1      	b.n	8009712 <_svfiprintf_r+0x1d2>
 800956e:	2340      	movs	r3, #64	; 0x40
 8009570:	616b      	str	r3, [r5, #20]
 8009572:	2300      	movs	r3, #0
 8009574:	9309      	str	r3, [sp, #36]	; 0x24
 8009576:	2320      	movs	r3, #32
 8009578:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800957c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009580:	2330      	movs	r3, #48	; 0x30
 8009582:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800972c <_svfiprintf_r+0x1ec>
 8009586:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800958a:	f04f 0901 	mov.w	r9, #1
 800958e:	4623      	mov	r3, r4
 8009590:	469a      	mov	sl, r3
 8009592:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009596:	b10a      	cbz	r2, 800959c <_svfiprintf_r+0x5c>
 8009598:	2a25      	cmp	r2, #37	; 0x25
 800959a:	d1f9      	bne.n	8009590 <_svfiprintf_r+0x50>
 800959c:	ebba 0b04 	subs.w	fp, sl, r4
 80095a0:	d00b      	beq.n	80095ba <_svfiprintf_r+0x7a>
 80095a2:	465b      	mov	r3, fp
 80095a4:	4622      	mov	r2, r4
 80095a6:	4629      	mov	r1, r5
 80095a8:	4638      	mov	r0, r7
 80095aa:	f7ff ff6d 	bl	8009488 <__ssputs_r>
 80095ae:	3001      	adds	r0, #1
 80095b0:	f000 80aa 	beq.w	8009708 <_svfiprintf_r+0x1c8>
 80095b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095b6:	445a      	add	r2, fp
 80095b8:	9209      	str	r2, [sp, #36]	; 0x24
 80095ba:	f89a 3000 	ldrb.w	r3, [sl]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	f000 80a2 	beq.w	8009708 <_svfiprintf_r+0x1c8>
 80095c4:	2300      	movs	r3, #0
 80095c6:	f04f 32ff 	mov.w	r2, #4294967295
 80095ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095ce:	f10a 0a01 	add.w	sl, sl, #1
 80095d2:	9304      	str	r3, [sp, #16]
 80095d4:	9307      	str	r3, [sp, #28]
 80095d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095da:	931a      	str	r3, [sp, #104]	; 0x68
 80095dc:	4654      	mov	r4, sl
 80095de:	2205      	movs	r2, #5
 80095e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e4:	4851      	ldr	r0, [pc, #324]	; (800972c <_svfiprintf_r+0x1ec>)
 80095e6:	f7f6 fe13 	bl	8000210 <memchr>
 80095ea:	9a04      	ldr	r2, [sp, #16]
 80095ec:	b9d8      	cbnz	r0, 8009626 <_svfiprintf_r+0xe6>
 80095ee:	06d0      	lsls	r0, r2, #27
 80095f0:	bf44      	itt	mi
 80095f2:	2320      	movmi	r3, #32
 80095f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095f8:	0711      	lsls	r1, r2, #28
 80095fa:	bf44      	itt	mi
 80095fc:	232b      	movmi	r3, #43	; 0x2b
 80095fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009602:	f89a 3000 	ldrb.w	r3, [sl]
 8009606:	2b2a      	cmp	r3, #42	; 0x2a
 8009608:	d015      	beq.n	8009636 <_svfiprintf_r+0xf6>
 800960a:	9a07      	ldr	r2, [sp, #28]
 800960c:	4654      	mov	r4, sl
 800960e:	2000      	movs	r0, #0
 8009610:	f04f 0c0a 	mov.w	ip, #10
 8009614:	4621      	mov	r1, r4
 8009616:	f811 3b01 	ldrb.w	r3, [r1], #1
 800961a:	3b30      	subs	r3, #48	; 0x30
 800961c:	2b09      	cmp	r3, #9
 800961e:	d94e      	bls.n	80096be <_svfiprintf_r+0x17e>
 8009620:	b1b0      	cbz	r0, 8009650 <_svfiprintf_r+0x110>
 8009622:	9207      	str	r2, [sp, #28]
 8009624:	e014      	b.n	8009650 <_svfiprintf_r+0x110>
 8009626:	eba0 0308 	sub.w	r3, r0, r8
 800962a:	fa09 f303 	lsl.w	r3, r9, r3
 800962e:	4313      	orrs	r3, r2
 8009630:	9304      	str	r3, [sp, #16]
 8009632:	46a2      	mov	sl, r4
 8009634:	e7d2      	b.n	80095dc <_svfiprintf_r+0x9c>
 8009636:	9b03      	ldr	r3, [sp, #12]
 8009638:	1d19      	adds	r1, r3, #4
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	9103      	str	r1, [sp, #12]
 800963e:	2b00      	cmp	r3, #0
 8009640:	bfbb      	ittet	lt
 8009642:	425b      	neglt	r3, r3
 8009644:	f042 0202 	orrlt.w	r2, r2, #2
 8009648:	9307      	strge	r3, [sp, #28]
 800964a:	9307      	strlt	r3, [sp, #28]
 800964c:	bfb8      	it	lt
 800964e:	9204      	strlt	r2, [sp, #16]
 8009650:	7823      	ldrb	r3, [r4, #0]
 8009652:	2b2e      	cmp	r3, #46	; 0x2e
 8009654:	d10c      	bne.n	8009670 <_svfiprintf_r+0x130>
 8009656:	7863      	ldrb	r3, [r4, #1]
 8009658:	2b2a      	cmp	r3, #42	; 0x2a
 800965a:	d135      	bne.n	80096c8 <_svfiprintf_r+0x188>
 800965c:	9b03      	ldr	r3, [sp, #12]
 800965e:	1d1a      	adds	r2, r3, #4
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	9203      	str	r2, [sp, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	bfb8      	it	lt
 8009668:	f04f 33ff 	movlt.w	r3, #4294967295
 800966c:	3402      	adds	r4, #2
 800966e:	9305      	str	r3, [sp, #20]
 8009670:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800973c <_svfiprintf_r+0x1fc>
 8009674:	7821      	ldrb	r1, [r4, #0]
 8009676:	2203      	movs	r2, #3
 8009678:	4650      	mov	r0, sl
 800967a:	f7f6 fdc9 	bl	8000210 <memchr>
 800967e:	b140      	cbz	r0, 8009692 <_svfiprintf_r+0x152>
 8009680:	2340      	movs	r3, #64	; 0x40
 8009682:	eba0 000a 	sub.w	r0, r0, sl
 8009686:	fa03 f000 	lsl.w	r0, r3, r0
 800968a:	9b04      	ldr	r3, [sp, #16]
 800968c:	4303      	orrs	r3, r0
 800968e:	3401      	adds	r4, #1
 8009690:	9304      	str	r3, [sp, #16]
 8009692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009696:	4826      	ldr	r0, [pc, #152]	; (8009730 <_svfiprintf_r+0x1f0>)
 8009698:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800969c:	2206      	movs	r2, #6
 800969e:	f7f6 fdb7 	bl	8000210 <memchr>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d038      	beq.n	8009718 <_svfiprintf_r+0x1d8>
 80096a6:	4b23      	ldr	r3, [pc, #140]	; (8009734 <_svfiprintf_r+0x1f4>)
 80096a8:	bb1b      	cbnz	r3, 80096f2 <_svfiprintf_r+0x1b2>
 80096aa:	9b03      	ldr	r3, [sp, #12]
 80096ac:	3307      	adds	r3, #7
 80096ae:	f023 0307 	bic.w	r3, r3, #7
 80096b2:	3308      	adds	r3, #8
 80096b4:	9303      	str	r3, [sp, #12]
 80096b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b8:	4433      	add	r3, r6
 80096ba:	9309      	str	r3, [sp, #36]	; 0x24
 80096bc:	e767      	b.n	800958e <_svfiprintf_r+0x4e>
 80096be:	fb0c 3202 	mla	r2, ip, r2, r3
 80096c2:	460c      	mov	r4, r1
 80096c4:	2001      	movs	r0, #1
 80096c6:	e7a5      	b.n	8009614 <_svfiprintf_r+0xd4>
 80096c8:	2300      	movs	r3, #0
 80096ca:	3401      	adds	r4, #1
 80096cc:	9305      	str	r3, [sp, #20]
 80096ce:	4619      	mov	r1, r3
 80096d0:	f04f 0c0a 	mov.w	ip, #10
 80096d4:	4620      	mov	r0, r4
 80096d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096da:	3a30      	subs	r2, #48	; 0x30
 80096dc:	2a09      	cmp	r2, #9
 80096de:	d903      	bls.n	80096e8 <_svfiprintf_r+0x1a8>
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d0c5      	beq.n	8009670 <_svfiprintf_r+0x130>
 80096e4:	9105      	str	r1, [sp, #20]
 80096e6:	e7c3      	b.n	8009670 <_svfiprintf_r+0x130>
 80096e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80096ec:	4604      	mov	r4, r0
 80096ee:	2301      	movs	r3, #1
 80096f0:	e7f0      	b.n	80096d4 <_svfiprintf_r+0x194>
 80096f2:	ab03      	add	r3, sp, #12
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	462a      	mov	r2, r5
 80096f8:	4b0f      	ldr	r3, [pc, #60]	; (8009738 <_svfiprintf_r+0x1f8>)
 80096fa:	a904      	add	r1, sp, #16
 80096fc:	4638      	mov	r0, r7
 80096fe:	f3af 8000 	nop.w
 8009702:	1c42      	adds	r2, r0, #1
 8009704:	4606      	mov	r6, r0
 8009706:	d1d6      	bne.n	80096b6 <_svfiprintf_r+0x176>
 8009708:	89ab      	ldrh	r3, [r5, #12]
 800970a:	065b      	lsls	r3, r3, #25
 800970c:	f53f af2c 	bmi.w	8009568 <_svfiprintf_r+0x28>
 8009710:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009712:	b01d      	add	sp, #116	; 0x74
 8009714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009718:	ab03      	add	r3, sp, #12
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	462a      	mov	r2, r5
 800971e:	4b06      	ldr	r3, [pc, #24]	; (8009738 <_svfiprintf_r+0x1f8>)
 8009720:	a904      	add	r1, sp, #16
 8009722:	4638      	mov	r0, r7
 8009724:	f000 f9d4 	bl	8009ad0 <_printf_i>
 8009728:	e7eb      	b.n	8009702 <_svfiprintf_r+0x1c2>
 800972a:	bf00      	nop
 800972c:	0800a7d8 	.word	0x0800a7d8
 8009730:	0800a7e2 	.word	0x0800a7e2
 8009734:	00000000 	.word	0x00000000
 8009738:	08009489 	.word	0x08009489
 800973c:	0800a7de 	.word	0x0800a7de

08009740 <__sfputc_r>:
 8009740:	6893      	ldr	r3, [r2, #8]
 8009742:	3b01      	subs	r3, #1
 8009744:	2b00      	cmp	r3, #0
 8009746:	b410      	push	{r4}
 8009748:	6093      	str	r3, [r2, #8]
 800974a:	da08      	bge.n	800975e <__sfputc_r+0x1e>
 800974c:	6994      	ldr	r4, [r2, #24]
 800974e:	42a3      	cmp	r3, r4
 8009750:	db01      	blt.n	8009756 <__sfputc_r+0x16>
 8009752:	290a      	cmp	r1, #10
 8009754:	d103      	bne.n	800975e <__sfputc_r+0x1e>
 8009756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800975a:	f000 bb7b 	b.w	8009e54 <__swbuf_r>
 800975e:	6813      	ldr	r3, [r2, #0]
 8009760:	1c58      	adds	r0, r3, #1
 8009762:	6010      	str	r0, [r2, #0]
 8009764:	7019      	strb	r1, [r3, #0]
 8009766:	4608      	mov	r0, r1
 8009768:	f85d 4b04 	ldr.w	r4, [sp], #4
 800976c:	4770      	bx	lr

0800976e <__sfputs_r>:
 800976e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009770:	4606      	mov	r6, r0
 8009772:	460f      	mov	r7, r1
 8009774:	4614      	mov	r4, r2
 8009776:	18d5      	adds	r5, r2, r3
 8009778:	42ac      	cmp	r4, r5
 800977a:	d101      	bne.n	8009780 <__sfputs_r+0x12>
 800977c:	2000      	movs	r0, #0
 800977e:	e007      	b.n	8009790 <__sfputs_r+0x22>
 8009780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009784:	463a      	mov	r2, r7
 8009786:	4630      	mov	r0, r6
 8009788:	f7ff ffda 	bl	8009740 <__sfputc_r>
 800978c:	1c43      	adds	r3, r0, #1
 800978e:	d1f3      	bne.n	8009778 <__sfputs_r+0xa>
 8009790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009794 <_vfiprintf_r>:
 8009794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009798:	460d      	mov	r5, r1
 800979a:	b09d      	sub	sp, #116	; 0x74
 800979c:	4614      	mov	r4, r2
 800979e:	4698      	mov	r8, r3
 80097a0:	4606      	mov	r6, r0
 80097a2:	b118      	cbz	r0, 80097ac <_vfiprintf_r+0x18>
 80097a4:	6983      	ldr	r3, [r0, #24]
 80097a6:	b90b      	cbnz	r3, 80097ac <_vfiprintf_r+0x18>
 80097a8:	f7ff fd3a 	bl	8009220 <__sinit>
 80097ac:	4b89      	ldr	r3, [pc, #548]	; (80099d4 <_vfiprintf_r+0x240>)
 80097ae:	429d      	cmp	r5, r3
 80097b0:	d11b      	bne.n	80097ea <_vfiprintf_r+0x56>
 80097b2:	6875      	ldr	r5, [r6, #4]
 80097b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097b6:	07d9      	lsls	r1, r3, #31
 80097b8:	d405      	bmi.n	80097c6 <_vfiprintf_r+0x32>
 80097ba:	89ab      	ldrh	r3, [r5, #12]
 80097bc:	059a      	lsls	r2, r3, #22
 80097be:	d402      	bmi.n	80097c6 <_vfiprintf_r+0x32>
 80097c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097c2:	f7ff fdcb 	bl	800935c <__retarget_lock_acquire_recursive>
 80097c6:	89ab      	ldrh	r3, [r5, #12]
 80097c8:	071b      	lsls	r3, r3, #28
 80097ca:	d501      	bpl.n	80097d0 <_vfiprintf_r+0x3c>
 80097cc:	692b      	ldr	r3, [r5, #16]
 80097ce:	b9eb      	cbnz	r3, 800980c <_vfiprintf_r+0x78>
 80097d0:	4629      	mov	r1, r5
 80097d2:	4630      	mov	r0, r6
 80097d4:	f000 fba2 	bl	8009f1c <__swsetup_r>
 80097d8:	b1c0      	cbz	r0, 800980c <_vfiprintf_r+0x78>
 80097da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097dc:	07dc      	lsls	r4, r3, #31
 80097de:	d50e      	bpl.n	80097fe <_vfiprintf_r+0x6a>
 80097e0:	f04f 30ff 	mov.w	r0, #4294967295
 80097e4:	b01d      	add	sp, #116	; 0x74
 80097e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ea:	4b7b      	ldr	r3, [pc, #492]	; (80099d8 <_vfiprintf_r+0x244>)
 80097ec:	429d      	cmp	r5, r3
 80097ee:	d101      	bne.n	80097f4 <_vfiprintf_r+0x60>
 80097f0:	68b5      	ldr	r5, [r6, #8]
 80097f2:	e7df      	b.n	80097b4 <_vfiprintf_r+0x20>
 80097f4:	4b79      	ldr	r3, [pc, #484]	; (80099dc <_vfiprintf_r+0x248>)
 80097f6:	429d      	cmp	r5, r3
 80097f8:	bf08      	it	eq
 80097fa:	68f5      	ldreq	r5, [r6, #12]
 80097fc:	e7da      	b.n	80097b4 <_vfiprintf_r+0x20>
 80097fe:	89ab      	ldrh	r3, [r5, #12]
 8009800:	0598      	lsls	r0, r3, #22
 8009802:	d4ed      	bmi.n	80097e0 <_vfiprintf_r+0x4c>
 8009804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009806:	f7ff fdaa 	bl	800935e <__retarget_lock_release_recursive>
 800980a:	e7e9      	b.n	80097e0 <_vfiprintf_r+0x4c>
 800980c:	2300      	movs	r3, #0
 800980e:	9309      	str	r3, [sp, #36]	; 0x24
 8009810:	2320      	movs	r3, #32
 8009812:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009816:	f8cd 800c 	str.w	r8, [sp, #12]
 800981a:	2330      	movs	r3, #48	; 0x30
 800981c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80099e0 <_vfiprintf_r+0x24c>
 8009820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009824:	f04f 0901 	mov.w	r9, #1
 8009828:	4623      	mov	r3, r4
 800982a:	469a      	mov	sl, r3
 800982c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009830:	b10a      	cbz	r2, 8009836 <_vfiprintf_r+0xa2>
 8009832:	2a25      	cmp	r2, #37	; 0x25
 8009834:	d1f9      	bne.n	800982a <_vfiprintf_r+0x96>
 8009836:	ebba 0b04 	subs.w	fp, sl, r4
 800983a:	d00b      	beq.n	8009854 <_vfiprintf_r+0xc0>
 800983c:	465b      	mov	r3, fp
 800983e:	4622      	mov	r2, r4
 8009840:	4629      	mov	r1, r5
 8009842:	4630      	mov	r0, r6
 8009844:	f7ff ff93 	bl	800976e <__sfputs_r>
 8009848:	3001      	adds	r0, #1
 800984a:	f000 80aa 	beq.w	80099a2 <_vfiprintf_r+0x20e>
 800984e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009850:	445a      	add	r2, fp
 8009852:	9209      	str	r2, [sp, #36]	; 0x24
 8009854:	f89a 3000 	ldrb.w	r3, [sl]
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 80a2 	beq.w	80099a2 <_vfiprintf_r+0x20e>
 800985e:	2300      	movs	r3, #0
 8009860:	f04f 32ff 	mov.w	r2, #4294967295
 8009864:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009868:	f10a 0a01 	add.w	sl, sl, #1
 800986c:	9304      	str	r3, [sp, #16]
 800986e:	9307      	str	r3, [sp, #28]
 8009870:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009874:	931a      	str	r3, [sp, #104]	; 0x68
 8009876:	4654      	mov	r4, sl
 8009878:	2205      	movs	r2, #5
 800987a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800987e:	4858      	ldr	r0, [pc, #352]	; (80099e0 <_vfiprintf_r+0x24c>)
 8009880:	f7f6 fcc6 	bl	8000210 <memchr>
 8009884:	9a04      	ldr	r2, [sp, #16]
 8009886:	b9d8      	cbnz	r0, 80098c0 <_vfiprintf_r+0x12c>
 8009888:	06d1      	lsls	r1, r2, #27
 800988a:	bf44      	itt	mi
 800988c:	2320      	movmi	r3, #32
 800988e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009892:	0713      	lsls	r3, r2, #28
 8009894:	bf44      	itt	mi
 8009896:	232b      	movmi	r3, #43	; 0x2b
 8009898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800989c:	f89a 3000 	ldrb.w	r3, [sl]
 80098a0:	2b2a      	cmp	r3, #42	; 0x2a
 80098a2:	d015      	beq.n	80098d0 <_vfiprintf_r+0x13c>
 80098a4:	9a07      	ldr	r2, [sp, #28]
 80098a6:	4654      	mov	r4, sl
 80098a8:	2000      	movs	r0, #0
 80098aa:	f04f 0c0a 	mov.w	ip, #10
 80098ae:	4621      	mov	r1, r4
 80098b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098b4:	3b30      	subs	r3, #48	; 0x30
 80098b6:	2b09      	cmp	r3, #9
 80098b8:	d94e      	bls.n	8009958 <_vfiprintf_r+0x1c4>
 80098ba:	b1b0      	cbz	r0, 80098ea <_vfiprintf_r+0x156>
 80098bc:	9207      	str	r2, [sp, #28]
 80098be:	e014      	b.n	80098ea <_vfiprintf_r+0x156>
 80098c0:	eba0 0308 	sub.w	r3, r0, r8
 80098c4:	fa09 f303 	lsl.w	r3, r9, r3
 80098c8:	4313      	orrs	r3, r2
 80098ca:	9304      	str	r3, [sp, #16]
 80098cc:	46a2      	mov	sl, r4
 80098ce:	e7d2      	b.n	8009876 <_vfiprintf_r+0xe2>
 80098d0:	9b03      	ldr	r3, [sp, #12]
 80098d2:	1d19      	adds	r1, r3, #4
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	9103      	str	r1, [sp, #12]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	bfbb      	ittet	lt
 80098dc:	425b      	neglt	r3, r3
 80098de:	f042 0202 	orrlt.w	r2, r2, #2
 80098e2:	9307      	strge	r3, [sp, #28]
 80098e4:	9307      	strlt	r3, [sp, #28]
 80098e6:	bfb8      	it	lt
 80098e8:	9204      	strlt	r2, [sp, #16]
 80098ea:	7823      	ldrb	r3, [r4, #0]
 80098ec:	2b2e      	cmp	r3, #46	; 0x2e
 80098ee:	d10c      	bne.n	800990a <_vfiprintf_r+0x176>
 80098f0:	7863      	ldrb	r3, [r4, #1]
 80098f2:	2b2a      	cmp	r3, #42	; 0x2a
 80098f4:	d135      	bne.n	8009962 <_vfiprintf_r+0x1ce>
 80098f6:	9b03      	ldr	r3, [sp, #12]
 80098f8:	1d1a      	adds	r2, r3, #4
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	9203      	str	r2, [sp, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	bfb8      	it	lt
 8009902:	f04f 33ff 	movlt.w	r3, #4294967295
 8009906:	3402      	adds	r4, #2
 8009908:	9305      	str	r3, [sp, #20]
 800990a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80099f0 <_vfiprintf_r+0x25c>
 800990e:	7821      	ldrb	r1, [r4, #0]
 8009910:	2203      	movs	r2, #3
 8009912:	4650      	mov	r0, sl
 8009914:	f7f6 fc7c 	bl	8000210 <memchr>
 8009918:	b140      	cbz	r0, 800992c <_vfiprintf_r+0x198>
 800991a:	2340      	movs	r3, #64	; 0x40
 800991c:	eba0 000a 	sub.w	r0, r0, sl
 8009920:	fa03 f000 	lsl.w	r0, r3, r0
 8009924:	9b04      	ldr	r3, [sp, #16]
 8009926:	4303      	orrs	r3, r0
 8009928:	3401      	adds	r4, #1
 800992a:	9304      	str	r3, [sp, #16]
 800992c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009930:	482c      	ldr	r0, [pc, #176]	; (80099e4 <_vfiprintf_r+0x250>)
 8009932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009936:	2206      	movs	r2, #6
 8009938:	f7f6 fc6a 	bl	8000210 <memchr>
 800993c:	2800      	cmp	r0, #0
 800993e:	d03f      	beq.n	80099c0 <_vfiprintf_r+0x22c>
 8009940:	4b29      	ldr	r3, [pc, #164]	; (80099e8 <_vfiprintf_r+0x254>)
 8009942:	bb1b      	cbnz	r3, 800998c <_vfiprintf_r+0x1f8>
 8009944:	9b03      	ldr	r3, [sp, #12]
 8009946:	3307      	adds	r3, #7
 8009948:	f023 0307 	bic.w	r3, r3, #7
 800994c:	3308      	adds	r3, #8
 800994e:	9303      	str	r3, [sp, #12]
 8009950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009952:	443b      	add	r3, r7
 8009954:	9309      	str	r3, [sp, #36]	; 0x24
 8009956:	e767      	b.n	8009828 <_vfiprintf_r+0x94>
 8009958:	fb0c 3202 	mla	r2, ip, r2, r3
 800995c:	460c      	mov	r4, r1
 800995e:	2001      	movs	r0, #1
 8009960:	e7a5      	b.n	80098ae <_vfiprintf_r+0x11a>
 8009962:	2300      	movs	r3, #0
 8009964:	3401      	adds	r4, #1
 8009966:	9305      	str	r3, [sp, #20]
 8009968:	4619      	mov	r1, r3
 800996a:	f04f 0c0a 	mov.w	ip, #10
 800996e:	4620      	mov	r0, r4
 8009970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009974:	3a30      	subs	r2, #48	; 0x30
 8009976:	2a09      	cmp	r2, #9
 8009978:	d903      	bls.n	8009982 <_vfiprintf_r+0x1ee>
 800997a:	2b00      	cmp	r3, #0
 800997c:	d0c5      	beq.n	800990a <_vfiprintf_r+0x176>
 800997e:	9105      	str	r1, [sp, #20]
 8009980:	e7c3      	b.n	800990a <_vfiprintf_r+0x176>
 8009982:	fb0c 2101 	mla	r1, ip, r1, r2
 8009986:	4604      	mov	r4, r0
 8009988:	2301      	movs	r3, #1
 800998a:	e7f0      	b.n	800996e <_vfiprintf_r+0x1da>
 800998c:	ab03      	add	r3, sp, #12
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	462a      	mov	r2, r5
 8009992:	4b16      	ldr	r3, [pc, #88]	; (80099ec <_vfiprintf_r+0x258>)
 8009994:	a904      	add	r1, sp, #16
 8009996:	4630      	mov	r0, r6
 8009998:	f3af 8000 	nop.w
 800999c:	4607      	mov	r7, r0
 800999e:	1c78      	adds	r0, r7, #1
 80099a0:	d1d6      	bne.n	8009950 <_vfiprintf_r+0x1bc>
 80099a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099a4:	07d9      	lsls	r1, r3, #31
 80099a6:	d405      	bmi.n	80099b4 <_vfiprintf_r+0x220>
 80099a8:	89ab      	ldrh	r3, [r5, #12]
 80099aa:	059a      	lsls	r2, r3, #22
 80099ac:	d402      	bmi.n	80099b4 <_vfiprintf_r+0x220>
 80099ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099b0:	f7ff fcd5 	bl	800935e <__retarget_lock_release_recursive>
 80099b4:	89ab      	ldrh	r3, [r5, #12]
 80099b6:	065b      	lsls	r3, r3, #25
 80099b8:	f53f af12 	bmi.w	80097e0 <_vfiprintf_r+0x4c>
 80099bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099be:	e711      	b.n	80097e4 <_vfiprintf_r+0x50>
 80099c0:	ab03      	add	r3, sp, #12
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	462a      	mov	r2, r5
 80099c6:	4b09      	ldr	r3, [pc, #36]	; (80099ec <_vfiprintf_r+0x258>)
 80099c8:	a904      	add	r1, sp, #16
 80099ca:	4630      	mov	r0, r6
 80099cc:	f000 f880 	bl	8009ad0 <_printf_i>
 80099d0:	e7e4      	b.n	800999c <_vfiprintf_r+0x208>
 80099d2:	bf00      	nop
 80099d4:	0800a798 	.word	0x0800a798
 80099d8:	0800a7b8 	.word	0x0800a7b8
 80099dc:	0800a778 	.word	0x0800a778
 80099e0:	0800a7d8 	.word	0x0800a7d8
 80099e4:	0800a7e2 	.word	0x0800a7e2
 80099e8:	00000000 	.word	0x00000000
 80099ec:	0800976f 	.word	0x0800976f
 80099f0:	0800a7de 	.word	0x0800a7de

080099f4 <_printf_common>:
 80099f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099f8:	4616      	mov	r6, r2
 80099fa:	4699      	mov	r9, r3
 80099fc:	688a      	ldr	r2, [r1, #8]
 80099fe:	690b      	ldr	r3, [r1, #16]
 8009a00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a04:	4293      	cmp	r3, r2
 8009a06:	bfb8      	it	lt
 8009a08:	4613      	movlt	r3, r2
 8009a0a:	6033      	str	r3, [r6, #0]
 8009a0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a10:	4607      	mov	r7, r0
 8009a12:	460c      	mov	r4, r1
 8009a14:	b10a      	cbz	r2, 8009a1a <_printf_common+0x26>
 8009a16:	3301      	adds	r3, #1
 8009a18:	6033      	str	r3, [r6, #0]
 8009a1a:	6823      	ldr	r3, [r4, #0]
 8009a1c:	0699      	lsls	r1, r3, #26
 8009a1e:	bf42      	ittt	mi
 8009a20:	6833      	ldrmi	r3, [r6, #0]
 8009a22:	3302      	addmi	r3, #2
 8009a24:	6033      	strmi	r3, [r6, #0]
 8009a26:	6825      	ldr	r5, [r4, #0]
 8009a28:	f015 0506 	ands.w	r5, r5, #6
 8009a2c:	d106      	bne.n	8009a3c <_printf_common+0x48>
 8009a2e:	f104 0a19 	add.w	sl, r4, #25
 8009a32:	68e3      	ldr	r3, [r4, #12]
 8009a34:	6832      	ldr	r2, [r6, #0]
 8009a36:	1a9b      	subs	r3, r3, r2
 8009a38:	42ab      	cmp	r3, r5
 8009a3a:	dc26      	bgt.n	8009a8a <_printf_common+0x96>
 8009a3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a40:	1e13      	subs	r3, r2, #0
 8009a42:	6822      	ldr	r2, [r4, #0]
 8009a44:	bf18      	it	ne
 8009a46:	2301      	movne	r3, #1
 8009a48:	0692      	lsls	r2, r2, #26
 8009a4a:	d42b      	bmi.n	8009aa4 <_printf_common+0xb0>
 8009a4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a50:	4649      	mov	r1, r9
 8009a52:	4638      	mov	r0, r7
 8009a54:	47c0      	blx	r8
 8009a56:	3001      	adds	r0, #1
 8009a58:	d01e      	beq.n	8009a98 <_printf_common+0xa4>
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	68e5      	ldr	r5, [r4, #12]
 8009a5e:	6832      	ldr	r2, [r6, #0]
 8009a60:	f003 0306 	and.w	r3, r3, #6
 8009a64:	2b04      	cmp	r3, #4
 8009a66:	bf08      	it	eq
 8009a68:	1aad      	subeq	r5, r5, r2
 8009a6a:	68a3      	ldr	r3, [r4, #8]
 8009a6c:	6922      	ldr	r2, [r4, #16]
 8009a6e:	bf0c      	ite	eq
 8009a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a74:	2500      	movne	r5, #0
 8009a76:	4293      	cmp	r3, r2
 8009a78:	bfc4      	itt	gt
 8009a7a:	1a9b      	subgt	r3, r3, r2
 8009a7c:	18ed      	addgt	r5, r5, r3
 8009a7e:	2600      	movs	r6, #0
 8009a80:	341a      	adds	r4, #26
 8009a82:	42b5      	cmp	r5, r6
 8009a84:	d11a      	bne.n	8009abc <_printf_common+0xc8>
 8009a86:	2000      	movs	r0, #0
 8009a88:	e008      	b.n	8009a9c <_printf_common+0xa8>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	4652      	mov	r2, sl
 8009a8e:	4649      	mov	r1, r9
 8009a90:	4638      	mov	r0, r7
 8009a92:	47c0      	blx	r8
 8009a94:	3001      	adds	r0, #1
 8009a96:	d103      	bne.n	8009aa0 <_printf_common+0xac>
 8009a98:	f04f 30ff 	mov.w	r0, #4294967295
 8009a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa0:	3501      	adds	r5, #1
 8009aa2:	e7c6      	b.n	8009a32 <_printf_common+0x3e>
 8009aa4:	18e1      	adds	r1, r4, r3
 8009aa6:	1c5a      	adds	r2, r3, #1
 8009aa8:	2030      	movs	r0, #48	; 0x30
 8009aaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aae:	4422      	add	r2, r4
 8009ab0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ab4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ab8:	3302      	adds	r3, #2
 8009aba:	e7c7      	b.n	8009a4c <_printf_common+0x58>
 8009abc:	2301      	movs	r3, #1
 8009abe:	4622      	mov	r2, r4
 8009ac0:	4649      	mov	r1, r9
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	47c0      	blx	r8
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	d0e6      	beq.n	8009a98 <_printf_common+0xa4>
 8009aca:	3601      	adds	r6, #1
 8009acc:	e7d9      	b.n	8009a82 <_printf_common+0x8e>
	...

08009ad0 <_printf_i>:
 8009ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad4:	7e0f      	ldrb	r7, [r1, #24]
 8009ad6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ad8:	2f78      	cmp	r7, #120	; 0x78
 8009ada:	4691      	mov	r9, r2
 8009adc:	4680      	mov	r8, r0
 8009ade:	460c      	mov	r4, r1
 8009ae0:	469a      	mov	sl, r3
 8009ae2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ae6:	d807      	bhi.n	8009af8 <_printf_i+0x28>
 8009ae8:	2f62      	cmp	r7, #98	; 0x62
 8009aea:	d80a      	bhi.n	8009b02 <_printf_i+0x32>
 8009aec:	2f00      	cmp	r7, #0
 8009aee:	f000 80d8 	beq.w	8009ca2 <_printf_i+0x1d2>
 8009af2:	2f58      	cmp	r7, #88	; 0x58
 8009af4:	f000 80a3 	beq.w	8009c3e <_printf_i+0x16e>
 8009af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009afc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b00:	e03a      	b.n	8009b78 <_printf_i+0xa8>
 8009b02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b06:	2b15      	cmp	r3, #21
 8009b08:	d8f6      	bhi.n	8009af8 <_printf_i+0x28>
 8009b0a:	a101      	add	r1, pc, #4	; (adr r1, 8009b10 <_printf_i+0x40>)
 8009b0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b10:	08009b69 	.word	0x08009b69
 8009b14:	08009b7d 	.word	0x08009b7d
 8009b18:	08009af9 	.word	0x08009af9
 8009b1c:	08009af9 	.word	0x08009af9
 8009b20:	08009af9 	.word	0x08009af9
 8009b24:	08009af9 	.word	0x08009af9
 8009b28:	08009b7d 	.word	0x08009b7d
 8009b2c:	08009af9 	.word	0x08009af9
 8009b30:	08009af9 	.word	0x08009af9
 8009b34:	08009af9 	.word	0x08009af9
 8009b38:	08009af9 	.word	0x08009af9
 8009b3c:	08009c89 	.word	0x08009c89
 8009b40:	08009bad 	.word	0x08009bad
 8009b44:	08009c6b 	.word	0x08009c6b
 8009b48:	08009af9 	.word	0x08009af9
 8009b4c:	08009af9 	.word	0x08009af9
 8009b50:	08009cab 	.word	0x08009cab
 8009b54:	08009af9 	.word	0x08009af9
 8009b58:	08009bad 	.word	0x08009bad
 8009b5c:	08009af9 	.word	0x08009af9
 8009b60:	08009af9 	.word	0x08009af9
 8009b64:	08009c73 	.word	0x08009c73
 8009b68:	682b      	ldr	r3, [r5, #0]
 8009b6a:	1d1a      	adds	r2, r3, #4
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	602a      	str	r2, [r5, #0]
 8009b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e0a3      	b.n	8009cc4 <_printf_i+0x1f4>
 8009b7c:	6820      	ldr	r0, [r4, #0]
 8009b7e:	6829      	ldr	r1, [r5, #0]
 8009b80:	0606      	lsls	r6, r0, #24
 8009b82:	f101 0304 	add.w	r3, r1, #4
 8009b86:	d50a      	bpl.n	8009b9e <_printf_i+0xce>
 8009b88:	680e      	ldr	r6, [r1, #0]
 8009b8a:	602b      	str	r3, [r5, #0]
 8009b8c:	2e00      	cmp	r6, #0
 8009b8e:	da03      	bge.n	8009b98 <_printf_i+0xc8>
 8009b90:	232d      	movs	r3, #45	; 0x2d
 8009b92:	4276      	negs	r6, r6
 8009b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b98:	485e      	ldr	r0, [pc, #376]	; (8009d14 <_printf_i+0x244>)
 8009b9a:	230a      	movs	r3, #10
 8009b9c:	e019      	b.n	8009bd2 <_printf_i+0x102>
 8009b9e:	680e      	ldr	r6, [r1, #0]
 8009ba0:	602b      	str	r3, [r5, #0]
 8009ba2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ba6:	bf18      	it	ne
 8009ba8:	b236      	sxthne	r6, r6
 8009baa:	e7ef      	b.n	8009b8c <_printf_i+0xbc>
 8009bac:	682b      	ldr	r3, [r5, #0]
 8009bae:	6820      	ldr	r0, [r4, #0]
 8009bb0:	1d19      	adds	r1, r3, #4
 8009bb2:	6029      	str	r1, [r5, #0]
 8009bb4:	0601      	lsls	r1, r0, #24
 8009bb6:	d501      	bpl.n	8009bbc <_printf_i+0xec>
 8009bb8:	681e      	ldr	r6, [r3, #0]
 8009bba:	e002      	b.n	8009bc2 <_printf_i+0xf2>
 8009bbc:	0646      	lsls	r6, r0, #25
 8009bbe:	d5fb      	bpl.n	8009bb8 <_printf_i+0xe8>
 8009bc0:	881e      	ldrh	r6, [r3, #0]
 8009bc2:	4854      	ldr	r0, [pc, #336]	; (8009d14 <_printf_i+0x244>)
 8009bc4:	2f6f      	cmp	r7, #111	; 0x6f
 8009bc6:	bf0c      	ite	eq
 8009bc8:	2308      	moveq	r3, #8
 8009bca:	230a      	movne	r3, #10
 8009bcc:	2100      	movs	r1, #0
 8009bce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bd2:	6865      	ldr	r5, [r4, #4]
 8009bd4:	60a5      	str	r5, [r4, #8]
 8009bd6:	2d00      	cmp	r5, #0
 8009bd8:	bfa2      	ittt	ge
 8009bda:	6821      	ldrge	r1, [r4, #0]
 8009bdc:	f021 0104 	bicge.w	r1, r1, #4
 8009be0:	6021      	strge	r1, [r4, #0]
 8009be2:	b90e      	cbnz	r6, 8009be8 <_printf_i+0x118>
 8009be4:	2d00      	cmp	r5, #0
 8009be6:	d04d      	beq.n	8009c84 <_printf_i+0x1b4>
 8009be8:	4615      	mov	r5, r2
 8009bea:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bee:	fb03 6711 	mls	r7, r3, r1, r6
 8009bf2:	5dc7      	ldrb	r7, [r0, r7]
 8009bf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bf8:	4637      	mov	r7, r6
 8009bfa:	42bb      	cmp	r3, r7
 8009bfc:	460e      	mov	r6, r1
 8009bfe:	d9f4      	bls.n	8009bea <_printf_i+0x11a>
 8009c00:	2b08      	cmp	r3, #8
 8009c02:	d10b      	bne.n	8009c1c <_printf_i+0x14c>
 8009c04:	6823      	ldr	r3, [r4, #0]
 8009c06:	07de      	lsls	r6, r3, #31
 8009c08:	d508      	bpl.n	8009c1c <_printf_i+0x14c>
 8009c0a:	6923      	ldr	r3, [r4, #16]
 8009c0c:	6861      	ldr	r1, [r4, #4]
 8009c0e:	4299      	cmp	r1, r3
 8009c10:	bfde      	ittt	le
 8009c12:	2330      	movle	r3, #48	; 0x30
 8009c14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c1c:	1b52      	subs	r2, r2, r5
 8009c1e:	6122      	str	r2, [r4, #16]
 8009c20:	f8cd a000 	str.w	sl, [sp]
 8009c24:	464b      	mov	r3, r9
 8009c26:	aa03      	add	r2, sp, #12
 8009c28:	4621      	mov	r1, r4
 8009c2a:	4640      	mov	r0, r8
 8009c2c:	f7ff fee2 	bl	80099f4 <_printf_common>
 8009c30:	3001      	adds	r0, #1
 8009c32:	d14c      	bne.n	8009cce <_printf_i+0x1fe>
 8009c34:	f04f 30ff 	mov.w	r0, #4294967295
 8009c38:	b004      	add	sp, #16
 8009c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c3e:	4835      	ldr	r0, [pc, #212]	; (8009d14 <_printf_i+0x244>)
 8009c40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c44:	6829      	ldr	r1, [r5, #0]
 8009c46:	6823      	ldr	r3, [r4, #0]
 8009c48:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c4c:	6029      	str	r1, [r5, #0]
 8009c4e:	061d      	lsls	r5, r3, #24
 8009c50:	d514      	bpl.n	8009c7c <_printf_i+0x1ac>
 8009c52:	07df      	lsls	r7, r3, #31
 8009c54:	bf44      	itt	mi
 8009c56:	f043 0320 	orrmi.w	r3, r3, #32
 8009c5a:	6023      	strmi	r3, [r4, #0]
 8009c5c:	b91e      	cbnz	r6, 8009c66 <_printf_i+0x196>
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	f023 0320 	bic.w	r3, r3, #32
 8009c64:	6023      	str	r3, [r4, #0]
 8009c66:	2310      	movs	r3, #16
 8009c68:	e7b0      	b.n	8009bcc <_printf_i+0xfc>
 8009c6a:	6823      	ldr	r3, [r4, #0]
 8009c6c:	f043 0320 	orr.w	r3, r3, #32
 8009c70:	6023      	str	r3, [r4, #0]
 8009c72:	2378      	movs	r3, #120	; 0x78
 8009c74:	4828      	ldr	r0, [pc, #160]	; (8009d18 <_printf_i+0x248>)
 8009c76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c7a:	e7e3      	b.n	8009c44 <_printf_i+0x174>
 8009c7c:	0659      	lsls	r1, r3, #25
 8009c7e:	bf48      	it	mi
 8009c80:	b2b6      	uxthmi	r6, r6
 8009c82:	e7e6      	b.n	8009c52 <_printf_i+0x182>
 8009c84:	4615      	mov	r5, r2
 8009c86:	e7bb      	b.n	8009c00 <_printf_i+0x130>
 8009c88:	682b      	ldr	r3, [r5, #0]
 8009c8a:	6826      	ldr	r6, [r4, #0]
 8009c8c:	6961      	ldr	r1, [r4, #20]
 8009c8e:	1d18      	adds	r0, r3, #4
 8009c90:	6028      	str	r0, [r5, #0]
 8009c92:	0635      	lsls	r5, r6, #24
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	d501      	bpl.n	8009c9c <_printf_i+0x1cc>
 8009c98:	6019      	str	r1, [r3, #0]
 8009c9a:	e002      	b.n	8009ca2 <_printf_i+0x1d2>
 8009c9c:	0670      	lsls	r0, r6, #25
 8009c9e:	d5fb      	bpl.n	8009c98 <_printf_i+0x1c8>
 8009ca0:	8019      	strh	r1, [r3, #0]
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	6123      	str	r3, [r4, #16]
 8009ca6:	4615      	mov	r5, r2
 8009ca8:	e7ba      	b.n	8009c20 <_printf_i+0x150>
 8009caa:	682b      	ldr	r3, [r5, #0]
 8009cac:	1d1a      	adds	r2, r3, #4
 8009cae:	602a      	str	r2, [r5, #0]
 8009cb0:	681d      	ldr	r5, [r3, #0]
 8009cb2:	6862      	ldr	r2, [r4, #4]
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f7f6 faaa 	bl	8000210 <memchr>
 8009cbc:	b108      	cbz	r0, 8009cc2 <_printf_i+0x1f2>
 8009cbe:	1b40      	subs	r0, r0, r5
 8009cc0:	6060      	str	r0, [r4, #4]
 8009cc2:	6863      	ldr	r3, [r4, #4]
 8009cc4:	6123      	str	r3, [r4, #16]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ccc:	e7a8      	b.n	8009c20 <_printf_i+0x150>
 8009cce:	6923      	ldr	r3, [r4, #16]
 8009cd0:	462a      	mov	r2, r5
 8009cd2:	4649      	mov	r1, r9
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	47d0      	blx	sl
 8009cd8:	3001      	adds	r0, #1
 8009cda:	d0ab      	beq.n	8009c34 <_printf_i+0x164>
 8009cdc:	6823      	ldr	r3, [r4, #0]
 8009cde:	079b      	lsls	r3, r3, #30
 8009ce0:	d413      	bmi.n	8009d0a <_printf_i+0x23a>
 8009ce2:	68e0      	ldr	r0, [r4, #12]
 8009ce4:	9b03      	ldr	r3, [sp, #12]
 8009ce6:	4298      	cmp	r0, r3
 8009ce8:	bfb8      	it	lt
 8009cea:	4618      	movlt	r0, r3
 8009cec:	e7a4      	b.n	8009c38 <_printf_i+0x168>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	4632      	mov	r2, r6
 8009cf2:	4649      	mov	r1, r9
 8009cf4:	4640      	mov	r0, r8
 8009cf6:	47d0      	blx	sl
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	d09b      	beq.n	8009c34 <_printf_i+0x164>
 8009cfc:	3501      	adds	r5, #1
 8009cfe:	68e3      	ldr	r3, [r4, #12]
 8009d00:	9903      	ldr	r1, [sp, #12]
 8009d02:	1a5b      	subs	r3, r3, r1
 8009d04:	42ab      	cmp	r3, r5
 8009d06:	dcf2      	bgt.n	8009cee <_printf_i+0x21e>
 8009d08:	e7eb      	b.n	8009ce2 <_printf_i+0x212>
 8009d0a:	2500      	movs	r5, #0
 8009d0c:	f104 0619 	add.w	r6, r4, #25
 8009d10:	e7f5      	b.n	8009cfe <_printf_i+0x22e>
 8009d12:	bf00      	nop
 8009d14:	0800a7e9 	.word	0x0800a7e9
 8009d18:	0800a7fa 	.word	0x0800a7fa

08009d1c <_putc_r>:
 8009d1c:	b570      	push	{r4, r5, r6, lr}
 8009d1e:	460d      	mov	r5, r1
 8009d20:	4614      	mov	r4, r2
 8009d22:	4606      	mov	r6, r0
 8009d24:	b118      	cbz	r0, 8009d2e <_putc_r+0x12>
 8009d26:	6983      	ldr	r3, [r0, #24]
 8009d28:	b90b      	cbnz	r3, 8009d2e <_putc_r+0x12>
 8009d2a:	f7ff fa79 	bl	8009220 <__sinit>
 8009d2e:	4b1c      	ldr	r3, [pc, #112]	; (8009da0 <_putc_r+0x84>)
 8009d30:	429c      	cmp	r4, r3
 8009d32:	d124      	bne.n	8009d7e <_putc_r+0x62>
 8009d34:	6874      	ldr	r4, [r6, #4]
 8009d36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d38:	07d8      	lsls	r0, r3, #31
 8009d3a:	d405      	bmi.n	8009d48 <_putc_r+0x2c>
 8009d3c:	89a3      	ldrh	r3, [r4, #12]
 8009d3e:	0599      	lsls	r1, r3, #22
 8009d40:	d402      	bmi.n	8009d48 <_putc_r+0x2c>
 8009d42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d44:	f7ff fb0a 	bl	800935c <__retarget_lock_acquire_recursive>
 8009d48:	68a3      	ldr	r3, [r4, #8]
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	60a3      	str	r3, [r4, #8]
 8009d50:	da05      	bge.n	8009d5e <_putc_r+0x42>
 8009d52:	69a2      	ldr	r2, [r4, #24]
 8009d54:	4293      	cmp	r3, r2
 8009d56:	db1c      	blt.n	8009d92 <_putc_r+0x76>
 8009d58:	b2eb      	uxtb	r3, r5
 8009d5a:	2b0a      	cmp	r3, #10
 8009d5c:	d019      	beq.n	8009d92 <_putc_r+0x76>
 8009d5e:	6823      	ldr	r3, [r4, #0]
 8009d60:	1c5a      	adds	r2, r3, #1
 8009d62:	6022      	str	r2, [r4, #0]
 8009d64:	701d      	strb	r5, [r3, #0]
 8009d66:	b2ed      	uxtb	r5, r5
 8009d68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d6a:	07da      	lsls	r2, r3, #31
 8009d6c:	d405      	bmi.n	8009d7a <_putc_r+0x5e>
 8009d6e:	89a3      	ldrh	r3, [r4, #12]
 8009d70:	059b      	lsls	r3, r3, #22
 8009d72:	d402      	bmi.n	8009d7a <_putc_r+0x5e>
 8009d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d76:	f7ff faf2 	bl	800935e <__retarget_lock_release_recursive>
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	bd70      	pop	{r4, r5, r6, pc}
 8009d7e:	4b09      	ldr	r3, [pc, #36]	; (8009da4 <_putc_r+0x88>)
 8009d80:	429c      	cmp	r4, r3
 8009d82:	d101      	bne.n	8009d88 <_putc_r+0x6c>
 8009d84:	68b4      	ldr	r4, [r6, #8]
 8009d86:	e7d6      	b.n	8009d36 <_putc_r+0x1a>
 8009d88:	4b07      	ldr	r3, [pc, #28]	; (8009da8 <_putc_r+0x8c>)
 8009d8a:	429c      	cmp	r4, r3
 8009d8c:	bf08      	it	eq
 8009d8e:	68f4      	ldreq	r4, [r6, #12]
 8009d90:	e7d1      	b.n	8009d36 <_putc_r+0x1a>
 8009d92:	4629      	mov	r1, r5
 8009d94:	4622      	mov	r2, r4
 8009d96:	4630      	mov	r0, r6
 8009d98:	f000 f85c 	bl	8009e54 <__swbuf_r>
 8009d9c:	4605      	mov	r5, r0
 8009d9e:	e7e3      	b.n	8009d68 <_putc_r+0x4c>
 8009da0:	0800a798 	.word	0x0800a798
 8009da4:	0800a7b8 	.word	0x0800a7b8
 8009da8:	0800a778 	.word	0x0800a778

08009dac <_sbrk_r>:
 8009dac:	b538      	push	{r3, r4, r5, lr}
 8009dae:	4d06      	ldr	r5, [pc, #24]	; (8009dc8 <_sbrk_r+0x1c>)
 8009db0:	2300      	movs	r3, #0
 8009db2:	4604      	mov	r4, r0
 8009db4:	4608      	mov	r0, r1
 8009db6:	602b      	str	r3, [r5, #0]
 8009db8:	f7f9 f81c 	bl	8002df4 <_sbrk>
 8009dbc:	1c43      	adds	r3, r0, #1
 8009dbe:	d102      	bne.n	8009dc6 <_sbrk_r+0x1a>
 8009dc0:	682b      	ldr	r3, [r5, #0]
 8009dc2:	b103      	cbz	r3, 8009dc6 <_sbrk_r+0x1a>
 8009dc4:	6023      	str	r3, [r4, #0]
 8009dc6:	bd38      	pop	{r3, r4, r5, pc}
 8009dc8:	20002470 	.word	0x20002470

08009dcc <__sread>:
 8009dcc:	b510      	push	{r4, lr}
 8009dce:	460c      	mov	r4, r1
 8009dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd4:	f000 fafc 	bl	800a3d0 <_read_r>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	bfab      	itete	ge
 8009ddc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dde:	89a3      	ldrhlt	r3, [r4, #12]
 8009de0:	181b      	addge	r3, r3, r0
 8009de2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009de6:	bfac      	ite	ge
 8009de8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dea:	81a3      	strhlt	r3, [r4, #12]
 8009dec:	bd10      	pop	{r4, pc}

08009dee <__swrite>:
 8009dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009df2:	461f      	mov	r7, r3
 8009df4:	898b      	ldrh	r3, [r1, #12]
 8009df6:	05db      	lsls	r3, r3, #23
 8009df8:	4605      	mov	r5, r0
 8009dfa:	460c      	mov	r4, r1
 8009dfc:	4616      	mov	r6, r2
 8009dfe:	d505      	bpl.n	8009e0c <__swrite+0x1e>
 8009e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e04:	2302      	movs	r3, #2
 8009e06:	2200      	movs	r2, #0
 8009e08:	f000 f9c8 	bl	800a19c <_lseek_r>
 8009e0c:	89a3      	ldrh	r3, [r4, #12]
 8009e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e16:	81a3      	strh	r3, [r4, #12]
 8009e18:	4632      	mov	r2, r6
 8009e1a:	463b      	mov	r3, r7
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e22:	f000 b869 	b.w	8009ef8 <_write_r>

08009e26 <__sseek>:
 8009e26:	b510      	push	{r4, lr}
 8009e28:	460c      	mov	r4, r1
 8009e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e2e:	f000 f9b5 	bl	800a19c <_lseek_r>
 8009e32:	1c43      	adds	r3, r0, #1
 8009e34:	89a3      	ldrh	r3, [r4, #12]
 8009e36:	bf15      	itete	ne
 8009e38:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e42:	81a3      	strheq	r3, [r4, #12]
 8009e44:	bf18      	it	ne
 8009e46:	81a3      	strhne	r3, [r4, #12]
 8009e48:	bd10      	pop	{r4, pc}

08009e4a <__sclose>:
 8009e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e4e:	f000 b8d3 	b.w	8009ff8 <_close_r>
	...

08009e54 <__swbuf_r>:
 8009e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e56:	460e      	mov	r6, r1
 8009e58:	4614      	mov	r4, r2
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	b118      	cbz	r0, 8009e66 <__swbuf_r+0x12>
 8009e5e:	6983      	ldr	r3, [r0, #24]
 8009e60:	b90b      	cbnz	r3, 8009e66 <__swbuf_r+0x12>
 8009e62:	f7ff f9dd 	bl	8009220 <__sinit>
 8009e66:	4b21      	ldr	r3, [pc, #132]	; (8009eec <__swbuf_r+0x98>)
 8009e68:	429c      	cmp	r4, r3
 8009e6a:	d12b      	bne.n	8009ec4 <__swbuf_r+0x70>
 8009e6c:	686c      	ldr	r4, [r5, #4]
 8009e6e:	69a3      	ldr	r3, [r4, #24]
 8009e70:	60a3      	str	r3, [r4, #8]
 8009e72:	89a3      	ldrh	r3, [r4, #12]
 8009e74:	071a      	lsls	r2, r3, #28
 8009e76:	d52f      	bpl.n	8009ed8 <__swbuf_r+0x84>
 8009e78:	6923      	ldr	r3, [r4, #16]
 8009e7a:	b36b      	cbz	r3, 8009ed8 <__swbuf_r+0x84>
 8009e7c:	6923      	ldr	r3, [r4, #16]
 8009e7e:	6820      	ldr	r0, [r4, #0]
 8009e80:	1ac0      	subs	r0, r0, r3
 8009e82:	6963      	ldr	r3, [r4, #20]
 8009e84:	b2f6      	uxtb	r6, r6
 8009e86:	4283      	cmp	r3, r0
 8009e88:	4637      	mov	r7, r6
 8009e8a:	dc04      	bgt.n	8009e96 <__swbuf_r+0x42>
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	4628      	mov	r0, r5
 8009e90:	f000 f948 	bl	800a124 <_fflush_r>
 8009e94:	bb30      	cbnz	r0, 8009ee4 <__swbuf_r+0x90>
 8009e96:	68a3      	ldr	r3, [r4, #8]
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	60a3      	str	r3, [r4, #8]
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	1c5a      	adds	r2, r3, #1
 8009ea0:	6022      	str	r2, [r4, #0]
 8009ea2:	701e      	strb	r6, [r3, #0]
 8009ea4:	6963      	ldr	r3, [r4, #20]
 8009ea6:	3001      	adds	r0, #1
 8009ea8:	4283      	cmp	r3, r0
 8009eaa:	d004      	beq.n	8009eb6 <__swbuf_r+0x62>
 8009eac:	89a3      	ldrh	r3, [r4, #12]
 8009eae:	07db      	lsls	r3, r3, #31
 8009eb0:	d506      	bpl.n	8009ec0 <__swbuf_r+0x6c>
 8009eb2:	2e0a      	cmp	r6, #10
 8009eb4:	d104      	bne.n	8009ec0 <__swbuf_r+0x6c>
 8009eb6:	4621      	mov	r1, r4
 8009eb8:	4628      	mov	r0, r5
 8009eba:	f000 f933 	bl	800a124 <_fflush_r>
 8009ebe:	b988      	cbnz	r0, 8009ee4 <__swbuf_r+0x90>
 8009ec0:	4638      	mov	r0, r7
 8009ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ec4:	4b0a      	ldr	r3, [pc, #40]	; (8009ef0 <__swbuf_r+0x9c>)
 8009ec6:	429c      	cmp	r4, r3
 8009ec8:	d101      	bne.n	8009ece <__swbuf_r+0x7a>
 8009eca:	68ac      	ldr	r4, [r5, #8]
 8009ecc:	e7cf      	b.n	8009e6e <__swbuf_r+0x1a>
 8009ece:	4b09      	ldr	r3, [pc, #36]	; (8009ef4 <__swbuf_r+0xa0>)
 8009ed0:	429c      	cmp	r4, r3
 8009ed2:	bf08      	it	eq
 8009ed4:	68ec      	ldreq	r4, [r5, #12]
 8009ed6:	e7ca      	b.n	8009e6e <__swbuf_r+0x1a>
 8009ed8:	4621      	mov	r1, r4
 8009eda:	4628      	mov	r0, r5
 8009edc:	f000 f81e 	bl	8009f1c <__swsetup_r>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	d0cb      	beq.n	8009e7c <__swbuf_r+0x28>
 8009ee4:	f04f 37ff 	mov.w	r7, #4294967295
 8009ee8:	e7ea      	b.n	8009ec0 <__swbuf_r+0x6c>
 8009eea:	bf00      	nop
 8009eec:	0800a798 	.word	0x0800a798
 8009ef0:	0800a7b8 	.word	0x0800a7b8
 8009ef4:	0800a778 	.word	0x0800a778

08009ef8 <_write_r>:
 8009ef8:	b538      	push	{r3, r4, r5, lr}
 8009efa:	4d07      	ldr	r5, [pc, #28]	; (8009f18 <_write_r+0x20>)
 8009efc:	4604      	mov	r4, r0
 8009efe:	4608      	mov	r0, r1
 8009f00:	4611      	mov	r1, r2
 8009f02:	2200      	movs	r2, #0
 8009f04:	602a      	str	r2, [r5, #0]
 8009f06:	461a      	mov	r2, r3
 8009f08:	f7f8 ff23 	bl	8002d52 <_write>
 8009f0c:	1c43      	adds	r3, r0, #1
 8009f0e:	d102      	bne.n	8009f16 <_write_r+0x1e>
 8009f10:	682b      	ldr	r3, [r5, #0]
 8009f12:	b103      	cbz	r3, 8009f16 <_write_r+0x1e>
 8009f14:	6023      	str	r3, [r4, #0]
 8009f16:	bd38      	pop	{r3, r4, r5, pc}
 8009f18:	20002470 	.word	0x20002470

08009f1c <__swsetup_r>:
 8009f1c:	4b32      	ldr	r3, [pc, #200]	; (8009fe8 <__swsetup_r+0xcc>)
 8009f1e:	b570      	push	{r4, r5, r6, lr}
 8009f20:	681d      	ldr	r5, [r3, #0]
 8009f22:	4606      	mov	r6, r0
 8009f24:	460c      	mov	r4, r1
 8009f26:	b125      	cbz	r5, 8009f32 <__swsetup_r+0x16>
 8009f28:	69ab      	ldr	r3, [r5, #24]
 8009f2a:	b913      	cbnz	r3, 8009f32 <__swsetup_r+0x16>
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	f7ff f977 	bl	8009220 <__sinit>
 8009f32:	4b2e      	ldr	r3, [pc, #184]	; (8009fec <__swsetup_r+0xd0>)
 8009f34:	429c      	cmp	r4, r3
 8009f36:	d10f      	bne.n	8009f58 <__swsetup_r+0x3c>
 8009f38:	686c      	ldr	r4, [r5, #4]
 8009f3a:	89a3      	ldrh	r3, [r4, #12]
 8009f3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f40:	0719      	lsls	r1, r3, #28
 8009f42:	d42c      	bmi.n	8009f9e <__swsetup_r+0x82>
 8009f44:	06dd      	lsls	r5, r3, #27
 8009f46:	d411      	bmi.n	8009f6c <__swsetup_r+0x50>
 8009f48:	2309      	movs	r3, #9
 8009f4a:	6033      	str	r3, [r6, #0]
 8009f4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f50:	81a3      	strh	r3, [r4, #12]
 8009f52:	f04f 30ff 	mov.w	r0, #4294967295
 8009f56:	e03e      	b.n	8009fd6 <__swsetup_r+0xba>
 8009f58:	4b25      	ldr	r3, [pc, #148]	; (8009ff0 <__swsetup_r+0xd4>)
 8009f5a:	429c      	cmp	r4, r3
 8009f5c:	d101      	bne.n	8009f62 <__swsetup_r+0x46>
 8009f5e:	68ac      	ldr	r4, [r5, #8]
 8009f60:	e7eb      	b.n	8009f3a <__swsetup_r+0x1e>
 8009f62:	4b24      	ldr	r3, [pc, #144]	; (8009ff4 <__swsetup_r+0xd8>)
 8009f64:	429c      	cmp	r4, r3
 8009f66:	bf08      	it	eq
 8009f68:	68ec      	ldreq	r4, [r5, #12]
 8009f6a:	e7e6      	b.n	8009f3a <__swsetup_r+0x1e>
 8009f6c:	0758      	lsls	r0, r3, #29
 8009f6e:	d512      	bpl.n	8009f96 <__swsetup_r+0x7a>
 8009f70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f72:	b141      	cbz	r1, 8009f86 <__swsetup_r+0x6a>
 8009f74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f78:	4299      	cmp	r1, r3
 8009f7a:	d002      	beq.n	8009f82 <__swsetup_r+0x66>
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	f000 f9ab 	bl	800a2d8 <_free_r>
 8009f82:	2300      	movs	r3, #0
 8009f84:	6363      	str	r3, [r4, #52]	; 0x34
 8009f86:	89a3      	ldrh	r3, [r4, #12]
 8009f88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f8c:	81a3      	strh	r3, [r4, #12]
 8009f8e:	2300      	movs	r3, #0
 8009f90:	6063      	str	r3, [r4, #4]
 8009f92:	6923      	ldr	r3, [r4, #16]
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	89a3      	ldrh	r3, [r4, #12]
 8009f98:	f043 0308 	orr.w	r3, r3, #8
 8009f9c:	81a3      	strh	r3, [r4, #12]
 8009f9e:	6923      	ldr	r3, [r4, #16]
 8009fa0:	b94b      	cbnz	r3, 8009fb6 <__swsetup_r+0x9a>
 8009fa2:	89a3      	ldrh	r3, [r4, #12]
 8009fa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fac:	d003      	beq.n	8009fb6 <__swsetup_r+0x9a>
 8009fae:	4621      	mov	r1, r4
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f000 f92b 	bl	800a20c <__smakebuf_r>
 8009fb6:	89a0      	ldrh	r0, [r4, #12]
 8009fb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fbc:	f010 0301 	ands.w	r3, r0, #1
 8009fc0:	d00a      	beq.n	8009fd8 <__swsetup_r+0xbc>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	60a3      	str	r3, [r4, #8]
 8009fc6:	6963      	ldr	r3, [r4, #20]
 8009fc8:	425b      	negs	r3, r3
 8009fca:	61a3      	str	r3, [r4, #24]
 8009fcc:	6923      	ldr	r3, [r4, #16]
 8009fce:	b943      	cbnz	r3, 8009fe2 <__swsetup_r+0xc6>
 8009fd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009fd4:	d1ba      	bne.n	8009f4c <__swsetup_r+0x30>
 8009fd6:	bd70      	pop	{r4, r5, r6, pc}
 8009fd8:	0781      	lsls	r1, r0, #30
 8009fda:	bf58      	it	pl
 8009fdc:	6963      	ldrpl	r3, [r4, #20]
 8009fde:	60a3      	str	r3, [r4, #8]
 8009fe0:	e7f4      	b.n	8009fcc <__swsetup_r+0xb0>
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	e7f7      	b.n	8009fd6 <__swsetup_r+0xba>
 8009fe6:	bf00      	nop
 8009fe8:	20000108 	.word	0x20000108
 8009fec:	0800a798 	.word	0x0800a798
 8009ff0:	0800a7b8 	.word	0x0800a7b8
 8009ff4:	0800a778 	.word	0x0800a778

08009ff8 <_close_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	4d06      	ldr	r5, [pc, #24]	; (800a014 <_close_r+0x1c>)
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	4604      	mov	r4, r0
 800a000:	4608      	mov	r0, r1
 800a002:	602b      	str	r3, [r5, #0]
 800a004:	f7f8 fec1 	bl	8002d8a <_close>
 800a008:	1c43      	adds	r3, r0, #1
 800a00a:	d102      	bne.n	800a012 <_close_r+0x1a>
 800a00c:	682b      	ldr	r3, [r5, #0]
 800a00e:	b103      	cbz	r3, 800a012 <_close_r+0x1a>
 800a010:	6023      	str	r3, [r4, #0]
 800a012:	bd38      	pop	{r3, r4, r5, pc}
 800a014:	20002470 	.word	0x20002470

0800a018 <__sflush_r>:
 800a018:	898a      	ldrh	r2, [r1, #12]
 800a01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a01e:	4605      	mov	r5, r0
 800a020:	0710      	lsls	r0, r2, #28
 800a022:	460c      	mov	r4, r1
 800a024:	d458      	bmi.n	800a0d8 <__sflush_r+0xc0>
 800a026:	684b      	ldr	r3, [r1, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	dc05      	bgt.n	800a038 <__sflush_r+0x20>
 800a02c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a02e:	2b00      	cmp	r3, #0
 800a030:	dc02      	bgt.n	800a038 <__sflush_r+0x20>
 800a032:	2000      	movs	r0, #0
 800a034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a038:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a03a:	2e00      	cmp	r6, #0
 800a03c:	d0f9      	beq.n	800a032 <__sflush_r+0x1a>
 800a03e:	2300      	movs	r3, #0
 800a040:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a044:	682f      	ldr	r7, [r5, #0]
 800a046:	602b      	str	r3, [r5, #0]
 800a048:	d032      	beq.n	800a0b0 <__sflush_r+0x98>
 800a04a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a04c:	89a3      	ldrh	r3, [r4, #12]
 800a04e:	075a      	lsls	r2, r3, #29
 800a050:	d505      	bpl.n	800a05e <__sflush_r+0x46>
 800a052:	6863      	ldr	r3, [r4, #4]
 800a054:	1ac0      	subs	r0, r0, r3
 800a056:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a058:	b10b      	cbz	r3, 800a05e <__sflush_r+0x46>
 800a05a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a05c:	1ac0      	subs	r0, r0, r3
 800a05e:	2300      	movs	r3, #0
 800a060:	4602      	mov	r2, r0
 800a062:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a064:	6a21      	ldr	r1, [r4, #32]
 800a066:	4628      	mov	r0, r5
 800a068:	47b0      	blx	r6
 800a06a:	1c43      	adds	r3, r0, #1
 800a06c:	89a3      	ldrh	r3, [r4, #12]
 800a06e:	d106      	bne.n	800a07e <__sflush_r+0x66>
 800a070:	6829      	ldr	r1, [r5, #0]
 800a072:	291d      	cmp	r1, #29
 800a074:	d82c      	bhi.n	800a0d0 <__sflush_r+0xb8>
 800a076:	4a2a      	ldr	r2, [pc, #168]	; (800a120 <__sflush_r+0x108>)
 800a078:	40ca      	lsrs	r2, r1
 800a07a:	07d6      	lsls	r6, r2, #31
 800a07c:	d528      	bpl.n	800a0d0 <__sflush_r+0xb8>
 800a07e:	2200      	movs	r2, #0
 800a080:	6062      	str	r2, [r4, #4]
 800a082:	04d9      	lsls	r1, r3, #19
 800a084:	6922      	ldr	r2, [r4, #16]
 800a086:	6022      	str	r2, [r4, #0]
 800a088:	d504      	bpl.n	800a094 <__sflush_r+0x7c>
 800a08a:	1c42      	adds	r2, r0, #1
 800a08c:	d101      	bne.n	800a092 <__sflush_r+0x7a>
 800a08e:	682b      	ldr	r3, [r5, #0]
 800a090:	b903      	cbnz	r3, 800a094 <__sflush_r+0x7c>
 800a092:	6560      	str	r0, [r4, #84]	; 0x54
 800a094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a096:	602f      	str	r7, [r5, #0]
 800a098:	2900      	cmp	r1, #0
 800a09a:	d0ca      	beq.n	800a032 <__sflush_r+0x1a>
 800a09c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0a0:	4299      	cmp	r1, r3
 800a0a2:	d002      	beq.n	800a0aa <__sflush_r+0x92>
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	f000 f917 	bl	800a2d8 <_free_r>
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	6360      	str	r0, [r4, #52]	; 0x34
 800a0ae:	e7c1      	b.n	800a034 <__sflush_r+0x1c>
 800a0b0:	6a21      	ldr	r1, [r4, #32]
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	47b0      	blx	r6
 800a0b8:	1c41      	adds	r1, r0, #1
 800a0ba:	d1c7      	bne.n	800a04c <__sflush_r+0x34>
 800a0bc:	682b      	ldr	r3, [r5, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0c4      	beq.n	800a04c <__sflush_r+0x34>
 800a0c2:	2b1d      	cmp	r3, #29
 800a0c4:	d001      	beq.n	800a0ca <__sflush_r+0xb2>
 800a0c6:	2b16      	cmp	r3, #22
 800a0c8:	d101      	bne.n	800a0ce <__sflush_r+0xb6>
 800a0ca:	602f      	str	r7, [r5, #0]
 800a0cc:	e7b1      	b.n	800a032 <__sflush_r+0x1a>
 800a0ce:	89a3      	ldrh	r3, [r4, #12]
 800a0d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0d4:	81a3      	strh	r3, [r4, #12]
 800a0d6:	e7ad      	b.n	800a034 <__sflush_r+0x1c>
 800a0d8:	690f      	ldr	r7, [r1, #16]
 800a0da:	2f00      	cmp	r7, #0
 800a0dc:	d0a9      	beq.n	800a032 <__sflush_r+0x1a>
 800a0de:	0793      	lsls	r3, r2, #30
 800a0e0:	680e      	ldr	r6, [r1, #0]
 800a0e2:	bf08      	it	eq
 800a0e4:	694b      	ldreq	r3, [r1, #20]
 800a0e6:	600f      	str	r7, [r1, #0]
 800a0e8:	bf18      	it	ne
 800a0ea:	2300      	movne	r3, #0
 800a0ec:	eba6 0807 	sub.w	r8, r6, r7
 800a0f0:	608b      	str	r3, [r1, #8]
 800a0f2:	f1b8 0f00 	cmp.w	r8, #0
 800a0f6:	dd9c      	ble.n	800a032 <__sflush_r+0x1a>
 800a0f8:	6a21      	ldr	r1, [r4, #32]
 800a0fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0fc:	4643      	mov	r3, r8
 800a0fe:	463a      	mov	r2, r7
 800a100:	4628      	mov	r0, r5
 800a102:	47b0      	blx	r6
 800a104:	2800      	cmp	r0, #0
 800a106:	dc06      	bgt.n	800a116 <__sflush_r+0xfe>
 800a108:	89a3      	ldrh	r3, [r4, #12]
 800a10a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a10e:	81a3      	strh	r3, [r4, #12]
 800a110:	f04f 30ff 	mov.w	r0, #4294967295
 800a114:	e78e      	b.n	800a034 <__sflush_r+0x1c>
 800a116:	4407      	add	r7, r0
 800a118:	eba8 0800 	sub.w	r8, r8, r0
 800a11c:	e7e9      	b.n	800a0f2 <__sflush_r+0xda>
 800a11e:	bf00      	nop
 800a120:	20400001 	.word	0x20400001

0800a124 <_fflush_r>:
 800a124:	b538      	push	{r3, r4, r5, lr}
 800a126:	690b      	ldr	r3, [r1, #16]
 800a128:	4605      	mov	r5, r0
 800a12a:	460c      	mov	r4, r1
 800a12c:	b913      	cbnz	r3, 800a134 <_fflush_r+0x10>
 800a12e:	2500      	movs	r5, #0
 800a130:	4628      	mov	r0, r5
 800a132:	bd38      	pop	{r3, r4, r5, pc}
 800a134:	b118      	cbz	r0, 800a13e <_fflush_r+0x1a>
 800a136:	6983      	ldr	r3, [r0, #24]
 800a138:	b90b      	cbnz	r3, 800a13e <_fflush_r+0x1a>
 800a13a:	f7ff f871 	bl	8009220 <__sinit>
 800a13e:	4b14      	ldr	r3, [pc, #80]	; (800a190 <_fflush_r+0x6c>)
 800a140:	429c      	cmp	r4, r3
 800a142:	d11b      	bne.n	800a17c <_fflush_r+0x58>
 800a144:	686c      	ldr	r4, [r5, #4]
 800a146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d0ef      	beq.n	800a12e <_fflush_r+0xa>
 800a14e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a150:	07d0      	lsls	r0, r2, #31
 800a152:	d404      	bmi.n	800a15e <_fflush_r+0x3a>
 800a154:	0599      	lsls	r1, r3, #22
 800a156:	d402      	bmi.n	800a15e <_fflush_r+0x3a>
 800a158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a15a:	f7ff f8ff 	bl	800935c <__retarget_lock_acquire_recursive>
 800a15e:	4628      	mov	r0, r5
 800a160:	4621      	mov	r1, r4
 800a162:	f7ff ff59 	bl	800a018 <__sflush_r>
 800a166:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a168:	07da      	lsls	r2, r3, #31
 800a16a:	4605      	mov	r5, r0
 800a16c:	d4e0      	bmi.n	800a130 <_fflush_r+0xc>
 800a16e:	89a3      	ldrh	r3, [r4, #12]
 800a170:	059b      	lsls	r3, r3, #22
 800a172:	d4dd      	bmi.n	800a130 <_fflush_r+0xc>
 800a174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a176:	f7ff f8f2 	bl	800935e <__retarget_lock_release_recursive>
 800a17a:	e7d9      	b.n	800a130 <_fflush_r+0xc>
 800a17c:	4b05      	ldr	r3, [pc, #20]	; (800a194 <_fflush_r+0x70>)
 800a17e:	429c      	cmp	r4, r3
 800a180:	d101      	bne.n	800a186 <_fflush_r+0x62>
 800a182:	68ac      	ldr	r4, [r5, #8]
 800a184:	e7df      	b.n	800a146 <_fflush_r+0x22>
 800a186:	4b04      	ldr	r3, [pc, #16]	; (800a198 <_fflush_r+0x74>)
 800a188:	429c      	cmp	r4, r3
 800a18a:	bf08      	it	eq
 800a18c:	68ec      	ldreq	r4, [r5, #12]
 800a18e:	e7da      	b.n	800a146 <_fflush_r+0x22>
 800a190:	0800a798 	.word	0x0800a798
 800a194:	0800a7b8 	.word	0x0800a7b8
 800a198:	0800a778 	.word	0x0800a778

0800a19c <_lseek_r>:
 800a19c:	b538      	push	{r3, r4, r5, lr}
 800a19e:	4d07      	ldr	r5, [pc, #28]	; (800a1bc <_lseek_r+0x20>)
 800a1a0:	4604      	mov	r4, r0
 800a1a2:	4608      	mov	r0, r1
 800a1a4:	4611      	mov	r1, r2
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	602a      	str	r2, [r5, #0]
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	f7f8 fe14 	bl	8002dd8 <_lseek>
 800a1b0:	1c43      	adds	r3, r0, #1
 800a1b2:	d102      	bne.n	800a1ba <_lseek_r+0x1e>
 800a1b4:	682b      	ldr	r3, [r5, #0]
 800a1b6:	b103      	cbz	r3, 800a1ba <_lseek_r+0x1e>
 800a1b8:	6023      	str	r3, [r4, #0]
 800a1ba:	bd38      	pop	{r3, r4, r5, pc}
 800a1bc:	20002470 	.word	0x20002470

0800a1c0 <__swhatbuf_r>:
 800a1c0:	b570      	push	{r4, r5, r6, lr}
 800a1c2:	460e      	mov	r6, r1
 800a1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c8:	2900      	cmp	r1, #0
 800a1ca:	b096      	sub	sp, #88	; 0x58
 800a1cc:	4614      	mov	r4, r2
 800a1ce:	461d      	mov	r5, r3
 800a1d0:	da08      	bge.n	800a1e4 <__swhatbuf_r+0x24>
 800a1d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	602a      	str	r2, [r5, #0]
 800a1da:	061a      	lsls	r2, r3, #24
 800a1dc:	d410      	bmi.n	800a200 <__swhatbuf_r+0x40>
 800a1de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1e2:	e00e      	b.n	800a202 <__swhatbuf_r+0x42>
 800a1e4:	466a      	mov	r2, sp
 800a1e6:	f000 f905 	bl	800a3f4 <_fstat_r>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	dbf1      	blt.n	800a1d2 <__swhatbuf_r+0x12>
 800a1ee:	9a01      	ldr	r2, [sp, #4]
 800a1f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1f8:	425a      	negs	r2, r3
 800a1fa:	415a      	adcs	r2, r3
 800a1fc:	602a      	str	r2, [r5, #0]
 800a1fe:	e7ee      	b.n	800a1de <__swhatbuf_r+0x1e>
 800a200:	2340      	movs	r3, #64	; 0x40
 800a202:	2000      	movs	r0, #0
 800a204:	6023      	str	r3, [r4, #0]
 800a206:	b016      	add	sp, #88	; 0x58
 800a208:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a20c <__smakebuf_r>:
 800a20c:	898b      	ldrh	r3, [r1, #12]
 800a20e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a210:	079d      	lsls	r5, r3, #30
 800a212:	4606      	mov	r6, r0
 800a214:	460c      	mov	r4, r1
 800a216:	d507      	bpl.n	800a228 <__smakebuf_r+0x1c>
 800a218:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	6123      	str	r3, [r4, #16]
 800a220:	2301      	movs	r3, #1
 800a222:	6163      	str	r3, [r4, #20]
 800a224:	b002      	add	sp, #8
 800a226:	bd70      	pop	{r4, r5, r6, pc}
 800a228:	ab01      	add	r3, sp, #4
 800a22a:	466a      	mov	r2, sp
 800a22c:	f7ff ffc8 	bl	800a1c0 <__swhatbuf_r>
 800a230:	9900      	ldr	r1, [sp, #0]
 800a232:	4605      	mov	r5, r0
 800a234:	4630      	mov	r0, r6
 800a236:	f7ff f8b3 	bl	80093a0 <_malloc_r>
 800a23a:	b948      	cbnz	r0, 800a250 <__smakebuf_r+0x44>
 800a23c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a240:	059a      	lsls	r2, r3, #22
 800a242:	d4ef      	bmi.n	800a224 <__smakebuf_r+0x18>
 800a244:	f023 0303 	bic.w	r3, r3, #3
 800a248:	f043 0302 	orr.w	r3, r3, #2
 800a24c:	81a3      	strh	r3, [r4, #12]
 800a24e:	e7e3      	b.n	800a218 <__smakebuf_r+0xc>
 800a250:	4b0d      	ldr	r3, [pc, #52]	; (800a288 <__smakebuf_r+0x7c>)
 800a252:	62b3      	str	r3, [r6, #40]	; 0x28
 800a254:	89a3      	ldrh	r3, [r4, #12]
 800a256:	6020      	str	r0, [r4, #0]
 800a258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a25c:	81a3      	strh	r3, [r4, #12]
 800a25e:	9b00      	ldr	r3, [sp, #0]
 800a260:	6163      	str	r3, [r4, #20]
 800a262:	9b01      	ldr	r3, [sp, #4]
 800a264:	6120      	str	r0, [r4, #16]
 800a266:	b15b      	cbz	r3, 800a280 <__smakebuf_r+0x74>
 800a268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a26c:	4630      	mov	r0, r6
 800a26e:	f000 f8d3 	bl	800a418 <_isatty_r>
 800a272:	b128      	cbz	r0, 800a280 <__smakebuf_r+0x74>
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	f023 0303 	bic.w	r3, r3, #3
 800a27a:	f043 0301 	orr.w	r3, r3, #1
 800a27e:	81a3      	strh	r3, [r4, #12]
 800a280:	89a0      	ldrh	r0, [r4, #12]
 800a282:	4305      	orrs	r5, r0
 800a284:	81a5      	strh	r5, [r4, #12]
 800a286:	e7cd      	b.n	800a224 <__smakebuf_r+0x18>
 800a288:	080091b9 	.word	0x080091b9

0800a28c <memmove>:
 800a28c:	4288      	cmp	r0, r1
 800a28e:	b510      	push	{r4, lr}
 800a290:	eb01 0402 	add.w	r4, r1, r2
 800a294:	d902      	bls.n	800a29c <memmove+0x10>
 800a296:	4284      	cmp	r4, r0
 800a298:	4623      	mov	r3, r4
 800a29a:	d807      	bhi.n	800a2ac <memmove+0x20>
 800a29c:	1e43      	subs	r3, r0, #1
 800a29e:	42a1      	cmp	r1, r4
 800a2a0:	d008      	beq.n	800a2b4 <memmove+0x28>
 800a2a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2aa:	e7f8      	b.n	800a29e <memmove+0x12>
 800a2ac:	4402      	add	r2, r0
 800a2ae:	4601      	mov	r1, r0
 800a2b0:	428a      	cmp	r2, r1
 800a2b2:	d100      	bne.n	800a2b6 <memmove+0x2a>
 800a2b4:	bd10      	pop	{r4, pc}
 800a2b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2be:	e7f7      	b.n	800a2b0 <memmove+0x24>

0800a2c0 <__malloc_lock>:
 800a2c0:	4801      	ldr	r0, [pc, #4]	; (800a2c8 <__malloc_lock+0x8>)
 800a2c2:	f7ff b84b 	b.w	800935c <__retarget_lock_acquire_recursive>
 800a2c6:	bf00      	nop
 800a2c8:	20002464 	.word	0x20002464

0800a2cc <__malloc_unlock>:
 800a2cc:	4801      	ldr	r0, [pc, #4]	; (800a2d4 <__malloc_unlock+0x8>)
 800a2ce:	f7ff b846 	b.w	800935e <__retarget_lock_release_recursive>
 800a2d2:	bf00      	nop
 800a2d4:	20002464 	.word	0x20002464

0800a2d8 <_free_r>:
 800a2d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2da:	2900      	cmp	r1, #0
 800a2dc:	d044      	beq.n	800a368 <_free_r+0x90>
 800a2de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2e2:	9001      	str	r0, [sp, #4]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f1a1 0404 	sub.w	r4, r1, #4
 800a2ea:	bfb8      	it	lt
 800a2ec:	18e4      	addlt	r4, r4, r3
 800a2ee:	f7ff ffe7 	bl	800a2c0 <__malloc_lock>
 800a2f2:	4a1e      	ldr	r2, [pc, #120]	; (800a36c <_free_r+0x94>)
 800a2f4:	9801      	ldr	r0, [sp, #4]
 800a2f6:	6813      	ldr	r3, [r2, #0]
 800a2f8:	b933      	cbnz	r3, 800a308 <_free_r+0x30>
 800a2fa:	6063      	str	r3, [r4, #4]
 800a2fc:	6014      	str	r4, [r2, #0]
 800a2fe:	b003      	add	sp, #12
 800a300:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a304:	f7ff bfe2 	b.w	800a2cc <__malloc_unlock>
 800a308:	42a3      	cmp	r3, r4
 800a30a:	d908      	bls.n	800a31e <_free_r+0x46>
 800a30c:	6825      	ldr	r5, [r4, #0]
 800a30e:	1961      	adds	r1, r4, r5
 800a310:	428b      	cmp	r3, r1
 800a312:	bf01      	itttt	eq
 800a314:	6819      	ldreq	r1, [r3, #0]
 800a316:	685b      	ldreq	r3, [r3, #4]
 800a318:	1949      	addeq	r1, r1, r5
 800a31a:	6021      	streq	r1, [r4, #0]
 800a31c:	e7ed      	b.n	800a2fa <_free_r+0x22>
 800a31e:	461a      	mov	r2, r3
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	b10b      	cbz	r3, 800a328 <_free_r+0x50>
 800a324:	42a3      	cmp	r3, r4
 800a326:	d9fa      	bls.n	800a31e <_free_r+0x46>
 800a328:	6811      	ldr	r1, [r2, #0]
 800a32a:	1855      	adds	r5, r2, r1
 800a32c:	42a5      	cmp	r5, r4
 800a32e:	d10b      	bne.n	800a348 <_free_r+0x70>
 800a330:	6824      	ldr	r4, [r4, #0]
 800a332:	4421      	add	r1, r4
 800a334:	1854      	adds	r4, r2, r1
 800a336:	42a3      	cmp	r3, r4
 800a338:	6011      	str	r1, [r2, #0]
 800a33a:	d1e0      	bne.n	800a2fe <_free_r+0x26>
 800a33c:	681c      	ldr	r4, [r3, #0]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	6053      	str	r3, [r2, #4]
 800a342:	4421      	add	r1, r4
 800a344:	6011      	str	r1, [r2, #0]
 800a346:	e7da      	b.n	800a2fe <_free_r+0x26>
 800a348:	d902      	bls.n	800a350 <_free_r+0x78>
 800a34a:	230c      	movs	r3, #12
 800a34c:	6003      	str	r3, [r0, #0]
 800a34e:	e7d6      	b.n	800a2fe <_free_r+0x26>
 800a350:	6825      	ldr	r5, [r4, #0]
 800a352:	1961      	adds	r1, r4, r5
 800a354:	428b      	cmp	r3, r1
 800a356:	bf04      	itt	eq
 800a358:	6819      	ldreq	r1, [r3, #0]
 800a35a:	685b      	ldreq	r3, [r3, #4]
 800a35c:	6063      	str	r3, [r4, #4]
 800a35e:	bf04      	itt	eq
 800a360:	1949      	addeq	r1, r1, r5
 800a362:	6021      	streq	r1, [r4, #0]
 800a364:	6054      	str	r4, [r2, #4]
 800a366:	e7ca      	b.n	800a2fe <_free_r+0x26>
 800a368:	b003      	add	sp, #12
 800a36a:	bd30      	pop	{r4, r5, pc}
 800a36c:	20002468 	.word	0x20002468

0800a370 <_realloc_r>:
 800a370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a374:	4680      	mov	r8, r0
 800a376:	4614      	mov	r4, r2
 800a378:	460e      	mov	r6, r1
 800a37a:	b921      	cbnz	r1, 800a386 <_realloc_r+0x16>
 800a37c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a380:	4611      	mov	r1, r2
 800a382:	f7ff b80d 	b.w	80093a0 <_malloc_r>
 800a386:	b92a      	cbnz	r2, 800a394 <_realloc_r+0x24>
 800a388:	f7ff ffa6 	bl	800a2d8 <_free_r>
 800a38c:	4625      	mov	r5, r4
 800a38e:	4628      	mov	r0, r5
 800a390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a394:	f000 f850 	bl	800a438 <_malloc_usable_size_r>
 800a398:	4284      	cmp	r4, r0
 800a39a:	4607      	mov	r7, r0
 800a39c:	d802      	bhi.n	800a3a4 <_realloc_r+0x34>
 800a39e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a3a2:	d812      	bhi.n	800a3ca <_realloc_r+0x5a>
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	f7fe fffa 	bl	80093a0 <_malloc_r>
 800a3ac:	4605      	mov	r5, r0
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	d0ed      	beq.n	800a38e <_realloc_r+0x1e>
 800a3b2:	42bc      	cmp	r4, r7
 800a3b4:	4622      	mov	r2, r4
 800a3b6:	4631      	mov	r1, r6
 800a3b8:	bf28      	it	cs
 800a3ba:	463a      	movcs	r2, r7
 800a3bc:	f7fe fdd4 	bl	8008f68 <memcpy>
 800a3c0:	4631      	mov	r1, r6
 800a3c2:	4640      	mov	r0, r8
 800a3c4:	f7ff ff88 	bl	800a2d8 <_free_r>
 800a3c8:	e7e1      	b.n	800a38e <_realloc_r+0x1e>
 800a3ca:	4635      	mov	r5, r6
 800a3cc:	e7df      	b.n	800a38e <_realloc_r+0x1e>
	...

0800a3d0 <_read_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4d07      	ldr	r5, [pc, #28]	; (800a3f0 <_read_r+0x20>)
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	4608      	mov	r0, r1
 800a3d8:	4611      	mov	r1, r2
 800a3da:	2200      	movs	r2, #0
 800a3dc:	602a      	str	r2, [r5, #0]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	f7f8 fc9a 	bl	8002d18 <_read>
 800a3e4:	1c43      	adds	r3, r0, #1
 800a3e6:	d102      	bne.n	800a3ee <_read_r+0x1e>
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	b103      	cbz	r3, 800a3ee <_read_r+0x1e>
 800a3ec:	6023      	str	r3, [r4, #0]
 800a3ee:	bd38      	pop	{r3, r4, r5, pc}
 800a3f0:	20002470 	.word	0x20002470

0800a3f4 <_fstat_r>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	4d07      	ldr	r5, [pc, #28]	; (800a414 <_fstat_r+0x20>)
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	4608      	mov	r0, r1
 800a3fe:	4611      	mov	r1, r2
 800a400:	602b      	str	r3, [r5, #0]
 800a402:	f7f8 fcce 	bl	8002da2 <_fstat>
 800a406:	1c43      	adds	r3, r0, #1
 800a408:	d102      	bne.n	800a410 <_fstat_r+0x1c>
 800a40a:	682b      	ldr	r3, [r5, #0]
 800a40c:	b103      	cbz	r3, 800a410 <_fstat_r+0x1c>
 800a40e:	6023      	str	r3, [r4, #0]
 800a410:	bd38      	pop	{r3, r4, r5, pc}
 800a412:	bf00      	nop
 800a414:	20002470 	.word	0x20002470

0800a418 <_isatty_r>:
 800a418:	b538      	push	{r3, r4, r5, lr}
 800a41a:	4d06      	ldr	r5, [pc, #24]	; (800a434 <_isatty_r+0x1c>)
 800a41c:	2300      	movs	r3, #0
 800a41e:	4604      	mov	r4, r0
 800a420:	4608      	mov	r0, r1
 800a422:	602b      	str	r3, [r5, #0]
 800a424:	f7f8 fccd 	bl	8002dc2 <_isatty>
 800a428:	1c43      	adds	r3, r0, #1
 800a42a:	d102      	bne.n	800a432 <_isatty_r+0x1a>
 800a42c:	682b      	ldr	r3, [r5, #0]
 800a42e:	b103      	cbz	r3, 800a432 <_isatty_r+0x1a>
 800a430:	6023      	str	r3, [r4, #0]
 800a432:	bd38      	pop	{r3, r4, r5, pc}
 800a434:	20002470 	.word	0x20002470

0800a438 <_malloc_usable_size_r>:
 800a438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a43c:	1f18      	subs	r0, r3, #4
 800a43e:	2b00      	cmp	r3, #0
 800a440:	bfbc      	itt	lt
 800a442:	580b      	ldrlt	r3, [r1, r0]
 800a444:	18c0      	addlt	r0, r0, r3
 800a446:	4770      	bx	lr

0800a448 <_init>:
 800a448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44a:	bf00      	nop
 800a44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a44e:	bc08      	pop	{r3}
 800a450:	469e      	mov	lr, r3
 800a452:	4770      	bx	lr

0800a454 <_fini>:
 800a454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a456:	bf00      	nop
 800a458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a45a:	bc08      	pop	{r3}
 800a45c:	469e      	mov	lr, r3
 800a45e:	4770      	bx	lr

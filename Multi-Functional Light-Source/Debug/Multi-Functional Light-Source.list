
Multi-Functional Light-Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ea8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08009048  08009048  00019048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009344  08009344  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  08009344  08009344  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009344  08009344  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009344  08009344  00019344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009348  08009348  00019348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0800934c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d4  2**0
                  CONTENTS
 10 .bss          00002290  200000d4  200000d4  000200d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002364  20002364  000200d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000137df  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025fb  00000000  00000000  000338e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd0  00000000  00000000  00035ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ee8  00000000  00000000  00036eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022051  00000000  00000000  00037d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b4b  00000000  00000000  00059de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d40c2  00000000  00000000  0006e934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001429f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004864  00000000  00000000  00142a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d4 	.word	0x200000d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009030 	.word	0x08009030

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d8 	.word	0x200000d8
 80001dc:	08009030 	.word	0x08009030

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

	// store recieved characters one at at time
	set_or_ret_sys_state[num_characters] = recvd_char[0] ;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <HAL_UART_RxCpltCallback+0x80>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <HAL_UART_RxCpltCallback+0x84>)
 80008bc:	7819      	ldrb	r1, [r3, #0]
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <HAL_UART_RxCpltCallback+0x88>)
 80008c0:	5499      	strb	r1, [r3, r2]

	num_characters++ ;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <HAL_UART_RxCpltCallback+0x80>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	3301      	adds	r3, #1
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <HAL_UART_RxCpltCallback+0x80>)
 80008cc:	701a      	strb	r2, [r3, #0]

	if(recvd_char[0] == '\n'){
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <HAL_UART_RxCpltCallback+0x84>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b0a      	cmp	r3, #10
 80008d4:	d121      	bne.n	800091a <HAL_UART_RxCpltCallback+0x6e>
		if(num_characters == 19){
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_UART_RxCpltCallback+0x80>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b13      	cmp	r3, #19
 80008dc:	d108      	bne.n	80008f0 <HAL_UART_RxCpltCallback+0x44>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"set mode\n",9 ) ;
 80008de:	2209      	movs	r2, #9
 80008e0:	4915      	ldr	r1, [pc, #84]	; (8000938 <HAL_UART_RxCpltCallback+0x8c>)
 80008e2:	4816      	ldr	r0, [pc, #88]	; (800093c <HAL_UART_RxCpltCallback+0x90>)
 80008e4:	f006 fb6e 	bl	8006fc4 <HAL_UART_Transmit_IT>
			UART_set_syst_state = 1 ;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_UART_RxCpltCallback+0x94>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	701a      	strb	r2, [r3, #0]
 80008ee:	e011      	b.n	8000914 <HAL_UART_RxCpltCallback+0x68>
		}else if( num_characters == 7){
 80008f0:	4b0e      	ldr	r3, [pc, #56]	; (800092c <HAL_UART_RxCpltCallback+0x80>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b07      	cmp	r3, #7
 80008f6:	d108      	bne.n	800090a <HAL_UART_RxCpltCallback+0x5e>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"request mode\n", 13) ;
 80008f8:	220d      	movs	r2, #13
 80008fa:	4912      	ldr	r1, [pc, #72]	; (8000944 <HAL_UART_RxCpltCallback+0x98>)
 80008fc:	480f      	ldr	r0, [pc, #60]	; (800093c <HAL_UART_RxCpltCallback+0x90>)
 80008fe:	f006 fb61 	bl	8006fc4 <HAL_UART_Transmit_IT>
			UART_ret_sys_state = 1 ;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_UART_RxCpltCallback+0x9c>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	e004      	b.n	8000914 <HAL_UART_RxCpltCallback+0x68>
		}else{
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Incorrect status request size\n", 30) ;
 800090a:	221e      	movs	r2, #30
 800090c:	490f      	ldr	r1, [pc, #60]	; (800094c <HAL_UART_RxCpltCallback+0xa0>)
 800090e:	480b      	ldr	r0, [pc, #44]	; (800093c <HAL_UART_RxCpltCallback+0x90>)
 8000910:	f006 fb58 	bl	8006fc4 <HAL_UART_Transmit_IT>
		}

		num_characters =  0;
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <HAL_UART_RxCpltCallback+0x80>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]

	}
	// recieve character - re-prime receiver to receive single characters at a time
	HAL_UART_Receive_IT(&huart2, (uint8_t*)recvd_char, 1);
 800091a:	2201      	movs	r2, #1
 800091c:	4904      	ldr	r1, [pc, #16]	; (8000930 <HAL_UART_RxCpltCallback+0x84>)
 800091e:	4807      	ldr	r0, [pc, #28]	; (800093c <HAL_UART_RxCpltCallback+0x90>)
 8000920:	f006 fbae 	bl	8007080 <HAL_UART_Receive_IT>
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20002315 	.word	0x20002315
 8000930:	20002314 	.word	0x20002314
 8000934:	2000002c 	.word	0x2000002c
 8000938:	08009178 	.word	0x08009178
 800093c:	20000268 	.word	0x20000268
 8000940:	20002316 	.word	0x20002316
 8000944:	08009184 	.word	0x08009184
 8000948:	20002317 	.word	0x20002317
 800094c:	08009194 	.word	0x08009194

08000950 <adc_dma_val_processing>:

/**
 * scale up transmit ADC values
 */

void adc_dma_val_processing(){
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0

	if(adc_conv_complete == 1){
 8000956:	4b3c      	ldr	r3, [pc, #240]	; (8000a48 <adc_dma_val_processing+0xf8>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d142      	bne.n	80009e4 <adc_dma_val_processing+0x94>

		adc_conv_complete =0  ;
 800095e:	4b3a      	ldr	r3, [pc, #232]	; (8000a48 <adc_dma_val_processing+0xf8>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
		sum = 0 ;
 8000964:	4b39      	ldr	r3, [pc, #228]	; (8000a4c <adc_dma_val_processing+0xfc>)
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
		for(int i = 0 ; i < adc_buf_len ; i++){
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	e00c      	b.n	800098a <adc_dma_val_processing+0x3a>
			sum += adc_buf[i] ;
 8000970:	4a37      	ldr	r2, [pc, #220]	; (8000a50 <adc_dma_val_processing+0x100>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000978:	461a      	mov	r2, r3
 800097a:	4b34      	ldr	r3, [pc, #208]	; (8000a4c <adc_dma_val_processing+0xfc>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4413      	add	r3, r2
 8000980:	4a32      	ldr	r2, [pc, #200]	; (8000a4c <adc_dma_val_processing+0xfc>)
 8000982:	6013      	str	r3, [r2, #0]
		for(int i = 0 ; i < adc_buf_len ; i++){
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3301      	adds	r3, #1
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000990:	dbee      	blt.n	8000970 <adc_dma_val_processing+0x20>
		}
		raw_adc_dma_val =(uint16_t)(sum/adc_buf_len) ;
 8000992:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <adc_dma_val_processing+0xfc>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	da01      	bge.n	800099e <adc_dma_val_processing+0x4e>
 800099a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800099e:	131b      	asrs	r3, r3, #12
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <adc_dma_val_processing+0x104>)
 80009a4:	801a      	strh	r2, [r3, #0]

		scaled_adc_val = (uint16_t)raw_adc_dma_val*adc_scale_up ; //adc scaled to max =4095
 80009a6:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <adc_dma_val_processing+0x104>)
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fef4 	bl	8000798 <__aeabi_i2d>
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <adc_dma_val_processing+0x108>)
 80009b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b6:	f7ff fc73 	bl	80002a0 <__aeabi_dmul>
 80009ba:	4602      	mov	r2, r0
 80009bc:	460b      	mov	r3, r1
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	f7ff ff53 	bl	800086c <__aeabi_d2uiz>
 80009c6:	4603      	mov	r3, r0
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <adc_dma_val_processing+0x10c>)
 80009cc:	801a      	strh	r2, [r3, #0]

		//capture previous adc cal
		if(adc_val_capture == 1){
 80009ce:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <adc_dma_val_processing+0x110>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d106      	bne.n	80009e4 <adc_dma_val_processing+0x94>
			adc_val_snapshot = scaled_adc_val ;
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <adc_dma_val_processing+0x10c>)
 80009d8:	881a      	ldrh	r2, [r3, #0]
 80009da:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <adc_dma_val_processing+0x114>)
 80009dc:	801a      	strh	r2, [r3, #0]
			adc_val_capture = 0 ;
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <adc_dma_val_processing+0x110>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
		}
	}

	// if ADC movement significant update LED intensity
	if(abs(scaled_adc_val - adc_val_snapshot) >15){
 80009e4:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <adc_dma_val_processing+0x10c>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <adc_dma_val_processing+0x114>)
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	bfb8      	it	lt
 80009f4:	425b      	neglt	r3, r3
 80009f6:	2b0f      	cmp	r3, #15
 80009f8:	dd02      	ble.n	8000a00 <adc_dma_val_processing+0xb0>
	  update_led_via_ADC = 1 ;
 80009fa:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <adc_dma_val_processing+0x118>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	701a      	strb	r2, [r3, #0]
	}

//	 WHITE LED intensity
	LED_intensity =(float)(scaled_adc_val)*(512.0/4095.0)  ;
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <adc_dma_val_processing+0x10c>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	ee07 3a90 	vmov	s15, r3
 8000a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a0c:	ee17 0a90 	vmov	r0, s15
 8000a10:	f7ff fed4 	bl	80007bc <__aeabi_f2d>
 8000a14:	a30a      	add	r3, pc, #40	; (adr r3, 8000a40 <adc_dma_val_processing+0xf0>)
 8000a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a1a:	f7ff fc41 	bl	80002a0 <__aeabi_dmul>
 8000a1e:	4602      	mov	r2, r0
 8000a20:	460b      	mov	r3, r1
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	f7ff ff21 	bl	800086c <__aeabi_d2uiz>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <adc_dma_val_processing+0x11c>)
 8000a30:	801a      	strh	r2, [r3, #0]
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	f3af 8000 	nop.w
 8000a40:	10010010 	.word	0x10010010
 8000a44:	3fc00100 	.word	0x3fc00100
 8000a48:	20002302 	.word	0x20002302
 8000a4c:	200022fc 	.word	0x200022fc
 8000a50:	200002f8 	.word	0x200002f8
 8000a54:	200022f8 	.word	0x200022f8
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	20002304 	.word	0x20002304
 8000a60:	20000002 	.word	0x20000002
 8000a64:	20002300 	.word	0x20002300
 8000a68:	20002306 	.word	0x20002306
 8000a6c:	20000010 	.word	0x20000010

08000a70 <system_state_update>:

/**
 * Depending on input recvd system changes to specified state
 */
void system_state_update(){
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
	// button system state update
	 if(left_button_pressed ==1 && UART_set_syst_state == 0 && UART_ret_sys_state == 0 ){
 8000a74:	4b44      	ldr	r3, [pc, #272]	; (8000b88 <system_state_update+0x118>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d12d      	bne.n	8000ad8 <system_state_update+0x68>
 8000a7c:	4b43      	ldr	r3, [pc, #268]	; (8000b8c <system_state_update+0x11c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d129      	bne.n	8000ad8 <system_state_update+0x68>
 8000a84:	4b42      	ldr	r3, [pc, #264]	; (8000b90 <system_state_update+0x120>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d125      	bne.n	8000ad8 <system_state_update+0x68>

		 button_count++ ;
 8000a8c:	4b41      	ldr	r3, [pc, #260]	; (8000b94 <system_state_update+0x124>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	4a40      	ldr	r2, [pc, #256]	; (8000b94 <system_state_update+0x124>)
 8000a94:	6013      	str	r3, [r2, #0]
		 if(button_count > 2){
 8000a96:	4b3f      	ldr	r3, [pc, #252]	; (8000b94 <system_state_update+0x124>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	dd02      	ble.n	8000aa4 <system_state_update+0x34>
			 button_count = 0 ;
 8000a9e:	4b3d      	ldr	r3, [pc, #244]	; (8000b94 <system_state_update+0x124>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
		 }
		 update_led_via_ADC =  0 ; // don't read ADC by default in next state
 8000aa4:	4b3c      	ldr	r3, [pc, #240]	; (8000b98 <system_state_update+0x128>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
		 // snapshot of ADC taken in next state
		 if(adc_conv_complete == 1){
 8000aaa:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <system_state_update+0x12c>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d102      	bne.n	8000ab8 <system_state_update+0x48>
			 adc_val_capture =1  ; // capture ADC value
 8000ab2:	4b3b      	ldr	r3, [pc, #236]	; (8000ba0 <system_state_update+0x130>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
		 }

		 // Emergency MODE DEFAULT
		 if(button_count != 1){
 8000ab8:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <system_state_update+0x124>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d007      	beq.n	8000ad0 <system_state_update+0x60>
			 strobe_led_Intensity = 256 ;
 8000ac0:	4b38      	ldr	r3, [pc, #224]	; (8000ba4 <system_state_update+0x134>)
 8000ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac6:	801a      	strh	r2, [r3, #0]
			 strobe_delay = 512;
 8000ac8:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <system_state_update+0x138>)
 8000aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ace:	801a      	strh	r2, [r3, #0]
		 }

		 left_button_pressed = 0 ;
 8000ad0:	4b2d      	ldr	r3, [pc, #180]	; (8000b88 <system_state_update+0x118>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	e051      	b.n	8000b7c <system_state_update+0x10c>

	 }
	 // UART system state update
	 else if( left_button_pressed ==0 && UART_set_syst_state == 1 && UART_ret_sys_state == 0){ // System state update to come from only one source
 8000ad8:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <system_state_update+0x118>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d12f      	bne.n	8000b40 <system_state_update+0xd0>
 8000ae0:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <system_state_update+0x11c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d12b      	bne.n	8000b40 <system_state_update+0xd0>
 8000ae8:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <system_state_update+0x120>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d127      	bne.n	8000b40 <system_state_update+0xd0>
		 UART_set_syst_state = 0;
 8000af0:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <system_state_update+0x11c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
		// stop reading ADC when UART set command  received
		if(adc_conv_complete == 1){
 8000af6:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <system_state_update+0x12c>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d105      	bne.n	8000b0a <system_state_update+0x9a>
			adc_val_capture = 1 ; // capture slider value
 8000afe:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <system_state_update+0x130>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	701a      	strb	r2, [r3, #0]
			update_led_via_ADC = 0 ; // dont read until slider moved
 8000b04:	4b24      	ldr	r3, [pc, #144]	; (8000b98 <system_state_update+0x128>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
		}

		 UART_state_update =1;
 8000b0a:	4b28      	ldr	r3, [pc, #160]	; (8000bac <system_state_update+0x13c>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]

		 if(set_or_ret_sys_state[3] == 'F'){
 8000b10:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <system_state_update+0x140>)
 8000b12:	78db      	ldrb	r3, [r3, #3]
 8000b14:	2b46      	cmp	r3, #70	; 0x46
 8000b16:	d103      	bne.n	8000b20 <system_state_update+0xb0>
			 button_count =0 ;
 8000b18:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <system_state_update+0x124>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
		 if(set_or_ret_sys_state[3] == 'F'){
 8000b1e:	e02c      	b.n	8000b7a <system_state_update+0x10a>
		 }
		 else if(set_or_ret_sys_state[3] =='E'){
 8000b20:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <system_state_update+0x140>)
 8000b22:	78db      	ldrb	r3, [r3, #3]
 8000b24:	2b45      	cmp	r3, #69	; 0x45
 8000b26:	d103      	bne.n	8000b30 <system_state_update+0xc0>
			 button_count =1;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <system_state_update+0x124>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	601a      	str	r2, [r3, #0]
		 if(set_or_ret_sys_state[3] == 'F'){
 8000b2e:	e024      	b.n	8000b7a <system_state_update+0x10a>

		 }else{
			 if(set_or_ret_sys_state[3] == 'M'){
 8000b30:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <system_state_update+0x140>)
 8000b32:	78db      	ldrb	r3, [r3, #3]
 8000b34:	2b4d      	cmp	r3, #77	; 0x4d
 8000b36:	d120      	bne.n	8000b7a <system_state_update+0x10a>
				 button_count =2 ;
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <system_state_update+0x124>)
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	601a      	str	r2, [r3, #0]
		 if(set_or_ret_sys_state[3] == 'F'){
 8000b3e:	e01c      	b.n	8000b7a <system_state_update+0x10a>
			 }
		 }
	 }
	 // read system state
	 else{ //dont update the system in any way - read current and previous states
		 if( left_button_pressed ==0 && UART_set_syst_state == 0 && UART_ret_sys_state == 1){
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <system_state_update+0x118>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d119      	bne.n	8000b7c <system_state_update+0x10c>
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <system_state_update+0x11c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d115      	bne.n	8000b7c <system_state_update+0x10c>
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <system_state_update+0x120>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d111      	bne.n	8000b7c <system_state_update+0x10c>

			 // stop reading adc
			if(adc_conv_complete == 1){
 8000b58:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <system_state_update+0x12c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d105      	bne.n	8000b6c <system_state_update+0xfc>
				adc_val_capture = 1 ; // capture slider value
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <system_state_update+0x130>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
				update_led_via_ADC = 0 ; // dont read until slider moved
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <system_state_update+0x128>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
			}

			 UART_ret_sys_state = 0;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <system_state_update+0x120>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
			 READ_SYS =1;
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <system_state_update+0x144>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]

		 }
	 }
}
 8000b78:	e000      	b.n	8000b7c <system_state_update+0x10c>
		 if(set_or_ret_sys_state[3] == 'F'){
 8000b7a:	bf00      	nop
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	2000234a 	.word	0x2000234a
 8000b8c:	20002316 	.word	0x20002316
 8000b90:	20002317 	.word	0x20002317
 8000b94:	200002f0 	.word	0x200002f0
 8000b98:	20002306 	.word	0x20002306
 8000b9c:	20002302 	.word	0x20002302
 8000ba0:	20000002 	.word	0x20000002
 8000ba4:	20000014 	.word	0x20000014
 8000ba8:	20000012 	.word	0x20000012
 8000bac:	20002318 	.word	0x20002318
 8000bb0:	2000002c 	.word	0x2000002c
 8000bb4:	20002320 	.word	0x20002320

08000bb8 <right_button_state_update>:

/**
 * Updates system state after right button pressed in emergency mode
 */
void right_button_state_update(){
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
	if(button_count == 1){
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <right_button_state_update+0x5c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d117      	bne.n	8000bf4 <right_button_state_update+0x3c>
		if(right_button_pressed){
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <right_button_state_update+0x60>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d01e      	beq.n	8000c0a <right_button_state_update+0x52>
			right_button_pressed = 0 ;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <right_button_state_update+0x60>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]

			update_led_via_ADC = 0 ; // dont read adc by default in next state
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <right_button_state_update+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]

			 em_count++ ;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <right_button_state_update+0x68>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <right_button_state_update+0x68>)
 8000be2:	701a      	strb	r2, [r3, #0]

			 if(em_count>2){
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <right_button_state_update+0x68>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d90e      	bls.n	8000c0a <right_button_state_update+0x52>
				 em_count = 0;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <right_button_state_update+0x68>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
		}
	}else if( button_count != 1 && right_button_pressed){
		right_button_pressed = 0; //do not read right button presses triggered
								  // in other states except emergency mode
	}
}
 8000bf2:	e00a      	b.n	8000c0a <right_button_state_update+0x52>
	}else if( button_count != 1 && right_button_pressed){
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <right_button_state_update+0x5c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d006      	beq.n	8000c0a <right_button_state_update+0x52>
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <right_button_state_update+0x60>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <right_button_state_update+0x52>
		right_button_pressed = 0; //do not read right button presses triggered
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <right_button_state_update+0x60>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	200002f0 	.word	0x200002f0
 8000c18:	20002349 	.word	0x20002349
 8000c1c:	20002306 	.word	0x20002306
 8000c20:	200002f4 	.word	0x200002f4

08000c24 <TURN_LED_ON_OFF>:

/**
 * Middle button press turns LED ON/OFF
 */
void TURN_LED_ON_OFF(){
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
	if(middle_button_pressed == 1 && UART_set_syst_state == 0){
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <TURN_LED_ON_OFF+0x84>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d122      	bne.n	8000c76 <TURN_LED_ON_OFF+0x52>
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <TURN_LED_ON_OFF+0x88>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d11e      	bne.n	8000c76 <TURN_LED_ON_OFF+0x52>
		 LED_ON = !LED_ON ;  // turns the LED on OR off
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <TURN_LED_ON_OFF+0x8c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	bf0c      	ite	eq
 8000c40:	2301      	moveq	r3, #1
 8000c42:	2300      	movne	r3, #0
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <TURN_LED_ON_OFF+0x8c>)
 8000c4a:	701a      	strb	r2, [r3, #0]

		 // Middle button press -> LED ON / OFF
		 if(LED_ON == 1){
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <TURN_LED_ON_OFF+0x8c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d104      	bne.n	8000c5e <TURN_LED_ON_OFF+0x3a>
			 htim2.Instance->CCR1 = 1 ; // LED ON
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <TURN_LED_ON_OFF+0x90>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	635a      	str	r2, [r3, #52]	; 0x34
 8000c5c:	e007      	b.n	8000c6e <TURN_LED_ON_OFF+0x4a>
		 }else if(LED_ON ==0){
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <TURN_LED_ON_OFF+0x8c>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d103      	bne.n	8000c6e <TURN_LED_ON_OFF+0x4a>
			 htim2.Instance->CCR1 = 0 ; //LED OFFS
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <TURN_LED_ON_OFF+0x90>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	635a      	str	r2, [r3, #52]	; 0x34
		 }

		 middle_button_pressed = 0 ;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <TURN_LED_ON_OFF+0x84>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
			LED_ON  = 1 ;
		}else{
			LED_ON = 0 ;
		}
	}
}
 8000c74:	e012      	b.n	8000c9c <TURN_LED_ON_OFF+0x78>
	else if(middle_button_pressed == 0 && UART_state_update == 1  ){
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <TURN_LED_ON_OFF+0x84>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d10e      	bne.n	8000c9c <TURN_LED_ON_OFF+0x78>
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <TURN_LED_ON_OFF+0x94>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d10a      	bne.n	8000c9c <TURN_LED_ON_OFF+0x78>
		if( state>0){
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <TURN_LED_ON_OFF+0x98>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <TURN_LED_ON_OFF+0x72>
			LED_ON  = 1 ;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <TURN_LED_ON_OFF+0x8c>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
}
 8000c94:	e002      	b.n	8000c9c <TURN_LED_ON_OFF+0x78>
			LED_ON = 0 ;
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <TURN_LED_ON_OFF+0x8c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20002348 	.word	0x20002348
 8000cac:	20002316 	.word	0x20002316
 8000cb0:	20002307 	.word	0x20002307
 8000cb4:	20000184 	.word	0x20000184
 8000cb8:	20002318 	.word	0x20002318
 8000cbc:	2000231a 	.word	0x2000231a

08000cc0 <EM_mode_Strobe>:

/**
 * LED strobed with provided number of ms
 */
void EM_mode_Strobe(uint16_t strobe_delay){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]

	 // default delay 512ms
	 timePassed =HAL_GetTick() - strobe_ticks ;
 8000cca:	f001 fde7 	bl	800289c <HAL_GetTick>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <EM_mode_Strobe+0x84>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	4a1c      	ldr	r2, [pc, #112]	; (8000d48 <EM_mode_Strobe+0x88>)
 8000cd8:	6013      	str	r3, [r2, #0]
	 // time passed >512
	 if( timePassed >= strobe_delay && led_strobe_on == 0){
 8000cda:	88fa      	ldrh	r2, [r7, #6]
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <EM_mode_Strobe+0x88>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d80a      	bhi.n	8000cfa <EM_mode_Strobe+0x3a>
 8000ce4:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <EM_mode_Strobe+0x8c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d106      	bne.n	8000cfa <EM_mode_Strobe+0x3a>
		 led_strobe_on =1 ;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <EM_mode_Strobe+0x8c>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
		 htim2.Instance->CCR1 = 0 ;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <EM_mode_Strobe+0x90>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	635a      	str	r2, [r3, #52]	; 0x34
	 }
	 // time Passed > 1024
	 if(timePassed >= 1024 && led_strobe_on == 1){
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <EM_mode_Strobe+0x88>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d02:	d31a      	bcc.n	8000d3a <EM_mode_Strobe+0x7a>
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <EM_mode_Strobe+0x8c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d116      	bne.n	8000d3a <EM_mode_Strobe+0x7a>
		 strobe_ticks =  HAL_GetTick() ; // update current time
 8000d0c:	f001 fdc6 	bl	800289c <HAL_GetTick>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4a0c      	ldr	r2, [pc, #48]	; (8000d44 <EM_mode_Strobe+0x84>)
 8000d14:	6013      	str	r3, [r2, #0]
		 led_strobe_on = 0 ;
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <EM_mode_Strobe+0x8c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]

		 if(update_led_via_ADC ==1){ // update LED intensity if the slider moved
 8000d1c:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <EM_mode_Strobe+0x94>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d105      	bne.n	8000d30 <EM_mode_Strobe+0x70>
			 htim2.Instance->CCR1 = LED_intensity ;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <EM_mode_Strobe+0x98>)
 8000d26:	881a      	ldrh	r2, [r3, #0]
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <EM_mode_Strobe+0x90>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	635a      	str	r2, [r3, #52]	; 0x34
		 }else{ // if no slider movement strobe with default intensity
			 htim2.Instance->CCR1 = strobe_led_Intensity;
		 }
	 }

}
 8000d2e:	e004      	b.n	8000d3a <EM_mode_Strobe+0x7a>
			 htim2.Instance->CCR1 = strobe_led_Intensity;
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <EM_mode_Strobe+0x9c>)
 8000d32:	881a      	ldrh	r2, [r3, #0]
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <EM_mode_Strobe+0x90>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20002308 	.word	0x20002308
 8000d48:	20002310 	.word	0x20002310
 8000d4c:	2000230c 	.word	0x2000230c
 8000d50:	20000184 	.word	0x20000184
 8000d54:	20002306 	.word	0x20002306
 8000d58:	20000010 	.word	0x20000010
 8000d5c:	20000014 	.word	0x20000014

08000d60 <convert_UART_state_params_to_Int>:
void convert_UART_state_params_to_Int(){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
	if(UART_set_syst_state) {
 8000d66:	4b51      	ldr	r3, [pc, #324]	; (8000eac <convert_UART_state_params_to_Int+0x14c>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 8099 	beq.w	8000ea2 <convert_UART_state_params_to_Int+0x142>
		for(int i = 0; i < 19 ; i++){
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	e05f      	b.n	8000e36 <convert_UART_state_params_to_Int+0xd6>
			switch(i){
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3b05      	subs	r3, #5
 8000d7a:	2b0a      	cmp	r3, #10
 8000d7c:	d857      	bhi.n	8000e2e <convert_UART_state_params_to_Int+0xce>
 8000d7e:	a201      	add	r2, pc, #4	; (adr r2, 8000d84 <convert_UART_state_params_to_Int+0x24>)
 8000d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d84:	08000db1 	.word	0x08000db1
 8000d88:	08000dbf 	.word	0x08000dbf
 8000d8c:	08000dcd 	.word	0x08000dcd
 8000d90:	08000e2f 	.word	0x08000e2f
 8000d94:	08000ddb 	.word	0x08000ddb
 8000d98:	08000de9 	.word	0x08000de9
 8000d9c:	08000df7 	.word	0x08000df7
 8000da0:	08000e2f 	.word	0x08000e2f
 8000da4:	08000e05 	.word	0x08000e05
 8000da8:	08000e13 	.word	0x08000e13
 8000dac:	08000e21 	.word	0x08000e21
			case 5:
				STATE[0]= set_or_ret_sys_state[i] ;
 8000db0:	4a3f      	ldr	r2, [pc, #252]	; (8000eb0 <convert_UART_state_params_to_Int+0x150>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	781a      	ldrb	r2, [r3, #0]
 8000db8:	4b3e      	ldr	r3, [pc, #248]	; (8000eb4 <convert_UART_state_params_to_Int+0x154>)
 8000dba:	701a      	strb	r2, [r3, #0]
				break;
 8000dbc:	e038      	b.n	8000e30 <convert_UART_state_params_to_Int+0xd0>
			case 6:
				STATE[1]= set_or_ret_sys_state[i] ;
 8000dbe:	4a3c      	ldr	r2, [pc, #240]	; (8000eb0 <convert_UART_state_params_to_Int+0x150>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	781a      	ldrb	r2, [r3, #0]
 8000dc6:	4b3b      	ldr	r3, [pc, #236]	; (8000eb4 <convert_UART_state_params_to_Int+0x154>)
 8000dc8:	705a      	strb	r2, [r3, #1]
				break;
 8000dca:	e031      	b.n	8000e30 <convert_UART_state_params_to_Int+0xd0>
			case 7:
				STATE[2] = set_or_ret_sys_state[i] ;
 8000dcc:	4a38      	ldr	r2, [pc, #224]	; (8000eb0 <convert_UART_state_params_to_Int+0x150>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	781a      	ldrb	r2, [r3, #0]
 8000dd4:	4b37      	ldr	r3, [pc, #220]	; (8000eb4 <convert_UART_state_params_to_Int+0x154>)
 8000dd6:	709a      	strb	r2, [r3, #2]
				break;
 8000dd8:	e02a      	b.n	8000e30 <convert_UART_state_params_to_Int+0xd0>

			case 9:
				PARAM1[0] = set_or_ret_sys_state[i];
 8000dda:	4a35      	ldr	r2, [pc, #212]	; (8000eb0 <convert_UART_state_params_to_Int+0x150>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4413      	add	r3, r2
 8000de0:	781a      	ldrb	r2, [r3, #0]
 8000de2:	4b35      	ldr	r3, [pc, #212]	; (8000eb8 <convert_UART_state_params_to_Int+0x158>)
 8000de4:	701a      	strb	r2, [r3, #0]
				break;
 8000de6:	e023      	b.n	8000e30 <convert_UART_state_params_to_Int+0xd0>
			case 10:
				PARAM1[1] = set_or_ret_sys_state[i] ;
 8000de8:	4a31      	ldr	r2, [pc, #196]	; (8000eb0 <convert_UART_state_params_to_Int+0x150>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	781a      	ldrb	r2, [r3, #0]
 8000df0:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <convert_UART_state_params_to_Int+0x158>)
 8000df2:	705a      	strb	r2, [r3, #1]
				break;
 8000df4:	e01c      	b.n	8000e30 <convert_UART_state_params_to_Int+0xd0>
			case 11:
				PARAM1[2] = set_or_ret_sys_state[i] ;
 8000df6:	4a2e      	ldr	r2, [pc, #184]	; (8000eb0 <convert_UART_state_params_to_Int+0x150>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	781a      	ldrb	r2, [r3, #0]
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <convert_UART_state_params_to_Int+0x158>)
 8000e00:	709a      	strb	r2, [r3, #2]
				break ;
 8000e02:	e015      	b.n	8000e30 <convert_UART_state_params_to_Int+0xd0>
			case 13:
				PARAM2[0] = set_or_ret_sys_state[i] ;
 8000e04:	4a2a      	ldr	r2, [pc, #168]	; (8000eb0 <convert_UART_state_params_to_Int+0x150>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	781a      	ldrb	r2, [r3, #0]
 8000e0c:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <convert_UART_state_params_to_Int+0x15c>)
 8000e0e:	701a      	strb	r2, [r3, #0]
				break;
 8000e10:	e00e      	b.n	8000e30 <convert_UART_state_params_to_Int+0xd0>
			case 14:
				PARAM2[1] = set_or_ret_sys_state[i] ;
 8000e12:	4a27      	ldr	r2, [pc, #156]	; (8000eb0 <convert_UART_state_params_to_Int+0x150>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4413      	add	r3, r2
 8000e18:	781a      	ldrb	r2, [r3, #0]
 8000e1a:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <convert_UART_state_params_to_Int+0x15c>)
 8000e1c:	705a      	strb	r2, [r3, #1]
				break;
 8000e1e:	e007      	b.n	8000e30 <convert_UART_state_params_to_Int+0xd0>
			case 15:
				PARAM2[2] = set_or_ret_sys_state[i ];
 8000e20:	4a23      	ldr	r2, [pc, #140]	; (8000eb0 <convert_UART_state_params_to_Int+0x150>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	781a      	ldrb	r2, [r3, #0]
 8000e28:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <convert_UART_state_params_to_Int+0x15c>)
 8000e2a:	709a      	strb	r2, [r3, #2]
				break;
 8000e2c:	e000      	b.n	8000e30 <convert_UART_state_params_to_Int+0xd0>

			default:
				break ;
 8000e2e:	bf00      	nop
		for(int i = 0; i < 19 ; i++){
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3301      	adds	r3, #1
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b12      	cmp	r3, #18
 8000e3a:	dd9c      	ble.n	8000d76 <convert_UART_state_params_to_Int+0x16>
			}

		}

		state = atoi(STATE) ;
 8000e3c:	481d      	ldr	r0, [pc, #116]	; (8000eb4 <convert_UART_state_params_to_Int+0x154>)
 8000e3e:	f007 fbc7 	bl	80085d0 <atoi>
 8000e42:	4603      	mov	r3, r0
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <convert_UART_state_params_to_Int+0x160>)
 8000e48:	801a      	strh	r2, [r3, #0]
		param1 = atoi(PARAM1);
 8000e4a:	481b      	ldr	r0, [pc, #108]	; (8000eb8 <convert_UART_state_params_to_Int+0x158>)
 8000e4c:	f007 fbc0 	bl	80085d0 <atoi>
 8000e50:	4603      	mov	r3, r0
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <convert_UART_state_params_to_Int+0x164>)
 8000e56:	801a      	strh	r2, [r3, #0]
		// problem - perform check for if non integer characters are passed!
		if(strcmp(PARAM2, "000") == 0 ){
 8000e58:	491b      	ldr	r1, [pc, #108]	; (8000ec8 <convert_UART_state_params_to_Int+0x168>)
 8000e5a:	4818      	ldr	r0, [pc, #96]	; (8000ebc <convert_UART_state_params_to_Int+0x15c>)
 8000e5c:	f7ff f9c0 	bl	80001e0 <strcmp>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d107      	bne.n	8000e76 <convert_UART_state_params_to_Int+0x116>

			param2 = atoi(PARAM2) ;  // SOS MORSE OUTPUT
 8000e66:	4815      	ldr	r0, [pc, #84]	; (8000ebc <convert_UART_state_params_to_Int+0x15c>)
 8000e68:	f007 fbb2 	bl	80085d0 <atoi>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <convert_UART_state_params_to_Int+0x16c>)
 8000e72:	801a      	strh	r2, [r3, #0]
			custom_morse_msg_rcvd = 1;
		}


	}
}
 8000e74:	e015      	b.n	8000ea2 <convert_UART_state_params_to_Int+0x142>
		else if( strcmp(PARAM2, "000") != 0 ){
 8000e76:	4914      	ldr	r1, [pc, #80]	; (8000ec8 <convert_UART_state_params_to_Int+0x168>)
 8000e78:	4810      	ldr	r0, [pc, #64]	; (8000ebc <convert_UART_state_params_to_Int+0x15c>)
 8000e7a:	f7ff f9b1 	bl	80001e0 <strcmp>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d00e      	beq.n	8000ea2 <convert_UART_state_params_to_Int+0x142>
			Custom_Morse_Msg[0] = PARAM2[0] ; // CUSTOM MORSE output - declare variable to store the output
 8000e84:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <convert_UART_state_params_to_Int+0x15c>)
 8000e86:	781a      	ldrb	r2, [r3, #0]
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <convert_UART_state_params_to_Int+0x170>)
 8000e8a:	701a      	strb	r2, [r3, #0]
			Custom_Morse_Msg[1] = PARAM2[1] ;
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <convert_UART_state_params_to_Int+0x15c>)
 8000e8e:	785a      	ldrb	r2, [r3, #1]
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <convert_UART_state_params_to_Int+0x170>)
 8000e92:	705a      	strb	r2, [r3, #1]
			Custom_Morse_Msg[2] = PARAM2[2] ;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <convert_UART_state_params_to_Int+0x15c>)
 8000e96:	789a      	ldrb	r2, [r3, #2]
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <convert_UART_state_params_to_Int+0x170>)
 8000e9a:	709a      	strb	r2, [r3, #2]
			custom_morse_msg_rcvd = 1;
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <convert_UART_state_params_to_Int+0x174>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20002316 	.word	0x20002316
 8000eb0:	2000002c 	.word	0x2000002c
 8000eb4:	20000040 	.word	0x20000040
 8000eb8:	20000044 	.word	0x20000044
 8000ebc:	20000048 	.word	0x20000048
 8000ec0:	2000231a 	.word	0x2000231a
 8000ec4:	2000231c 	.word	0x2000231c
 8000ec8:	080091b4 	.word	0x080091b4
 8000ecc:	2000231e 	.word	0x2000231e
 8000ed0:	2000004c 	.word	0x2000004c
 8000ed4:	20002319 	.word	0x20002319

08000ed8 <Emergency_Mode_State_Update>:

/**
 * Function updates the necessary states/ values when UART command reached to
 * update the system state
 */
void Emergency_Mode_State_Update(){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0

	if(UART_state_update == 1 && state > 0 && set_or_ret_sys_state[3] =='E'){
 8000edc:	4b3a      	ldr	r3, [pc, #232]	; (8000fc8 <Emergency_Mode_State_Update+0xf0>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d14c      	bne.n	8000f7e <Emergency_Mode_State_Update+0xa6>
 8000ee4:	4b39      	ldr	r3, [pc, #228]	; (8000fcc <Emergency_Mode_State_Update+0xf4>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d048      	beq.n	8000f7e <Emergency_Mode_State_Update+0xa6>
 8000eec:	4b38      	ldr	r3, [pc, #224]	; (8000fd0 <Emergency_Mode_State_Update+0xf8>)
 8000eee:	78db      	ldrb	r3, [r3, #3]
 8000ef0:	2b45      	cmp	r3, #69	; 0x45
 8000ef2:	d144      	bne.n	8000f7e <Emergency_Mode_State_Update+0xa6>
		// Dont read ADC
		if(adc_conv_complete == 1){
 8000ef4:	4b37      	ldr	r3, [pc, #220]	; (8000fd4 <Emergency_Mode_State_Update+0xfc>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d105      	bne.n	8000f08 <Emergency_Mode_State_Update+0x30>
			adc_val_capture = 1 ; // capture slider value
 8000efc:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <Emergency_Mode_State_Update+0x100>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
			update_led_via_ADC = 0 ; // dont read until slider moved
 8000f02:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <Emergency_Mode_State_Update+0x104>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
		}

		//update LED intensity
		strobe_led_Intensity = state;
 8000f08:	4b30      	ldr	r3, [pc, #192]	; (8000fcc <Emergency_Mode_State_Update+0xf4>)
 8000f0a:	881a      	ldrh	r2, [r3, #0]
 8000f0c:	4b34      	ldr	r3, [pc, #208]	; (8000fe0 <Emergency_Mode_State_Update+0x108>)
 8000f0e:	801a      	strh	r2, [r3, #0]

		// strobe
		if(param1 > 0 ){
 8000f10:	4b34      	ldr	r3, [pc, #208]	; (8000fe4 <Emergency_Mode_State_Update+0x10c>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d007      	beq.n	8000f28 <Emergency_Mode_State_Update+0x50>
			em_count = 0 ;
 8000f18:	4b33      	ldr	r3, [pc, #204]	; (8000fe8 <Emergency_Mode_State_Update+0x110>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
			strobe_delay = param1 ;  // update the ON/off time of strobe
 8000f1e:	4b31      	ldr	r3, [pc, #196]	; (8000fe4 <Emergency_Mode_State_Update+0x10c>)
 8000f20:	881a      	ldrh	r2, [r3, #0]
 8000f22:	4b32      	ldr	r3, [pc, #200]	; (8000fec <Emergency_Mode_State_Update+0x114>)
 8000f24:	801a      	strh	r2, [r3, #0]
 8000f26:	e027      	b.n	8000f78 <Emergency_Mode_State_Update+0xa0>

		}
		// SOS output
		else if(param1 == 0 && param2 == 0 && custom_morse_msg_rcvd == 0 ){
 8000f28:	4b2e      	ldr	r3, [pc, #184]	; (8000fe4 <Emergency_Mode_State_Update+0x10c>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d110      	bne.n	8000f52 <Emergency_Mode_State_Update+0x7a>
 8000f30:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <Emergency_Mode_State_Update+0x118>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d10c      	bne.n	8000f52 <Emergency_Mode_State_Update+0x7a>
 8000f38:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <Emergency_Mode_State_Update+0x11c>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d108      	bne.n	8000f52 <Emergency_Mode_State_Update+0x7a>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"SOS MORSE\n", 10) ;
 8000f40:	220a      	movs	r2, #10
 8000f42:	492d      	ldr	r1, [pc, #180]	; (8000ff8 <Emergency_Mode_State_Update+0x120>)
 8000f44:	482d      	ldr	r0, [pc, #180]	; (8000ffc <Emergency_Mode_State_Update+0x124>)
 8000f46:	f006 f83d 	bl	8006fc4 <HAL_UART_Transmit_IT>
			em_count =1 ; // SOS mode
 8000f4a:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <Emergency_Mode_State_Update+0x110>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
 8000f50:	e012      	b.n	8000f78 <Emergency_Mode_State_Update+0xa0>
		}
		// CUSTOM morse msg received
		else{
			if(param1 == 0 && custom_morse_msg_rcvd ==1 ){
 8000f52:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <Emergency_Mode_State_Update+0x10c>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d10e      	bne.n	8000f78 <Emergency_Mode_State_Update+0xa0>
 8000f5a:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <Emergency_Mode_State_Update+0x11c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d10a      	bne.n	8000f78 <Emergency_Mode_State_Update+0xa0>
				custom_morse_msg_rcvd = 0;
 8000f62:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <Emergency_Mode_State_Update+0x11c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart2, (uint8_t*)"CUSTOM MORSE\n", 13) ;
 8000f68:	220d      	movs	r2, #13
 8000f6a:	4925      	ldr	r1, [pc, #148]	; (8001000 <Emergency_Mode_State_Update+0x128>)
 8000f6c:	4823      	ldr	r0, [pc, #140]	; (8000ffc <Emergency_Mode_State_Update+0x124>)
 8000f6e:	f006 f829 	bl	8006fc4 <HAL_UART_Transmit_IT>
				em_count = 2 ; // CUSTOM MORSE
 8000f72:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <Emergency_Mode_State_Update+0x110>)
 8000f74:	2202      	movs	r2, #2
 8000f76:	701a      	strb	r2, [r3, #0]
			}
		}



		UART_state_update = 0;
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <Emergency_Mode_State_Update+0xf0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
	}
	 // copy previous states information
		 ME_state = strobe_led_Intensity ;
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <Emergency_Mode_State_Update+0x108>)
 8000f80:	881a      	ldrh	r2, [r3, #0]
 8000f82:	4b20      	ldr	r3, [pc, #128]	; (8001004 <Emergency_Mode_State_Update+0x12c>)
 8000f84:	801a      	strh	r2, [r3, #0]
		 ME_param1 =  strobe_delay;
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <Emergency_Mode_State_Update+0x114>)
 8000f88:	881a      	ldrh	r2, [r3, #0]
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <Emergency_Mode_State_Update+0x130>)
 8000f8c:	801a      	strh	r2, [r3, #0]
		 if(strcmp(Custom_Morse_Msg, "000") == 0){
 8000f8e:	491f      	ldr	r1, [pc, #124]	; (800100c <Emergency_Mode_State_Update+0x134>)
 8000f90:	481f      	ldr	r0, [pc, #124]	; (8001010 <Emergency_Mode_State_Update+0x138>)
 8000f92:	f7ff f925 	bl	80001e0 <strcmp>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d107      	bne.n	8000fac <Emergency_Mode_State_Update+0xd4>
	//		ME_param2 = param2 ;
			sprintf(ME_param2, "%d", param2) ;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <Emergency_Mode_State_Update+0x118>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	491c      	ldr	r1, [pc, #112]	; (8001014 <Emergency_Mode_State_Update+0x13c>)
 8000fa4:	481c      	ldr	r0, [pc, #112]	; (8001018 <Emergency_Mode_State_Update+0x140>)
 8000fa6:	f007 fb49 	bl	800863c <siprintf>
			ME_param2[1] = Custom_Morse_Msg[1] ;
			ME_param2[2] = Custom_Morse_Msg[2] ;
		}


}
 8000faa:	e00b      	b.n	8000fc4 <Emergency_Mode_State_Update+0xec>
			ME_param2[0] = Custom_Morse_Msg[0];
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <Emergency_Mode_State_Update+0x138>)
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <Emergency_Mode_State_Update+0x140>)
 8000fb2:	701a      	strb	r2, [r3, #0]
			ME_param2[1] = Custom_Morse_Msg[1] ;
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <Emergency_Mode_State_Update+0x138>)
 8000fb6:	785a      	ldrb	r2, [r3, #1]
 8000fb8:	4b17      	ldr	r3, [pc, #92]	; (8001018 <Emergency_Mode_State_Update+0x140>)
 8000fba:	705a      	strb	r2, [r3, #1]
			ME_param2[2] = Custom_Morse_Msg[2] ;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <Emergency_Mode_State_Update+0x138>)
 8000fbe:	789a      	ldrb	r2, [r3, #2]
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <Emergency_Mode_State_Update+0x140>)
 8000fc2:	709a      	strb	r2, [r3, #2]
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20002318 	.word	0x20002318
 8000fcc:	2000231a 	.word	0x2000231a
 8000fd0:	2000002c 	.word	0x2000002c
 8000fd4:	20002302 	.word	0x20002302
 8000fd8:	20000002 	.word	0x20000002
 8000fdc:	20002306 	.word	0x20002306
 8000fe0:	20000014 	.word	0x20000014
 8000fe4:	2000231c 	.word	0x2000231c
 8000fe8:	200002f4 	.word	0x200002f4
 8000fec:	20000012 	.word	0x20000012
 8000ff0:	2000231e 	.word	0x2000231e
 8000ff4:	20002319 	.word	0x20002319
 8000ff8:	080091b8 	.word	0x080091b8
 8000ffc:	20000268 	.word	0x20000268
 8001000:	080091c4 	.word	0x080091c4
 8001004:	20002326 	.word	0x20002326
 8001008:	20002328 	.word	0x20002328
 800100c:	080091b4 	.word	0x080091b4
 8001010:	2000004c 	.word	0x2000004c
 8001014:	080091d4 	.word	0x080091d4
 8001018:	20000054 	.word	0x20000054

0800101c <Mood_Mode_State_Update>:

void Mood_Mode_State_Update(){
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
	if(UART_state_update ==1  && set_or_ret_sys_state[3] == 'M'){
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <Mood_Mode_State_Update+0x3c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d112      	bne.n	800104e <Mood_Mode_State_Update+0x32>
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <Mood_Mode_State_Update+0x40>)
 800102a:	78db      	ldrb	r3, [r3, #3]
 800102c:	2b4d      	cmp	r3, #77	; 0x4d
 800102e:	d10e      	bne.n	800104e <Mood_Mode_State_Update+0x32>

		// set R channel intensity
		R_channel_Intensity = state ;
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <Mood_Mode_State_Update+0x44>)
 8001032:	881a      	ldrh	r2, [r3, #0]
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <Mood_Mode_State_Update+0x48>)
 8001036:	801a      	strh	r2, [r3, #0]
		// set G channel intensity
		G_channel_Intensity = param1 ;
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <Mood_Mode_State_Update+0x4c>)
 800103a:	881a      	ldrh	r2, [r3, #0]
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <Mood_Mode_State_Update+0x50>)
 800103e:	801a      	strh	r2, [r3, #0]
		// set B channel intensity
		B_channel_Intensity = param2 ;
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <Mood_Mode_State_Update+0x54>)
 8001042:	881a      	ldrh	r2, [r3, #0]
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <Mood_Mode_State_Update+0x58>)
 8001046:	801a      	strh	r2, [r3, #0]

		UART_state_update = 0;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <Mood_Mode_State_Update+0x3c>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
	}
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	20002318 	.word	0x20002318
 800105c:	2000002c 	.word	0x2000002c
 8001060:	2000231a 	.word	0x2000231a
 8001064:	20000016 	.word	0x20000016
 8001068:	2000231c 	.word	0x2000231c
 800106c:	20000018 	.word	0x20000018
 8001070:	2000231e 	.word	0x2000231e
 8001074:	2000001a 	.word	0x2000001a

08001078 <Request_return_system_state>:

void Request_return_system_state(){
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
	if(READ_SYS ==1 ){
 800107e:	4b6c      	ldr	r3, [pc, #432]	; (8001230 <Request_return_system_state+0x1b8>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b01      	cmp	r3, #1
 8001084:	f040 8348 	bne.w	8001718 <Request_return_system_state+0x6a0>
		// flash light mode
		if(set_or_ret_sys_state[3] == 'F'){
 8001088:	4b6a      	ldr	r3, [pc, #424]	; (8001234 <Request_return_system_state+0x1bc>)
 800108a:	78db      	ldrb	r3, [r3, #3]
 800108c:	2b46      	cmp	r3, #70	; 0x46
 800108e:	f040 80e9 	bne.w	8001264 <Request_return_system_state+0x1ec>
			/* here manual copy*/
			ret_state[0] = MF_state/100 + 48 ; // hundred
 8001092:	4b69      	ldr	r3, [pc, #420]	; (8001238 <Request_return_system_state+0x1c0>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	4a69      	ldr	r2, [pc, #420]	; (800123c <Request_return_system_state+0x1c4>)
 8001098:	fba2 2303 	umull	r2, r3, r2, r3
 800109c:	095b      	lsrs	r3, r3, #5
 800109e:	b29b      	uxth	r3, r3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	3330      	adds	r3, #48	; 0x30
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4b66      	ldr	r3, [pc, #408]	; (8001240 <Request_return_system_state+0x1c8>)
 80010a8:	701a      	strb	r2, [r3, #0]
			ret_state[1] = (MF_state -(MF_state/100)*100)/10 + 48 ; //tens
 80010aa:	4b63      	ldr	r3, [pc, #396]	; (8001238 <Request_return_system_state+0x1c0>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	4619      	mov	r1, r3
 80010b0:	4b61      	ldr	r3, [pc, #388]	; (8001238 <Request_return_system_state+0x1c0>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	4a61      	ldr	r2, [pc, #388]	; (800123c <Request_return_system_state+0x1c4>)
 80010b6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ba:	095b      	lsrs	r3, r3, #5
 80010bc:	b29b      	uxth	r3, r3
 80010be:	461a      	mov	r2, r3
 80010c0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80010c4:	fb02 f303 	mul.w	r3, r2, r3
 80010c8:	440b      	add	r3, r1
 80010ca:	4a5e      	ldr	r2, [pc, #376]	; (8001244 <Request_return_system_state+0x1cc>)
 80010cc:	fb82 1203 	smull	r1, r2, r2, r3
 80010d0:	1092      	asrs	r2, r2, #2
 80010d2:	17db      	asrs	r3, r3, #31
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	3330      	adds	r3, #48	; 0x30
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b58      	ldr	r3, [pc, #352]	; (8001240 <Request_return_system_state+0x1c8>)
 80010de:	705a      	strb	r2, [r3, #1]
			ret_state[2] = (MF_state - (MF_state/10)*10) + 48 ;  //units
 80010e0:	4b55      	ldr	r3, [pc, #340]	; (8001238 <Request_return_system_state+0x1c0>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b54      	ldr	r3, [pc, #336]	; (8001238 <Request_return_system_state+0x1c0>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	4957      	ldr	r1, [pc, #348]	; (8001248 <Request_return_system_state+0x1d0>)
 80010ec:	fba1 1303 	umull	r1, r3, r1, r3
 80010f0:	08db      	lsrs	r3, r3, #3
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	4619      	mov	r1, r3
 80010f8:	0149      	lsls	r1, r1, #5
 80010fa:	1ac9      	subs	r1, r1, r3
 80010fc:	0089      	lsls	r1, r1, #2
 80010fe:	1acb      	subs	r3, r1, r3
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4413      	add	r3, r2
 8001106:	b2db      	uxtb	r3, r3
 8001108:	3330      	adds	r3, #48	; 0x30
 800110a:	b2da      	uxtb	r2, r3
 800110c:	4b4c      	ldr	r3, [pc, #304]	; (8001240 <Request_return_system_state+0x1c8>)
 800110e:	709a      	strb	r2, [r3, #2]

			ret_param1[0] = MF_param1/100 + 48 ; // hundred
 8001110:	4b4e      	ldr	r3, [pc, #312]	; (800124c <Request_return_system_state+0x1d4>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	4a49      	ldr	r2, [pc, #292]	; (800123c <Request_return_system_state+0x1c4>)
 8001116:	fba2 2303 	umull	r2, r3, r2, r3
 800111a:	095b      	lsrs	r3, r3, #5
 800111c:	b29b      	uxth	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	3330      	adds	r3, #48	; 0x30
 8001122:	b2da      	uxtb	r2, r3
 8001124:	4b4a      	ldr	r3, [pc, #296]	; (8001250 <Request_return_system_state+0x1d8>)
 8001126:	701a      	strb	r2, [r3, #0]
			ret_param1[1] = (MF_param1 -(MF_param1/100)*100)/10 + 48 ; //tens
 8001128:	4b48      	ldr	r3, [pc, #288]	; (800124c <Request_return_system_state+0x1d4>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	4b47      	ldr	r3, [pc, #284]	; (800124c <Request_return_system_state+0x1d4>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	4a42      	ldr	r2, [pc, #264]	; (800123c <Request_return_system_state+0x1c4>)
 8001134:	fba2 2303 	umull	r2, r3, r2, r3
 8001138:	095b      	lsrs	r3, r3, #5
 800113a:	b29b      	uxth	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001142:	fb02 f303 	mul.w	r3, r2, r3
 8001146:	440b      	add	r3, r1
 8001148:	4a3e      	ldr	r2, [pc, #248]	; (8001244 <Request_return_system_state+0x1cc>)
 800114a:	fb82 1203 	smull	r1, r2, r2, r3
 800114e:	1092      	asrs	r2, r2, #2
 8001150:	17db      	asrs	r3, r3, #31
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	3330      	adds	r3, #48	; 0x30
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <Request_return_system_state+0x1d8>)
 800115c:	705a      	strb	r2, [r3, #1]
			ret_param1[2] = (MF_param1 - (MF_param1/10)*10) + 48 ;  //units
 800115e:	4b3b      	ldr	r3, [pc, #236]	; (800124c <Request_return_system_state+0x1d4>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	b2da      	uxtb	r2, r3
 8001164:	4b39      	ldr	r3, [pc, #228]	; (800124c <Request_return_system_state+0x1d4>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	4937      	ldr	r1, [pc, #220]	; (8001248 <Request_return_system_state+0x1d0>)
 800116a:	fba1 1303 	umull	r1, r3, r1, r3
 800116e:	08db      	lsrs	r3, r3, #3
 8001170:	b29b      	uxth	r3, r3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	4619      	mov	r1, r3
 8001176:	0149      	lsls	r1, r1, #5
 8001178:	1ac9      	subs	r1, r1, r3
 800117a:	0089      	lsls	r1, r1, #2
 800117c:	1acb      	subs	r3, r1, r3
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	b2db      	uxtb	r3, r3
 8001182:	4413      	add	r3, r2
 8001184:	b2db      	uxtb	r3, r3
 8001186:	3330      	adds	r3, #48	; 0x30
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b31      	ldr	r3, [pc, #196]	; (8001250 <Request_return_system_state+0x1d8>)
 800118c:	709a      	strb	r2, [r3, #2]

			if(custom_morse_msg_rcvd == 1){
 800118e:	4b31      	ldr	r3, [pc, #196]	; (8001254 <Request_return_system_state+0x1dc>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d10c      	bne.n	80011b0 <Request_return_system_state+0x138>
				ret_param2[0] = MF_param2[0]; // hundred
 8001196:	4b30      	ldr	r3, [pc, #192]	; (8001258 <Request_return_system_state+0x1e0>)
 8001198:	781a      	ldrb	r2, [r3, #0]
 800119a:	4b30      	ldr	r3, [pc, #192]	; (800125c <Request_return_system_state+0x1e4>)
 800119c:	701a      	strb	r2, [r3, #0]
				ret_param2[1] = MF_param2[1] ; //tens
 800119e:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <Request_return_system_state+0x1e0>)
 80011a0:	785a      	ldrb	r2, [r3, #1]
 80011a2:	4b2e      	ldr	r3, [pc, #184]	; (800125c <Request_return_system_state+0x1e4>)
 80011a4:	705a      	strb	r2, [r3, #1]
				ret_param2[2] = MF_param2[2] ; //units
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <Request_return_system_state+0x1e0>)
 80011a8:	789a      	ldrb	r2, [r3, #2]
 80011aa:	4b2c      	ldr	r3, [pc, #176]	; (800125c <Request_return_system_state+0x1e4>)
 80011ac:	709a      	strb	r2, [r3, #2]
 80011ae:	e1d7      	b.n	8001560 <Request_return_system_state+0x4e8>
			}else{
				ret_param2[0] = param2/100 + 48;  // hundred
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <Request_return_system_state+0x1e8>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	4a21      	ldr	r2, [pc, #132]	; (800123c <Request_return_system_state+0x1c4>)
 80011b6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	b29b      	uxth	r3, r3
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	3330      	adds	r3, #48	; 0x30
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	4b25      	ldr	r3, [pc, #148]	; (800125c <Request_return_system_state+0x1e4>)
 80011c6:	701a      	strb	r2, [r3, #0]
				ret_param2[1] =	(param2 -(param2/100)*100)/10 + 48 ; //tens
 80011c8:	4b25      	ldr	r3, [pc, #148]	; (8001260 <Request_return_system_state+0x1e8>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	4b24      	ldr	r3, [pc, #144]	; (8001260 <Request_return_system_state+0x1e8>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	4a1a      	ldr	r2, [pc, #104]	; (800123c <Request_return_system_state+0x1c4>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	095b      	lsrs	r3, r3, #5
 80011da:	b29b      	uxth	r3, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	440b      	add	r3, r1
 80011e8:	4a16      	ldr	r2, [pc, #88]	; (8001244 <Request_return_system_state+0x1cc>)
 80011ea:	fb82 1203 	smull	r1, r2, r2, r3
 80011ee:	1092      	asrs	r2, r2, #2
 80011f0:	17db      	asrs	r3, r3, #31
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	3330      	adds	r3, #48	; 0x30
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <Request_return_system_state+0x1e4>)
 80011fc:	705a      	strb	r2, [r3, #1]
				ret_param2[2] = (param2 - (param2/10)*10) + 48 ; //units
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <Request_return_system_state+0x1e8>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <Request_return_system_state+0x1e8>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	490f      	ldr	r1, [pc, #60]	; (8001248 <Request_return_system_state+0x1d0>)
 800120a:	fba1 1303 	umull	r1, r3, r1, r3
 800120e:	08db      	lsrs	r3, r3, #3
 8001210:	b29b      	uxth	r3, r3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	4619      	mov	r1, r3
 8001216:	0149      	lsls	r1, r1, #5
 8001218:	1ac9      	subs	r1, r1, r3
 800121a:	0089      	lsls	r1, r1, #2
 800121c:	1acb      	subs	r3, r1, r3
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	b2db      	uxtb	r3, r3
 8001222:	4413      	add	r3, r2
 8001224:	b2db      	uxtb	r3, r3
 8001226:	3330      	adds	r3, #48	; 0x30
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <Request_return_system_state+0x1e4>)
 800122c:	709a      	strb	r2, [r3, #2]
 800122e:	e197      	b.n	8001560 <Request_return_system_state+0x4e8>
 8001230:	20002320 	.word	0x20002320
 8001234:	2000002c 	.word	0x2000002c
 8001238:	20002322 	.word	0x20002322
 800123c:	51eb851f 	.word	0x51eb851f
 8001240:	20000058 	.word	0x20000058
 8001244:	66666667 	.word	0x66666667
 8001248:	cccccccd 	.word	0xcccccccd
 800124c:	20002324 	.word	0x20002324
 8001250:	2000005c 	.word	0x2000005c
 8001254:	20002319 	.word	0x20002319
 8001258:	20000050 	.word	0x20000050
 800125c:	20000060 	.word	0x20000060
 8001260:	2000231e 	.word	0x2000231e
			}


		}
		// emergency mode
		else if(set_or_ret_sys_state[3] == 'E'){
 8001264:	4b51      	ldr	r3, [pc, #324]	; (80013ac <Request_return_system_state+0x334>)
 8001266:	78db      	ldrb	r3, [r3, #3]
 8001268:	2b45      	cmp	r3, #69	; 0x45
 800126a:	f040 80b7 	bne.w	80013dc <Request_return_system_state+0x364>
			/* here manual copy*/
			ret_state[0] = ME_state/100 + 48 ; // hundred
 800126e:	4b50      	ldr	r3, [pc, #320]	; (80013b0 <Request_return_system_state+0x338>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	4a50      	ldr	r2, [pc, #320]	; (80013b4 <Request_return_system_state+0x33c>)
 8001274:	fba2 2303 	umull	r2, r3, r2, r3
 8001278:	095b      	lsrs	r3, r3, #5
 800127a:	b29b      	uxth	r3, r3
 800127c:	b2db      	uxtb	r3, r3
 800127e:	3330      	adds	r3, #48	; 0x30
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b4d      	ldr	r3, [pc, #308]	; (80013b8 <Request_return_system_state+0x340>)
 8001284:	701a      	strb	r2, [r3, #0]
			ret_state[1] = (ME_state -(ME_state/100)*100)/10 + 48 ; //tens
 8001286:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <Request_return_system_state+0x338>)
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	4619      	mov	r1, r3
 800128c:	4b48      	ldr	r3, [pc, #288]	; (80013b0 <Request_return_system_state+0x338>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	4a48      	ldr	r2, [pc, #288]	; (80013b4 <Request_return_system_state+0x33c>)
 8001292:	fba2 2303 	umull	r2, r3, r2, r3
 8001296:	095b      	lsrs	r3, r3, #5
 8001298:	b29b      	uxth	r3, r3
 800129a:	461a      	mov	r2, r3
 800129c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80012a0:	fb02 f303 	mul.w	r3, r2, r3
 80012a4:	440b      	add	r3, r1
 80012a6:	4a45      	ldr	r2, [pc, #276]	; (80013bc <Request_return_system_state+0x344>)
 80012a8:	fb82 1203 	smull	r1, r2, r2, r3
 80012ac:	1092      	asrs	r2, r2, #2
 80012ae:	17db      	asrs	r3, r3, #31
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	3330      	adds	r3, #48	; 0x30
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b3f      	ldr	r3, [pc, #252]	; (80013b8 <Request_return_system_state+0x340>)
 80012ba:	705a      	strb	r2, [r3, #1]
			ret_state[2] = (ME_state - (ME_state/10)*10) + 48 ;  //units
 80012bc:	4b3c      	ldr	r3, [pc, #240]	; (80013b0 <Request_return_system_state+0x338>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b3b      	ldr	r3, [pc, #236]	; (80013b0 <Request_return_system_state+0x338>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	493e      	ldr	r1, [pc, #248]	; (80013c0 <Request_return_system_state+0x348>)
 80012c8:	fba1 1303 	umull	r1, r3, r1, r3
 80012cc:	08db      	lsrs	r3, r3, #3
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4619      	mov	r1, r3
 80012d4:	0149      	lsls	r1, r1, #5
 80012d6:	1ac9      	subs	r1, r1, r3
 80012d8:	0089      	lsls	r1, r1, #2
 80012da:	1acb      	subs	r3, r1, r3
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4413      	add	r3, r2
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	3330      	adds	r3, #48	; 0x30
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b33      	ldr	r3, [pc, #204]	; (80013b8 <Request_return_system_state+0x340>)
 80012ea:	709a      	strb	r2, [r3, #2]

			ret_param1[0] = ME_param1/100 + 48 ; // hundred
 80012ec:	4b35      	ldr	r3, [pc, #212]	; (80013c4 <Request_return_system_state+0x34c>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	4a30      	ldr	r2, [pc, #192]	; (80013b4 <Request_return_system_state+0x33c>)
 80012f2:	fba2 2303 	umull	r2, r3, r2, r3
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	3330      	adds	r3, #48	; 0x30
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <Request_return_system_state+0x350>)
 8001302:	701a      	strb	r2, [r3, #0]
			ret_param1[1] = (ME_param1 -(ME_param1/100)*100)/10 + 48 ; //tens
 8001304:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <Request_return_system_state+0x34c>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <Request_return_system_state+0x34c>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	4a29      	ldr	r2, [pc, #164]	; (80013b4 <Request_return_system_state+0x33c>)
 8001310:	fba2 2303 	umull	r2, r3, r2, r3
 8001314:	095b      	lsrs	r3, r3, #5
 8001316:	b29b      	uxth	r3, r3
 8001318:	461a      	mov	r2, r3
 800131a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800131e:	fb02 f303 	mul.w	r3, r2, r3
 8001322:	440b      	add	r3, r1
 8001324:	4a25      	ldr	r2, [pc, #148]	; (80013bc <Request_return_system_state+0x344>)
 8001326:	fb82 1203 	smull	r1, r2, r2, r3
 800132a:	1092      	asrs	r2, r2, #2
 800132c:	17db      	asrs	r3, r3, #31
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	3330      	adds	r3, #48	; 0x30
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <Request_return_system_state+0x350>)
 8001338:	705a      	strb	r2, [r3, #1]
			ret_param1[2] = (ME_param1 - (ME_param1/10)*10) + 48 ;  //units
 800133a:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <Request_return_system_state+0x34c>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <Request_return_system_state+0x34c>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	491e      	ldr	r1, [pc, #120]	; (80013c0 <Request_return_system_state+0x348>)
 8001346:	fba1 1303 	umull	r1, r3, r1, r3
 800134a:	08db      	lsrs	r3, r3, #3
 800134c:	b29b      	uxth	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	4619      	mov	r1, r3
 8001352:	0149      	lsls	r1, r1, #5
 8001354:	1ac9      	subs	r1, r1, r3
 8001356:	0089      	lsls	r1, r1, #2
 8001358:	1acb      	subs	r3, r1, r3
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	b2db      	uxtb	r3, r3
 800135e:	4413      	add	r3, r2
 8001360:	b2db      	uxtb	r3, r3
 8001362:	3330      	adds	r3, #48	; 0x30
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <Request_return_system_state+0x350>)
 8001368:	709a      	strb	r2, [r3, #2]

			// check whether param2 was 0 OR CUSTOM morse message recvd
			if(strcmp(Custom_Morse_Msg, "000") == 0){
 800136a:	4918      	ldr	r1, [pc, #96]	; (80013cc <Request_return_system_state+0x354>)
 800136c:	4818      	ldr	r0, [pc, #96]	; (80013d0 <Request_return_system_state+0x358>)
 800136e:	f7fe ff37 	bl	80001e0 <strcmp>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d10c      	bne.n	8001392 <Request_return_system_state+0x31a>

//				strcpy(ret_param2, ME_param2) ;
				ret_param2[0] = ME_param2[0];
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <Request_return_system_state+0x35c>)
 800137a:	781a      	ldrb	r2, [r3, #0]
 800137c:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <Request_return_system_state+0x360>)
 800137e:	701a      	strb	r2, [r3, #0]
				ret_param2[1] = ME_param2[1] ;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <Request_return_system_state+0x35c>)
 8001382:	785a      	ldrb	r2, [r3, #1]
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <Request_return_system_state+0x360>)
 8001386:	705a      	strb	r2, [r3, #1]
				ret_param2[2] = ME_param2[2] ;
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <Request_return_system_state+0x35c>)
 800138a:	789a      	ldrb	r2, [r3, #2]
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <Request_return_system_state+0x360>)
 800138e:	709a      	strb	r2, [r3, #2]
 8001390:	e0e6      	b.n	8001560 <Request_return_system_state+0x4e8>

			}else{
				ret_param2[0] = Custom_Morse_Msg[0];
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <Request_return_system_state+0x358>)
 8001394:	781a      	ldrb	r2, [r3, #0]
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <Request_return_system_state+0x360>)
 8001398:	701a      	strb	r2, [r3, #0]
				ret_param2[1] = Custom_Morse_Msg[1] ;
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <Request_return_system_state+0x358>)
 800139c:	785a      	ldrb	r2, [r3, #1]
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <Request_return_system_state+0x360>)
 80013a0:	705a      	strb	r2, [r3, #1]
				ret_param2[2] = Custom_Morse_Msg[2] ;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <Request_return_system_state+0x358>)
 80013a4:	789a      	ldrb	r2, [r3, #2]
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <Request_return_system_state+0x360>)
 80013a8:	709a      	strb	r2, [r3, #2]
 80013aa:	e0d9      	b.n	8001560 <Request_return_system_state+0x4e8>
 80013ac:	2000002c 	.word	0x2000002c
 80013b0:	20002326 	.word	0x20002326
 80013b4:	51eb851f 	.word	0x51eb851f
 80013b8:	20000058 	.word	0x20000058
 80013bc:	66666667 	.word	0x66666667
 80013c0:	cccccccd 	.word	0xcccccccd
 80013c4:	20002328 	.word	0x20002328
 80013c8:	2000005c 	.word	0x2000005c
 80013cc:	080091b4 	.word	0x080091b4
 80013d0:	2000004c 	.word	0x2000004c
 80013d4:	20000054 	.word	0x20000054
 80013d8:	20000060 	.word	0x20000060
			}

		}
		// mood mode
		else{
			if(set_or_ret_sys_state[3] == 'M'){
 80013dc:	4baa      	ldr	r3, [pc, #680]	; (8001688 <Request_return_system_state+0x610>)
 80013de:	78db      	ldrb	r3, [r3, #3]
 80013e0:	2b4d      	cmp	r3, #77	; 0x4d
 80013e2:	f040 80bd 	bne.w	8001560 <Request_return_system_state+0x4e8>
				/* here manual copy*/
				ret_state[0] = MM_state/100 + 48 ; // hundred
 80013e6:	4ba9      	ldr	r3, [pc, #676]	; (800168c <Request_return_system_state+0x614>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	4aa9      	ldr	r2, [pc, #676]	; (8001690 <Request_return_system_state+0x618>)
 80013ec:	fba2 2303 	umull	r2, r3, r2, r3
 80013f0:	095b      	lsrs	r3, r3, #5
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	3330      	adds	r3, #48	; 0x30
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4ba6      	ldr	r3, [pc, #664]	; (8001694 <Request_return_system_state+0x61c>)
 80013fc:	701a      	strb	r2, [r3, #0]
				ret_state[1] = (MM_state -(MM_state/100)*100)/10 + 48 ; //tens
 80013fe:	4ba3      	ldr	r3, [pc, #652]	; (800168c <Request_return_system_state+0x614>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	4619      	mov	r1, r3
 8001404:	4ba1      	ldr	r3, [pc, #644]	; (800168c <Request_return_system_state+0x614>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	4aa1      	ldr	r2, [pc, #644]	; (8001690 <Request_return_system_state+0x618>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	b29b      	uxth	r3, r3
 8001412:	461a      	mov	r2, r3
 8001414:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001418:	fb02 f303 	mul.w	r3, r2, r3
 800141c:	440b      	add	r3, r1
 800141e:	4a9e      	ldr	r2, [pc, #632]	; (8001698 <Request_return_system_state+0x620>)
 8001420:	fb82 1203 	smull	r1, r2, r2, r3
 8001424:	1092      	asrs	r2, r2, #2
 8001426:	17db      	asrs	r3, r3, #31
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	b2db      	uxtb	r3, r3
 800142c:	3330      	adds	r3, #48	; 0x30
 800142e:	b2da      	uxtb	r2, r3
 8001430:	4b98      	ldr	r3, [pc, #608]	; (8001694 <Request_return_system_state+0x61c>)
 8001432:	705a      	strb	r2, [r3, #1]
				ret_state[2] = (MM_state - (MM_state/10)*10) + 48 ;  //units
 8001434:	4b95      	ldr	r3, [pc, #596]	; (800168c <Request_return_system_state+0x614>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4b94      	ldr	r3, [pc, #592]	; (800168c <Request_return_system_state+0x614>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	4997      	ldr	r1, [pc, #604]	; (800169c <Request_return_system_state+0x624>)
 8001440:	fba1 1303 	umull	r1, r3, r1, r3
 8001444:	08db      	lsrs	r3, r3, #3
 8001446:	b29b      	uxth	r3, r3
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4619      	mov	r1, r3
 800144c:	0149      	lsls	r1, r1, #5
 800144e:	1ac9      	subs	r1, r1, r3
 8001450:	0089      	lsls	r1, r1, #2
 8001452:	1acb      	subs	r3, r1, r3
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4413      	add	r3, r2
 800145a:	b2db      	uxtb	r3, r3
 800145c:	3330      	adds	r3, #48	; 0x30
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b8c      	ldr	r3, [pc, #560]	; (8001694 <Request_return_system_state+0x61c>)
 8001462:	709a      	strb	r2, [r3, #2]

				ret_param1[0] = MM_param1/100 + 48 ; // hundred
 8001464:	4b8e      	ldr	r3, [pc, #568]	; (80016a0 <Request_return_system_state+0x628>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	4a89      	ldr	r2, [pc, #548]	; (8001690 <Request_return_system_state+0x618>)
 800146a:	fba2 2303 	umull	r2, r3, r2, r3
 800146e:	095b      	lsrs	r3, r3, #5
 8001470:	b29b      	uxth	r3, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	3330      	adds	r3, #48	; 0x30
 8001476:	b2da      	uxtb	r2, r3
 8001478:	4b8a      	ldr	r3, [pc, #552]	; (80016a4 <Request_return_system_state+0x62c>)
 800147a:	701a      	strb	r2, [r3, #0]
				ret_param1[1] = (MM_param1 -(MM_param1/100)*100)/10 + 48 ; //tens
 800147c:	4b88      	ldr	r3, [pc, #544]	; (80016a0 <Request_return_system_state+0x628>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	4b87      	ldr	r3, [pc, #540]	; (80016a0 <Request_return_system_state+0x628>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	4a82      	ldr	r2, [pc, #520]	; (8001690 <Request_return_system_state+0x618>)
 8001488:	fba2 2303 	umull	r2, r3, r2, r3
 800148c:	095b      	lsrs	r3, r3, #5
 800148e:	b29b      	uxth	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001496:	fb02 f303 	mul.w	r3, r2, r3
 800149a:	440b      	add	r3, r1
 800149c:	4a7e      	ldr	r2, [pc, #504]	; (8001698 <Request_return_system_state+0x620>)
 800149e:	fb82 1203 	smull	r1, r2, r2, r3
 80014a2:	1092      	asrs	r2, r2, #2
 80014a4:	17db      	asrs	r3, r3, #31
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	3330      	adds	r3, #48	; 0x30
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4b7d      	ldr	r3, [pc, #500]	; (80016a4 <Request_return_system_state+0x62c>)
 80014b0:	705a      	strb	r2, [r3, #1]
				ret_param1[2] = (MM_param1 - (MM_param1/10)*10) + 48 ;  //units
 80014b2:	4b7b      	ldr	r3, [pc, #492]	; (80016a0 <Request_return_system_state+0x628>)
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	4b79      	ldr	r3, [pc, #484]	; (80016a0 <Request_return_system_state+0x628>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	4977      	ldr	r1, [pc, #476]	; (800169c <Request_return_system_state+0x624>)
 80014be:	fba1 1303 	umull	r1, r3, r1, r3
 80014c2:	08db      	lsrs	r3, r3, #3
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	4619      	mov	r1, r3
 80014ca:	0149      	lsls	r1, r1, #5
 80014cc:	1ac9      	subs	r1, r1, r3
 80014ce:	0089      	lsls	r1, r1, #2
 80014d0:	1acb      	subs	r3, r1, r3
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4413      	add	r3, r2
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	3330      	adds	r3, #48	; 0x30
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4b71      	ldr	r3, [pc, #452]	; (80016a4 <Request_return_system_state+0x62c>)
 80014e0:	709a      	strb	r2, [r3, #2]

				ret_param2[0] = MM_param2/100 + 48 ; // hundred
 80014e2:	4b71      	ldr	r3, [pc, #452]	; (80016a8 <Request_return_system_state+0x630>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	4a6a      	ldr	r2, [pc, #424]	; (8001690 <Request_return_system_state+0x618>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	095b      	lsrs	r3, r3, #5
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	3330      	adds	r3, #48	; 0x30
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b6d      	ldr	r3, [pc, #436]	; (80016ac <Request_return_system_state+0x634>)
 80014f8:	701a      	strb	r2, [r3, #0]
				ret_param2[1] = (MM_param2 -(MM_param2/100)*100)/10 + 48 ; //tens
 80014fa:	4b6b      	ldr	r3, [pc, #428]	; (80016a8 <Request_return_system_state+0x630>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	4619      	mov	r1, r3
 8001500:	4b69      	ldr	r3, [pc, #420]	; (80016a8 <Request_return_system_state+0x630>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	4a62      	ldr	r2, [pc, #392]	; (8001690 <Request_return_system_state+0x618>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	b29b      	uxth	r3, r3
 800150e:	461a      	mov	r2, r3
 8001510:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001514:	fb02 f303 	mul.w	r3, r2, r3
 8001518:	440b      	add	r3, r1
 800151a:	4a5f      	ldr	r2, [pc, #380]	; (8001698 <Request_return_system_state+0x620>)
 800151c:	fb82 1203 	smull	r1, r2, r2, r3
 8001520:	1092      	asrs	r2, r2, #2
 8001522:	17db      	asrs	r3, r3, #31
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	3330      	adds	r3, #48	; 0x30
 800152a:	b2da      	uxtb	r2, r3
 800152c:	4b5f      	ldr	r3, [pc, #380]	; (80016ac <Request_return_system_state+0x634>)
 800152e:	705a      	strb	r2, [r3, #1]
				ret_param2[2] = (MM_param2 - (MM_param2/10)*10) + 48 ;  //units
 8001530:	4b5d      	ldr	r3, [pc, #372]	; (80016a8 <Request_return_system_state+0x630>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4b5c      	ldr	r3, [pc, #368]	; (80016a8 <Request_return_system_state+0x630>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	4958      	ldr	r1, [pc, #352]	; (800169c <Request_return_system_state+0x624>)
 800153c:	fba1 1303 	umull	r1, r3, r1, r3
 8001540:	08db      	lsrs	r3, r3, #3
 8001542:	b29b      	uxth	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4619      	mov	r1, r3
 8001548:	0149      	lsls	r1, r1, #5
 800154a:	1ac9      	subs	r1, r1, r3
 800154c:	0089      	lsls	r1, r1, #2
 800154e:	1acb      	subs	r3, r1, r3
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	4413      	add	r3, r2
 8001556:	b2db      	uxtb	r3, r3
 8001558:	3330      	adds	r3, #48	; 0x30
 800155a:	b2da      	uxtb	r2, r3
 800155c:	4b53      	ldr	r3, [pc, #332]	; (80016ac <Request_return_system_state+0x634>)
 800155e:	709a      	strb	r2, [r3, #2]

			}
		}

		// construct message to return
		for(int i = 0; i<19  ; i++){
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	e0cc      	b.n	8001700 <Request_return_system_state+0x688>
			switch(i){
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b12      	cmp	r3, #18
 800156a:	f200 80c5 	bhi.w	80016f8 <Request_return_system_state+0x680>
 800156e:	a201      	add	r2, pc, #4	; (adr r2, 8001574 <Request_return_system_state+0x4fc>)
 8001570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001574:	080015c1 	.word	0x080015c1
 8001578:	080015cd 	.word	0x080015cd
 800157c:	080015d9 	.word	0x080015d9
 8001580:	080015e5 	.word	0x080015e5
 8001584:	080015f5 	.word	0x080015f5
 8001588:	08001601 	.word	0x08001601
 800158c:	08001611 	.word	0x08001611
 8001590:	08001621 	.word	0x08001621
 8001594:	08001631 	.word	0x08001631
 8001598:	0800163d 	.word	0x0800163d
 800159c:	0800164d 	.word	0x0800164d
 80015a0:	0800165d 	.word	0x0800165d
 80015a4:	0800166d 	.word	0x0800166d
 80015a8:	08001679 	.word	0x08001679
 80015ac:	080016b5 	.word	0x080016b5
 80015b0:	080016c5 	.word	0x080016c5
 80015b4:	080016d5 	.word	0x080016d5
 80015b8:	080016e1 	.word	0x080016e1
 80015bc:	080016ed 	.word	0x080016ed
			case 0:
				value[i] ='#';
 80015c0:	4a3b      	ldr	r2, [pc, #236]	; (80016b0 <Request_return_system_state+0x638>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	2223      	movs	r2, #35	; 0x23
 80015c8:	701a      	strb	r2, [r3, #0]

				break ;
 80015ca:	e096      	b.n	80016fa <Request_return_system_state+0x682>
			case 1:
				value[i] = ':' ;
 80015cc:	4a38      	ldr	r2, [pc, #224]	; (80016b0 <Request_return_system_state+0x638>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	223a      	movs	r2, #58	; 0x3a
 80015d4:	701a      	strb	r2, [r3, #0]

				break ;
 80015d6:	e090      	b.n	80016fa <Request_return_system_state+0x682>
			case 2:
				value[i] = 'M';
 80015d8:	4a35      	ldr	r2, [pc, #212]	; (80016b0 <Request_return_system_state+0x638>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	224d      	movs	r2, #77	; 0x4d
 80015e0:	701a      	strb	r2, [r3, #0]

			break ;
 80015e2:	e08a      	b.n	80016fa <Request_return_system_state+0x682>

			case 3:
				value[i] = set_or_ret_sys_state[3];
 80015e4:	4b28      	ldr	r3, [pc, #160]	; (8001688 <Request_return_system_state+0x610>)
 80015e6:	78d9      	ldrb	r1, [r3, #3]
 80015e8:	4a31      	ldr	r2, [pc, #196]	; (80016b0 <Request_return_system_state+0x638>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	460a      	mov	r2, r1
 80015f0:	701a      	strb	r2, [r3, #0]

				break ;
 80015f2:	e082      	b.n	80016fa <Request_return_system_state+0x682>
			case 4:
				value[i] = ':';
 80015f4:	4a2e      	ldr	r2, [pc, #184]	; (80016b0 <Request_return_system_state+0x638>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	223a      	movs	r2, #58	; 0x3a
 80015fc:	701a      	strb	r2, [r3, #0]

				break ;
 80015fe:	e07c      	b.n	80016fa <Request_return_system_state+0x682>
			case 5:
				value[i] = ret_state[0];
 8001600:	4b24      	ldr	r3, [pc, #144]	; (8001694 <Request_return_system_state+0x61c>)
 8001602:	7819      	ldrb	r1, [r3, #0]
 8001604:	4a2a      	ldr	r2, [pc, #168]	; (80016b0 <Request_return_system_state+0x638>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	460a      	mov	r2, r1
 800160c:	701a      	strb	r2, [r3, #0]

			break ;
 800160e:	e074      	b.n	80016fa <Request_return_system_state+0x682>

			case 6:
				value[i] = ret_state[1];
 8001610:	4b20      	ldr	r3, [pc, #128]	; (8001694 <Request_return_system_state+0x61c>)
 8001612:	7859      	ldrb	r1, [r3, #1]
 8001614:	4a26      	ldr	r2, [pc, #152]	; (80016b0 <Request_return_system_state+0x638>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	460a      	mov	r2, r1
 800161c:	701a      	strb	r2, [r3, #0]

				break ;
 800161e:	e06c      	b.n	80016fa <Request_return_system_state+0x682>
			case 7:
				value[i] = ret_state[2];
 8001620:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <Request_return_system_state+0x61c>)
 8001622:	7899      	ldrb	r1, [r3, #2]
 8001624:	4a22      	ldr	r2, [pc, #136]	; (80016b0 <Request_return_system_state+0x638>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	460a      	mov	r2, r1
 800162c:	701a      	strb	r2, [r3, #0]

				break ;
 800162e:	e064      	b.n	80016fa <Request_return_system_state+0x682>
			case 8:
				value[i] =  ':';
 8001630:	4a1f      	ldr	r2, [pc, #124]	; (80016b0 <Request_return_system_state+0x638>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	223a      	movs	r2, #58	; 0x3a
 8001638:	701a      	strb	r2, [r3, #0]

			break ;
 800163a:	e05e      	b.n	80016fa <Request_return_system_state+0x682>

			case 9:
				value[i] = ret_param1[0];
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <Request_return_system_state+0x62c>)
 800163e:	7819      	ldrb	r1, [r3, #0]
 8001640:	4a1b      	ldr	r2, [pc, #108]	; (80016b0 <Request_return_system_state+0x638>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	460a      	mov	r2, r1
 8001648:	701a      	strb	r2, [r3, #0]

				break ;
 800164a:	e056      	b.n	80016fa <Request_return_system_state+0x682>
			case 10:
				value[i] = ret_param1[1];
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <Request_return_system_state+0x62c>)
 800164e:	7859      	ldrb	r1, [r3, #1]
 8001650:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <Request_return_system_state+0x638>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	460a      	mov	r2, r1
 8001658:	701a      	strb	r2, [r3, #0]

				break ;
 800165a:	e04e      	b.n	80016fa <Request_return_system_state+0x682>
			case 11:
				value[i] = ret_param1[2];
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <Request_return_system_state+0x62c>)
 800165e:	7899      	ldrb	r1, [r3, #2]
 8001660:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <Request_return_system_state+0x638>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	460a      	mov	r2, r1
 8001668:	701a      	strb	r2, [r3, #0]

			break ;
 800166a:	e046      	b.n	80016fa <Request_return_system_state+0x682>

			case 12:
				value[i] = ':';
 800166c:	4a10      	ldr	r2, [pc, #64]	; (80016b0 <Request_return_system_state+0x638>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	223a      	movs	r2, #58	; 0x3a
 8001674:	701a      	strb	r2, [r3, #0]

				break ;
 8001676:	e040      	b.n	80016fa <Request_return_system_state+0x682>
			case 13:
				value[i] = ret_param2[0];
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <Request_return_system_state+0x634>)
 800167a:	7819      	ldrb	r1, [r3, #0]
 800167c:	4a0c      	ldr	r2, [pc, #48]	; (80016b0 <Request_return_system_state+0x638>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	460a      	mov	r2, r1
 8001684:	701a      	strb	r2, [r3, #0]

				break ;
 8001686:	e038      	b.n	80016fa <Request_return_system_state+0x682>
 8001688:	2000002c 	.word	0x2000002c
 800168c:	2000232a 	.word	0x2000232a
 8001690:	51eb851f 	.word	0x51eb851f
 8001694:	20000058 	.word	0x20000058
 8001698:	66666667 	.word	0x66666667
 800169c:	cccccccd 	.word	0xcccccccd
 80016a0:	2000232c 	.word	0x2000232c
 80016a4:	2000005c 	.word	0x2000005c
 80016a8:	2000232e 	.word	0x2000232e
 80016ac:	20000060 	.word	0x20000060
 80016b0:	20002330 	.word	0x20002330
			case 14:
				value[i] = ret_param2[1];
 80016b4:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <Request_return_system_state+0x6a8>)
 80016b6:	7859      	ldrb	r1, [r3, #1]
 80016b8:	4a1a      	ldr	r2, [pc, #104]	; (8001724 <Request_return_system_state+0x6ac>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	460a      	mov	r2, r1
 80016c0:	701a      	strb	r2, [r3, #0]

				break ;
 80016c2:	e01a      	b.n	80016fa <Request_return_system_state+0x682>

			case 15:
				value[i] = ret_param2[2];
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <Request_return_system_state+0x6a8>)
 80016c6:	7899      	ldrb	r1, [r3, #2]
 80016c8:	4a16      	ldr	r2, [pc, #88]	; (8001724 <Request_return_system_state+0x6ac>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	460a      	mov	r2, r1
 80016d0:	701a      	strb	r2, [r3, #0]

				break ;
 80016d2:	e012      	b.n	80016fa <Request_return_system_state+0x682>
			case 16:
				value[i] = ':';
 80016d4:	4a13      	ldr	r2, [pc, #76]	; (8001724 <Request_return_system_state+0x6ac>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	223a      	movs	r2, #58	; 0x3a
 80016dc:	701a      	strb	r2, [r3, #0]

					break ;
 80016de:	e00c      	b.n	80016fa <Request_return_system_state+0x682>
			case 17:
				value[i] = '$';
 80016e0:	4a10      	ldr	r2, [pc, #64]	; (8001724 <Request_return_system_state+0x6ac>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	2224      	movs	r2, #36	; 0x24
 80016e8:	701a      	strb	r2, [r3, #0]

				break ;
 80016ea:	e006      	b.n	80016fa <Request_return_system_state+0x682>
			case 18:
				value[i] = '\n' ;
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <Request_return_system_state+0x6ac>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	220a      	movs	r2, #10
 80016f4:	701a      	strb	r2, [r3, #0]
				break;
 80016f6:	e000      	b.n	80016fa <Request_return_system_state+0x682>

			default:
				break;
 80016f8:	bf00      	nop
		for(int i = 0; i<19  ; i++){
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3301      	adds	r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b12      	cmp	r3, #18
 8001704:	f77f af2f 	ble.w	8001566 <Request_return_system_state+0x4ee>

			}
		}

		HAL_UART_Transmit_IT(&huart2, (uint8_t*)value, 19) ;
 8001708:	2213      	movs	r2, #19
 800170a:	4906      	ldr	r1, [pc, #24]	; (8001724 <Request_return_system_state+0x6ac>)
 800170c:	4806      	ldr	r0, [pc, #24]	; (8001728 <Request_return_system_state+0x6b0>)
 800170e:	f005 fc59 	bl	8006fc4 <HAL_UART_Transmit_IT>



		READ_SYS = 0 ;
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <Request_return_system_state+0x6b4>)
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
	}
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000060 	.word	0x20000060
 8001724:	20002330 	.word	0x20002330
 8001728:	20000268 	.word	0x20000268
 800172c:	20002320 	.word	0x20002320

08001730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001734:	f001 f858 	bl	80027e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001738:	f000 f96a 	bl	8001a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800173c:	f000 fc02 	bl	8001f44 <MX_GPIO_Init>
  MX_DMA_Init();
 8001740:	f000 fbe2 	bl	8001f08 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001744:	f000 fbae 	bl	8001ea4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001748:	f000 f9ca 	bl	8001ae0 <MX_ADC1_Init>
  MX_TIM2_Init();
 800174c:	f000 fa38 	bl	8001bc0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001750:	f000 fab8 	bl	8001cc4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001754:	f000 fb2e 	bl	8001db4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(200);
 8001758:	20c8      	movs	r0, #200	; 0xc8
 800175a:	f001 f8ab 	bl	80028b4 <HAL_Delay>
  HAL_UART_Transmit(&huart2, studentNum, 13, 150); //transmit student number
 800175e:	2396      	movs	r3, #150	; 0x96
 8001760:	220d      	movs	r2, #13
 8001762:	4987      	ldr	r1, [pc, #540]	; (8001980 <main+0x250>)
 8001764:	4887      	ldr	r0, [pc, #540]	; (8001984 <main+0x254>)
 8001766:	f005 fba3 	bl	8006eb0 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)recvd_char, 1);
 800176a:	2201      	movs	r2, #1
 800176c:	4986      	ldr	r1, [pc, #536]	; (8001988 <main+0x258>)
 800176e:	4885      	ldr	r0, [pc, #532]	; (8001984 <main+0x254>)
 8001770:	f005 fc86 	bl	8007080 <HAL_UART_Receive_IT>

  //Startup ADC
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, adc_buf_len) ;
 8001774:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001778:	4984      	ldr	r1, [pc, #528]	; (800198c <main+0x25c>)
 800177a:	4885      	ldr	r0, [pc, #532]	; (8001990 <main+0x260>)
 800177c:	f001 facc 	bl	8002d18 <HAL_ADC_Start_DMA>

  // TIM2_CH1 start PWM
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1) ;
 8001780:	2100      	movs	r1, #0
 8001782:	4884      	ldr	r0, [pc, #528]	; (8001994 <main+0x264>)
 8001784:	f004 fb6c 	bl	8005e60 <HAL_TIM_PWM_Start>
  // TIM2_CH4 start PWM - red LED
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) ;
 8001788:	210c      	movs	r1, #12
 800178a:	4882      	ldr	r0, [pc, #520]	; (8001994 <main+0x264>)
 800178c:	f004 fb68 	bl	8005e60 <HAL_TIM_PWM_Start>
  // TIM3_CH4 start PWM - GREEN LED
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001790:	210c      	movs	r1, #12
 8001792:	4881      	ldr	r0, [pc, #516]	; (8001998 <main+0x268>)
 8001794:	f004 fb64 	bl	8005e60 <HAL_TIM_PWM_Start>
  // TIM4_CH1 start PWM - BLUE LED
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) ;
 8001798:	2100      	movs	r1, #0
 800179a:	4880      	ldr	r0, [pc, #512]	; (800199c <main+0x26c>)
 800179c:	f004 fb60 	bl	8005e60 <HAL_TIM_PWM_Start>

  strobe_ticks  = HAL_GetTick() ;
 80017a0:	f001 f87c 	bl	800289c <HAL_GetTick>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4a7e      	ldr	r2, [pc, #504]	; (80019a0 <main+0x270>)
 80017a8:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // left button press to update system state (MF -> ME -> MM)
	  system_state_update() ;
 80017aa:	f7ff f961 	bl	8000a70 <system_state_update>
	  //run adc and capture previous snapshot of ADC value and adc movement processing
	  adc_dma_val_processing();
 80017ae:	f7ff f8cf 	bl	8000950 <adc_dma_val_processing>
	  // Turn LED ON/OFF
	  TURN_LED_ON_OFF() ;
 80017b2:	f7ff fa37 	bl	8000c24 <TURN_LED_ON_OFF>
	  // read UART params
	  convert_UART_state_params_to_Int() ;
 80017b6:	f7ff fad3 	bl	8000d60 <convert_UART_state_params_to_Int>
	  // REAS sys state
	  Request_return_system_state() ;
 80017ba:	f7ff fc5d 	bl	8001078 <Request_return_system_state>

	 // system state
	 if(button_count == 0 || start_up == 1 ){
 80017be:	4b79      	ldr	r3, [pc, #484]	; (80019a4 <main+0x274>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <main+0x9e>
 80017c6:	4b78      	ldr	r3, [pc, #480]	; (80019a8 <main+0x278>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d15d      	bne.n	800188a <main+0x15a>

		 start_up = 0 ; //for default MF state
 80017ce:	4b76      	ldr	r3, [pc, #472]	; (80019a8 <main+0x278>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]

		 MF_mode_LED() ; // sets the corresponding mode LED
 80017d4:	f000 fc5a 	bl	800208c <MF_mode_LED>
		 em_count=0;     // reset the emergency mode count
 80017d8:	4b74      	ldr	r3, [pc, #464]	; (80019ac <main+0x27c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
		 em_default = 1; // to re-enter the EM state
 80017de:	4b74      	ldr	r3, [pc, #464]	; (80019b0 <main+0x280>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]

		if(LED_ON == 1){
 80017e4:	4b73      	ldr	r3, [pc, #460]	; (80019b4 <main+0x284>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	f040 8092 	bne.w	8001912 <main+0x1e2>
			 // if LED_ON and SLIDER MOVED -> updated LED intensity
			if(update_led_via_ADC == 1 && UART_state_update == 0){
 80017ee:	4b72      	ldr	r3, [pc, #456]	; (80019b8 <main+0x288>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d111      	bne.n	800181a <main+0xea>
 80017f6:	4b71      	ldr	r3, [pc, #452]	; (80019bc <main+0x28c>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10d      	bne.n	800181a <main+0xea>

				htim2.Instance->CCR1 =  LED_intensity ; // vary the duty cycle of the LED [1:512]
 80017fe:	4b70      	ldr	r3, [pc, #448]	; (80019c0 <main+0x290>)
 8001800:	881a      	ldrh	r2, [r3, #0]
 8001802:	4b64      	ldr	r3, [pc, #400]	; (8001994 <main+0x264>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	635a      	str	r2, [r3, #52]	; 0x34
				MF_state = LED_intensity ;
 8001808:	4b6d      	ldr	r3, [pc, #436]	; (80019c0 <main+0x290>)
 800180a:	881a      	ldrh	r2, [r3, #0]
 800180c:	4b6d      	ldr	r3, [pc, #436]	; (80019c4 <main+0x294>)
 800180e:	801a      	strh	r2, [r3, #0]
				MF_param1 = param1  ;
 8001810:	4b6d      	ldr	r3, [pc, #436]	; (80019c8 <main+0x298>)
 8001812:	881a      	ldrh	r2, [r3, #0]
 8001814:	4b6d      	ldr	r3, [pc, #436]	; (80019cc <main+0x29c>)
 8001816:	801a      	strh	r2, [r3, #0]
		if(LED_ON == 1){
 8001818:	e07b      	b.n	8001912 <main+0x1e2>
			}
			else if(UART_state_update == 1 && state > 0 && set_or_ret_sys_state[3] =='F' ){
 800181a:	4b68      	ldr	r3, [pc, #416]	; (80019bc <main+0x28c>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d177      	bne.n	8001912 <main+0x1e2>
 8001822:	4b6b      	ldr	r3, [pc, #428]	; (80019d0 <main+0x2a0>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d073      	beq.n	8001912 <main+0x1e2>
 800182a:	4b6a      	ldr	r3, [pc, #424]	; (80019d4 <main+0x2a4>)
 800182c:	78db      	ldrb	r3, [r3, #3]
 800182e:	2b46      	cmp	r3, #70	; 0x46
 8001830:	d16f      	bne.n	8001912 <main+0x1e2>

				htim2.Instance->CCR1 = state ;
 8001832:	4b67      	ldr	r3, [pc, #412]	; (80019d0 <main+0x2a0>)
 8001834:	881a      	ldrh	r2, [r3, #0]
 8001836:	4b57      	ldr	r3, [pc, #348]	; (8001994 <main+0x264>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	635a      	str	r2, [r3, #52]	; 0x34

				MF_state = state ;  // for when sys request made
 800183c:	4b64      	ldr	r3, [pc, #400]	; (80019d0 <main+0x2a0>)
 800183e:	881a      	ldrh	r2, [r3, #0]
 8001840:	4b60      	ldr	r3, [pc, #384]	; (80019c4 <main+0x294>)
 8001842:	801a      	strh	r2, [r3, #0]
				MF_param1 = param1  ;
 8001844:	4b60      	ldr	r3, [pc, #384]	; (80019c8 <main+0x298>)
 8001846:	881a      	ldrh	r2, [r3, #0]
 8001848:	4b60      	ldr	r3, [pc, #384]	; (80019cc <main+0x29c>)
 800184a:	801a      	strh	r2, [r3, #0]

				if(strcmp(Custom_Morse_Msg, "000") == 0){
 800184c:	4962      	ldr	r1, [pc, #392]	; (80019d8 <main+0x2a8>)
 800184e:	4863      	ldr	r0, [pc, #396]	; (80019dc <main+0x2ac>)
 8001850:	f7fe fcc6 	bl	80001e0 <strcmp>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d107      	bne.n	800186a <main+0x13a>
					sprintf(ME_param2, "%d", param2) ;
 800185a:	4b61      	ldr	r3, [pc, #388]	; (80019e0 <main+0x2b0>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	4960      	ldr	r1, [pc, #384]	; (80019e4 <main+0x2b4>)
 8001862:	4861      	ldr	r0, [pc, #388]	; (80019e8 <main+0x2b8>)
 8001864:	f006 feea 	bl	800863c <siprintf>
 8001868:	e00b      	b.n	8001882 <main+0x152>

				}else{
					MF_param2[0] = Custom_Morse_Msg[0];
 800186a:	4b5c      	ldr	r3, [pc, #368]	; (80019dc <main+0x2ac>)
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	4b5f      	ldr	r3, [pc, #380]	; (80019ec <main+0x2bc>)
 8001870:	701a      	strb	r2, [r3, #0]
					MF_param2[1] = Custom_Morse_Msg[1] ;
 8001872:	4b5a      	ldr	r3, [pc, #360]	; (80019dc <main+0x2ac>)
 8001874:	785a      	ldrb	r2, [r3, #1]
 8001876:	4b5d      	ldr	r3, [pc, #372]	; (80019ec <main+0x2bc>)
 8001878:	705a      	strb	r2, [r3, #1]
					MF_param2[2] = Custom_Morse_Msg[2] ;
 800187a:	4b58      	ldr	r3, [pc, #352]	; (80019dc <main+0x2ac>)
 800187c:	789a      	ldrb	r2, [r3, #2]
 800187e:	4b5b      	ldr	r3, [pc, #364]	; (80019ec <main+0x2bc>)
 8001880:	709a      	strb	r2, [r3, #2]
				}
				UART_state_update = 0;
 8001882:	4b4e      	ldr	r3, [pc, #312]	; (80019bc <main+0x28c>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
		if(LED_ON == 1){
 8001888:	e043      	b.n	8001912 <main+0x1e2>
			}

		}
	 }else if(button_count == 1 ){// right button system state updated
 800188a:	4b46      	ldr	r3, [pc, #280]	; (80019a4 <main+0x274>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d104      	bne.n	800189c <main+0x16c>
		 ME_mode_LED() ; // sets the corresponding modes LED
 8001892:	f000 fc19 	bl	80020c8 <ME_mode_LED>

		  // set EM mode states
		  Emergency_Mode_State_Update() ;
 8001896:	f7ff fb1f 	bl	8000ed8 <Emergency_Mode_State_Update>
 800189a:	e03b      	b.n	8001914 <main+0x1e4>

	 }else{
		 if(button_count == 2){ // Mood Mode
 800189c:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <main+0x274>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d137      	bne.n	8001914 <main+0x1e4>
			 // SET THE NECESSARY STATES
			 em_count=0; // reset the emergency mode state
 80018a4:	4b41      	ldr	r3, [pc, #260]	; (80019ac <main+0x27c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
			 em_default = 1; // to re-enter EM state
 80018aa:	4b41      	ldr	r3, [pc, #260]	; (80019b0 <main+0x280>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]

			 MM_mode_LED() ; //sets the corresponding modes LED
 80018b0:	f000 fc22 	bl	80020f8 <MM_mode_LED>

			 Mood_Mode_State_Update() ; // update the necessary MM states
 80018b4:	f7ff fbb2 	bl	800101c <Mood_Mode_State_Update>
			 if(LED_ON == 1){
 80018b8:	4b3e      	ldr	r3, [pc, #248]	; (80019b4 <main+0x284>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d11b      	bne.n	80018f8 <main+0x1c8>

				 //red channel
				 htim2.Instance->CCR4 = R_channel_Intensity ;
 80018c0:	4b4b      	ldr	r3, [pc, #300]	; (80019f0 <main+0x2c0>)
 80018c2:	881a      	ldrh	r2, [r3, #0]
 80018c4:	4b33      	ldr	r3, [pc, #204]	; (8001994 <main+0x264>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	641a      	str	r2, [r3, #64]	; 0x40
				 MM_state = R_channel_Intensity ;
 80018ca:	4b49      	ldr	r3, [pc, #292]	; (80019f0 <main+0x2c0>)
 80018cc:	881a      	ldrh	r2, [r3, #0]
 80018ce:	4b49      	ldr	r3, [pc, #292]	; (80019f4 <main+0x2c4>)
 80018d0:	801a      	strh	r2, [r3, #0]
				 // GREEN channel
				 htim3.Instance->CCR4 = G_channel_Intensity ;
 80018d2:	4b49      	ldr	r3, [pc, #292]	; (80019f8 <main+0x2c8>)
 80018d4:	881a      	ldrh	r2, [r3, #0]
 80018d6:	4b30      	ldr	r3, [pc, #192]	; (8001998 <main+0x268>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	641a      	str	r2, [r3, #64]	; 0x40
				 MM_param1 = G_channel_Intensity ;
 80018dc:	4b46      	ldr	r3, [pc, #280]	; (80019f8 <main+0x2c8>)
 80018de:	881a      	ldrh	r2, [r3, #0]
 80018e0:	4b46      	ldr	r3, [pc, #280]	; (80019fc <main+0x2cc>)
 80018e2:	801a      	strh	r2, [r3, #0]
				 // BLUE channel
				 htim4.Instance->CCR1 = B_channel_Intensity ;
 80018e4:	4b46      	ldr	r3, [pc, #280]	; (8001a00 <main+0x2d0>)
 80018e6:	881a      	ldrh	r2, [r3, #0]
 80018e8:	4b2c      	ldr	r3, [pc, #176]	; (800199c <main+0x26c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	635a      	str	r2, [r3, #52]	; 0x34
				 MM_param2 = B_channel_Intensity ;
 80018ee:	4b44      	ldr	r3, [pc, #272]	; (8001a00 <main+0x2d0>)
 80018f0:	881a      	ldrh	r2, [r3, #0]
 80018f2:	4b44      	ldr	r3, [pc, #272]	; (8001a04 <main+0x2d4>)
 80018f4:	801a      	strh	r2, [r3, #0]
 80018f6:	e00d      	b.n	8001914 <main+0x1e4>


			 }else{
				 // put all channels off
				 //red channel
				 htim2.Instance->CCR4 =  0;
 80018f8:	4b26      	ldr	r3, [pc, #152]	; (8001994 <main+0x264>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2200      	movs	r2, #0
 80018fe:	641a      	str	r2, [r3, #64]	; 0x40
				 // GREEN channel
				 htim3.Instance->CCR4 = 0 ;
 8001900:	4b25      	ldr	r3, [pc, #148]	; (8001998 <main+0x268>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2200      	movs	r2, #0
 8001906:	641a      	str	r2, [r3, #64]	; 0x40
				 // BLUE channel
				 htim4.Instance->CCR1 = 0 ;
 8001908:	4b24      	ldr	r3, [pc, #144]	; (800199c <main+0x26c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2200      	movs	r2, #0
 800190e:	635a      	str	r2, [r3, #52]	; 0x34
 8001910:	e000      	b.n	8001914 <main+0x1e4>
		if(LED_ON == 1){
 8001912:	bf00      	nop

		 }
	 }

	 // right button state update
	 right_button_state_update() ;
 8001914:	f7ff f950 	bl	8000bb8 <right_button_state_update>
	 //EMERGENCY MODES
	  if(button_count ==1 ){
 8001918:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <main+0x274>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b01      	cmp	r3, #1
 800191e:	f47f af44 	bne.w	80017aa <main+0x7a>

		 if(em_count == 0 || em_default ==1){ //strobe wit default intensity
 8001922:	4b22      	ldr	r3, [pc, #136]	; (80019ac <main+0x27c>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <main+0x202>
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <main+0x280>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d111      	bne.n	8001956 <main+0x226>
			 em_default = 0 ; //default state reached
 8001932:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <main+0x280>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	2120      	movs	r1, #32
 800193c:	4832      	ldr	r0, [pc, #200]	; (8001a08 <main+0x2d8>)
 800193e:	f002 fcf3 	bl	8004328 <HAL_GPIO_WritePin>


			 if(LED_ON){ //LED_on =?
 8001942:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <main+0x284>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d019      	beq.n	800197e <main+0x24e>
				 // strobe LED with provided on time
				 EM_mode_Strobe(strobe_delay) ;
 800194a:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <main+0x2dc>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff f9b6 	bl	8000cc0 <EM_mode_Strobe>
			 if(LED_ON){ //LED_on =?
 8001954:	e013      	b.n	800197e <main+0x24e>
			 }
		 }
		 else if(em_count ==1){ // SOS MOSRE
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <main+0x27c>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d105      	bne.n	800196a <main+0x23a>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800195e:	2201      	movs	r2, #1
 8001960:	2120      	movs	r1, #32
 8001962:	4829      	ldr	r0, [pc, #164]	; (8001a08 <main+0x2d8>)
 8001964:	f002 fce0 	bl	8004328 <HAL_GPIO_WritePin>
 8001968:	e71f      	b.n	80017aa <main+0x7a>


		 }
		 else{
			 if(em_count == 2){ // CUSTOM MORSE
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <main+0x27c>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b02      	cmp	r3, #2
 8001970:	f47f af1b 	bne.w	80017aa <main+0x7a>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001974:	2201      	movs	r2, #1
 8001976:	2120      	movs	r1, #32
 8001978:	4823      	ldr	r0, [pc, #140]	; (8001a08 <main+0x2d8>)
 800197a:	f002 fcd5 	bl	8004328 <HAL_GPIO_WritePin>
	  system_state_update() ;
 800197e:	e714      	b.n	80017aa <main+0x7a>
 8001980:	2000001c 	.word	0x2000001c
 8001984:	20000268 	.word	0x20000268
 8001988:	20002314 	.word	0x20002314
 800198c:	200002f8 	.word	0x200002f8
 8001990:	200000f0 	.word	0x200000f0
 8001994:	20000184 	.word	0x20000184
 8001998:	200001d0 	.word	0x200001d0
 800199c:	2000021c 	.word	0x2000021c
 80019a0:	20002308 	.word	0x20002308
 80019a4:	200002f0 	.word	0x200002f0
 80019a8:	20000000 	.word	0x20000000
 80019ac:	200002f4 	.word	0x200002f4
 80019b0:	20000001 	.word	0x20000001
 80019b4:	20002307 	.word	0x20002307
 80019b8:	20002306 	.word	0x20002306
 80019bc:	20002318 	.word	0x20002318
 80019c0:	20000010 	.word	0x20000010
 80019c4:	20002322 	.word	0x20002322
 80019c8:	2000231c 	.word	0x2000231c
 80019cc:	20002324 	.word	0x20002324
 80019d0:	2000231a 	.word	0x2000231a
 80019d4:	2000002c 	.word	0x2000002c
 80019d8:	080091b4 	.word	0x080091b4
 80019dc:	2000004c 	.word	0x2000004c
 80019e0:	2000231e 	.word	0x2000231e
 80019e4:	080091d4 	.word	0x080091d4
 80019e8:	20000054 	.word	0x20000054
 80019ec:	20000050 	.word	0x20000050
 80019f0:	20000016 	.word	0x20000016
 80019f4:	2000232a 	.word	0x2000232a
 80019f8:	20000018 	.word	0x20000018
 80019fc:	2000232c 	.word	0x2000232c
 8001a00:	2000001a 	.word	0x2000001a
 8001a04:	2000232e 	.word	0x2000232e
 8001a08:	48000400 	.word	0x48000400
 8001a0c:	20000012 	.word	0x20000012

08001a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b0a6      	sub	sp, #152	; 0x98
 8001a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a1a:	2228      	movs	r2, #40	; 0x28
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f006 fe04 	bl	800862c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	2258      	movs	r2, #88	; 0x58
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f006 fdf6 	bl	800862c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a40:	2302      	movs	r3, #2
 8001a42:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a44:	2301      	movs	r3, #1
 8001a46:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a48:	2310      	movs	r3, #16
 8001a4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a5c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f002 fc96 	bl	80043a0 <HAL_RCC_OscConfig>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001a7a:	f000 fb6b 	bl	8002154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a7e:	230f      	movs	r3, #15
 8001a80:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a82:	2302      	movs	r3, #2
 8001a84:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a8e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a94:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a98:	2102      	movs	r1, #2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 fcd4 	bl	8005448 <HAL_RCC_ClockConfig>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001aa6:	f000 fb55 	bl	8002154 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <SystemClock_Config+0xcc>)
 8001aac:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f003 fef6 	bl	80058b4 <HAL_RCCEx_PeriphCLKConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ace:	f000 fb41 	bl	8002154 <Error_Handler>
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	3798      	adds	r7, #152	; 0x98
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	00300082 	.word	0x00300082

08001ae0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ae6:	f107 031c 	add.w	r3, r7, #28
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
 8001b00:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b02:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <MX_ADC1_Init+0xdc>)
 8001b04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001b08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b0a:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <MX_ADC1_Init+0xdc>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b10:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <MX_ADC1_Init+0xdc>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b16:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <MX_ADC1_Init+0xdc>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b1c:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <MX_ADC1_Init+0xdc>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b22:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <MX_ADC1_Init+0xdc>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b2a:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <MX_ADC1_Init+0xdc>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b30:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <MX_ADC1_Init+0xdc>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b36:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <MX_ADC1_Init+0xdc>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b3c:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <MX_ADC1_Init+0xdc>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b42:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <MX_ADC1_Init+0xdc>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b4a:	4b1c      	ldr	r3, [pc, #112]	; (8001bbc <MX_ADC1_Init+0xdc>)
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b50:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <MX_ADC1_Init+0xdc>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001b56:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <MX_ADC1_Init+0xdc>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b5c:	4817      	ldr	r0, [pc, #92]	; (8001bbc <MX_ADC1_Init+0xdc>)
 8001b5e:	f000 fee1 	bl	8002924 <HAL_ADC_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001b68:	f000 faf4 	bl	8002154 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b70:	f107 031c 	add.w	r3, r7, #28
 8001b74:	4619      	mov	r1, r3
 8001b76:	4811      	ldr	r0, [pc, #68]	; (8001bbc <MX_ADC1_Init+0xdc>)
 8001b78:	f001 fcd6 	bl	8003528 <HAL_ADCEx_MultiModeConfigChannel>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001b82:	f000 fae7 	bl	8002154 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4806      	ldr	r0, [pc, #24]	; (8001bbc <MX_ADC1_Init+0xdc>)
 8001ba4:	f001 f9d4 	bl	8002f50 <HAL_ADC_ConfigChannel>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001bae:	f000 fad1 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	3728      	adds	r7, #40	; 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200000f0 	.word	0x200000f0

08001bc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08e      	sub	sp, #56	; 0x38
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd4:	f107 031c 	add.w	r3, r7, #28
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001be0:	463b      	mov	r3, r7
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
 8001bec:	611a      	str	r2, [r3, #16]
 8001bee:	615a      	str	r2, [r3, #20]
 8001bf0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bf2:	4b33      	ldr	r3, [pc, #204]	; (8001cc0 <MX_TIM2_Init+0x100>)
 8001bf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bf8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36;
 8001bfa:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <MX_TIM2_Init+0x100>)
 8001bfc:	2224      	movs	r2, #36	; 0x24
 8001bfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c00:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <MX_TIM2_Init+0x100>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 512;
 8001c06:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <MX_TIM2_Init+0x100>)
 8001c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0e:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <MX_TIM2_Init+0x100>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c14:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <MX_TIM2_Init+0x100>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c1a:	4829      	ldr	r0, [pc, #164]	; (8001cc0 <MX_TIM2_Init+0x100>)
 8001c1c:	f004 f868 	bl	8005cf0 <HAL_TIM_Base_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001c26:	f000 fa95 	bl	8002154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	4619      	mov	r1, r3
 8001c36:	4822      	ldr	r0, [pc, #136]	; (8001cc0 <MX_TIM2_Init+0x100>)
 8001c38:	f004 fb32 	bl	80062a0 <HAL_TIM_ConfigClockSource>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001c42:	f000 fa87 	bl	8002154 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c46:	481e      	ldr	r0, [pc, #120]	; (8001cc0 <MX_TIM2_Init+0x100>)
 8001c48:	f004 f8a9 	bl	8005d9e <HAL_TIM_PWM_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001c52:	f000 fa7f 	bl	8002154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4619      	mov	r1, r3
 8001c64:	4816      	ldr	r0, [pc, #88]	; (8001cc0 <MX_TIM2_Init+0x100>)
 8001c66:	f005 f849 	bl	8006cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001c70:	f000 fa70 	bl	8002154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c74:	2360      	movs	r3, #96	; 0x60
 8001c76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c84:	463b      	mov	r3, r7
 8001c86:	2200      	movs	r2, #0
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <MX_TIM2_Init+0x100>)
 8001c8c:	f004 f9f4 	bl	8006078 <HAL_TIM_PWM_ConfigChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001c96:	f000 fa5d 	bl	8002154 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	220c      	movs	r2, #12
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <MX_TIM2_Init+0x100>)
 8001ca2:	f004 f9e9 	bl	8006078 <HAL_TIM_PWM_ConfigChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001cac:	f000 fa52 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cb0:	4803      	ldr	r0, [pc, #12]	; (8001cc0 <MX_TIM2_Init+0x100>)
 8001cb2:	f000 fb27 	bl	8002304 <HAL_TIM_MspPostInit>

}
 8001cb6:	bf00      	nop
 8001cb8:	3738      	adds	r7, #56	; 0x38
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000184 	.word	0x20000184

08001cc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08e      	sub	sp, #56	; 0x38
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd8:	f107 031c 	add.w	r3, r7, #28
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
 8001cf0:	611a      	str	r2, [r3, #16]
 8001cf2:	615a      	str	r2, [r3, #20]
 8001cf4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cf6:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <MX_TIM3_Init+0xe8>)
 8001cf8:	4a2d      	ldr	r2, [pc, #180]	; (8001db0 <MX_TIM3_Init+0xec>)
 8001cfa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36;
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <MX_TIM3_Init+0xe8>)
 8001cfe:	2224      	movs	r2, #36	; 0x24
 8001d00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d02:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <MX_TIM3_Init+0xe8>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 512;
 8001d08:	4b28      	ldr	r3, [pc, #160]	; (8001dac <MX_TIM3_Init+0xe8>)
 8001d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d10:	4b26      	ldr	r3, [pc, #152]	; (8001dac <MX_TIM3_Init+0xe8>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d16:	4b25      	ldr	r3, [pc, #148]	; (8001dac <MX_TIM3_Init+0xe8>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d1c:	4823      	ldr	r0, [pc, #140]	; (8001dac <MX_TIM3_Init+0xe8>)
 8001d1e:	f003 ffe7 	bl	8005cf0 <HAL_TIM_Base_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001d28:	f000 fa14 	bl	8002154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d36:	4619      	mov	r1, r3
 8001d38:	481c      	ldr	r0, [pc, #112]	; (8001dac <MX_TIM3_Init+0xe8>)
 8001d3a:	f004 fab1 	bl	80062a0 <HAL_TIM_ConfigClockSource>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001d44:	f000 fa06 	bl	8002154 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d48:	4818      	ldr	r0, [pc, #96]	; (8001dac <MX_TIM3_Init+0xe8>)
 8001d4a:	f004 f828 	bl	8005d9e <HAL_TIM_PWM_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001d54:	f000 f9fe 	bl	8002154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d60:	f107 031c 	add.w	r3, r7, #28
 8001d64:	4619      	mov	r1, r3
 8001d66:	4811      	ldr	r0, [pc, #68]	; (8001dac <MX_TIM3_Init+0xe8>)
 8001d68:	f004 ffc8 	bl	8006cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001d72:	f000 f9ef 	bl	8002154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d76:	2360      	movs	r3, #96	; 0x60
 8001d78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d86:	463b      	mov	r3, r7
 8001d88:	220c      	movs	r2, #12
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4807      	ldr	r0, [pc, #28]	; (8001dac <MX_TIM3_Init+0xe8>)
 8001d8e:	f004 f973 	bl	8006078 <HAL_TIM_PWM_ConfigChannel>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001d98:	f000 f9dc 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d9c:	4803      	ldr	r0, [pc, #12]	; (8001dac <MX_TIM3_Init+0xe8>)
 8001d9e:	f000 fab1 	bl	8002304 <HAL_TIM_MspPostInit>

}
 8001da2:	bf00      	nop
 8001da4:	3738      	adds	r7, #56	; 0x38
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200001d0 	.word	0x200001d0
 8001db0:	40000400 	.word	0x40000400

08001db4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08e      	sub	sp, #56	; 0x38
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc8:	f107 031c 	add.w	r3, r7, #28
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
 8001de0:	611a      	str	r2, [r3, #16]
 8001de2:	615a      	str	r2, [r3, #20]
 8001de4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001de6:	4b2d      	ldr	r3, [pc, #180]	; (8001e9c <MX_TIM4_Init+0xe8>)
 8001de8:	4a2d      	ldr	r2, [pc, #180]	; (8001ea0 <MX_TIM4_Init+0xec>)
 8001dea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36;
 8001dec:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <MX_TIM4_Init+0xe8>)
 8001dee:	2224      	movs	r2, #36	; 0x24
 8001df0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df2:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <MX_TIM4_Init+0xe8>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001df8:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <MX_TIM4_Init+0xe8>)
 8001dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dfe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e00:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <MX_TIM4_Init+0xe8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e06:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <MX_TIM4_Init+0xe8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e0c:	4823      	ldr	r0, [pc, #140]	; (8001e9c <MX_TIM4_Init+0xe8>)
 8001e0e:	f003 ff6f 	bl	8005cf0 <HAL_TIM_Base_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001e18:	f000 f99c 	bl	8002154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e26:	4619      	mov	r1, r3
 8001e28:	481c      	ldr	r0, [pc, #112]	; (8001e9c <MX_TIM4_Init+0xe8>)
 8001e2a:	f004 fa39 	bl	80062a0 <HAL_TIM_ConfigClockSource>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001e34:	f000 f98e 	bl	8002154 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e38:	4818      	ldr	r0, [pc, #96]	; (8001e9c <MX_TIM4_Init+0xe8>)
 8001e3a:	f003 ffb0 	bl	8005d9e <HAL_TIM_PWM_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001e44:	f000 f986 	bl	8002154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4619      	mov	r1, r3
 8001e56:	4811      	ldr	r0, [pc, #68]	; (8001e9c <MX_TIM4_Init+0xe8>)
 8001e58:	f004 ff50 	bl	8006cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001e62:	f000 f977 	bl	8002154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e66:	2360      	movs	r3, #96	; 0x60
 8001e68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e76:	463b      	mov	r3, r7
 8001e78:	2200      	movs	r2, #0
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4807      	ldr	r0, [pc, #28]	; (8001e9c <MX_TIM4_Init+0xe8>)
 8001e7e:	f004 f8fb 	bl	8006078 <HAL_TIM_PWM_ConfigChannel>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001e88:	f000 f964 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e8c:	4803      	ldr	r0, [pc, #12]	; (8001e9c <MX_TIM4_Init+0xe8>)
 8001e8e:	f000 fa39 	bl	8002304 <HAL_TIM_MspPostInit>

}
 8001e92:	bf00      	nop
 8001e94:	3738      	adds	r7, #56	; 0x38
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2000021c 	.word	0x2000021c
 8001ea0:	40000800 	.word	0x40000800

08001ea4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ea8:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <MX_USART2_UART_Init+0x5c>)
 8001eaa:	4a16      	ldr	r2, [pc, #88]	; (8001f04 <MX_USART2_UART_Init+0x60>)
 8001eac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001eae:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <MX_USART2_UART_Init+0x5c>)
 8001eb0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001eb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <MX_USART2_UART_Init+0x5c>)
 8001eb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ebc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <MX_USART2_UART_Init+0x5c>)
 8001ec0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ec4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_USART2_UART_Init+0x5c>)
 8001ec8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ecc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_USART2_UART_Init+0x5c>)
 8001ed0:	220c      	movs	r2, #12
 8001ed2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <MX_USART2_UART_Init+0x5c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_USART2_UART_Init+0x5c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <MX_USART2_UART_Init+0x5c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_USART2_UART_Init+0x5c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eec:	4804      	ldr	r0, [pc, #16]	; (8001f00 <MX_USART2_UART_Init+0x5c>)
 8001eee:	f004 ff91 	bl	8006e14 <HAL_UART_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001ef8:	f000 f92c 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000268 	.word	0x20000268
 8001f04:	40004400 	.word	0x40004400

08001f08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <MX_DMA_Init+0x38>)
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	4a0b      	ldr	r2, [pc, #44]	; (8001f40 <MX_DMA_Init+0x38>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6153      	str	r3, [r2, #20]
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <MX_DMA_Init+0x38>)
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2100      	movs	r1, #0
 8001f2a:	200b      	movs	r0, #11
 8001f2c:	f001 fdf9 	bl	8003b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f30:	200b      	movs	r0, #11
 8001f32:	f001 fe12 	bl	8003b5a <HAL_NVIC_EnableIRQ>

}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000

08001f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5a:	4b49      	ldr	r3, [pc, #292]	; (8002080 <MX_GPIO_Init+0x13c>)
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	4a48      	ldr	r2, [pc, #288]	; (8002080 <MX_GPIO_Init+0x13c>)
 8001f60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f64:	6153      	str	r3, [r2, #20]
 8001f66:	4b46      	ldr	r3, [pc, #280]	; (8002080 <MX_GPIO_Init+0x13c>)
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f72:	4b43      	ldr	r3, [pc, #268]	; (8002080 <MX_GPIO_Init+0x13c>)
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	4a42      	ldr	r2, [pc, #264]	; (8002080 <MX_GPIO_Init+0x13c>)
 8001f78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f7c:	6153      	str	r3, [r2, #20]
 8001f7e:	4b40      	ldr	r3, [pc, #256]	; (8002080 <MX_GPIO_Init+0x13c>)
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8a:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <MX_GPIO_Init+0x13c>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	4a3c      	ldr	r2, [pc, #240]	; (8002080 <MX_GPIO_Init+0x13c>)
 8001f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f94:	6153      	str	r3, [r2, #20]
 8001f96:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <MX_GPIO_Init+0x13c>)
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa2:	4b37      	ldr	r3, [pc, #220]	; (8002080 <MX_GPIO_Init+0x13c>)
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	4a36      	ldr	r2, [pc, #216]	; (8002080 <MX_GPIO_Init+0x13c>)
 8001fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fac:	6153      	str	r3, [r2, #20]
 8001fae:	4b34      	ldr	r3, [pc, #208]	; (8002080 <MX_GPIO_Init+0x13c>)
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D3_Pin|LED_D4_Pin|LED_D5_Pin, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001fc0:	4830      	ldr	r0, [pc, #192]	; (8002084 <MX_GPIO_Init+0x140>)
 8001fc2:	f002 f9b1 	bl	8004328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd0:	f002 f9aa 	bl	8004328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fda:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4827      	ldr	r0, [pc, #156]	; (8002088 <MX_GPIO_Init+0x144>)
 8001fec:	f001 fffa 	bl	8003fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ff0:	23c0      	movs	r3, #192	; 0xc0
 8001ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ff4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffe:	f107 0314 	add.w	r3, r7, #20
 8002002:	4619      	mov	r1, r3
 8002004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002008:	f001 ffec 	bl	8003fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D3_Pin LED_D4_Pin LED_D5_Pin */
  GPIO_InitStruct.Pin = LED_D3_Pin|LED_D4_Pin|LED_D5_Pin;
 800200c:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8002010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002012:	2301      	movs	r3, #1
 8002014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201a:	2300      	movs	r3, #0
 800201c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	4619      	mov	r1, r3
 8002024:	4817      	ldr	r0, [pc, #92]	; (8002084 <MX_GPIO_Init+0x140>)
 8002026:	f001 ffdd 	bl	8003fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D2_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 800202a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800202e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002030:	2301      	movs	r3, #1
 8002032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	4619      	mov	r1, r3
 8002042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002046:	f001 ffcd 	bl	8003fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800204a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800204e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002050:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002056:	2301      	movs	r3, #1
 8002058:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4619      	mov	r1, r3
 8002060:	4808      	ldr	r0, [pc, #32]	; (8002084 <MX_GPIO_Init+0x140>)
 8002062:	f001 ffbf 	bl	8003fe4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	2017      	movs	r0, #23
 800206c:	f001 fd59 	bl	8003b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002070:	2017      	movs	r0, #23
 8002072:	f001 fd72 	bl	8003b5a <HAL_NVIC_EnableIRQ>

}
 8002076:	bf00      	nop
 8002078:	3728      	adds	r7, #40	; 0x28
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	48000400 	.word	0x48000400
 8002088:	48000800 	.word	0x48000800

0800208c <MF_mode_LED>:

/* USER CODE BEGIN 4 */
// FUNCTIONS
void MF_mode_LED(){
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002090:	2201      	movs	r2, #1
 8002092:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209a:	f002 f945 	bl	8004328 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800209e:	2200      	movs	r2, #0
 80020a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020a4:	4807      	ldr	r0, [pc, #28]	; (80020c4 <MF_mode_LED+0x38>)
 80020a6:	f002 f93f 	bl	8004328 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2110      	movs	r1, #16
 80020ae:	4805      	ldr	r0, [pc, #20]	; (80020c4 <MF_mode_LED+0x38>)
 80020b0:	f002 f93a 	bl	8004328 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2120      	movs	r1, #32
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <MF_mode_LED+0x38>)
 80020ba:	f002 f935 	bl	8004328 <HAL_GPIO_WritePin>
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	48000400 	.word	0x48000400

080020c8 <ME_mode_LED>:

void ME_mode_LED(){
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d6:	f002 f927 	bl	8004328 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80020da:	2201      	movs	r2, #1
 80020dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020e0:	4804      	ldr	r0, [pc, #16]	; (80020f4 <ME_mode_LED+0x2c>)
 80020e2:	f002 f921 	bl	8004328 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2110      	movs	r1, #16
 80020ea:	4802      	ldr	r0, [pc, #8]	; (80020f4 <ME_mode_LED+0x2c>)
 80020ec:	f002 f91c 	bl	8004328 <HAL_GPIO_WritePin>
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	48000400 	.word	0x48000400

080020f8 <MM_mode_LED>:

void MM_mode_LED(){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80020fc:	2200      	movs	r2, #0
 80020fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002106:	f002 f90f 	bl	8004328 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800210a:	2200      	movs	r2, #0
 800210c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002110:	4807      	ldr	r0, [pc, #28]	; (8002130 <MM_mode_LED+0x38>)
 8002112:	f002 f909 	bl	8004328 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002116:	2201      	movs	r2, #1
 8002118:	2110      	movs	r1, #16
 800211a:	4805      	ldr	r0, [pc, #20]	; (8002130 <MM_mode_LED+0x38>)
 800211c:	f002 f904 	bl	8004328 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002120:	2200      	movs	r2, #0
 8002122:	2120      	movs	r1, #32
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <MM_mode_LED+0x38>)
 8002126:	f002 f8ff 	bl	8004328 <HAL_GPIO_WritePin>
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	48000400 	.word	0x48000400

08002134 <HAL_ADC_ConvCpltCallback>:


// adc buffer filled by dma circular sampling
// data should not be processed in the interrupt, it makes rest of the
// progam inaccessible
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	adc_conv_complete = 1 ;
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <HAL_ADC_ConvCpltCallback+0x1c>)
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]

}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20002302 	.word	0x20002302

08002154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002158:	b672      	cpsid	i
}
 800215a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800215c:	e7fe      	b.n	800215c <Error_Handler+0x8>
	...

08002160 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <HAL_MspInit+0x44>)
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <HAL_MspInit+0x44>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6193      	str	r3, [r2, #24]
 8002172:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <HAL_MspInit+0x44>)
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_MspInit+0x44>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	4a08      	ldr	r2, [pc, #32]	; (80021a4 <HAL_MspInit+0x44>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002188:	61d3      	str	r3, [r2, #28]
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_MspInit+0x44>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002196:	2007      	movs	r0, #7
 8002198:	f001 fcb8 	bl	8003b0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000

080021a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021c8:	d14c      	bne.n	8002264 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80021ca:	4b28      	ldr	r3, [pc, #160]	; (800226c <HAL_ADC_MspInit+0xc4>)
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	4a27      	ldr	r2, [pc, #156]	; (800226c <HAL_ADC_MspInit+0xc4>)
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d4:	6153      	str	r3, [r2, #20]
 80021d6:	4b25      	ldr	r3, [pc, #148]	; (800226c <HAL_ADC_MspInit+0xc4>)
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	4b22      	ldr	r3, [pc, #136]	; (800226c <HAL_ADC_MspInit+0xc4>)
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	4a21      	ldr	r2, [pc, #132]	; (800226c <HAL_ADC_MspInit+0xc4>)
 80021e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ec:	6153      	str	r3, [r2, #20]
 80021ee:	4b1f      	ldr	r3, [pc, #124]	; (800226c <HAL_ADC_MspInit+0xc4>)
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021fa:	2301      	movs	r3, #1
 80021fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021fe:	2303      	movs	r3, #3
 8002200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	4619      	mov	r1, r3
 800220c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002210:	f001 fee8 	bl	8003fe4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002214:	4b16      	ldr	r3, [pc, #88]	; (8002270 <HAL_ADC_MspInit+0xc8>)
 8002216:	4a17      	ldr	r2, [pc, #92]	; (8002274 <HAL_ADC_MspInit+0xcc>)
 8002218:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800221a:	4b15      	ldr	r3, [pc, #84]	; (8002270 <HAL_ADC_MspInit+0xc8>)
 800221c:	2200      	movs	r2, #0
 800221e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <HAL_ADC_MspInit+0xc8>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_ADC_MspInit+0xc8>)
 8002228:	2280      	movs	r2, #128	; 0x80
 800222a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800222c:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_ADC_MspInit+0xc8>)
 800222e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002232:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002234:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <HAL_ADC_MspInit+0xc8>)
 8002236:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800223a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <HAL_ADC_MspInit+0xc8>)
 800223e:	2220      	movs	r2, #32
 8002240:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_ADC_MspInit+0xc8>)
 8002244:	2200      	movs	r2, #0
 8002246:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002248:	4809      	ldr	r0, [pc, #36]	; (8002270 <HAL_ADC_MspInit+0xc8>)
 800224a:	f001 fca0 	bl	8003b8e <HAL_DMA_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8002254:	f7ff ff7e 	bl	8002154 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a05      	ldr	r2, [pc, #20]	; (8002270 <HAL_ADC_MspInit+0xc8>)
 800225c:	639a      	str	r2, [r3, #56]	; 0x38
 800225e:	4a04      	ldr	r2, [pc, #16]	; (8002270 <HAL_ADC_MspInit+0xc8>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002264:	bf00      	nop
 8002266:	3728      	adds	r7, #40	; 0x28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40021000 	.word	0x40021000
 8002270:	20000140 	.word	0x20000140
 8002274:	40020008 	.word	0x40020008

08002278 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002288:	d10c      	bne.n	80022a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_TIM_Base_MspInit+0x80>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	4a1a      	ldr	r2, [pc, #104]	; (80022f8 <HAL_TIM_Base_MspInit+0x80>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	61d3      	str	r3, [r2, #28]
 8002296:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <HAL_TIM_Base_MspInit+0x80>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80022a2:	e022      	b.n	80022ea <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <HAL_TIM_Base_MspInit+0x84>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d10c      	bne.n	80022c8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022ae:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_TIM_Base_MspInit+0x80>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	4a11      	ldr	r2, [pc, #68]	; (80022f8 <HAL_TIM_Base_MspInit+0x80>)
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	61d3      	str	r3, [r2, #28]
 80022ba:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <HAL_TIM_Base_MspInit+0x80>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]
}
 80022c6:	e010      	b.n	80022ea <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0c      	ldr	r2, [pc, #48]	; (8002300 <HAL_TIM_Base_MspInit+0x88>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d10b      	bne.n	80022ea <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <HAL_TIM_Base_MspInit+0x80>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <HAL_TIM_Base_MspInit+0x80>)
 80022d8:	f043 0304 	orr.w	r3, r3, #4
 80022dc:	61d3      	str	r3, [r2, #28]
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_TIM_Base_MspInit+0x80>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
}
 80022ea:	bf00      	nop
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40000400 	.word	0x40000400
 8002300:	40000800 	.word	0x40000800

08002304 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08c      	sub	sp, #48	; 0x30
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002324:	d13a      	bne.n	800239c <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	4b42      	ldr	r3, [pc, #264]	; (8002430 <HAL_TIM_MspPostInit+0x12c>)
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	4a41      	ldr	r2, [pc, #260]	; (8002430 <HAL_TIM_MspPostInit+0x12c>)
 800232c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002330:	6153      	str	r3, [r2, #20]
 8002332:	4b3f      	ldr	r3, [pc, #252]	; (8002430 <HAL_TIM_MspPostInit+0x12c>)
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	61bb      	str	r3, [r7, #24]
 800233c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233e:	4b3c      	ldr	r3, [pc, #240]	; (8002430 <HAL_TIM_MspPostInit+0x12c>)
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	4a3b      	ldr	r2, [pc, #236]	; (8002430 <HAL_TIM_MspPostInit+0x12c>)
 8002344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002348:	6153      	str	r3, [r2, #20]
 800234a:	4b39      	ldr	r3, [pc, #228]	; (8002430 <HAL_TIM_MspPostInit+0x12c>)
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002356:	2320      	movs	r3, #32
 8002358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2300      	movs	r3, #0
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002366:	2301      	movs	r3, #1
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 031c 	add.w	r3, r7, #28
 800236e:	4619      	mov	r1, r3
 8002370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002374:	f001 fe36 	bl	8003fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002378:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800237c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800238a:	2301      	movs	r3, #1
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238e:	f107 031c 	add.w	r3, r7, #28
 8002392:	4619      	mov	r1, r3
 8002394:	4827      	ldr	r0, [pc, #156]	; (8002434 <HAL_TIM_MspPostInit+0x130>)
 8002396:	f001 fe25 	bl	8003fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800239a:	e044      	b.n	8002426 <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM3)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a25      	ldr	r2, [pc, #148]	; (8002438 <HAL_TIM_MspPostInit+0x134>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d11c      	bne.n	80023e0 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a6:	4b22      	ldr	r3, [pc, #136]	; (8002430 <HAL_TIM_MspPostInit+0x12c>)
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	4a21      	ldr	r2, [pc, #132]	; (8002430 <HAL_TIM_MspPostInit+0x12c>)
 80023ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b0:	6153      	str	r3, [r2, #20]
 80023b2:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <HAL_TIM_MspPostInit+0x12c>)
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80023be:	2302      	movs	r3, #2
 80023c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c2:	2302      	movs	r3, #2
 80023c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ca:	2300      	movs	r3, #0
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023ce:	2302      	movs	r3, #2
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d2:	f107 031c 	add.w	r3, r7, #28
 80023d6:	4619      	mov	r1, r3
 80023d8:	4816      	ldr	r0, [pc, #88]	; (8002434 <HAL_TIM_MspPostInit+0x130>)
 80023da:	f001 fe03 	bl	8003fe4 <HAL_GPIO_Init>
}
 80023de:	e022      	b.n	8002426 <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM4)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a15      	ldr	r2, [pc, #84]	; (800243c <HAL_TIM_MspPostInit+0x138>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d11d      	bne.n	8002426 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	4b11      	ldr	r3, [pc, #68]	; (8002430 <HAL_TIM_MspPostInit+0x12c>)
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	4a10      	ldr	r2, [pc, #64]	; (8002430 <HAL_TIM_MspPostInit+0x12c>)
 80023f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f4:	6153      	str	r3, [r2, #20]
 80023f6:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <HAL_TIM_MspPostInit+0x12c>)
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002402:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	2300      	movs	r3, #0
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002414:	230a      	movs	r3, #10
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002418:	f107 031c 	add.w	r3, r7, #28
 800241c:	4619      	mov	r1, r3
 800241e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002422:	f001 fddf 	bl	8003fe4 <HAL_GPIO_Init>
}
 8002426:	bf00      	nop
 8002428:	3730      	adds	r7, #48	; 0x30
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000
 8002434:	48000400 	.word	0x48000400
 8002438:	40000400 	.word	0x40000400
 800243c:	40000800 	.word	0x40000800

08002440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a1b      	ldr	r2, [pc, #108]	; (80024cc <HAL_UART_MspInit+0x8c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d130      	bne.n	80024c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002462:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <HAL_UART_MspInit+0x90>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	4a1a      	ldr	r2, [pc, #104]	; (80024d0 <HAL_UART_MspInit+0x90>)
 8002468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800246c:	61d3      	str	r3, [r2, #28]
 800246e:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <HAL_UART_MspInit+0x90>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <HAL_UART_MspInit+0x90>)
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <HAL_UART_MspInit+0x90>)
 8002480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002484:	6153      	str	r3, [r2, #20]
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_UART_MspInit+0x90>)
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002492:	230c      	movs	r3, #12
 8002494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249e:	2300      	movs	r3, #0
 80024a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024a2:	2307      	movs	r3, #7
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a6:	f107 0314 	add.w	r3, r7, #20
 80024aa:	4619      	mov	r1, r3
 80024ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b0:	f001 fd98 	bl	8003fe4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2100      	movs	r1, #0
 80024b8:	2026      	movs	r0, #38	; 0x26
 80024ba:	f001 fb32 	bl	8003b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024be:	2026      	movs	r0, #38	; 0x26
 80024c0:	f001 fb4b 	bl	8003b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024c4:	bf00      	nop
 80024c6:	3728      	adds	r7, #40	; 0x28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40004400 	.word	0x40004400
 80024d0:	40021000 	.word	0x40021000

080024d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024d8:	e7fe      	b.n	80024d8 <NMI_Handler+0x4>

080024da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024de:	e7fe      	b.n	80024de <HardFault_Handler+0x4>

080024e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <MemManage_Handler+0x4>

080024e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ea:	e7fe      	b.n	80024ea <BusFault_Handler+0x4>

080024ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f0:	e7fe      	b.n	80024f0 <UsageFault_Handler+0x4>

080024f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002520:	f000 f9a8 	bl	8002874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}

08002528 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800252c:	4802      	ldr	r0, [pc, #8]	; (8002538 <DMA1_Channel1_IRQHandler+0x10>)
 800252e:	f001 fc4b 	bl	8003dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000140 	.word	0x20000140

0800253c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 8002540:	4b64      	ldr	r3, [pc, #400]	; (80026d4 <EXTI9_5_IRQHandler+0x198>)
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002548:	2b00      	cmp	r3, #0
 800254a:	d038      	beq.n	80025be <EXTI9_5_IRQHandler+0x82>

		if(HAL_GetTick() - ticks_pressed >= 20){
 800254c:	f000 f9a6 	bl	800289c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	4b61      	ldr	r3, [pc, #388]	; (80026d8 <EXTI9_5_IRQHandler+0x19c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b13      	cmp	r3, #19
 800255a:	d92c      	bls.n	80025b6 <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 800255c:	4b5f      	ldr	r3, [pc, #380]	; (80026dc <EXTI9_5_IRQHandler+0x1a0>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d112      	bne.n	800258c <EXTI9_5_IRQHandler+0x50>
 8002566:	2140      	movs	r1, #64	; 0x40
 8002568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800256c:	f001 fec4 	bl	80042f8 <HAL_GPIO_ReadPin>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10a      	bne.n	800258c <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 8002576:	4b59      	ldr	r3, [pc, #356]	; (80026dc <EXTI9_5_IRQHandler+0x1a0>)
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 800257c:	f000 f98e 	bl	800289c <HAL_GetTick>
 8002580:	4603      	mov	r3, r0
 8002582:	4a55      	ldr	r2, [pc, #340]	; (80026d8 <EXTI9_5_IRQHandler+0x19c>)
 8002584:	6013      	str	r3, [r2, #0]

				middle_button_pressed = 1;
 8002586:	4b56      	ldr	r3, [pc, #344]	; (80026e0 <EXTI9_5_IRQHandler+0x1a4>)
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 800258c:	4b53      	ldr	r3, [pc, #332]	; (80026dc <EXTI9_5_IRQHandler+0x1a0>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10f      	bne.n	80025b6 <EXTI9_5_IRQHandler+0x7a>
 8002596:	2140      	movs	r1, #64	; 0x40
 8002598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800259c:	f001 feac 	bl	80042f8 <HAL_GPIO_ReadPin>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d107      	bne.n	80025b6 <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 80025a6:	f000 f979 	bl	800289c <HAL_GetTick>
 80025aa:	4603      	mov	r3, r0
 80025ac:	4a4a      	ldr	r2, [pc, #296]	; (80026d8 <EXTI9_5_IRQHandler+0x19c>)
 80025ae:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 80025b0:	4b4a      	ldr	r3, [pc, #296]	; (80026dc <EXTI9_5_IRQHandler+0x1a0>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 80025b6:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <EXTI9_5_IRQHandler+0x198>)
 80025b8:	2240      	movs	r2, #64	; 0x40
 80025ba:	615a      	str	r2, [r3, #20]
 80025bc:	e07d      	b.n	80026ba <EXTI9_5_IRQHandler+0x17e>
	}
	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 80025be:	4b45      	ldr	r3, [pc, #276]	; (80026d4 <EXTI9_5_IRQHandler+0x198>)
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d038      	beq.n	800263c <EXTI9_5_IRQHandler+0x100>

			if(HAL_GetTick() - ticks_pressed >= 20){
 80025ca:	f000 f967 	bl	800289c <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	4b41      	ldr	r3, [pc, #260]	; (80026d8 <EXTI9_5_IRQHandler+0x19c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b13      	cmp	r3, #19
 80025d8:	d92c      	bls.n	8002634 <EXTI9_5_IRQHandler+0xf8>
				// stable low state
				if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 80025da:	4b40      	ldr	r3, [pc, #256]	; (80026dc <EXTI9_5_IRQHandler+0x1a0>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d112      	bne.n	800260a <EXTI9_5_IRQHandler+0xce>
 80025e4:	2180      	movs	r1, #128	; 0x80
 80025e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ea:	f001 fe85 	bl	80042f8 <HAL_GPIO_ReadPin>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10a      	bne.n	800260a <EXTI9_5_IRQHandler+0xce>
					button_state =0 ; // stable low reached
 80025f4:	4b39      	ldr	r3, [pc, #228]	; (80026dc <EXTI9_5_IRQHandler+0x1a0>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
					ticks_pressed = HAL_GetTick() ;
 80025fa:	f000 f94f 	bl	800289c <HAL_GetTick>
 80025fe:	4603      	mov	r3, r0
 8002600:	4a35      	ldr	r2, [pc, #212]	; (80026d8 <EXTI9_5_IRQHandler+0x19c>)
 8002602:	6013      	str	r3, [r2, #0]

					right_button_pressed = 1;
 8002604:	4b37      	ldr	r3, [pc, #220]	; (80026e4 <EXTI9_5_IRQHandler+0x1a8>)
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
				}

				// stable high state
				if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 800260a:	4b34      	ldr	r3, [pc, #208]	; (80026dc <EXTI9_5_IRQHandler+0x1a0>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10f      	bne.n	8002634 <EXTI9_5_IRQHandler+0xf8>
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800261a:	f001 fe6d 	bl	80042f8 <HAL_GPIO_ReadPin>
 800261e:	4603      	mov	r3, r0
 8002620:	2b01      	cmp	r3, #1
 8002622:	d107      	bne.n	8002634 <EXTI9_5_IRQHandler+0xf8>
					ticks_pressed = HAL_GetTick() ;
 8002624:	f000 f93a 	bl	800289c <HAL_GetTick>
 8002628:	4603      	mov	r3, r0
 800262a:	4a2b      	ldr	r2, [pc, #172]	; (80026d8 <EXTI9_5_IRQHandler+0x19c>)
 800262c:	6013      	str	r3, [r2, #0]
					button_state =1 ; // stable high state
 800262e:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <EXTI9_5_IRQHandler+0x1a0>)
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]

				}
			}


			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8002634:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <EXTI9_5_IRQHandler+0x198>)
 8002636:	2280      	movs	r2, #128	; 0x80
 8002638:	615a      	str	r2, [r3, #20]
 800263a:	e03e      	b.n	80026ba <EXTI9_5_IRQHandler+0x17e>
	}
	else{
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 800263c:	4b25      	ldr	r3, [pc, #148]	; (80026d4 <EXTI9_5_IRQHandler+0x198>)
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d038      	beq.n	80026ba <EXTI9_5_IRQHandler+0x17e>

				if(HAL_GetTick() - ticks_pressed >= 20){
 8002648:	f000 f928 	bl	800289c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <EXTI9_5_IRQHandler+0x19c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b13      	cmp	r3, #19
 8002656:	d92c      	bls.n	80026b2 <EXTI9_5_IRQHandler+0x176>
					// stable low state
					if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 8002658:	4b20      	ldr	r3, [pc, #128]	; (80026dc <EXTI9_5_IRQHandler+0x1a0>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d112      	bne.n	8002688 <EXTI9_5_IRQHandler+0x14c>
 8002662:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002666:	4820      	ldr	r0, [pc, #128]	; (80026e8 <EXTI9_5_IRQHandler+0x1ac>)
 8002668:	f001 fe46 	bl	80042f8 <HAL_GPIO_ReadPin>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10a      	bne.n	8002688 <EXTI9_5_IRQHandler+0x14c>
						button_state =0 ; // stable low reached
 8002672:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <EXTI9_5_IRQHandler+0x1a0>)
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
						ticks_pressed = HAL_GetTick() ;
 8002678:	f000 f910 	bl	800289c <HAL_GetTick>
 800267c:	4603      	mov	r3, r0
 800267e:	4a16      	ldr	r2, [pc, #88]	; (80026d8 <EXTI9_5_IRQHandler+0x19c>)
 8002680:	6013      	str	r3, [r2, #0]

						left_button_pressed = 1;
 8002682:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <EXTI9_5_IRQHandler+0x1b0>)
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
					}

					// stable high state
					if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <EXTI9_5_IRQHandler+0x1a0>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10f      	bne.n	80026b2 <EXTI9_5_IRQHandler+0x176>
 8002692:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002696:	4814      	ldr	r0, [pc, #80]	; (80026e8 <EXTI9_5_IRQHandler+0x1ac>)
 8002698:	f001 fe2e 	bl	80042f8 <HAL_GPIO_ReadPin>
 800269c:	4603      	mov	r3, r0
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d107      	bne.n	80026b2 <EXTI9_5_IRQHandler+0x176>
						ticks_pressed = HAL_GetTick() ;
 80026a2:	f000 f8fb 	bl	800289c <HAL_GetTick>
 80026a6:	4603      	mov	r3, r0
 80026a8:	4a0b      	ldr	r2, [pc, #44]	; (80026d8 <EXTI9_5_IRQHandler+0x19c>)
 80026aa:	6013      	str	r3, [r2, #0]
						button_state =1 ; // stable high state
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <EXTI9_5_IRQHandler+0x1a0>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]

					}
				}
				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 80026b2:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <EXTI9_5_IRQHandler+0x198>)
 80026b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026b8:	615a      	str	r2, [r3, #20]
			}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80026ba:	2040      	movs	r0, #64	; 0x40
 80026bc:	f001 fe4c 	bl	8004358 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80026c0:	2080      	movs	r0, #128	; 0x80
 80026c2:	f001 fe49 	bl	8004358 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80026c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026ca:	f001 fe45 	bl	8004358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40010400 	.word	0x40010400
 80026d8:	20002344 	.word	0x20002344
 80026dc:	20000063 	.word	0x20000063
 80026e0:	20002348 	.word	0x20002348
 80026e4:	20002349 	.word	0x20002349
 80026e8:	48000400 	.word	0x48000400
 80026ec:	2000234a 	.word	0x2000234a

080026f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026f4:	4802      	ldr	r0, [pc, #8]	; (8002700 <USART2_IRQHandler+0x10>)
 80026f6:	f004 fd07 	bl	8007108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000268 	.word	0x20000268

08002704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800270c:	4a14      	ldr	r2, [pc, #80]	; (8002760 <_sbrk+0x5c>)
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <_sbrk+0x60>)
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <_sbrk+0x64>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d102      	bne.n	8002726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <_sbrk+0x64>)
 8002722:	4a12      	ldr	r2, [pc, #72]	; (800276c <_sbrk+0x68>)
 8002724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <_sbrk+0x64>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	429a      	cmp	r2, r3
 8002732:	d207      	bcs.n	8002744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002734:	f005 ff50 	bl	80085d8 <__errno>
 8002738:	4603      	mov	r3, r0
 800273a:	220c      	movs	r2, #12
 800273c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800273e:	f04f 33ff 	mov.w	r3, #4294967295
 8002742:	e009      	b.n	8002758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <_sbrk+0x64>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <_sbrk+0x64>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	4a05      	ldr	r2, [pc, #20]	; (8002768 <_sbrk+0x64>)
 8002754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002756:	68fb      	ldr	r3, [r7, #12]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20010000 	.word	0x20010000
 8002764:	00000400 	.word	0x00000400
 8002768:	2000234c 	.word	0x2000234c
 800276c:	20002368 	.word	0x20002368

08002770 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <SystemInit+0x20>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277a:	4a05      	ldr	r2, [pc, #20]	; (8002790 <SystemInit+0x20>)
 800277c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002794:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027cc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002798:	f7ff ffea 	bl	8002770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800279c:	480c      	ldr	r0, [pc, #48]	; (80027d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800279e:	490d      	ldr	r1, [pc, #52]	; (80027d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027a0:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <LoopForever+0xe>)
  movs r3, #0
 80027a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a4:	e002      	b.n	80027ac <LoopCopyDataInit>

080027a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027aa:	3304      	adds	r3, #4

080027ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b0:	d3f9      	bcc.n	80027a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80027b4:	4c0a      	ldr	r4, [pc, #40]	; (80027e0 <LoopForever+0x16>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b8:	e001      	b.n	80027be <LoopFillZerobss>

080027ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027bc:	3204      	adds	r2, #4

080027be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c0:	d3fb      	bcc.n	80027ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027c2:	f005 ff0f 	bl	80085e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027c6:	f7fe ffb3 	bl	8001730 <main>

080027ca <LoopForever>:

LoopForever:
    b LoopForever
 80027ca:	e7fe      	b.n	80027ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80027cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80027d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d4:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 80027d8:	0800934c 	.word	0x0800934c
  ldr r2, =_sbss
 80027dc:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 80027e0:	20002364 	.word	0x20002364

080027e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027e4:	e7fe      	b.n	80027e4 <ADC1_2_IRQHandler>
	...

080027e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027ec:	4b08      	ldr	r3, [pc, #32]	; (8002810 <HAL_Init+0x28>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a07      	ldr	r2, [pc, #28]	; (8002810 <HAL_Init+0x28>)
 80027f2:	f043 0310 	orr.w	r3, r3, #16
 80027f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f8:	2003      	movs	r0, #3
 80027fa:	f001 f987 	bl	8003b0c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027fe:	2000      	movs	r0, #0
 8002800:	f000 f808 	bl	8002814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002804:	f7ff fcac 	bl	8002160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40022000 	.word	0x40022000

08002814 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_InitTick+0x54>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_InitTick+0x58>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	4619      	mov	r1, r3
 8002826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800282a:	fbb3 f3f1 	udiv	r3, r3, r1
 800282e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002832:	4618      	mov	r0, r3
 8002834:	f001 f99f 	bl	8003b76 <HAL_SYSTICK_Config>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e00e      	b.n	8002860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b0f      	cmp	r3, #15
 8002846:	d80a      	bhi.n	800285e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002848:	2200      	movs	r2, #0
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	f04f 30ff 	mov.w	r0, #4294967295
 8002850:	f001 f967 	bl	8003b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002854:	4a06      	ldr	r2, [pc, #24]	; (8002870 <HAL_InitTick+0x5c>)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	e000      	b.n	8002860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000064 	.word	0x20000064
 800286c:	2000006c 	.word	0x2000006c
 8002870:	20000068 	.word	0x20000068

08002874 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_IncTick+0x20>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_IncTick+0x24>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4413      	add	r3, r2
 8002884:	4a04      	ldr	r2, [pc, #16]	; (8002898 <HAL_IncTick+0x24>)
 8002886:	6013      	str	r3, [r2, #0]
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	2000006c 	.word	0x2000006c
 8002898:	20002350 	.word	0x20002350

0800289c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return uwTick;  
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_GetTick+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20002350 	.word	0x20002350

080028b4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028bc:	f7ff ffee 	bl	800289c <HAL_GetTick>
 80028c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028cc:	d005      	beq.n	80028da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ce:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <HAL_Delay+0x44>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4413      	add	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80028da:	bf00      	nop
 80028dc:	f7ff ffde 	bl	800289c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d8f7      	bhi.n	80028dc <HAL_Delay+0x28>
  {
  }
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	2000006c 	.word	0x2000006c

080028fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b09a      	sub	sp, #104	; 0x68
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e1e3      	b.n	8002d0c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	2b00      	cmp	r3, #0
 8002954:	d176      	bne.n	8002a44 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d152      	bne.n	8002a04 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff fc15 	bl	80021a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d13b      	bne.n	8002a04 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 ff87 	bl	80038a0 <ADC_Disable>
 8002992:	4603      	mov	r3, r0
 8002994:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d12f      	bne.n	8002a04 <HAL_ADC_Init+0xe0>
 80029a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d12b      	bne.n	8002a04 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029b4:	f023 0302 	bic.w	r3, r3, #2
 80029b8:	f043 0202 	orr.w	r2, r3, #2
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029ce:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029de:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029e0:	4b92      	ldr	r3, [pc, #584]	; (8002c2c <HAL_ADC_Init+0x308>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a92      	ldr	r2, [pc, #584]	; (8002c30 <HAL_ADC_Init+0x30c>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	0c9a      	lsrs	r2, r3, #18
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029f6:	e002      	b.n	80029fe <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f9      	bne.n	80029f8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d007      	beq.n	8002a22 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a20:	d110      	bne.n	8002a44 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f023 0312 	bic.w	r3, r3, #18
 8002a2a:	f043 0210 	orr.w	r2, r3, #16
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f043 0201 	orr.w	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f040 8150 	bne.w	8002cf2 <HAL_ADC_Init+0x3ce>
 8002a52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f040 814b 	bne.w	8002cf2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f040 8143 	bne.w	8002cf2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a74:	f043 0202 	orr.w	r2, r3, #2
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a84:	d004      	beq.n	8002a90 <HAL_ADC_Init+0x16c>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a6a      	ldr	r2, [pc, #424]	; (8002c34 <HAL_ADC_Init+0x310>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d101      	bne.n	8002a94 <HAL_ADC_Init+0x170>
 8002a90:	4b69      	ldr	r3, [pc, #420]	; (8002c38 <HAL_ADC_Init+0x314>)
 8002a92:	e000      	b.n	8002a96 <HAL_ADC_Init+0x172>
 8002a94:	4b69      	ldr	r3, [pc, #420]	; (8002c3c <HAL_ADC_Init+0x318>)
 8002a96:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa0:	d102      	bne.n	8002aa8 <HAL_ADC_Init+0x184>
 8002aa2:	4b64      	ldr	r3, [pc, #400]	; (8002c34 <HAL_ADC_Init+0x310>)
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	e01a      	b.n	8002ade <HAL_ADC_Init+0x1ba>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a61      	ldr	r2, [pc, #388]	; (8002c34 <HAL_ADC_Init+0x310>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d103      	bne.n	8002aba <HAL_ADC_Init+0x196>
 8002ab2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	e011      	b.n	8002ade <HAL_ADC_Init+0x1ba>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a60      	ldr	r2, [pc, #384]	; (8002c40 <HAL_ADC_Init+0x31c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d102      	bne.n	8002aca <HAL_ADC_Init+0x1a6>
 8002ac4:	4b5f      	ldr	r3, [pc, #380]	; (8002c44 <HAL_ADC_Init+0x320>)
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	e009      	b.n	8002ade <HAL_ADC_Init+0x1ba>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a5d      	ldr	r2, [pc, #372]	; (8002c44 <HAL_ADC_Init+0x320>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d102      	bne.n	8002ada <HAL_ADC_Init+0x1b6>
 8002ad4:	4b5a      	ldr	r3, [pc, #360]	; (8002c40 <HAL_ADC_Init+0x31c>)
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	e001      	b.n	8002ade <HAL_ADC_Init+0x1ba>
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d108      	bne.n	8002afe <HAL_ADC_Init+0x1da>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_ADC_Init+0x1da>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_ADC_Init+0x1dc>
 8002afe:	2300      	movs	r3, #0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d11c      	bne.n	8002b3e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b04:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d010      	beq.n	8002b2c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d107      	bne.n	8002b26 <HAL_ADC_Init+0x202>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_Init+0x202>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_ADC_Init+0x204>
 8002b26:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d108      	bne.n	8002b3e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b3c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	7e5b      	ldrb	r3, [r3, #25]
 8002b42:	035b      	lsls	r3, r3, #13
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b48:	2a01      	cmp	r2, #1
 8002b4a:	d002      	beq.n	8002b52 <HAL_ADC_Init+0x22e>
 8002b4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b50:	e000      	b.n	8002b54 <HAL_ADC_Init+0x230>
 8002b52:	2200      	movs	r2, #0
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b64:	4313      	orrs	r3, r2
 8002b66:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d11b      	bne.n	8002baa <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7e5b      	ldrb	r3, [r3, #25]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	045a      	lsls	r2, r3, #17
 8002b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b8c:	e00d      	b.n	8002baa <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002b96:	f043 0220 	orr.w	r2, r3, #32
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	f043 0201 	orr.w	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d054      	beq.n	8002c5c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a22      	ldr	r2, [pc, #136]	; (8002c40 <HAL_ADC_Init+0x31c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d004      	beq.n	8002bc6 <HAL_ADC_Init+0x2a2>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a20      	ldr	r2, [pc, #128]	; (8002c44 <HAL_ADC_Init+0x320>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d140      	bne.n	8002c48 <HAL_ADC_Init+0x324>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002bce:	d02a      	beq.n	8002c26 <HAL_ADC_Init+0x302>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd8:	d022      	beq.n	8002c20 <HAL_ADC_Init+0x2fc>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bde:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002be2:	d01a      	beq.n	8002c1a <HAL_ADC_Init+0x2f6>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002bec:	d012      	beq.n	8002c14 <HAL_ADC_Init+0x2f0>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002bf6:	d00a      	beq.n	8002c0e <HAL_ADC_Init+0x2ea>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002c00:	d002      	beq.n	8002c08 <HAL_ADC_Init+0x2e4>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	e023      	b.n	8002c50 <HAL_ADC_Init+0x32c>
 8002c08:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002c0c:	e020      	b.n	8002c50 <HAL_ADC_Init+0x32c>
 8002c0e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c12:	e01d      	b.n	8002c50 <HAL_ADC_Init+0x32c>
 8002c14:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002c18:	e01a      	b.n	8002c50 <HAL_ADC_Init+0x32c>
 8002c1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c1e:	e017      	b.n	8002c50 <HAL_ADC_Init+0x32c>
 8002c20:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002c24:	e014      	b.n	8002c50 <HAL_ADC_Init+0x32c>
 8002c26:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002c2a:	e011      	b.n	8002c50 <HAL_ADC_Init+0x32c>
 8002c2c:	20000064 	.word	0x20000064
 8002c30:	431bde83 	.word	0x431bde83
 8002c34:	50000100 	.word	0x50000100
 8002c38:	50000300 	.word	0x50000300
 8002c3c:	50000700 	.word	0x50000700
 8002c40:	50000400 	.word	0x50000400
 8002c44:	50000500 	.word	0x50000500
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c54:	4313      	orrs	r3, r2
 8002c56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d114      	bne.n	8002c94 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c78:	f023 0302 	bic.w	r3, r3, #2
 8002c7c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	7e1b      	ldrb	r3, [r3, #24]
 8002c82:	039a      	lsls	r2, r3, #14
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c90:	4313      	orrs	r3, r2
 8002c92:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <HAL_ADC_Init+0x3f0>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d10c      	bne.n	8002cca <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f023 010f 	bic.w	r1, r3, #15
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	1e5a      	subs	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	631a      	str	r2, [r3, #48]	; 0x30
 8002cc8:	e007      	b.n	8002cda <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 020f 	bic.w	r2, r2, #15
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f023 0303 	bic.w	r3, r3, #3
 8002ce8:	f043 0201 	orr.w	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	641a      	str	r2, [r3, #64]	; 0x40
 8002cf0:	e00a      	b.n	8002d08 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f023 0312 	bic.w	r3, r3, #18
 8002cfa:	f043 0210 	orr.w	r2, r3, #16
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002d02:	2301      	movs	r3, #1
 8002d04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002d08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3768      	adds	r7, #104	; 0x68
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	fff0c007 	.word	0xfff0c007

08002d18 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f040 80f7 	bne.w	8002f26 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_ADC_Start_DMA+0x2e>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e0f2      	b.n	8002f2c <HAL_ADC_Start_DMA+0x214>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d56:	d004      	beq.n	8002d62 <HAL_ADC_Start_DMA+0x4a>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a75      	ldr	r2, [pc, #468]	; (8002f34 <HAL_ADC_Start_DMA+0x21c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d109      	bne.n	8002d76 <HAL_ADC_Start_DMA+0x5e>
 8002d62:	4b75      	ldr	r3, [pc, #468]	; (8002f38 <HAL_ADC_Start_DMA+0x220>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 031f 	and.w	r3, r3, #31
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bf0c      	ite	eq
 8002d6e:	2301      	moveq	r3, #1
 8002d70:	2300      	movne	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	e008      	b.n	8002d88 <HAL_ADC_Start_DMA+0x70>
 8002d76:	4b71      	ldr	r3, [pc, #452]	; (8002f3c <HAL_ADC_Start_DMA+0x224>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 031f 	and.w	r3, r3, #31
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	bf0c      	ite	eq
 8002d82:	2301      	moveq	r3, #1
 8002d84:	2300      	movne	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 80c5 	beq.w	8002f18 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 fd22 	bl	80037d8 <ADC_Enable>
 8002d94:	4603      	mov	r3, r0
 8002d96:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f040 80b7 	bne.w	8002f0e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dbc:	d004      	beq.n	8002dc8 <HAL_ADC_Start_DMA+0xb0>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5c      	ldr	r2, [pc, #368]	; (8002f34 <HAL_ADC_Start_DMA+0x21c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d106      	bne.n	8002dd6 <HAL_ADC_Start_DMA+0xbe>
 8002dc8:	4b5b      	ldr	r3, [pc, #364]	; (8002f38 <HAL_ADC_Start_DMA+0x220>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d010      	beq.n	8002df6 <HAL_ADC_Start_DMA+0xde>
 8002dd4:	e005      	b.n	8002de2 <HAL_ADC_Start_DMA+0xca>
 8002dd6:	4b59      	ldr	r3, [pc, #356]	; (8002f3c <HAL_ADC_Start_DMA+0x224>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <HAL_ADC_Start_DMA+0xde>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dea:	d004      	beq.n	8002df6 <HAL_ADC_Start_DMA+0xde>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a53      	ldr	r2, [pc, #332]	; (8002f40 <HAL_ADC_Start_DMA+0x228>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d115      	bne.n	8002e22 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d036      	beq.n	8002e7e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002e20:	e02d      	b.n	8002e7e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e36:	d004      	beq.n	8002e42 <HAL_ADC_Start_DMA+0x12a>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a3d      	ldr	r2, [pc, #244]	; (8002f34 <HAL_ADC_Start_DMA+0x21c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d10a      	bne.n	8002e58 <HAL_ADC_Start_DMA+0x140>
 8002e42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf14      	ite	ne
 8002e50:	2301      	movne	r3, #1
 8002e52:	2300      	moveq	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	e008      	b.n	8002e6a <HAL_ADC_Start_DMA+0x152>
 8002e58:	4b39      	ldr	r3, [pc, #228]	; (8002f40 <HAL_ADC_Start_DMA+0x228>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf14      	ite	ne
 8002e64:	2301      	movne	r3, #1
 8002e66:	2300      	moveq	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8a:	d106      	bne.n	8002e9a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e90:	f023 0206 	bic.w	r2, r3, #6
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	645a      	str	r2, [r3, #68]	; 0x44
 8002e98:	e002      	b.n	8002ea0 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eac:	4a25      	ldr	r2, [pc, #148]	; (8002f44 <HAL_ADC_Start_DMA+0x22c>)
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb4:	4a24      	ldr	r2, [pc, #144]	; (8002f48 <HAL_ADC_Start_DMA+0x230>)
 8002eb6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	4a23      	ldr	r2, [pc, #140]	; (8002f4c <HAL_ADC_Start_DMA+0x234>)
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	221c      	movs	r2, #28
 8002ec6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0210 	orr.w	r2, r2, #16
 8002ed6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3340      	adds	r3, #64	; 0x40
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f000 fe90 	bl	8003c1c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0204 	orr.w	r2, r2, #4
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	e00d      	b.n	8002f2a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f16:	e008      	b.n	8002f2a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f24:	e001      	b.n	8002f2a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f26:	2302      	movs	r3, #2
 8002f28:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	50000100 	.word	0x50000100
 8002f38:	50000300 	.word	0x50000300
 8002f3c:	50000700 	.word	0x50000700
 8002f40:	50000400 	.word	0x50000400
 8002f44:	0800370d 	.word	0x0800370d
 8002f48:	08003787 	.word	0x08003787
 8002f4c:	080037a3 	.word	0x080037a3

08002f50 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b09b      	sub	sp, #108	; 0x6c
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x22>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e2ca      	b.n	8003508 <HAL_ADC_ConfigChannel+0x5b8>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f040 82ae 	bne.w	80034e6 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d81c      	bhi.n	8002fcc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4413      	add	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	231f      	movs	r3, #31
 8002fa8:	4093      	lsls	r3, r2
 8002faa:	43db      	mvns	r3, r3
 8002fac:	4019      	ands	r1, r3
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	631a      	str	r2, [r3, #48]	; 0x30
 8002fca:	e063      	b.n	8003094 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b09      	cmp	r3, #9
 8002fd2:	d81e      	bhi.n	8003012 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	4413      	add	r3, r2
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	3b1e      	subs	r3, #30
 8002fe8:	221f      	movs	r2, #31
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	4019      	ands	r1, r3
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	3b1e      	subs	r3, #30
 8003004:	fa00 f203 	lsl.w	r2, r0, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	635a      	str	r2, [r3, #52]	; 0x34
 8003010:	e040      	b.n	8003094 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b0e      	cmp	r3, #14
 8003018:	d81e      	bhi.n	8003058 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	3b3c      	subs	r3, #60	; 0x3c
 800302e:	221f      	movs	r2, #31
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	4019      	ands	r1, r3
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	3b3c      	subs	r3, #60	; 0x3c
 800304a:	fa00 f203 	lsl.w	r2, r0, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	639a      	str	r2, [r3, #56]	; 0x38
 8003056:	e01d      	b.n	8003094 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4413      	add	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	3b5a      	subs	r3, #90	; 0x5a
 800306c:	221f      	movs	r2, #31
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	4019      	ands	r1, r3
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	3b5a      	subs	r3, #90	; 0x5a
 8003088:	fa00 f203 	lsl.w	r2, r0, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f040 80e5 	bne.w	800326e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b09      	cmp	r3, #9
 80030aa:	d91c      	bls.n	80030e6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6999      	ldr	r1, [r3, #24]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	3b1e      	subs	r3, #30
 80030be:	2207      	movs	r2, #7
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	4019      	ands	r1, r3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6898      	ldr	r0, [r3, #8]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	3b1e      	subs	r3, #30
 80030d8:	fa00 f203 	lsl.w	r2, r0, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	619a      	str	r2, [r3, #24]
 80030e4:	e019      	b.n	800311a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6959      	ldr	r1, [r3, #20]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	2207      	movs	r2, #7
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	4019      	ands	r1, r3
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	6898      	ldr	r0, [r3, #8]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4613      	mov	r3, r2
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4413      	add	r3, r2
 800310e:	fa00 f203 	lsl.w	r2, r0, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	695a      	ldr	r2, [r3, #20]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	08db      	lsrs	r3, r3, #3
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	3b01      	subs	r3, #1
 8003138:	2b03      	cmp	r3, #3
 800313a:	d84f      	bhi.n	80031dc <HAL_ADC_ConfigChannel+0x28c>
 800313c:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <HAL_ADC_ConfigChannel+0x1f4>)
 800313e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003142:	bf00      	nop
 8003144:	08003155 	.word	0x08003155
 8003148:	08003177 	.word	0x08003177
 800314c:	08003199 	.word	0x08003199
 8003150:	080031bb 	.word	0x080031bb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800315a:	4b9a      	ldr	r3, [pc, #616]	; (80033c4 <HAL_ADC_ConfigChannel+0x474>)
 800315c:	4013      	ands	r3, r2
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	0691      	lsls	r1, r2, #26
 8003164:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003166:	430a      	orrs	r2, r1
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003172:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003174:	e07e      	b.n	8003274 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800317c:	4b91      	ldr	r3, [pc, #580]	; (80033c4 <HAL_ADC_ConfigChannel+0x474>)
 800317e:	4013      	ands	r3, r2
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	0691      	lsls	r1, r2, #26
 8003186:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003188:	430a      	orrs	r2, r1
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003194:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003196:	e06d      	b.n	8003274 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800319e:	4b89      	ldr	r3, [pc, #548]	; (80033c4 <HAL_ADC_ConfigChannel+0x474>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	0691      	lsls	r1, r2, #26
 80031a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031aa:	430a      	orrs	r2, r1
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031b6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031b8:	e05c      	b.n	8003274 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80031c0:	4b80      	ldr	r3, [pc, #512]	; (80033c4 <HAL_ADC_ConfigChannel+0x474>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	0691      	lsls	r1, r2, #26
 80031ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031cc:	430a      	orrs	r2, r1
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031d8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031da:	e04b      	b.n	8003274 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	069b      	lsls	r3, r3, #26
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d107      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031fe:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003206:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	069b      	lsls	r3, r3, #26
 8003210:	429a      	cmp	r2, r3
 8003212:	d107      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003222:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800322a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	069b      	lsls	r3, r3, #26
 8003234:	429a      	cmp	r2, r3
 8003236:	d107      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003246:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	069b      	lsls	r3, r3, #26
 8003258:	429a      	cmp	r2, r3
 800325a:	d10a      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800326a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800326c:	e001      	b.n	8003272 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800326e:	bf00      	nop
 8003270:	e000      	b.n	8003274 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003272:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b01      	cmp	r3, #1
 8003280:	d108      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x344>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x344>
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <HAL_ADC_ConfigChannel+0x346>
 8003294:	2300      	movs	r3, #0
 8003296:	2b00      	cmp	r3, #0
 8003298:	f040 8130 	bne.w	80034fc <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d00f      	beq.n	80032c4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2201      	movs	r2, #1
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43da      	mvns	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	400a      	ands	r2, r1
 80032be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80032c2:	e049      	b.n	8003358 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2201      	movs	r2, #1
 80032d2:	409a      	lsls	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b09      	cmp	r3, #9
 80032e4:	d91c      	bls.n	8003320 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6999      	ldr	r1, [r3, #24]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4613      	mov	r3, r2
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4413      	add	r3, r2
 80032f6:	3b1b      	subs	r3, #27
 80032f8:	2207      	movs	r2, #7
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	4019      	ands	r1, r3
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6898      	ldr	r0, [r3, #8]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	4613      	mov	r3, r2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4413      	add	r3, r2
 8003310:	3b1b      	subs	r3, #27
 8003312:	fa00 f203 	lsl.w	r2, r0, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	619a      	str	r2, [r3, #24]
 800331e:	e01b      	b.n	8003358 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6959      	ldr	r1, [r3, #20]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	4613      	mov	r3, r2
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	4413      	add	r3, r2
 8003332:	2207      	movs	r2, #7
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	4019      	ands	r1, r3
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	6898      	ldr	r0, [r3, #8]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	4613      	mov	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4413      	add	r3, r2
 800334c:	fa00 f203 	lsl.w	r2, r0, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003360:	d004      	beq.n	800336c <HAL_ADC_ConfigChannel+0x41c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a18      	ldr	r2, [pc, #96]	; (80033c8 <HAL_ADC_ConfigChannel+0x478>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d101      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x420>
 800336c:	4b17      	ldr	r3, [pc, #92]	; (80033cc <HAL_ADC_ConfigChannel+0x47c>)
 800336e:	e000      	b.n	8003372 <HAL_ADC_ConfigChannel+0x422>
 8003370:	4b17      	ldr	r3, [pc, #92]	; (80033d0 <HAL_ADC_ConfigChannel+0x480>)
 8003372:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b10      	cmp	r3, #16
 800337a:	d105      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800337c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003384:	2b00      	cmp	r3, #0
 8003386:	d015      	beq.n	80033b4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800338c:	2b11      	cmp	r3, #17
 800338e:	d105      	bne.n	800339c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00b      	beq.n	80033b4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80033a0:	2b12      	cmp	r3, #18
 80033a2:	f040 80ab 	bne.w	80034fc <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80033a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f040 80a4 	bne.w	80034fc <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033bc:	d10a      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x484>
 80033be:	4b02      	ldr	r3, [pc, #8]	; (80033c8 <HAL_ADC_ConfigChannel+0x478>)
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	e022      	b.n	800340a <HAL_ADC_ConfigChannel+0x4ba>
 80033c4:	83fff000 	.word	0x83fff000
 80033c8:	50000100 	.word	0x50000100
 80033cc:	50000300 	.word	0x50000300
 80033d0:	50000700 	.word	0x50000700
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a4e      	ldr	r2, [pc, #312]	; (8003514 <HAL_ADC_ConfigChannel+0x5c4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d103      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x496>
 80033de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e011      	b.n	800340a <HAL_ADC_ConfigChannel+0x4ba>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a4b      	ldr	r2, [pc, #300]	; (8003518 <HAL_ADC_ConfigChannel+0x5c8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d102      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x4a6>
 80033f0:	4b4a      	ldr	r3, [pc, #296]	; (800351c <HAL_ADC_ConfigChannel+0x5cc>)
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	e009      	b.n	800340a <HAL_ADC_ConfigChannel+0x4ba>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a48      	ldr	r2, [pc, #288]	; (800351c <HAL_ADC_ConfigChannel+0x5cc>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d102      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x4b6>
 8003400:	4b45      	ldr	r3, [pc, #276]	; (8003518 <HAL_ADC_ConfigChannel+0x5c8>)
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	e001      	b.n	800340a <HAL_ADC_ConfigChannel+0x4ba>
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	2b01      	cmp	r3, #1
 8003416:	d108      	bne.n	800342a <HAL_ADC_ConfigChannel+0x4da>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_ADC_ConfigChannel+0x4da>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <HAL_ADC_ConfigChannel+0x4dc>
 800342a:	2300      	movs	r3, #0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d150      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003430:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003432:	2b00      	cmp	r3, #0
 8003434:	d010      	beq.n	8003458 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b01      	cmp	r3, #1
 8003440:	d107      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x502>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x502>
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <HAL_ADC_ConfigChannel+0x504>
 8003452:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003454:	2b00      	cmp	r3, #0
 8003456:	d13c      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b10      	cmp	r3, #16
 800345e:	d11d      	bne.n	800349c <HAL_ADC_ConfigChannel+0x54c>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003468:	d118      	bne.n	800349c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800346a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003474:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003476:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <HAL_ADC_ConfigChannel+0x5d0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a2a      	ldr	r2, [pc, #168]	; (8003524 <HAL_ADC_ConfigChannel+0x5d4>)
 800347c:	fba2 2303 	umull	r2, r3, r2, r3
 8003480:	0c9a      	lsrs	r2, r3, #18
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800348c:	e002      	b.n	8003494 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	3b01      	subs	r3, #1
 8003492:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f9      	bne.n	800348e <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800349a:	e02e      	b.n	80034fa <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b11      	cmp	r3, #17
 80034a2:	d10b      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x56c>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034ac:	d106      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80034ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80034b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034ba:	e01e      	b.n	80034fa <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b12      	cmp	r3, #18
 80034c2:	d11a      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80034c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80034cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ce:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034d0:	e013      	b.n	80034fa <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f043 0220 	orr.w	r2, r3, #32
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80034e4:	e00a      	b.n	80034fc <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f043 0220 	orr.w	r2, r3, #32
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80034f8:	e000      	b.n	80034fc <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034fa:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003504:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003508:	4618      	mov	r0, r3
 800350a:	376c      	adds	r7, #108	; 0x6c
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	50000100 	.word	0x50000100
 8003518:	50000400 	.word	0x50000400
 800351c:	50000500 	.word	0x50000500
 8003520:	20000064 	.word	0x20000064
 8003524:	431bde83 	.word	0x431bde83

08003528 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003528:	b480      	push	{r7}
 800352a:	b099      	sub	sp, #100	; 0x64
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003540:	d102      	bne.n	8003548 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003542:	4b6d      	ldr	r3, [pc, #436]	; (80036f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	e01a      	b.n	800357e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a6a      	ldr	r2, [pc, #424]	; (80036f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d103      	bne.n	800355a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003552:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003556:	60bb      	str	r3, [r7, #8]
 8003558:	e011      	b.n	800357e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a67      	ldr	r2, [pc, #412]	; (80036fc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d102      	bne.n	800356a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003564:	4b66      	ldr	r3, [pc, #408]	; (8003700 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	e009      	b.n	800357e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a64      	ldr	r2, [pc, #400]	; (8003700 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d102      	bne.n	800357a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003574:	4b61      	ldr	r3, [pc, #388]	; (80036fc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	e001      	b.n	800357e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0b0      	b.n	80036ea <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003592:	2302      	movs	r3, #2
 8003594:	e0a9      	b.n	80036ea <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f040 808d 	bne.w	80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f040 8086 	bne.w	80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035c4:	d004      	beq.n	80035d0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a4b      	ldr	r2, [pc, #300]	; (80036f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d101      	bne.n	80035d4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80035d0:	4b4c      	ldr	r3, [pc, #304]	; (8003704 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80035d2:	e000      	b.n	80035d6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80035d4:	4b4c      	ldr	r3, [pc, #304]	; (8003708 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80035d6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d040      	beq.n	8003662 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80035e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	6859      	ldr	r1, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035f2:	035b      	lsls	r3, r3, #13
 80035f4:	430b      	orrs	r3, r1
 80035f6:	431a      	orrs	r2, r3
 80035f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035fa:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	2b01      	cmp	r3, #1
 8003608:	d108      	bne.n	800361c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800361c:	2300      	movs	r3, #0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d15c      	bne.n	80036dc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b01      	cmp	r3, #1
 800362c:	d107      	bne.n	800363e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800363e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003640:	2b00      	cmp	r3, #0
 8003642:	d14b      	bne.n	80036dc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003644:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800364c:	f023 030f 	bic.w	r3, r3, #15
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	6811      	ldr	r1, [r2, #0]
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	6892      	ldr	r2, [r2, #8]
 8003658:	430a      	orrs	r2, r1
 800365a:	431a      	orrs	r2, r3
 800365c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800365e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003660:	e03c      	b.n	80036dc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800366a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800366c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	2b01      	cmp	r3, #1
 800367a:	d108      	bne.n	800368e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800368e:	2300      	movs	r3, #0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d123      	bne.n	80036dc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	2b01      	cmp	r3, #1
 800369e:	d107      	bne.n	80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80036b0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d112      	bne.n	80036dc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80036b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036be:	f023 030f 	bic.w	r3, r3, #15
 80036c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036c4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80036c6:	e009      	b.n	80036dc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80036da:	e000      	b.n	80036de <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80036dc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80036e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80036ea:	4618      	mov	r0, r3
 80036ec:	3764      	adds	r7, #100	; 0x64
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	50000100 	.word	0x50000100
 80036fc:	50000400 	.word	0x50000400
 8003700:	50000500 	.word	0x50000500
 8003704:	50000300 	.word	0x50000300
 8003708:	50000700 	.word	0x50000700

0800370c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003722:	2b00      	cmp	r3, #0
 8003724:	d126      	bne.n	8003774 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800373c:	2b00      	cmp	r3, #0
 800373e:	d115      	bne.n	800376c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003744:	2b00      	cmp	r3, #0
 8003746:	d111      	bne.n	800376c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	f043 0201 	orr.w	r2, r3, #1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f7fe fce1 	bl	8002134 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003772:	e004      	b.n	800377e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
}
 800377e:	bf00      	nop
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f7ff f8b1 	bl	80028fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800379a:	bf00      	nop
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b084      	sub	sp, #16
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c0:	f043 0204 	orr.w	r2, r3, #4
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f7ff f8a1 	bl	8002910 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037ce:	bf00      	nop
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d108      	bne.n	8003804 <ADC_Enable+0x2c>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <ADC_Enable+0x2c>
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <ADC_Enable+0x2e>
 8003804:	2300      	movs	r3, #0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d143      	bne.n	8003892 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	4b22      	ldr	r3, [pc, #136]	; (800389c <ADC_Enable+0xc4>)
 8003812:	4013      	ands	r3, r2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00d      	beq.n	8003834 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	f043 0210 	orr.w	r2, r3, #16
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	f043 0201 	orr.w	r2, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e02f      	b.n	8003894 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003844:	f7ff f82a 	bl	800289c <HAL_GetTick>
 8003848:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800384a:	e01b      	b.n	8003884 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800384c:	f7ff f826 	bl	800289c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d914      	bls.n	8003884 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b01      	cmp	r3, #1
 8003866:	d00d      	beq.n	8003884 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	f043 0210 	orr.w	r2, r3, #16
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003878:	f043 0201 	orr.w	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e007      	b.n	8003894 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b01      	cmp	r3, #1
 8003890:	d1dc      	bne.n	800384c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	8000003f 	.word	0x8000003f

080038a0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d108      	bne.n	80038cc <ADC_Disable+0x2c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <ADC_Disable+0x2c>
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <ADC_Disable+0x2e>
 80038cc:	2300      	movs	r3, #0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d047      	beq.n	8003962 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 030d 	and.w	r3, r3, #13
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d10f      	bne.n	8003900 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0202 	orr.w	r2, r2, #2
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2203      	movs	r2, #3
 80038f6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80038f8:	f7fe ffd0 	bl	800289c <HAL_GetTick>
 80038fc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80038fe:	e029      	b.n	8003954 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f043 0210 	orr.w	r2, r3, #16
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	f043 0201 	orr.w	r2, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e023      	b.n	8003964 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800391c:	f7fe ffbe 	bl	800289c <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d914      	bls.n	8003954 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b01      	cmp	r3, #1
 8003936:	d10d      	bne.n	8003954 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	f043 0210 	orr.w	r2, r3, #16
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003948:	f043 0201 	orr.w	r2, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e007      	b.n	8003964 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b01      	cmp	r3, #1
 8003960:	d0dc      	beq.n	800391c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800397c:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <__NVIC_SetPriorityGrouping+0x44>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003988:	4013      	ands	r3, r2
 800398a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800399e:	4a04      	ldr	r2, [pc, #16]	; (80039b0 <__NVIC_SetPriorityGrouping+0x44>)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	60d3      	str	r3, [r2, #12]
}
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	e000ed00 	.word	0xe000ed00

080039b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039b8:	4b04      	ldr	r3, [pc, #16]	; (80039cc <__NVIC_GetPriorityGrouping+0x18>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	0a1b      	lsrs	r3, r3, #8
 80039be:	f003 0307 	and.w	r3, r3, #7
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	e000ed00 	.word	0xe000ed00

080039d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	db0b      	blt.n	80039fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	f003 021f 	and.w	r2, r3, #31
 80039e8:	4907      	ldr	r1, [pc, #28]	; (8003a08 <__NVIC_EnableIRQ+0x38>)
 80039ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	2001      	movs	r0, #1
 80039f2:	fa00 f202 	lsl.w	r2, r0, r2
 80039f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	e000e100 	.word	0xe000e100

08003a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	6039      	str	r1, [r7, #0]
 8003a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	db0a      	blt.n	8003a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	490c      	ldr	r1, [pc, #48]	; (8003a58 <__NVIC_SetPriority+0x4c>)
 8003a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2a:	0112      	lsls	r2, r2, #4
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	440b      	add	r3, r1
 8003a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a34:	e00a      	b.n	8003a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	4908      	ldr	r1, [pc, #32]	; (8003a5c <__NVIC_SetPriority+0x50>)
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	3b04      	subs	r3, #4
 8003a44:	0112      	lsls	r2, r2, #4
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	440b      	add	r3, r1
 8003a4a:	761a      	strb	r2, [r3, #24]
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	e000e100 	.word	0xe000e100
 8003a5c:	e000ed00 	.word	0xe000ed00

08003a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b089      	sub	sp, #36	; 0x24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f1c3 0307 	rsb	r3, r3, #7
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	bf28      	it	cs
 8003a7e:	2304      	movcs	r3, #4
 8003a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	3304      	adds	r3, #4
 8003a86:	2b06      	cmp	r3, #6
 8003a88:	d902      	bls.n	8003a90 <NVIC_EncodePriority+0x30>
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	3b03      	subs	r3, #3
 8003a8e:	e000      	b.n	8003a92 <NVIC_EncodePriority+0x32>
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a94:	f04f 32ff 	mov.w	r2, #4294967295
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43da      	mvns	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	401a      	ands	r2, r3
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab2:	43d9      	mvns	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab8:	4313      	orrs	r3, r2
         );
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3724      	adds	r7, #36	; 0x24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
	...

08003ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ad8:	d301      	bcc.n	8003ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ada:	2301      	movs	r3, #1
 8003adc:	e00f      	b.n	8003afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ade:	4a0a      	ldr	r2, [pc, #40]	; (8003b08 <SysTick_Config+0x40>)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ae6:	210f      	movs	r1, #15
 8003ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aec:	f7ff ff8e 	bl	8003a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003af0:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <SysTick_Config+0x40>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003af6:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <SysTick_Config+0x40>)
 8003af8:	2207      	movs	r2, #7
 8003afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	e000e010 	.word	0xe000e010

08003b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff ff29 	bl	800396c <__NVIC_SetPriorityGrouping>
}
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b086      	sub	sp, #24
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	4603      	mov	r3, r0
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607a      	str	r2, [r7, #4]
 8003b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b34:	f7ff ff3e 	bl	80039b4 <__NVIC_GetPriorityGrouping>
 8003b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	6978      	ldr	r0, [r7, #20]
 8003b40:	f7ff ff8e 	bl	8003a60 <NVIC_EncodePriority>
 8003b44:	4602      	mov	r2, r0
 8003b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff ff5d 	bl	8003a0c <__NVIC_SetPriority>
}
 8003b52:	bf00      	nop
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b082      	sub	sp, #8
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	4603      	mov	r3, r0
 8003b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff ff31 	bl	80039d0 <__NVIC_EnableIRQ>
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff ffa2 	bl	8003ac8 <SysTick_Config>
 8003b84:	4603      	mov	r3, r0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e037      	b.n	8003c14 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003bba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003bbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f9b8 	bl	8003f6c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}  
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_DMA_Start_IT+0x20>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e04a      	b.n	8003cd2 <HAL_DMA_Start_IT+0xb6>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d13a      	bne.n	8003cc4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2202      	movs	r2, #2
 8003c52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0201 	bic.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	68b9      	ldr	r1, [r7, #8]
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 f94b 	bl	8003f0e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 020e 	orr.w	r2, r2, #14
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	e00f      	b.n	8003cb2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 020a 	orr.w	r2, r2, #10
 8003ca0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0204 	bic.w	r2, r2, #4
 8003cb0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0201 	orr.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	e005      	b.n	8003cd0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003cd0:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d008      	beq.n	8003cfe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2204      	movs	r2, #4
 8003cf0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e020      	b.n	8003d40 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 020e 	bic.w	r2, r2, #14
 8003d0c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0201 	bic.w	r2, r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d26:	2101      	movs	r1, #1
 8003d28:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d005      	beq.n	8003d6e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2204      	movs	r2, #4
 8003d66:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]
 8003d6c:	e027      	b.n	8003dbe <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 020e 	bic.w	r2, r2, #14
 8003d7c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0201 	bic.w	r2, r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	2101      	movs	r1, #1
 8003d98:	fa01 f202 	lsl.w	r2, r1, r2
 8003d9c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	4798      	blx	r3
    } 
  }
  return status;
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	2204      	movs	r2, #4
 8003de6:	409a      	lsls	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d024      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x72>
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d01f      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d107      	bne.n	8003e18 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0204 	bic.w	r2, r2, #4
 8003e16:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e20:	2104      	movs	r1, #4
 8003e22:	fa01 f202 	lsl.w	r2, r1, r2
 8003e26:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d06a      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003e38:	e065      	b.n	8003f06 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	2202      	movs	r2, #2
 8003e40:	409a      	lsls	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d02c      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0xdc>
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d027      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10b      	bne.n	8003e7a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 020a 	bic.w	r2, r2, #10
 8003e70:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e82:	2102      	movs	r1, #2
 8003e84:	fa01 f202 	lsl.w	r2, r1, r2
 8003e88:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d035      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003ea2:	e030      	b.n	8003f06 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d028      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x13e>
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d023      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 020e 	bic.w	r2, r2, #14
 8003ecc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8003edc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d004      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	4798      	blx	r3
    }
  }
}  
 8003f04:	e7ff      	b.n	8003f06 <HAL_DMA_IRQHandler+0x13e>
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b085      	sub	sp, #20
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f24:	2101      	movs	r1, #1
 8003f26:	fa01 f202 	lsl.w	r2, r1, r2
 8003f2a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	d108      	bne.n	8003f4e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f4c:	e007      	b.n	8003f5e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	60da      	str	r2, [r3, #12]
}
 8003f5e:	bf00      	nop
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
	...

08003f6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <DMA_CalcBaseAndBitshift+0x60>)
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d80f      	bhi.n	8003fa0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	4b12      	ldr	r3, [pc, #72]	; (8003fd0 <DMA_CalcBaseAndBitshift+0x64>)
 8003f88:	4413      	add	r3, r2
 8003f8a:	4a12      	ldr	r2, [pc, #72]	; (8003fd4 <DMA_CalcBaseAndBitshift+0x68>)
 8003f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	009a      	lsls	r2, r3, #2
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a0f      	ldr	r2, [pc, #60]	; (8003fd8 <DMA_CalcBaseAndBitshift+0x6c>)
 8003f9c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003f9e:	e00e      	b.n	8003fbe <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <DMA_CalcBaseAndBitshift+0x70>)
 8003fa8:	4413      	add	r3, r2
 8003faa:	4a0a      	ldr	r2, [pc, #40]	; (8003fd4 <DMA_CalcBaseAndBitshift+0x68>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	091b      	lsrs	r3, r3, #4
 8003fb2:	009a      	lsls	r2, r3, #2
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a09      	ldr	r2, [pc, #36]	; (8003fe0 <DMA_CalcBaseAndBitshift+0x74>)
 8003fbc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40020407 	.word	0x40020407
 8003fd0:	bffdfff8 	.word	0xbffdfff8
 8003fd4:	cccccccd 	.word	0xcccccccd
 8003fd8:	40020000 	.word	0x40020000
 8003fdc:	bffdfbf8 	.word	0xbffdfbf8
 8003fe0:	40020400 	.word	0x40020400

08003fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ff2:	e160      	b.n	80042b6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8004000:	4013      	ands	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 8152 	beq.w	80042b0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	2b01      	cmp	r3, #1
 8004016:	d005      	beq.n	8004024 <HAL_GPIO_Init+0x40>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d130      	bne.n	8004086 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	2203      	movs	r2, #3
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4013      	ands	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800405a:	2201      	movs	r2, #1
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	43db      	mvns	r3, r3
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4013      	ands	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	091b      	lsrs	r3, r3, #4
 8004070:	f003 0201 	and.w	r2, r3, #1
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4313      	orrs	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	2b03      	cmp	r3, #3
 8004090:	d017      	beq.n	80040c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	2203      	movs	r2, #3
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	43db      	mvns	r3, r3
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4013      	ands	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d123      	bne.n	8004116 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	08da      	lsrs	r2, r3, #3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3208      	adds	r2, #8
 80040d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	220f      	movs	r2, #15
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43db      	mvns	r3, r3
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4013      	ands	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	08da      	lsrs	r2, r3, #3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3208      	adds	r2, #8
 8004110:	6939      	ldr	r1, [r7, #16]
 8004112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	2203      	movs	r2, #3
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4013      	ands	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f003 0203 	and.w	r2, r3, #3
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 80ac 	beq.w	80042b0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004158:	4b5e      	ldr	r3, [pc, #376]	; (80042d4 <HAL_GPIO_Init+0x2f0>)
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	4a5d      	ldr	r2, [pc, #372]	; (80042d4 <HAL_GPIO_Init+0x2f0>)
 800415e:	f043 0301 	orr.w	r3, r3, #1
 8004162:	6193      	str	r3, [r2, #24]
 8004164:	4b5b      	ldr	r3, [pc, #364]	; (80042d4 <HAL_GPIO_Init+0x2f0>)
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004170:	4a59      	ldr	r2, [pc, #356]	; (80042d8 <HAL_GPIO_Init+0x2f4>)
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	089b      	lsrs	r3, r3, #2
 8004176:	3302      	adds	r3, #2
 8004178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	220f      	movs	r2, #15
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	43db      	mvns	r3, r3
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4013      	ands	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800419a:	d025      	beq.n	80041e8 <HAL_GPIO_Init+0x204>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a4f      	ldr	r2, [pc, #316]	; (80042dc <HAL_GPIO_Init+0x2f8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d01f      	beq.n	80041e4 <HAL_GPIO_Init+0x200>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a4e      	ldr	r2, [pc, #312]	; (80042e0 <HAL_GPIO_Init+0x2fc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d019      	beq.n	80041e0 <HAL_GPIO_Init+0x1fc>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a4d      	ldr	r2, [pc, #308]	; (80042e4 <HAL_GPIO_Init+0x300>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d013      	beq.n	80041dc <HAL_GPIO_Init+0x1f8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a4c      	ldr	r2, [pc, #304]	; (80042e8 <HAL_GPIO_Init+0x304>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00d      	beq.n	80041d8 <HAL_GPIO_Init+0x1f4>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a4b      	ldr	r2, [pc, #300]	; (80042ec <HAL_GPIO_Init+0x308>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d007      	beq.n	80041d4 <HAL_GPIO_Init+0x1f0>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a4a      	ldr	r2, [pc, #296]	; (80042f0 <HAL_GPIO_Init+0x30c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d101      	bne.n	80041d0 <HAL_GPIO_Init+0x1ec>
 80041cc:	2306      	movs	r3, #6
 80041ce:	e00c      	b.n	80041ea <HAL_GPIO_Init+0x206>
 80041d0:	2307      	movs	r3, #7
 80041d2:	e00a      	b.n	80041ea <HAL_GPIO_Init+0x206>
 80041d4:	2305      	movs	r3, #5
 80041d6:	e008      	b.n	80041ea <HAL_GPIO_Init+0x206>
 80041d8:	2304      	movs	r3, #4
 80041da:	e006      	b.n	80041ea <HAL_GPIO_Init+0x206>
 80041dc:	2303      	movs	r3, #3
 80041de:	e004      	b.n	80041ea <HAL_GPIO_Init+0x206>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e002      	b.n	80041ea <HAL_GPIO_Init+0x206>
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <HAL_GPIO_Init+0x206>
 80041e8:	2300      	movs	r3, #0
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	f002 0203 	and.w	r2, r2, #3
 80041f0:	0092      	lsls	r2, r2, #2
 80041f2:	4093      	lsls	r3, r2
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041fa:	4937      	ldr	r1, [pc, #220]	; (80042d8 <HAL_GPIO_Init+0x2f4>)
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	089b      	lsrs	r3, r3, #2
 8004200:	3302      	adds	r3, #2
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004208:	4b3a      	ldr	r3, [pc, #232]	; (80042f4 <HAL_GPIO_Init+0x310>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	43db      	mvns	r3, r3
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4013      	ands	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800422c:	4a31      	ldr	r2, [pc, #196]	; (80042f4 <HAL_GPIO_Init+0x310>)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004232:	4b30      	ldr	r3, [pc, #192]	; (80042f4 <HAL_GPIO_Init+0x310>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	43db      	mvns	r3, r3
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4013      	ands	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004256:	4a27      	ldr	r2, [pc, #156]	; (80042f4 <HAL_GPIO_Init+0x310>)
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800425c:	4b25      	ldr	r3, [pc, #148]	; (80042f4 <HAL_GPIO_Init+0x310>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	43db      	mvns	r3, r3
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4013      	ands	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004280:	4a1c      	ldr	r2, [pc, #112]	; (80042f4 <HAL_GPIO_Init+0x310>)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004286:	4b1b      	ldr	r3, [pc, #108]	; (80042f4 <HAL_GPIO_Init+0x310>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	43db      	mvns	r3, r3
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4013      	ands	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80042aa:	4a12      	ldr	r2, [pc, #72]	; (80042f4 <HAL_GPIO_Init+0x310>)
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	3301      	adds	r3, #1
 80042b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f47f ae97 	bne.w	8003ff4 <HAL_GPIO_Init+0x10>
  }
}
 80042c6:	bf00      	nop
 80042c8:	bf00      	nop
 80042ca:	371c      	adds	r7, #28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	40021000 	.word	0x40021000
 80042d8:	40010000 	.word	0x40010000
 80042dc:	48000400 	.word	0x48000400
 80042e0:	48000800 	.word	0x48000800
 80042e4:	48000c00 	.word	0x48000c00
 80042e8:	48001000 	.word	0x48001000
 80042ec:	48001400 	.word	0x48001400
 80042f0:	48001800 	.word	0x48001800
 80042f4:	40010400 	.word	0x40010400

080042f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	887b      	ldrh	r3, [r7, #2]
 800430a:	4013      	ands	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004310:	2301      	movs	r3, #1
 8004312:	73fb      	strb	r3, [r7, #15]
 8004314:	e001      	b.n	800431a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004316:	2300      	movs	r3, #0
 8004318:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800431a:	7bfb      	ldrb	r3, [r7, #15]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	807b      	strh	r3, [r7, #2]
 8004334:	4613      	mov	r3, r2
 8004336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004338:	787b      	ldrb	r3, [r7, #1]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800433e:	887a      	ldrh	r2, [r7, #2]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004344:	e002      	b.n	800434c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004346:	887a      	ldrh	r2, [r7, #2]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	4603      	mov	r3, r0
 8004360:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004362:	4b08      	ldr	r3, [pc, #32]	; (8004384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004364:	695a      	ldr	r2, [r3, #20]
 8004366:	88fb      	ldrh	r3, [r7, #6]
 8004368:	4013      	ands	r3, r2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d006      	beq.n	800437c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800436e:	4a05      	ldr	r2, [pc, #20]	; (8004384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004370:	88fb      	ldrh	r3, [r7, #6]
 8004372:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 f806 	bl	8004388 <HAL_GPIO_EXTI_Callback>
  }
}
 800437c:	bf00      	nop
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40010400 	.word	0x40010400

08004388 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
	...

080043a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80043b0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d102      	bne.n	80043c6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f001 b83a 	b.w	800543a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 816f 	beq.w	80046ba <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80043dc:	4bb5      	ldr	r3, [pc, #724]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f003 030c 	and.w	r3, r3, #12
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d00c      	beq.n	8004402 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043e8:	4bb2      	ldr	r3, [pc, #712]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 030c 	and.w	r3, r3, #12
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d15c      	bne.n	80044ae <HAL_RCC_OscConfig+0x10e>
 80043f4:	4baf      	ldr	r3, [pc, #700]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80043fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004400:	d155      	bne.n	80044ae <HAL_RCC_OscConfig+0x10e>
 8004402:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004406:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800440e:	fa93 f3a3 	rbit	r3, r3
 8004412:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004416:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800441a:	fab3 f383 	clz	r3, r3
 800441e:	b2db      	uxtb	r3, r3
 8004420:	095b      	lsrs	r3, r3, #5
 8004422:	b2db      	uxtb	r3, r3
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b01      	cmp	r3, #1
 800442c:	d102      	bne.n	8004434 <HAL_RCC_OscConfig+0x94>
 800442e:	4ba1      	ldr	r3, [pc, #644]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	e015      	b.n	8004460 <HAL_RCC_OscConfig+0xc0>
 8004434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004438:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004440:	fa93 f3a3 	rbit	r3, r3
 8004444:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800444c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004450:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004454:	fa93 f3a3 	rbit	r3, r3
 8004458:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800445c:	4b95      	ldr	r3, [pc, #596]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004464:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004468:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800446c:	fa92 f2a2 	rbit	r2, r2
 8004470:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004474:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004478:	fab2 f282 	clz	r2, r2
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	f042 0220 	orr.w	r2, r2, #32
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	f002 021f 	and.w	r2, r2, #31
 8004488:	2101      	movs	r1, #1
 800448a:	fa01 f202 	lsl.w	r2, r1, r2
 800448e:	4013      	ands	r3, r2
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 8111 	beq.w	80046b8 <HAL_RCC_OscConfig+0x318>
 8004496:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800449a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f040 8108 	bne.w	80046b8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	f000 bfc6 	b.w	800543a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044be:	d106      	bne.n	80044ce <HAL_RCC_OscConfig+0x12e>
 80044c0:	4b7c      	ldr	r3, [pc, #496]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a7b      	ldr	r2, [pc, #492]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 80044c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	e036      	b.n	800453c <HAL_RCC_OscConfig+0x19c>
 80044ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10c      	bne.n	80044f8 <HAL_RCC_OscConfig+0x158>
 80044de:	4b75      	ldr	r3, [pc, #468]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a74      	ldr	r2, [pc, #464]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 80044e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	4b72      	ldr	r3, [pc, #456]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a71      	ldr	r2, [pc, #452]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 80044f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	e021      	b.n	800453c <HAL_RCC_OscConfig+0x19c>
 80044f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004508:	d10c      	bne.n	8004524 <HAL_RCC_OscConfig+0x184>
 800450a:	4b6a      	ldr	r3, [pc, #424]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a69      	ldr	r2, [pc, #420]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 8004510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	4b67      	ldr	r3, [pc, #412]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a66      	ldr	r2, [pc, #408]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e00b      	b.n	800453c <HAL_RCC_OscConfig+0x19c>
 8004524:	4b63      	ldr	r3, [pc, #396]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a62      	ldr	r2, [pc, #392]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 800452a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	4b60      	ldr	r3, [pc, #384]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a5f      	ldr	r2, [pc, #380]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 8004536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800453a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800453c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004540:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d059      	beq.n	8004600 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454c:	f7fe f9a6 	bl	800289c <HAL_GetTick>
 8004550:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004554:	e00a      	b.n	800456c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004556:	f7fe f9a1 	bl	800289c <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b64      	cmp	r3, #100	; 0x64
 8004564:	d902      	bls.n	800456c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	f000 bf67 	b.w	800543a <HAL_RCC_OscConfig+0x109a>
 800456c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004570:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004574:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004578:	fa93 f3a3 	rbit	r3, r3
 800457c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004580:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004584:	fab3 f383 	clz	r3, r3
 8004588:	b2db      	uxtb	r3, r3
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	b2db      	uxtb	r3, r3
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b01      	cmp	r3, #1
 8004596:	d102      	bne.n	800459e <HAL_RCC_OscConfig+0x1fe>
 8004598:	4b46      	ldr	r3, [pc, #280]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	e015      	b.n	80045ca <HAL_RCC_OscConfig+0x22a>
 800459e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045a2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80045aa:	fa93 f3a3 	rbit	r3, r3
 80045ae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80045b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045b6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80045ba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80045be:	fa93 f3a3 	rbit	r3, r3
 80045c2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80045c6:	4b3b      	ldr	r3, [pc, #236]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045ce:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80045d2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80045d6:	fa92 f2a2 	rbit	r2, r2
 80045da:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80045de:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80045e2:	fab2 f282 	clz	r2, r2
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	f042 0220 	orr.w	r2, r2, #32
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	f002 021f 	and.w	r2, r2, #31
 80045f2:	2101      	movs	r1, #1
 80045f4:	fa01 f202 	lsl.w	r2, r1, r2
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0ab      	beq.n	8004556 <HAL_RCC_OscConfig+0x1b6>
 80045fe:	e05c      	b.n	80046ba <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004600:	f7fe f94c 	bl	800289c <HAL_GetTick>
 8004604:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004608:	e00a      	b.n	8004620 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800460a:	f7fe f947 	bl	800289c <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b64      	cmp	r3, #100	; 0x64
 8004618:	d902      	bls.n	8004620 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	f000 bf0d 	b.w	800543a <HAL_RCC_OscConfig+0x109a>
 8004620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004624:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004628:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800462c:	fa93 f3a3 	rbit	r3, r3
 8004630:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004634:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004638:	fab3 f383 	clz	r3, r3
 800463c:	b2db      	uxtb	r3, r3
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	b2db      	uxtb	r3, r3
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b01      	cmp	r3, #1
 800464a:	d102      	bne.n	8004652 <HAL_RCC_OscConfig+0x2b2>
 800464c:	4b19      	ldr	r3, [pc, #100]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	e015      	b.n	800467e <HAL_RCC_OscConfig+0x2de>
 8004652:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004656:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800465e:	fa93 f3a3 	rbit	r3, r3
 8004662:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004666:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800466a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800466e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004672:	fa93 f3a3 	rbit	r3, r3
 8004676:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800467a:	4b0e      	ldr	r3, [pc, #56]	; (80046b4 <HAL_RCC_OscConfig+0x314>)
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004682:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004686:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800468a:	fa92 f2a2 	rbit	r2, r2
 800468e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004692:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004696:	fab2 f282 	clz	r2, r2
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	f042 0220 	orr.w	r2, r2, #32
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	f002 021f 	and.w	r2, r2, #31
 80046a6:	2101      	movs	r1, #1
 80046a8:	fa01 f202 	lsl.w	r2, r1, r2
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1ab      	bne.n	800460a <HAL_RCC_OscConfig+0x26a>
 80046b2:	e002      	b.n	80046ba <HAL_RCC_OscConfig+0x31a>
 80046b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 817f 	beq.w	80049ce <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80046d0:	4ba7      	ldr	r3, [pc, #668]	; (8004970 <HAL_RCC_OscConfig+0x5d0>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 030c 	and.w	r3, r3, #12
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00c      	beq.n	80046f6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80046dc:	4ba4      	ldr	r3, [pc, #656]	; (8004970 <HAL_RCC_OscConfig+0x5d0>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f003 030c 	and.w	r3, r3, #12
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d173      	bne.n	80047d0 <HAL_RCC_OscConfig+0x430>
 80046e8:	4ba1      	ldr	r3, [pc, #644]	; (8004970 <HAL_RCC_OscConfig+0x5d0>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80046f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046f4:	d16c      	bne.n	80047d0 <HAL_RCC_OscConfig+0x430>
 80046f6:	2302      	movs	r3, #2
 80046f8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004700:	fa93 f3a3 	rbit	r3, r3
 8004704:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004708:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800470c:	fab3 f383 	clz	r3, r3
 8004710:	b2db      	uxtb	r3, r3
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	b2db      	uxtb	r3, r3
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b01      	cmp	r3, #1
 800471e:	d102      	bne.n	8004726 <HAL_RCC_OscConfig+0x386>
 8004720:	4b93      	ldr	r3, [pc, #588]	; (8004970 <HAL_RCC_OscConfig+0x5d0>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	e013      	b.n	800474e <HAL_RCC_OscConfig+0x3ae>
 8004726:	2302      	movs	r3, #2
 8004728:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004730:	fa93 f3a3 	rbit	r3, r3
 8004734:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004738:	2302      	movs	r3, #2
 800473a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800473e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004742:	fa93 f3a3 	rbit	r3, r3
 8004746:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800474a:	4b89      	ldr	r3, [pc, #548]	; (8004970 <HAL_RCC_OscConfig+0x5d0>)
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	2202      	movs	r2, #2
 8004750:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004754:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004758:	fa92 f2a2 	rbit	r2, r2
 800475c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004760:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004764:	fab2 f282 	clz	r2, r2
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	f042 0220 	orr.w	r2, r2, #32
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	f002 021f 	and.w	r2, r2, #31
 8004774:	2101      	movs	r1, #1
 8004776:	fa01 f202 	lsl.w	r2, r1, r2
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <HAL_RCC_OscConfig+0x3f6>
 8004780:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004784:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d002      	beq.n	8004796 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	f000 be52 	b.w	800543a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004796:	4b76      	ldr	r3, [pc, #472]	; (8004970 <HAL_RCC_OscConfig+0x5d0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800479e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	21f8      	movs	r1, #248	; 0xf8
 80047ac:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80047b4:	fa91 f1a1 	rbit	r1, r1
 80047b8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80047bc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80047c0:	fab1 f181 	clz	r1, r1
 80047c4:	b2c9      	uxtb	r1, r1
 80047c6:	408b      	lsls	r3, r1
 80047c8:	4969      	ldr	r1, [pc, #420]	; (8004970 <HAL_RCC_OscConfig+0x5d0>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ce:	e0fe      	b.n	80049ce <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8088 	beq.w	80048f2 <HAL_RCC_OscConfig+0x552>
 80047e2:	2301      	movs	r3, #1
 80047e4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80047ec:	fa93 f3a3 	rbit	r3, r3
 80047f0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80047f4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047f8:	fab3 f383 	clz	r3, r3
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004802:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	461a      	mov	r2, r3
 800480a:	2301      	movs	r3, #1
 800480c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480e:	f7fe f845 	bl	800289c <HAL_GetTick>
 8004812:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004816:	e00a      	b.n	800482e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004818:	f7fe f840 	bl	800289c <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d902      	bls.n	800482e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	f000 be06 	b.w	800543a <HAL_RCC_OscConfig+0x109a>
 800482e:	2302      	movs	r3, #2
 8004830:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004834:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004838:	fa93 f3a3 	rbit	r3, r3
 800483c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004840:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004844:	fab3 f383 	clz	r3, r3
 8004848:	b2db      	uxtb	r3, r3
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	d102      	bne.n	800485e <HAL_RCC_OscConfig+0x4be>
 8004858:	4b45      	ldr	r3, [pc, #276]	; (8004970 <HAL_RCC_OscConfig+0x5d0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	e013      	b.n	8004886 <HAL_RCC_OscConfig+0x4e6>
 800485e:	2302      	movs	r3, #2
 8004860:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004864:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004868:	fa93 f3a3 	rbit	r3, r3
 800486c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004870:	2302      	movs	r3, #2
 8004872:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004876:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800487a:	fa93 f3a3 	rbit	r3, r3
 800487e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004882:	4b3b      	ldr	r3, [pc, #236]	; (8004970 <HAL_RCC_OscConfig+0x5d0>)
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	2202      	movs	r2, #2
 8004888:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800488c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004890:	fa92 f2a2 	rbit	r2, r2
 8004894:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004898:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800489c:	fab2 f282 	clz	r2, r2
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	f042 0220 	orr.w	r2, r2, #32
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	f002 021f 	and.w	r2, r2, #31
 80048ac:	2101      	movs	r1, #1
 80048ae:	fa01 f202 	lsl.w	r2, r1, r2
 80048b2:	4013      	ands	r3, r2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0af      	beq.n	8004818 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b8:	4b2d      	ldr	r3, [pc, #180]	; (8004970 <HAL_RCC_OscConfig+0x5d0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	21f8      	movs	r1, #248	; 0xf8
 80048ce:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80048d6:	fa91 f1a1 	rbit	r1, r1
 80048da:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80048de:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80048e2:	fab1 f181 	clz	r1, r1
 80048e6:	b2c9      	uxtb	r1, r1
 80048e8:	408b      	lsls	r3, r1
 80048ea:	4921      	ldr	r1, [pc, #132]	; (8004970 <HAL_RCC_OscConfig+0x5d0>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	600b      	str	r3, [r1, #0]
 80048f0:	e06d      	b.n	80049ce <HAL_RCC_OscConfig+0x62e>
 80048f2:	2301      	movs	r3, #1
 80048f4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80048fc:	fa93 f3a3 	rbit	r3, r3
 8004900:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004904:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004908:	fab3 f383 	clz	r3, r3
 800490c:	b2db      	uxtb	r3, r3
 800490e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004912:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	461a      	mov	r2, r3
 800491a:	2300      	movs	r3, #0
 800491c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491e:	f7fd ffbd 	bl	800289c <HAL_GetTick>
 8004922:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004926:	e00a      	b.n	800493e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004928:	f7fd ffb8 	bl	800289c <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d902      	bls.n	800493e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	f000 bd7e 	b.w	800543a <HAL_RCC_OscConfig+0x109a>
 800493e:	2302      	movs	r3, #2
 8004940:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004944:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004948:	fa93 f3a3 	rbit	r3, r3
 800494c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004950:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004954:	fab3 f383 	clz	r3, r3
 8004958:	b2db      	uxtb	r3, r3
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f043 0301 	orr.w	r3, r3, #1
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	d105      	bne.n	8004974 <HAL_RCC_OscConfig+0x5d4>
 8004968:	4b01      	ldr	r3, [pc, #4]	; (8004970 <HAL_RCC_OscConfig+0x5d0>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	e016      	b.n	800499c <HAL_RCC_OscConfig+0x5fc>
 800496e:	bf00      	nop
 8004970:	40021000 	.word	0x40021000
 8004974:	2302      	movs	r3, #2
 8004976:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800497e:	fa93 f3a3 	rbit	r3, r3
 8004982:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004986:	2302      	movs	r3, #2
 8004988:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800498c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004990:	fa93 f3a3 	rbit	r3, r3
 8004994:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004998:	4bbf      	ldr	r3, [pc, #764]	; (8004c98 <HAL_RCC_OscConfig+0x8f8>)
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	2202      	movs	r2, #2
 800499e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80049a2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80049a6:	fa92 f2a2 	rbit	r2, r2
 80049aa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80049ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80049b2:	fab2 f282 	clz	r2, r2
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	f042 0220 	orr.w	r2, r2, #32
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	f002 021f 	and.w	r2, r2, #31
 80049c2:	2101      	movs	r1, #1
 80049c4:	fa01 f202 	lsl.w	r2, r1, r2
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1ac      	bne.n	8004928 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 8113 	beq.w	8004c0a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d07c      	beq.n	8004aee <HAL_RCC_OscConfig+0x74e>
 80049f4:	2301      	movs	r3, #1
 80049f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049fe:	fa93 f3a3 	rbit	r3, r3
 8004a02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004a06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a0a:	fab3 f383 	clz	r3, r3
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	4ba2      	ldr	r3, [pc, #648]	; (8004c9c <HAL_RCC_OscConfig+0x8fc>)
 8004a14:	4413      	add	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a1e:	f7fd ff3d 	bl	800289c <HAL_GetTick>
 8004a22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a26:	e00a      	b.n	8004a3e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a28:	f7fd ff38 	bl	800289c <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d902      	bls.n	8004a3e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	f000 bcfe 	b.w	800543a <HAL_RCC_OscConfig+0x109a>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a48:	fa93 f2a3 	rbit	r2, r3
 8004a4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a50:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a5e:	2202      	movs	r2, #2
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	fa93 f2a3 	rbit	r2, r3
 8004a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a82:	2202      	movs	r2, #2
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	fa93 f2a3 	rbit	r2, r3
 8004a94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a98:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004a9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9e:	4b7e      	ldr	r3, [pc, #504]	; (8004c98 <HAL_RCC_OscConfig+0x8f8>)
 8004aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aa6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004aaa:	2102      	movs	r1, #2
 8004aac:	6019      	str	r1, [r3, #0]
 8004aae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ab2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	fa93 f1a3 	rbit	r1, r3
 8004abc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ac0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ac4:	6019      	str	r1, [r3, #0]
  return result;
 8004ac6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	fab3 f383 	clz	r3, r3
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	f003 031f 	and.w	r3, r3, #31
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d09d      	beq.n	8004a28 <HAL_RCC_OscConfig+0x688>
 8004aec:	e08d      	b.n	8004c0a <HAL_RCC_OscConfig+0x86a>
 8004aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004af2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004af6:	2201      	movs	r2, #1
 8004af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004afe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	fa93 f2a3 	rbit	r2, r3
 8004b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b0c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b10:	601a      	str	r2, [r3, #0]
  return result;
 8004b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b16:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b1a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b1c:	fab3 f383 	clz	r3, r3
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	461a      	mov	r2, r3
 8004b24:	4b5d      	ldr	r3, [pc, #372]	; (8004c9c <HAL_RCC_OscConfig+0x8fc>)
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b30:	f7fd feb4 	bl	800289c <HAL_GetTick>
 8004b34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b38:	e00a      	b.n	8004b50 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b3a:	f7fd feaf 	bl	800289c <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d902      	bls.n	8004b50 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	f000 bc75 	b.w	800543a <HAL_RCC_OscConfig+0x109a>
 8004b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b54:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004b58:	2202      	movs	r2, #2
 8004b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b60:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	fa93 f2a3 	rbit	r2, r3
 8004b6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b6e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	fa93 f2a3 	rbit	r2, r3
 8004b8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b9c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ba8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	fa93 f2a3 	rbit	r2, r3
 8004bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bb6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004bba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bbc:	4b36      	ldr	r3, [pc, #216]	; (8004c98 <HAL_RCC_OscConfig+0x8f8>)
 8004bbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bc4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004bc8:	2102      	movs	r1, #2
 8004bca:	6019      	str	r1, [r3, #0]
 8004bcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bd0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	fa93 f1a3 	rbit	r1, r3
 8004bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bde:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004be2:	6019      	str	r1, [r3, #0]
  return result;
 8004be4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004be8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	fab3 f383 	clz	r3, r3
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	f003 031f 	and.w	r3, r3, #31
 8004bfe:	2101      	movs	r1, #1
 8004c00:	fa01 f303 	lsl.w	r3, r1, r3
 8004c04:	4013      	ands	r3, r2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d197      	bne.n	8004b3a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 81a5 	beq.w	8004f6a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c20:	2300      	movs	r3, #0
 8004c22:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c26:	4b1c      	ldr	r3, [pc, #112]	; (8004c98 <HAL_RCC_OscConfig+0x8f8>)
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d116      	bne.n	8004c60 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c32:	4b19      	ldr	r3, [pc, #100]	; (8004c98 <HAL_RCC_OscConfig+0x8f8>)
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	4a18      	ldr	r2, [pc, #96]	; (8004c98 <HAL_RCC_OscConfig+0x8f8>)
 8004c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	61d3      	str	r3, [r2, #28]
 8004c3e:	4b16      	ldr	r3, [pc, #88]	; (8004c98 <HAL_RCC_OscConfig+0x8f8>)
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004c46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c58:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c60:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <HAL_RCC_OscConfig+0x900>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d121      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <HAL_RCC_OscConfig+0x900>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a0b      	ldr	r2, [pc, #44]	; (8004ca0 <HAL_RCC_OscConfig+0x900>)
 8004c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c76:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c78:	f7fd fe10 	bl	800289c <HAL_GetTick>
 8004c7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c80:	e010      	b.n	8004ca4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c82:	f7fd fe0b 	bl	800289c <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b64      	cmp	r3, #100	; 0x64
 8004c90:	d908      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e3d1      	b.n	800543a <HAL_RCC_OscConfig+0x109a>
 8004c96:	bf00      	nop
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	10908120 	.word	0x10908120
 8004ca0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca4:	4b8d      	ldr	r3, [pc, #564]	; (8004edc <HAL_RCC_OscConfig+0xb3c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0e8      	beq.n	8004c82 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d106      	bne.n	8004cce <HAL_RCC_OscConfig+0x92e>
 8004cc0:	4b87      	ldr	r3, [pc, #540]	; (8004ee0 <HAL_RCC_OscConfig+0xb40>)
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	4a86      	ldr	r2, [pc, #536]	; (8004ee0 <HAL_RCC_OscConfig+0xb40>)
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	6213      	str	r3, [r2, #32]
 8004ccc:	e035      	b.n	8004d3a <HAL_RCC_OscConfig+0x99a>
 8004cce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x958>
 8004cde:	4b80      	ldr	r3, [pc, #512]	; (8004ee0 <HAL_RCC_OscConfig+0xb40>)
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	4a7f      	ldr	r2, [pc, #508]	; (8004ee0 <HAL_RCC_OscConfig+0xb40>)
 8004ce4:	f023 0301 	bic.w	r3, r3, #1
 8004ce8:	6213      	str	r3, [r2, #32]
 8004cea:	4b7d      	ldr	r3, [pc, #500]	; (8004ee0 <HAL_RCC_OscConfig+0xb40>)
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	4a7c      	ldr	r2, [pc, #496]	; (8004ee0 <HAL_RCC_OscConfig+0xb40>)
 8004cf0:	f023 0304 	bic.w	r3, r3, #4
 8004cf4:	6213      	str	r3, [r2, #32]
 8004cf6:	e020      	b.n	8004d3a <HAL_RCC_OscConfig+0x99a>
 8004cf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cfc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2b05      	cmp	r3, #5
 8004d06:	d10c      	bne.n	8004d22 <HAL_RCC_OscConfig+0x982>
 8004d08:	4b75      	ldr	r3, [pc, #468]	; (8004ee0 <HAL_RCC_OscConfig+0xb40>)
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	4a74      	ldr	r2, [pc, #464]	; (8004ee0 <HAL_RCC_OscConfig+0xb40>)
 8004d0e:	f043 0304 	orr.w	r3, r3, #4
 8004d12:	6213      	str	r3, [r2, #32]
 8004d14:	4b72      	ldr	r3, [pc, #456]	; (8004ee0 <HAL_RCC_OscConfig+0xb40>)
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	4a71      	ldr	r2, [pc, #452]	; (8004ee0 <HAL_RCC_OscConfig+0xb40>)
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	6213      	str	r3, [r2, #32]
 8004d20:	e00b      	b.n	8004d3a <HAL_RCC_OscConfig+0x99a>
 8004d22:	4b6f      	ldr	r3, [pc, #444]	; (8004ee0 <HAL_RCC_OscConfig+0xb40>)
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	4a6e      	ldr	r2, [pc, #440]	; (8004ee0 <HAL_RCC_OscConfig+0xb40>)
 8004d28:	f023 0301 	bic.w	r3, r3, #1
 8004d2c:	6213      	str	r3, [r2, #32]
 8004d2e:	4b6c      	ldr	r3, [pc, #432]	; (8004ee0 <HAL_RCC_OscConfig+0xb40>)
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	4a6b      	ldr	r2, [pc, #428]	; (8004ee0 <HAL_RCC_OscConfig+0xb40>)
 8004d34:	f023 0304 	bic.w	r3, r3, #4
 8004d38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 8081 	beq.w	8004e4e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d4c:	f7fd fda6 	bl	800289c <HAL_GetTick>
 8004d50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d54:	e00b      	b.n	8004d6e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d56:	f7fd fda1 	bl	800289c <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e365      	b.n	800543a <HAL_RCC_OscConfig+0x109a>
 8004d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d72:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004d76:	2202      	movs	r2, #2
 8004d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d7e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	fa93 f2a3 	rbit	r2, r3
 8004d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d96:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004da2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	fa93 f2a3 	rbit	r2, r3
 8004dac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004db0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004db4:	601a      	str	r2, [r3, #0]
  return result;
 8004db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dba:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004dbe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc0:	fab3 f383 	clz	r3, r3
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	f043 0302 	orr.w	r3, r3, #2
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d102      	bne.n	8004dda <HAL_RCC_OscConfig+0xa3a>
 8004dd4:	4b42      	ldr	r3, [pc, #264]	; (8004ee0 <HAL_RCC_OscConfig+0xb40>)
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	e013      	b.n	8004e02 <HAL_RCC_OscConfig+0xa62>
 8004dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dde:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004de2:	2202      	movs	r2, #2
 8004de4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	fa93 f2a3 	rbit	r2, r3
 8004df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004df8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	4b38      	ldr	r3, [pc, #224]	; (8004ee0 <HAL_RCC_OscConfig+0xb40>)
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e06:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004e0a:	2102      	movs	r1, #2
 8004e0c:	6011      	str	r1, [r2, #0]
 8004e0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e12:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004e16:	6812      	ldr	r2, [r2, #0]
 8004e18:	fa92 f1a2 	rbit	r1, r2
 8004e1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e20:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004e24:	6011      	str	r1, [r2, #0]
  return result;
 8004e26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e2a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	fab2 f282 	clz	r2, r2
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	f002 021f 	and.w	r2, r2, #31
 8004e40:	2101      	movs	r1, #1
 8004e42:	fa01 f202 	lsl.w	r2, r1, r2
 8004e46:	4013      	ands	r3, r2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d084      	beq.n	8004d56 <HAL_RCC_OscConfig+0x9b6>
 8004e4c:	e083      	b.n	8004f56 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4e:	f7fd fd25 	bl	800289c <HAL_GetTick>
 8004e52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e56:	e00b      	b.n	8004e70 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e58:	f7fd fd20 	bl	800289c <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e2e4      	b.n	800543a <HAL_RCC_OscConfig+0x109a>
 8004e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e74:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004e78:	2202      	movs	r2, #2
 8004e7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e80:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	fa93 f2a3 	rbit	r2, r3
 8004e8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e8e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e98:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ea4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	fa93 f2a3 	rbit	r2, r3
 8004eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eb2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004eb6:	601a      	str	r2, [r3, #0]
  return result;
 8004eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ebc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004ec0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ec2:	fab3 f383 	clz	r3, r3
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	f043 0302 	orr.w	r3, r3, #2
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d106      	bne.n	8004ee4 <HAL_RCC_OscConfig+0xb44>
 8004ed6:	4b02      	ldr	r3, [pc, #8]	; (8004ee0 <HAL_RCC_OscConfig+0xb40>)
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	e017      	b.n	8004f0c <HAL_RCC_OscConfig+0xb6c>
 8004edc:	40007000 	.word	0x40007000
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ee8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004eec:	2202      	movs	r2, #2
 8004eee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ef4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	fa93 f2a3 	rbit	r2, r3
 8004efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f02:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	4bb3      	ldr	r3, [pc, #716]	; (80051d8 <HAL_RCC_OscConfig+0xe38>)
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f10:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004f14:	2102      	movs	r1, #2
 8004f16:	6011      	str	r1, [r2, #0]
 8004f18:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f1c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	fa92 f1a2 	rbit	r1, r2
 8004f26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f2a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004f2e:	6011      	str	r1, [r2, #0]
  return result;
 8004f30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f34:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	fab2 f282 	clz	r2, r2
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	f002 021f 	and.w	r2, r2, #31
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f50:	4013      	ands	r3, r2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d180      	bne.n	8004e58 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f56:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d105      	bne.n	8004f6a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f5e:	4b9e      	ldr	r3, [pc, #632]	; (80051d8 <HAL_RCC_OscConfig+0xe38>)
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	4a9d      	ldr	r2, [pc, #628]	; (80051d8 <HAL_RCC_OscConfig+0xe38>)
 8004f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f68:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 825e 	beq.w	8005438 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f7c:	4b96      	ldr	r3, [pc, #600]	; (80051d8 <HAL_RCC_OscConfig+0xe38>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 030c 	and.w	r3, r3, #12
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	f000 821f 	beq.w	80053c8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	f040 8170 	bne.w	800527c <HAL_RCC_OscConfig+0xedc>
 8004f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fa0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004fa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	fa93 f2a3 	rbit	r2, r3
 8004fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fbc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004fc0:	601a      	str	r2, [r3, #0]
  return result;
 8004fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fc6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004fca:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fcc:	fab3 f383 	clz	r3, r3
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fd6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	461a      	mov	r2, r3
 8004fde:	2300      	movs	r3, #0
 8004fe0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe2:	f7fd fc5b 	bl	800289c <HAL_GetTick>
 8004fe6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fea:	e009      	b.n	8005000 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fec:	f7fd fc56 	bl	800289c <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e21c      	b.n	800543a <HAL_RCC_OscConfig+0x109a>
 8005000:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005004:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800500c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005012:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	fa93 f2a3 	rbit	r2, r3
 800501c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005020:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005024:	601a      	str	r2, [r3, #0]
  return result;
 8005026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800502a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800502e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005030:	fab3 f383 	clz	r3, r3
 8005034:	b2db      	uxtb	r3, r3
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	b2db      	uxtb	r3, r3
 800503a:	f043 0301 	orr.w	r3, r3, #1
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b01      	cmp	r3, #1
 8005042:	d102      	bne.n	800504a <HAL_RCC_OscConfig+0xcaa>
 8005044:	4b64      	ldr	r3, [pc, #400]	; (80051d8 <HAL_RCC_OscConfig+0xe38>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	e027      	b.n	800509a <HAL_RCC_OscConfig+0xcfa>
 800504a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800504e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005052:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005056:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800505c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	fa93 f2a3 	rbit	r2, r3
 8005066:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800506a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005074:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005078:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005082:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	fa93 f2a3 	rbit	r2, r3
 800508c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005090:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	4b50      	ldr	r3, [pc, #320]	; (80051d8 <HAL_RCC_OscConfig+0xe38>)
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800509e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80050a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80050a6:	6011      	str	r1, [r2, #0]
 80050a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050ac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	fa92 f1a2 	rbit	r1, r2
 80050b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050ba:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80050be:	6011      	str	r1, [r2, #0]
  return result;
 80050c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050c4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80050c8:	6812      	ldr	r2, [r2, #0]
 80050ca:	fab2 f282 	clz	r2, r2
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	f042 0220 	orr.w	r2, r2, #32
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	f002 021f 	and.w	r2, r2, #31
 80050da:	2101      	movs	r1, #1
 80050dc:	fa01 f202 	lsl.w	r2, r1, r2
 80050e0:	4013      	ands	r3, r2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d182      	bne.n	8004fec <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050e6:	4b3c      	ldr	r3, [pc, #240]	; (80051d8 <HAL_RCC_OscConfig+0xe38>)
 80050e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ea:	f023 020f 	bic.w	r2, r3, #15
 80050ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	4937      	ldr	r1, [pc, #220]	; (80051d8 <HAL_RCC_OscConfig+0xe38>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005100:	4b35      	ldr	r3, [pc, #212]	; (80051d8 <HAL_RCC_OscConfig+0xe38>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005108:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800510c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6a19      	ldr	r1, [r3, #32]
 8005114:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005118:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	430b      	orrs	r3, r1
 8005122:	492d      	ldr	r1, [pc, #180]	; (80051d8 <HAL_RCC_OscConfig+0xe38>)
 8005124:	4313      	orrs	r3, r2
 8005126:	604b      	str	r3, [r1, #4]
 8005128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800512c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005130:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005136:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800513a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	fa93 f2a3 	rbit	r2, r3
 8005144:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005148:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800514c:	601a      	str	r2, [r3, #0]
  return result;
 800514e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005152:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005156:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005158:	fab3 f383 	clz	r3, r3
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005162:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	461a      	mov	r2, r3
 800516a:	2301      	movs	r3, #1
 800516c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516e:	f7fd fb95 	bl	800289c <HAL_GetTick>
 8005172:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005176:	e009      	b.n	800518c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005178:	f7fd fb90 	bl	800289c <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e156      	b.n	800543a <HAL_RCC_OscConfig+0x109a>
 800518c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005190:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005194:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005198:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800519e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	fa93 f2a3 	rbit	r2, r3
 80051a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051ac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80051b0:	601a      	str	r2, [r3, #0]
  return result;
 80051b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80051ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051bc:	fab3 f383 	clz	r3, r3
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	f043 0301 	orr.w	r3, r3, #1
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d105      	bne.n	80051dc <HAL_RCC_OscConfig+0xe3c>
 80051d0:	4b01      	ldr	r3, [pc, #4]	; (80051d8 <HAL_RCC_OscConfig+0xe38>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	e02a      	b.n	800522c <HAL_RCC_OscConfig+0xe8c>
 80051d6:	bf00      	nop
 80051d8:	40021000 	.word	0x40021000
 80051dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051e0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80051e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051ee:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	fa93 f2a3 	rbit	r2, r3
 80051f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051fc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005206:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800520a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005214:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	fa93 f2a3 	rbit	r2, r3
 800521e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005222:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	4b86      	ldr	r3, [pc, #536]	; (8005444 <HAL_RCC_OscConfig+0x10a4>)
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005230:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005234:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005238:	6011      	str	r1, [r2, #0]
 800523a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800523e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005242:	6812      	ldr	r2, [r2, #0]
 8005244:	fa92 f1a2 	rbit	r1, r2
 8005248:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800524c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005250:	6011      	str	r1, [r2, #0]
  return result;
 8005252:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005256:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800525a:	6812      	ldr	r2, [r2, #0]
 800525c:	fab2 f282 	clz	r2, r2
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	f042 0220 	orr.w	r2, r2, #32
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	f002 021f 	and.w	r2, r2, #31
 800526c:	2101      	movs	r1, #1
 800526e:	fa01 f202 	lsl.w	r2, r1, r2
 8005272:	4013      	ands	r3, r2
 8005274:	2b00      	cmp	r3, #0
 8005276:	f43f af7f 	beq.w	8005178 <HAL_RCC_OscConfig+0xdd8>
 800527a:	e0dd      	b.n	8005438 <HAL_RCC_OscConfig+0x1098>
 800527c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005280:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005284:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800528e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	fa93 f2a3 	rbit	r2, r3
 8005298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800529c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80052a0:	601a      	str	r2, [r3, #0]
  return result;
 80052a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052a6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80052aa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ac:	fab3 f383 	clz	r3, r3
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80052b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	461a      	mov	r2, r3
 80052be:	2300      	movs	r3, #0
 80052c0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c2:	f7fd faeb 	bl	800289c <HAL_GetTick>
 80052c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052ca:	e009      	b.n	80052e0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052cc:	f7fd fae6 	bl	800289c <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e0ac      	b.n	800543a <HAL_RCC_OscConfig+0x109a>
 80052e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80052e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052f2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	fa93 f2a3 	rbit	r2, r3
 80052fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005300:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005304:	601a      	str	r2, [r3, #0]
  return result;
 8005306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800530a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800530e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005310:	fab3 f383 	clz	r3, r3
 8005314:	b2db      	uxtb	r3, r3
 8005316:	095b      	lsrs	r3, r3, #5
 8005318:	b2db      	uxtb	r3, r3
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b01      	cmp	r3, #1
 8005322:	d102      	bne.n	800532a <HAL_RCC_OscConfig+0xf8a>
 8005324:	4b47      	ldr	r3, [pc, #284]	; (8005444 <HAL_RCC_OscConfig+0x10a4>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	e027      	b.n	800537a <HAL_RCC_OscConfig+0xfda>
 800532a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800532e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005332:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005336:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005338:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800533c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	fa93 f2a3 	rbit	r2, r3
 8005346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800534a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005354:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005358:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005362:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	fa93 f2a3 	rbit	r2, r3
 800536c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005370:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	4b33      	ldr	r3, [pc, #204]	; (8005444 <HAL_RCC_OscConfig+0x10a4>)
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800537e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005382:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005386:	6011      	str	r1, [r2, #0]
 8005388:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800538c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005390:	6812      	ldr	r2, [r2, #0]
 8005392:	fa92 f1a2 	rbit	r1, r2
 8005396:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800539a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800539e:	6011      	str	r1, [r2, #0]
  return result;
 80053a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80053a4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80053a8:	6812      	ldr	r2, [r2, #0]
 80053aa:	fab2 f282 	clz	r2, r2
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	f042 0220 	orr.w	r2, r2, #32
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	f002 021f 	and.w	r2, r2, #31
 80053ba:	2101      	movs	r1, #1
 80053bc:	fa01 f202 	lsl.w	r2, r1, r2
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d182      	bne.n	80052cc <HAL_RCC_OscConfig+0xf2c>
 80053c6:	e037      	b.n	8005438 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e02e      	b.n	800543a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80053dc:	4b19      	ldr	r3, [pc, #100]	; (8005444 <HAL_RCC_OscConfig+0x10a4>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80053e4:	4b17      	ldr	r3, [pc, #92]	; (8005444 <HAL_RCC_OscConfig+0x10a4>)
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80053ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80053f0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80053f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	429a      	cmp	r2, r3
 8005402:	d117      	bne.n	8005434 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005404:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005408:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800540c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005410:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005418:	429a      	cmp	r2, r3
 800541a:	d10b      	bne.n	8005434 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800541c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005420:	f003 020f 	and.w	r2, r3, #15
 8005424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005428:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005430:	429a      	cmp	r2, r3
 8005432:	d001      	beq.n	8005438 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40021000 	.word	0x40021000

08005448 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b09e      	sub	sp, #120	; 0x78
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e162      	b.n	8005726 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005460:	4b90      	ldr	r3, [pc, #576]	; (80056a4 <HAL_RCC_ClockConfig+0x25c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d910      	bls.n	8005490 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546e:	4b8d      	ldr	r3, [pc, #564]	; (80056a4 <HAL_RCC_ClockConfig+0x25c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 0207 	bic.w	r2, r3, #7
 8005476:	498b      	ldr	r1, [pc, #556]	; (80056a4 <HAL_RCC_ClockConfig+0x25c>)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	4313      	orrs	r3, r2
 800547c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800547e:	4b89      	ldr	r3, [pc, #548]	; (80056a4 <HAL_RCC_ClockConfig+0x25c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d001      	beq.n	8005490 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e14a      	b.n	8005726 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d008      	beq.n	80054ae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800549c:	4b82      	ldr	r3, [pc, #520]	; (80056a8 <HAL_RCC_ClockConfig+0x260>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	497f      	ldr	r1, [pc, #508]	; (80056a8 <HAL_RCC_ClockConfig+0x260>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 80dc 	beq.w	8005674 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d13c      	bne.n	800553e <HAL_RCC_ClockConfig+0xf6>
 80054c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054c8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054cc:	fa93 f3a3 	rbit	r3, r3
 80054d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80054d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054d4:	fab3 f383 	clz	r3, r3
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f043 0301 	orr.w	r3, r3, #1
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d102      	bne.n	80054ee <HAL_RCC_ClockConfig+0xa6>
 80054e8:	4b6f      	ldr	r3, [pc, #444]	; (80056a8 <HAL_RCC_ClockConfig+0x260>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	e00f      	b.n	800550e <HAL_RCC_ClockConfig+0xc6>
 80054ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054f6:	fa93 f3a3 	rbit	r3, r3
 80054fa:	667b      	str	r3, [r7, #100]	; 0x64
 80054fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005500:	663b      	str	r3, [r7, #96]	; 0x60
 8005502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005504:	fa93 f3a3 	rbit	r3, r3
 8005508:	65fb      	str	r3, [r7, #92]	; 0x5c
 800550a:	4b67      	ldr	r3, [pc, #412]	; (80056a8 <HAL_RCC_ClockConfig+0x260>)
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005512:	65ba      	str	r2, [r7, #88]	; 0x58
 8005514:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005516:	fa92 f2a2 	rbit	r2, r2
 800551a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800551c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800551e:	fab2 f282 	clz	r2, r2
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	f042 0220 	orr.w	r2, r2, #32
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	f002 021f 	and.w	r2, r2, #31
 800552e:	2101      	movs	r1, #1
 8005530:	fa01 f202 	lsl.w	r2, r1, r2
 8005534:	4013      	ands	r3, r2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d17b      	bne.n	8005632 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e0f3      	b.n	8005726 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	2b02      	cmp	r3, #2
 8005544:	d13c      	bne.n	80055c0 <HAL_RCC_ClockConfig+0x178>
 8005546:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800554a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800554e:	fa93 f3a3 	rbit	r3, r3
 8005552:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005556:	fab3 f383 	clz	r3, r3
 800555a:	b2db      	uxtb	r3, r3
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	b2db      	uxtb	r3, r3
 8005560:	f043 0301 	orr.w	r3, r3, #1
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b01      	cmp	r3, #1
 8005568:	d102      	bne.n	8005570 <HAL_RCC_ClockConfig+0x128>
 800556a:	4b4f      	ldr	r3, [pc, #316]	; (80056a8 <HAL_RCC_ClockConfig+0x260>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	e00f      	b.n	8005590 <HAL_RCC_ClockConfig+0x148>
 8005570:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005574:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005578:	fa93 f3a3 	rbit	r3, r3
 800557c:	647b      	str	r3, [r7, #68]	; 0x44
 800557e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005582:	643b      	str	r3, [r7, #64]	; 0x40
 8005584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005586:	fa93 f3a3 	rbit	r3, r3
 800558a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800558c:	4b46      	ldr	r3, [pc, #280]	; (80056a8 <HAL_RCC_ClockConfig+0x260>)
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005594:	63ba      	str	r2, [r7, #56]	; 0x38
 8005596:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005598:	fa92 f2a2 	rbit	r2, r2
 800559c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800559e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055a0:	fab2 f282 	clz	r2, r2
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	f042 0220 	orr.w	r2, r2, #32
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	f002 021f 	and.w	r2, r2, #31
 80055b0:	2101      	movs	r1, #1
 80055b2:	fa01 f202 	lsl.w	r2, r1, r2
 80055b6:	4013      	ands	r3, r2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d13a      	bne.n	8005632 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e0b2      	b.n	8005726 <HAL_RCC_ClockConfig+0x2de>
 80055c0:	2302      	movs	r3, #2
 80055c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c6:	fa93 f3a3 	rbit	r3, r3
 80055ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80055cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ce:	fab3 f383 	clz	r3, r3
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	095b      	lsrs	r3, r3, #5
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	f043 0301 	orr.w	r3, r3, #1
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d102      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x1a0>
 80055e2:	4b31      	ldr	r3, [pc, #196]	; (80056a8 <HAL_RCC_ClockConfig+0x260>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	e00d      	b.n	8005604 <HAL_RCC_ClockConfig+0x1bc>
 80055e8:	2302      	movs	r3, #2
 80055ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	fa93 f3a3 	rbit	r3, r3
 80055f2:	627b      	str	r3, [r7, #36]	; 0x24
 80055f4:	2302      	movs	r3, #2
 80055f6:	623b      	str	r3, [r7, #32]
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	fa93 f3a3 	rbit	r3, r3
 80055fe:	61fb      	str	r3, [r7, #28]
 8005600:	4b29      	ldr	r3, [pc, #164]	; (80056a8 <HAL_RCC_ClockConfig+0x260>)
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	2202      	movs	r2, #2
 8005606:	61ba      	str	r2, [r7, #24]
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	fa92 f2a2 	rbit	r2, r2
 800560e:	617a      	str	r2, [r7, #20]
  return result;
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	fab2 f282 	clz	r2, r2
 8005616:	b2d2      	uxtb	r2, r2
 8005618:	f042 0220 	orr.w	r2, r2, #32
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	f002 021f 	and.w	r2, r2, #31
 8005622:	2101      	movs	r1, #1
 8005624:	fa01 f202 	lsl.w	r2, r1, r2
 8005628:	4013      	ands	r3, r2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e079      	b.n	8005726 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005632:	4b1d      	ldr	r3, [pc, #116]	; (80056a8 <HAL_RCC_ClockConfig+0x260>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f023 0203 	bic.w	r2, r3, #3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	491a      	ldr	r1, [pc, #104]	; (80056a8 <HAL_RCC_ClockConfig+0x260>)
 8005640:	4313      	orrs	r3, r2
 8005642:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005644:	f7fd f92a 	bl	800289c <HAL_GetTick>
 8005648:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800564a:	e00a      	b.n	8005662 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800564c:	f7fd f926 	bl	800289c <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	f241 3288 	movw	r2, #5000	; 0x1388
 800565a:	4293      	cmp	r3, r2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e061      	b.n	8005726 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005662:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <HAL_RCC_ClockConfig+0x260>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f003 020c 	and.w	r2, r3, #12
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	429a      	cmp	r2, r3
 8005672:	d1eb      	bne.n	800564c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005674:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <HAL_RCC_ClockConfig+0x25c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d214      	bcs.n	80056ac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005682:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <HAL_RCC_ClockConfig+0x25c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f023 0207 	bic.w	r2, r3, #7
 800568a:	4906      	ldr	r1, [pc, #24]	; (80056a4 <HAL_RCC_ClockConfig+0x25c>)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	4313      	orrs	r3, r2
 8005690:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005692:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <HAL_RCC_ClockConfig+0x25c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d005      	beq.n	80056ac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e040      	b.n	8005726 <HAL_RCC_ClockConfig+0x2de>
 80056a4:	40022000 	.word	0x40022000
 80056a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d008      	beq.n	80056ca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056b8:	4b1d      	ldr	r3, [pc, #116]	; (8005730 <HAL_RCC_ClockConfig+0x2e8>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	491a      	ldr	r1, [pc, #104]	; (8005730 <HAL_RCC_ClockConfig+0x2e8>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d009      	beq.n	80056ea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056d6:	4b16      	ldr	r3, [pc, #88]	; (8005730 <HAL_RCC_ClockConfig+0x2e8>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	4912      	ldr	r1, [pc, #72]	; (8005730 <HAL_RCC_ClockConfig+0x2e8>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80056ea:	f000 f829 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 80056ee:	4601      	mov	r1, r0
 80056f0:	4b0f      	ldr	r3, [pc, #60]	; (8005730 <HAL_RCC_ClockConfig+0x2e8>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056f8:	22f0      	movs	r2, #240	; 0xf0
 80056fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	fa92 f2a2 	rbit	r2, r2
 8005702:	60fa      	str	r2, [r7, #12]
  return result;
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	fab2 f282 	clz	r2, r2
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	40d3      	lsrs	r3, r2
 800570e:	4a09      	ldr	r2, [pc, #36]	; (8005734 <HAL_RCC_ClockConfig+0x2ec>)
 8005710:	5cd3      	ldrb	r3, [r2, r3]
 8005712:	fa21 f303 	lsr.w	r3, r1, r3
 8005716:	4a08      	ldr	r2, [pc, #32]	; (8005738 <HAL_RCC_ClockConfig+0x2f0>)
 8005718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800571a:	4b08      	ldr	r3, [pc, #32]	; (800573c <HAL_RCC_ClockConfig+0x2f4>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4618      	mov	r0, r3
 8005720:	f7fd f878 	bl	8002814 <HAL_InitTick>
  
  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3778      	adds	r7, #120	; 0x78
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	40021000 	.word	0x40021000
 8005734:	080091d8 	.word	0x080091d8
 8005738:	20000064 	.word	0x20000064
 800573c:	20000068 	.word	0x20000068

08005740 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005740:	b480      	push	{r7}
 8005742:	b08b      	sub	sp, #44	; 0x2c
 8005744:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	61fb      	str	r3, [r7, #28]
 800574a:	2300      	movs	r3, #0
 800574c:	61bb      	str	r3, [r7, #24]
 800574e:	2300      	movs	r3, #0
 8005750:	627b      	str	r3, [r7, #36]	; 0x24
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800575a:	4b2a      	ldr	r3, [pc, #168]	; (8005804 <HAL_RCC_GetSysClockFreq+0xc4>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	f003 030c 	and.w	r3, r3, #12
 8005766:	2b04      	cmp	r3, #4
 8005768:	d002      	beq.n	8005770 <HAL_RCC_GetSysClockFreq+0x30>
 800576a:	2b08      	cmp	r3, #8
 800576c:	d003      	beq.n	8005776 <HAL_RCC_GetSysClockFreq+0x36>
 800576e:	e03f      	b.n	80057f0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005770:	4b25      	ldr	r3, [pc, #148]	; (8005808 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005772:	623b      	str	r3, [r7, #32]
      break;
 8005774:	e03f      	b.n	80057f6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800577c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005780:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	fa92 f2a2 	rbit	r2, r2
 8005788:	607a      	str	r2, [r7, #4]
  return result;
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	fab2 f282 	clz	r2, r2
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	40d3      	lsrs	r3, r2
 8005794:	4a1d      	ldr	r2, [pc, #116]	; (800580c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005796:	5cd3      	ldrb	r3, [r2, r3]
 8005798:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800579a:	4b1a      	ldr	r3, [pc, #104]	; (8005804 <HAL_RCC_GetSysClockFreq+0xc4>)
 800579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	220f      	movs	r2, #15
 80057a4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	fa92 f2a2 	rbit	r2, r2
 80057ac:	60fa      	str	r2, [r7, #12]
  return result;
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	fab2 f282 	clz	r2, r2
 80057b4:	b2d2      	uxtb	r2, r2
 80057b6:	40d3      	lsrs	r3, r2
 80057b8:	4a15      	ldr	r2, [pc, #84]	; (8005810 <HAL_RCC_GetSysClockFreq+0xd0>)
 80057ba:	5cd3      	ldrb	r3, [r2, r3]
 80057bc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80057c8:	4a0f      	ldr	r2, [pc, #60]	; (8005808 <HAL_RCC_GetSysClockFreq+0xc8>)
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	fb02 f303 	mul.w	r3, r2, r3
 80057d6:	627b      	str	r3, [r7, #36]	; 0x24
 80057d8:	e007      	b.n	80057ea <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80057da:	4a0b      	ldr	r2, [pc, #44]	; (8005808 <HAL_RCC_GetSysClockFreq+0xc8>)
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	fbb2 f2f3 	udiv	r2, r2, r3
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	fb02 f303 	mul.w	r3, r2, r3
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	623b      	str	r3, [r7, #32]
      break;
 80057ee:	e002      	b.n	80057f6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057f0:	4b05      	ldr	r3, [pc, #20]	; (8005808 <HAL_RCC_GetSysClockFreq+0xc8>)
 80057f2:	623b      	str	r3, [r7, #32]
      break;
 80057f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057f6:	6a3b      	ldr	r3, [r7, #32]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	372c      	adds	r7, #44	; 0x2c
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	40021000 	.word	0x40021000
 8005808:	007a1200 	.word	0x007a1200
 800580c:	080091f0 	.word	0x080091f0
 8005810:	08009200 	.word	0x08009200

08005814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005818:	4b03      	ldr	r3, [pc, #12]	; (8005828 <HAL_RCC_GetHCLKFreq+0x14>)
 800581a:	681b      	ldr	r3, [r3, #0]
}
 800581c:	4618      	mov	r0, r3
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	20000064 	.word	0x20000064

0800582c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005832:	f7ff ffef 	bl	8005814 <HAL_RCC_GetHCLKFreq>
 8005836:	4601      	mov	r1, r0
 8005838:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005840:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005844:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	fa92 f2a2 	rbit	r2, r2
 800584c:	603a      	str	r2, [r7, #0]
  return result;
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	fab2 f282 	clz	r2, r2
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	40d3      	lsrs	r3, r2
 8005858:	4a04      	ldr	r2, [pc, #16]	; (800586c <HAL_RCC_GetPCLK1Freq+0x40>)
 800585a:	5cd3      	ldrb	r3, [r2, r3]
 800585c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005860:	4618      	mov	r0, r3
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40021000 	.word	0x40021000
 800586c:	080091e8 	.word	0x080091e8

08005870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005876:	f7ff ffcd 	bl	8005814 <HAL_RCC_GetHCLKFreq>
 800587a:	4601      	mov	r1, r0
 800587c:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005884:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005888:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	fa92 f2a2 	rbit	r2, r2
 8005890:	603a      	str	r2, [r7, #0]
  return result;
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	fab2 f282 	clz	r2, r2
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	40d3      	lsrs	r3, r2
 800589c:	4a04      	ldr	r2, [pc, #16]	; (80058b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800589e:	5cd3      	ldrb	r3, [r2, r3]
 80058a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80058a4:	4618      	mov	r0, r3
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40021000 	.word	0x40021000
 80058b0:	080091e8 	.word	0x080091e8

080058b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b092      	sub	sp, #72	; 0x48
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80058c4:	2300      	movs	r3, #0
 80058c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 80d4 	beq.w	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058d8:	4b4e      	ldr	r3, [pc, #312]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10e      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058e4:	4b4b      	ldr	r3, [pc, #300]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	4a4a      	ldr	r2, [pc, #296]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ee:	61d3      	str	r3, [r2, #28]
 80058f0:	4b48      	ldr	r3, [pc, #288]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f8:	60bb      	str	r3, [r7, #8]
 80058fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058fc:	2301      	movs	r3, #1
 80058fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005902:	4b45      	ldr	r3, [pc, #276]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590a:	2b00      	cmp	r3, #0
 800590c:	d118      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800590e:	4b42      	ldr	r3, [pc, #264]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a41      	ldr	r2, [pc, #260]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005918:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800591a:	f7fc ffbf 	bl	800289c <HAL_GetTick>
 800591e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005920:	e008      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005922:	f7fc ffbb 	bl	800289c <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b64      	cmp	r3, #100	; 0x64
 800592e:	d901      	bls.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e1d6      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005934:	4b38      	ldr	r3, [pc, #224]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0f0      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005940:	4b34      	ldr	r3, [pc, #208]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005948:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800594a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 8084 	beq.w	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800595a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800595c:	429a      	cmp	r2, r3
 800595e:	d07c      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005960:	4b2c      	ldr	r3, [pc, #176]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800596a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800596e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005972:	fa93 f3a3 	rbit	r3, r3
 8005976:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800597a:	fab3 f383 	clz	r3, r3
 800597e:	b2db      	uxtb	r3, r3
 8005980:	461a      	mov	r2, r3
 8005982:	4b26      	ldr	r3, [pc, #152]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005984:	4413      	add	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	461a      	mov	r2, r3
 800598a:	2301      	movs	r3, #1
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005992:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005996:	fa93 f3a3 	rbit	r3, r3
 800599a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800599c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800599e:	fab3 f383 	clz	r3, r3
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	461a      	mov	r2, r3
 80059a6:	4b1d      	ldr	r3, [pc, #116]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80059a8:	4413      	add	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	461a      	mov	r2, r3
 80059ae:	2300      	movs	r3, #0
 80059b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80059b2:	4a18      	ldr	r2, [pc, #96]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80059b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d04b      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c2:	f7fc ff6b 	bl	800289c <HAL_GetTick>
 80059c6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059c8:	e00a      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ca:	f7fc ff67 	bl	800289c <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d8:	4293      	cmp	r3, r2
 80059da:	d901      	bls.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e180      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80059e0:	2302      	movs	r3, #2
 80059e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	fa93 f3a3 	rbit	r3, r3
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24
 80059ec:	2302      	movs	r3, #2
 80059ee:	623b      	str	r3, [r7, #32]
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	fa93 f3a3 	rbit	r3, r3
 80059f6:	61fb      	str	r3, [r7, #28]
  return result;
 80059f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059fa:	fab3 f383 	clz	r3, r3
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	095b      	lsrs	r3, r3, #5
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	f043 0302 	orr.w	r3, r3, #2
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d108      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005a0e:	4b01      	ldr	r3, [pc, #4]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	e00d      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005a14:	40021000 	.word	0x40021000
 8005a18:	40007000 	.word	0x40007000
 8005a1c:	10908100 	.word	0x10908100
 8005a20:	2302      	movs	r3, #2
 8005a22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	fa93 f3a3 	rbit	r3, r3
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	4b9a      	ldr	r3, [pc, #616]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	2202      	movs	r2, #2
 8005a32:	613a      	str	r2, [r7, #16]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	fa92 f2a2 	rbit	r2, r2
 8005a3a:	60fa      	str	r2, [r7, #12]
  return result;
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	fab2 f282 	clz	r2, r2
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a48:	b2d2      	uxtb	r2, r2
 8005a4a:	f002 021f 	and.w	r2, r2, #31
 8005a4e:	2101      	movs	r1, #1
 8005a50:	fa01 f202 	lsl.w	r2, r1, r2
 8005a54:	4013      	ands	r3, r2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0b7      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005a5a:	4b8f      	ldr	r3, [pc, #572]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	498c      	ldr	r1, [pc, #560]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d105      	bne.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a74:	4b88      	ldr	r3, [pc, #544]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	4a87      	ldr	r2, [pc, #540]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d008      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a8c:	4b82      	ldr	r3, [pc, #520]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a90:	f023 0203 	bic.w	r2, r3, #3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	497f      	ldr	r1, [pc, #508]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d008      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005aaa:	4b7b      	ldr	r3, [pc, #492]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	4978      	ldr	r1, [pc, #480]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d008      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ac8:	4b73      	ldr	r3, [pc, #460]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005acc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	4970      	ldr	r1, [pc, #448]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d008      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ae6:	4b6c      	ldr	r3, [pc, #432]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aea:	f023 0210 	bic.w	r2, r3, #16
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	4969      	ldr	r1, [pc, #420]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d008      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005b04:	4b64      	ldr	r3, [pc, #400]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b10:	4961      	ldr	r1, [pc, #388]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d008      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b22:	4b5d      	ldr	r3, [pc, #372]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b26:	f023 0220 	bic.w	r2, r3, #32
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	495a      	ldr	r1, [pc, #360]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d008      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b40:	4b55      	ldr	r3, [pc, #340]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b44:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	4952      	ldr	r1, [pc, #328]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0308 	and.w	r3, r3, #8
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d008      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b5e:	4b4e      	ldr	r3, [pc, #312]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	494b      	ldr	r1, [pc, #300]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0310 	and.w	r3, r3, #16
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d008      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b7c:	4b46      	ldr	r3, [pc, #280]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	4943      	ldr	r1, [pc, #268]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d008      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b9a:	4b3f      	ldr	r3, [pc, #252]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba6:	493c      	ldr	r1, [pc, #240]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d008      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005bb8:	4b37      	ldr	r3, [pc, #220]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc4:	4934      	ldr	r1, [pc, #208]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d008      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005bd6:	4b30      	ldr	r3, [pc, #192]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bda:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be2:	492d      	ldr	r1, [pc, #180]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d008      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005bf4:	4b28      	ldr	r3, [pc, #160]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c00:	4925      	ldr	r1, [pc, #148]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d008      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005c12:	4b21      	ldr	r3, [pc, #132]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c16:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	491e      	ldr	r1, [pc, #120]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005c30:	4b19      	ldr	r3, [pc, #100]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c34:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3c:	4916      	ldr	r1, [pc, #88]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d008      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005c4e:	4b12      	ldr	r3, [pc, #72]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c52:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5a:	490f      	ldr	r1, [pc, #60]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d008      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005c6c:	4b0a      	ldr	r3, [pc, #40]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c70:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c78:	4907      	ldr	r1, [pc, #28]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00c      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005c8a:	4b03      	ldr	r3, [pc, #12]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	e002      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005c96:	bf00      	nop
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c9e:	4913      	ldr	r1, [pc, #76]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d008      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005cb0:	4b0e      	ldr	r3, [pc, #56]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cbc:	490b      	ldr	r1, [pc, #44]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d008      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005cce:	4b07      	ldr	r3, [pc, #28]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cda:	4904      	ldr	r1, [pc, #16]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3748      	adds	r7, #72	; 0x48
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	40021000 	.word	0x40021000

08005cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e049      	b.n	8005d96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fc faae 	bl	8002278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4610      	mov	r0, r2
 8005d30:	f000 fb80 	bl	8006434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b082      	sub	sp, #8
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e049      	b.n	8005e44 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d106      	bne.n	8005dca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f841 	bl	8005e4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4610      	mov	r0, r2
 8005dde:	f000 fb29 	bl	8006434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d109      	bne.n	8005e84 <HAL_TIM_PWM_Start+0x24>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	bf14      	ite	ne
 8005e7c:	2301      	movne	r3, #1
 8005e7e:	2300      	moveq	r3, #0
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	e03c      	b.n	8005efe <HAL_TIM_PWM_Start+0x9e>
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d109      	bne.n	8005e9e <HAL_TIM_PWM_Start+0x3e>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	bf14      	ite	ne
 8005e96:	2301      	movne	r3, #1
 8005e98:	2300      	moveq	r3, #0
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	e02f      	b.n	8005efe <HAL_TIM_PWM_Start+0x9e>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d109      	bne.n	8005eb8 <HAL_TIM_PWM_Start+0x58>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	bf14      	ite	ne
 8005eb0:	2301      	movne	r3, #1
 8005eb2:	2300      	moveq	r3, #0
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	e022      	b.n	8005efe <HAL_TIM_PWM_Start+0x9e>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2b0c      	cmp	r3, #12
 8005ebc:	d109      	bne.n	8005ed2 <HAL_TIM_PWM_Start+0x72>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	bf14      	ite	ne
 8005eca:	2301      	movne	r3, #1
 8005ecc:	2300      	moveq	r3, #0
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	e015      	b.n	8005efe <HAL_TIM_PWM_Start+0x9e>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b10      	cmp	r3, #16
 8005ed6:	d109      	bne.n	8005eec <HAL_TIM_PWM_Start+0x8c>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	bf14      	ite	ne
 8005ee4:	2301      	movne	r3, #1
 8005ee6:	2300      	moveq	r3, #0
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	e008      	b.n	8005efe <HAL_TIM_PWM_Start+0x9e>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	bf14      	ite	ne
 8005ef8:	2301      	movne	r3, #1
 8005efa:	2300      	moveq	r3, #0
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e0a1      	b.n	800604a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d104      	bne.n	8005f16 <HAL_TIM_PWM_Start+0xb6>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f14:	e023      	b.n	8005f5e <HAL_TIM_PWM_Start+0xfe>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b04      	cmp	r3, #4
 8005f1a:	d104      	bne.n	8005f26 <HAL_TIM_PWM_Start+0xc6>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f24:	e01b      	b.n	8005f5e <HAL_TIM_PWM_Start+0xfe>
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d104      	bne.n	8005f36 <HAL_TIM_PWM_Start+0xd6>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f34:	e013      	b.n	8005f5e <HAL_TIM_PWM_Start+0xfe>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b0c      	cmp	r3, #12
 8005f3a:	d104      	bne.n	8005f46 <HAL_TIM_PWM_Start+0xe6>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f44:	e00b      	b.n	8005f5e <HAL_TIM_PWM_Start+0xfe>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b10      	cmp	r3, #16
 8005f4a:	d104      	bne.n	8005f56 <HAL_TIM_PWM_Start+0xf6>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f54:	e003      	b.n	8005f5e <HAL_TIM_PWM_Start+0xfe>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2201      	movs	r2, #1
 8005f64:	6839      	ldr	r1, [r7, #0]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 fea2 	bl	8006cb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a38      	ldr	r2, [pc, #224]	; (8006054 <HAL_TIM_PWM_Start+0x1f4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d018      	beq.n	8005fa8 <HAL_TIM_PWM_Start+0x148>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a37      	ldr	r2, [pc, #220]	; (8006058 <HAL_TIM_PWM_Start+0x1f8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d013      	beq.n	8005fa8 <HAL_TIM_PWM_Start+0x148>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a35      	ldr	r2, [pc, #212]	; (800605c <HAL_TIM_PWM_Start+0x1fc>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00e      	beq.n	8005fa8 <HAL_TIM_PWM_Start+0x148>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a34      	ldr	r2, [pc, #208]	; (8006060 <HAL_TIM_PWM_Start+0x200>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d009      	beq.n	8005fa8 <HAL_TIM_PWM_Start+0x148>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a32      	ldr	r2, [pc, #200]	; (8006064 <HAL_TIM_PWM_Start+0x204>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d004      	beq.n	8005fa8 <HAL_TIM_PWM_Start+0x148>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a31      	ldr	r2, [pc, #196]	; (8006068 <HAL_TIM_PWM_Start+0x208>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d101      	bne.n	8005fac <HAL_TIM_PWM_Start+0x14c>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e000      	b.n	8005fae <HAL_TIM_PWM_Start+0x14e>
 8005fac:	2300      	movs	r3, #0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d007      	beq.n	8005fc2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a23      	ldr	r2, [pc, #140]	; (8006054 <HAL_TIM_PWM_Start+0x1f4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d01d      	beq.n	8006008 <HAL_TIM_PWM_Start+0x1a8>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd4:	d018      	beq.n	8006008 <HAL_TIM_PWM_Start+0x1a8>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a24      	ldr	r2, [pc, #144]	; (800606c <HAL_TIM_PWM_Start+0x20c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d013      	beq.n	8006008 <HAL_TIM_PWM_Start+0x1a8>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a22      	ldr	r2, [pc, #136]	; (8006070 <HAL_TIM_PWM_Start+0x210>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00e      	beq.n	8006008 <HAL_TIM_PWM_Start+0x1a8>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1a      	ldr	r2, [pc, #104]	; (8006058 <HAL_TIM_PWM_Start+0x1f8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d009      	beq.n	8006008 <HAL_TIM_PWM_Start+0x1a8>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a18      	ldr	r2, [pc, #96]	; (800605c <HAL_TIM_PWM_Start+0x1fc>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d004      	beq.n	8006008 <HAL_TIM_PWM_Start+0x1a8>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a19      	ldr	r2, [pc, #100]	; (8006068 <HAL_TIM_PWM_Start+0x208>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d115      	bne.n	8006034 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	4b19      	ldr	r3, [pc, #100]	; (8006074 <HAL_TIM_PWM_Start+0x214>)
 8006010:	4013      	ands	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2b06      	cmp	r3, #6
 8006018:	d015      	beq.n	8006046 <HAL_TIM_PWM_Start+0x1e6>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006020:	d011      	beq.n	8006046 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f042 0201 	orr.w	r2, r2, #1
 8006030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006032:	e008      	b.n	8006046 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	e000      	b.n	8006048 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006046:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	40012c00 	.word	0x40012c00
 8006058:	40013400 	.word	0x40013400
 800605c:	40014000 	.word	0x40014000
 8006060:	40014400 	.word	0x40014400
 8006064:	40014800 	.word	0x40014800
 8006068:	40015000 	.word	0x40015000
 800606c:	40000400 	.word	0x40000400
 8006070:	40000800 	.word	0x40000800
 8006074:	00010007 	.word	0x00010007

08006078 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006084:	2300      	movs	r3, #0
 8006086:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800608e:	2b01      	cmp	r3, #1
 8006090:	d101      	bne.n	8006096 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006092:	2302      	movs	r3, #2
 8006094:	e0ff      	b.n	8006296 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b14      	cmp	r3, #20
 80060a2:	f200 80f0 	bhi.w	8006286 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80060a6:	a201      	add	r2, pc, #4	; (adr r2, 80060ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ac:	08006101 	.word	0x08006101
 80060b0:	08006287 	.word	0x08006287
 80060b4:	08006287 	.word	0x08006287
 80060b8:	08006287 	.word	0x08006287
 80060bc:	08006141 	.word	0x08006141
 80060c0:	08006287 	.word	0x08006287
 80060c4:	08006287 	.word	0x08006287
 80060c8:	08006287 	.word	0x08006287
 80060cc:	08006183 	.word	0x08006183
 80060d0:	08006287 	.word	0x08006287
 80060d4:	08006287 	.word	0x08006287
 80060d8:	08006287 	.word	0x08006287
 80060dc:	080061c3 	.word	0x080061c3
 80060e0:	08006287 	.word	0x08006287
 80060e4:	08006287 	.word	0x08006287
 80060e8:	08006287 	.word	0x08006287
 80060ec:	08006205 	.word	0x08006205
 80060f0:	08006287 	.word	0x08006287
 80060f4:	08006287 	.word	0x08006287
 80060f8:	08006287 	.word	0x08006287
 80060fc:	08006245 	.word	0x08006245
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68b9      	ldr	r1, [r7, #8]
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fa32 	bl	8006570 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f042 0208 	orr.w	r2, r2, #8
 800611a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699a      	ldr	r2, [r3, #24]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0204 	bic.w	r2, r2, #4
 800612a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6999      	ldr	r1, [r3, #24]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	691a      	ldr	r2, [r3, #16]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	619a      	str	r2, [r3, #24]
      break;
 800613e:	e0a5      	b.n	800628c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68b9      	ldr	r1, [r7, #8]
 8006146:	4618      	mov	r0, r3
 8006148:	f000 faac 	bl	80066a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699a      	ldr	r2, [r3, #24]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800615a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699a      	ldr	r2, [r3, #24]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800616a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6999      	ldr	r1, [r3, #24]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	021a      	lsls	r2, r3, #8
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	619a      	str	r2, [r3, #24]
      break;
 8006180:	e084      	b.n	800628c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68b9      	ldr	r1, [r7, #8]
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fb1f 	bl	80067cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69da      	ldr	r2, [r3, #28]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0208 	orr.w	r2, r2, #8
 800619c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69da      	ldr	r2, [r3, #28]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0204 	bic.w	r2, r2, #4
 80061ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69d9      	ldr	r1, [r3, #28]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	691a      	ldr	r2, [r3, #16]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	61da      	str	r2, [r3, #28]
      break;
 80061c0:	e064      	b.n	800628c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68b9      	ldr	r1, [r7, #8]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fb91 	bl	80068f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69da      	ldr	r2, [r3, #28]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69da      	ldr	r2, [r3, #28]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69d9      	ldr	r1, [r3, #28]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	021a      	lsls	r2, r3, #8
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	61da      	str	r2, [r3, #28]
      break;
 8006202:	e043      	b.n	800628c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68b9      	ldr	r1, [r7, #8]
 800620a:	4618      	mov	r0, r3
 800620c:	f000 fbe0 	bl	80069d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0208 	orr.w	r2, r2, #8
 800621e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0204 	bic.w	r2, r2, #4
 800622e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	691a      	ldr	r2, [r3, #16]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006242:	e023      	b.n	800628c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fc2a 	bl	8006aa4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800625e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800626e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	021a      	lsls	r2, r3, #8
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006284:	e002      	b.n	800628c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	75fb      	strb	r3, [r7, #23]
      break;
 800628a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006294:	7dfb      	ldrb	r3, [r7, #23]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop

080062a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_TIM_ConfigClockSource+0x1c>
 80062b8:	2302      	movs	r3, #2
 80062ba:	e0b6      	b.n	800642a <HAL_TIM_ConfigClockSource+0x18a>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062f8:	d03e      	beq.n	8006378 <HAL_TIM_ConfigClockSource+0xd8>
 80062fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062fe:	f200 8087 	bhi.w	8006410 <HAL_TIM_ConfigClockSource+0x170>
 8006302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006306:	f000 8086 	beq.w	8006416 <HAL_TIM_ConfigClockSource+0x176>
 800630a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800630e:	d87f      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x170>
 8006310:	2b70      	cmp	r3, #112	; 0x70
 8006312:	d01a      	beq.n	800634a <HAL_TIM_ConfigClockSource+0xaa>
 8006314:	2b70      	cmp	r3, #112	; 0x70
 8006316:	d87b      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x170>
 8006318:	2b60      	cmp	r3, #96	; 0x60
 800631a:	d050      	beq.n	80063be <HAL_TIM_ConfigClockSource+0x11e>
 800631c:	2b60      	cmp	r3, #96	; 0x60
 800631e:	d877      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x170>
 8006320:	2b50      	cmp	r3, #80	; 0x50
 8006322:	d03c      	beq.n	800639e <HAL_TIM_ConfigClockSource+0xfe>
 8006324:	2b50      	cmp	r3, #80	; 0x50
 8006326:	d873      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x170>
 8006328:	2b40      	cmp	r3, #64	; 0x40
 800632a:	d058      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x13e>
 800632c:	2b40      	cmp	r3, #64	; 0x40
 800632e:	d86f      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x170>
 8006330:	2b30      	cmp	r3, #48	; 0x30
 8006332:	d064      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x15e>
 8006334:	2b30      	cmp	r3, #48	; 0x30
 8006336:	d86b      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x170>
 8006338:	2b20      	cmp	r3, #32
 800633a:	d060      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x15e>
 800633c:	2b20      	cmp	r3, #32
 800633e:	d867      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x170>
 8006340:	2b00      	cmp	r3, #0
 8006342:	d05c      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x15e>
 8006344:	2b10      	cmp	r3, #16
 8006346:	d05a      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x15e>
 8006348:	e062      	b.n	8006410 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6818      	ldr	r0, [r3, #0]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	6899      	ldr	r1, [r3, #8]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f000 fc89 	bl	8006c70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800636c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	609a      	str	r2, [r3, #8]
      break;
 8006376:	e04f      	b.n	8006418 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6818      	ldr	r0, [r3, #0]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	6899      	ldr	r1, [r3, #8]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f000 fc72 	bl	8006c70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800639a:	609a      	str	r2, [r3, #8]
      break;
 800639c:	e03c      	b.n	8006418 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6818      	ldr	r0, [r3, #0]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	6859      	ldr	r1, [r3, #4]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	461a      	mov	r2, r3
 80063ac:	f000 fbe6 	bl	8006b7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2150      	movs	r1, #80	; 0x50
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 fc3f 	bl	8006c3a <TIM_ITRx_SetConfig>
      break;
 80063bc:	e02c      	b.n	8006418 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6818      	ldr	r0, [r3, #0]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	6859      	ldr	r1, [r3, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	461a      	mov	r2, r3
 80063cc:	f000 fc05 	bl	8006bda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2160      	movs	r1, #96	; 0x60
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fc2f 	bl	8006c3a <TIM_ITRx_SetConfig>
      break;
 80063dc:	e01c      	b.n	8006418 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	6859      	ldr	r1, [r3, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	461a      	mov	r2, r3
 80063ec:	f000 fbc6 	bl	8006b7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2140      	movs	r1, #64	; 0x40
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fc1f 	bl	8006c3a <TIM_ITRx_SetConfig>
      break;
 80063fc:	e00c      	b.n	8006418 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4619      	mov	r1, r3
 8006408:	4610      	mov	r0, r2
 800640a:	f000 fc16 	bl	8006c3a <TIM_ITRx_SetConfig>
      break;
 800640e:	e003      	b.n	8006418 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	73fb      	strb	r3, [r7, #15]
      break;
 8006414:	e000      	b.n	8006418 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006416:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006428:	7bfb      	ldrb	r3, [r7, #15]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a42      	ldr	r2, [pc, #264]	; (8006550 <TIM_Base_SetConfig+0x11c>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d013      	beq.n	8006474 <TIM_Base_SetConfig+0x40>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006452:	d00f      	beq.n	8006474 <TIM_Base_SetConfig+0x40>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a3f      	ldr	r2, [pc, #252]	; (8006554 <TIM_Base_SetConfig+0x120>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d00b      	beq.n	8006474 <TIM_Base_SetConfig+0x40>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a3e      	ldr	r2, [pc, #248]	; (8006558 <TIM_Base_SetConfig+0x124>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d007      	beq.n	8006474 <TIM_Base_SetConfig+0x40>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a3d      	ldr	r2, [pc, #244]	; (800655c <TIM_Base_SetConfig+0x128>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d003      	beq.n	8006474 <TIM_Base_SetConfig+0x40>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a3c      	ldr	r2, [pc, #240]	; (8006560 <TIM_Base_SetConfig+0x12c>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d108      	bne.n	8006486 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a31      	ldr	r2, [pc, #196]	; (8006550 <TIM_Base_SetConfig+0x11c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d01f      	beq.n	80064ce <TIM_Base_SetConfig+0x9a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006494:	d01b      	beq.n	80064ce <TIM_Base_SetConfig+0x9a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a2e      	ldr	r2, [pc, #184]	; (8006554 <TIM_Base_SetConfig+0x120>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d017      	beq.n	80064ce <TIM_Base_SetConfig+0x9a>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a2d      	ldr	r2, [pc, #180]	; (8006558 <TIM_Base_SetConfig+0x124>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d013      	beq.n	80064ce <TIM_Base_SetConfig+0x9a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a2c      	ldr	r2, [pc, #176]	; (800655c <TIM_Base_SetConfig+0x128>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00f      	beq.n	80064ce <TIM_Base_SetConfig+0x9a>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a2c      	ldr	r2, [pc, #176]	; (8006564 <TIM_Base_SetConfig+0x130>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d00b      	beq.n	80064ce <TIM_Base_SetConfig+0x9a>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a2b      	ldr	r2, [pc, #172]	; (8006568 <TIM_Base_SetConfig+0x134>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d007      	beq.n	80064ce <TIM_Base_SetConfig+0x9a>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a2a      	ldr	r2, [pc, #168]	; (800656c <TIM_Base_SetConfig+0x138>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d003      	beq.n	80064ce <TIM_Base_SetConfig+0x9a>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a25      	ldr	r2, [pc, #148]	; (8006560 <TIM_Base_SetConfig+0x12c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d108      	bne.n	80064e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a12      	ldr	r2, [pc, #72]	; (8006550 <TIM_Base_SetConfig+0x11c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d013      	beq.n	8006534 <TIM_Base_SetConfig+0x100>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a13      	ldr	r2, [pc, #76]	; (800655c <TIM_Base_SetConfig+0x128>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d00f      	beq.n	8006534 <TIM_Base_SetConfig+0x100>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a13      	ldr	r2, [pc, #76]	; (8006564 <TIM_Base_SetConfig+0x130>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d00b      	beq.n	8006534 <TIM_Base_SetConfig+0x100>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a12      	ldr	r2, [pc, #72]	; (8006568 <TIM_Base_SetConfig+0x134>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d007      	beq.n	8006534 <TIM_Base_SetConfig+0x100>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a11      	ldr	r2, [pc, #68]	; (800656c <TIM_Base_SetConfig+0x138>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d003      	beq.n	8006534 <TIM_Base_SetConfig+0x100>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a0c      	ldr	r2, [pc, #48]	; (8006560 <TIM_Base_SetConfig+0x12c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d103      	bne.n	800653c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	691a      	ldr	r2, [r3, #16]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	615a      	str	r2, [r3, #20]
}
 8006542:	bf00      	nop
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	40012c00 	.word	0x40012c00
 8006554:	40000400 	.word	0x40000400
 8006558:	40000800 	.word	0x40000800
 800655c:	40013400 	.word	0x40013400
 8006560:	40015000 	.word	0x40015000
 8006564:	40014000 	.word	0x40014000
 8006568:	40014400 	.word	0x40014400
 800656c:	40014800 	.word	0x40014800

08006570 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	f023 0201 	bic.w	r2, r3, #1
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800659e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 0303 	bic.w	r3, r3, #3
 80065aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f023 0302 	bic.w	r3, r3, #2
 80065bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a30      	ldr	r2, [pc, #192]	; (800668c <TIM_OC1_SetConfig+0x11c>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d013      	beq.n	80065f8 <TIM_OC1_SetConfig+0x88>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a2f      	ldr	r2, [pc, #188]	; (8006690 <TIM_OC1_SetConfig+0x120>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d00f      	beq.n	80065f8 <TIM_OC1_SetConfig+0x88>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a2e      	ldr	r2, [pc, #184]	; (8006694 <TIM_OC1_SetConfig+0x124>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d00b      	beq.n	80065f8 <TIM_OC1_SetConfig+0x88>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a2d      	ldr	r2, [pc, #180]	; (8006698 <TIM_OC1_SetConfig+0x128>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d007      	beq.n	80065f8 <TIM_OC1_SetConfig+0x88>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a2c      	ldr	r2, [pc, #176]	; (800669c <TIM_OC1_SetConfig+0x12c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d003      	beq.n	80065f8 <TIM_OC1_SetConfig+0x88>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a2b      	ldr	r2, [pc, #172]	; (80066a0 <TIM_OC1_SetConfig+0x130>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d10c      	bne.n	8006612 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f023 0308 	bic.w	r3, r3, #8
 80065fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	4313      	orrs	r3, r2
 8006608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f023 0304 	bic.w	r3, r3, #4
 8006610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a1d      	ldr	r2, [pc, #116]	; (800668c <TIM_OC1_SetConfig+0x11c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d013      	beq.n	8006642 <TIM_OC1_SetConfig+0xd2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a1c      	ldr	r2, [pc, #112]	; (8006690 <TIM_OC1_SetConfig+0x120>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d00f      	beq.n	8006642 <TIM_OC1_SetConfig+0xd2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a1b      	ldr	r2, [pc, #108]	; (8006694 <TIM_OC1_SetConfig+0x124>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00b      	beq.n	8006642 <TIM_OC1_SetConfig+0xd2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a1a      	ldr	r2, [pc, #104]	; (8006698 <TIM_OC1_SetConfig+0x128>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d007      	beq.n	8006642 <TIM_OC1_SetConfig+0xd2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a19      	ldr	r2, [pc, #100]	; (800669c <TIM_OC1_SetConfig+0x12c>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d003      	beq.n	8006642 <TIM_OC1_SetConfig+0xd2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a18      	ldr	r2, [pc, #96]	; (80066a0 <TIM_OC1_SetConfig+0x130>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d111      	bne.n	8006666 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	4313      	orrs	r3, r2
 800665a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	4313      	orrs	r3, r2
 8006664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	621a      	str	r2, [r3, #32]
}
 8006680:	bf00      	nop
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	40012c00 	.word	0x40012c00
 8006690:	40013400 	.word	0x40013400
 8006694:	40014000 	.word	0x40014000
 8006698:	40014400 	.word	0x40014400
 800669c:	40014800 	.word	0x40014800
 80066a0:	40015000 	.word	0x40015000

080066a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	f023 0210 	bic.w	r2, r3, #16
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	021b      	lsls	r3, r3, #8
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f023 0320 	bic.w	r3, r3, #32
 80066f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	011b      	lsls	r3, r3, #4
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a2c      	ldr	r2, [pc, #176]	; (80067b4 <TIM_OC2_SetConfig+0x110>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d007      	beq.n	8006718 <TIM_OC2_SetConfig+0x74>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a2b      	ldr	r2, [pc, #172]	; (80067b8 <TIM_OC2_SetConfig+0x114>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d003      	beq.n	8006718 <TIM_OC2_SetConfig+0x74>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a2a      	ldr	r2, [pc, #168]	; (80067bc <TIM_OC2_SetConfig+0x118>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d10d      	bne.n	8006734 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800671e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	011b      	lsls	r3, r3, #4
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	4313      	orrs	r3, r2
 800672a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006732:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a1f      	ldr	r2, [pc, #124]	; (80067b4 <TIM_OC2_SetConfig+0x110>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d013      	beq.n	8006764 <TIM_OC2_SetConfig+0xc0>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a1e      	ldr	r2, [pc, #120]	; (80067b8 <TIM_OC2_SetConfig+0x114>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d00f      	beq.n	8006764 <TIM_OC2_SetConfig+0xc0>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a1e      	ldr	r2, [pc, #120]	; (80067c0 <TIM_OC2_SetConfig+0x11c>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d00b      	beq.n	8006764 <TIM_OC2_SetConfig+0xc0>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a1d      	ldr	r2, [pc, #116]	; (80067c4 <TIM_OC2_SetConfig+0x120>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d007      	beq.n	8006764 <TIM_OC2_SetConfig+0xc0>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a1c      	ldr	r2, [pc, #112]	; (80067c8 <TIM_OC2_SetConfig+0x124>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d003      	beq.n	8006764 <TIM_OC2_SetConfig+0xc0>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a17      	ldr	r2, [pc, #92]	; (80067bc <TIM_OC2_SetConfig+0x118>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d113      	bne.n	800678c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800676a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006772:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	4313      	orrs	r3, r2
 800677e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	4313      	orrs	r3, r2
 800678a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	621a      	str	r2, [r3, #32]
}
 80067a6:	bf00      	nop
 80067a8:	371c      	adds	r7, #28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	40012c00 	.word	0x40012c00
 80067b8:	40013400 	.word	0x40013400
 80067bc:	40015000 	.word	0x40015000
 80067c0:	40014000 	.word	0x40014000
 80067c4:	40014400 	.word	0x40014400
 80067c8:	40014800 	.word	0x40014800

080067cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 0303 	bic.w	r3, r3, #3
 8006806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	4313      	orrs	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	021b      	lsls	r3, r3, #8
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a2b      	ldr	r2, [pc, #172]	; (80068d8 <TIM_OC3_SetConfig+0x10c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d007      	beq.n	800683e <TIM_OC3_SetConfig+0x72>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a2a      	ldr	r2, [pc, #168]	; (80068dc <TIM_OC3_SetConfig+0x110>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d003      	beq.n	800683e <TIM_OC3_SetConfig+0x72>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a29      	ldr	r2, [pc, #164]	; (80068e0 <TIM_OC3_SetConfig+0x114>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d10d      	bne.n	800685a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	4313      	orrs	r3, r2
 8006850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006858:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a1e      	ldr	r2, [pc, #120]	; (80068d8 <TIM_OC3_SetConfig+0x10c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d013      	beq.n	800688a <TIM_OC3_SetConfig+0xbe>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a1d      	ldr	r2, [pc, #116]	; (80068dc <TIM_OC3_SetConfig+0x110>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d00f      	beq.n	800688a <TIM_OC3_SetConfig+0xbe>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a1d      	ldr	r2, [pc, #116]	; (80068e4 <TIM_OC3_SetConfig+0x118>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d00b      	beq.n	800688a <TIM_OC3_SetConfig+0xbe>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a1c      	ldr	r2, [pc, #112]	; (80068e8 <TIM_OC3_SetConfig+0x11c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d007      	beq.n	800688a <TIM_OC3_SetConfig+0xbe>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a1b      	ldr	r2, [pc, #108]	; (80068ec <TIM_OC3_SetConfig+0x120>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d003      	beq.n	800688a <TIM_OC3_SetConfig+0xbe>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a16      	ldr	r2, [pc, #88]	; (80068e0 <TIM_OC3_SetConfig+0x114>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d113      	bne.n	80068b2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	011b      	lsls	r3, r3, #4
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	011b      	lsls	r3, r3, #4
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	621a      	str	r2, [r3, #32]
}
 80068cc:	bf00      	nop
 80068ce:	371c      	adds	r7, #28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	40012c00 	.word	0x40012c00
 80068dc:	40013400 	.word	0x40013400
 80068e0:	40015000 	.word	0x40015000
 80068e4:	40014000 	.word	0x40014000
 80068e8:	40014400 	.word	0x40014400
 80068ec:	40014800 	.word	0x40014800

080068f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800691e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800692a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	021b      	lsls	r3, r3, #8
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	4313      	orrs	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800693e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	031b      	lsls	r3, r3, #12
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	4313      	orrs	r3, r2
 800694a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a1a      	ldr	r2, [pc, #104]	; (80069b8 <TIM_OC4_SetConfig+0xc8>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d013      	beq.n	800697c <TIM_OC4_SetConfig+0x8c>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a19      	ldr	r2, [pc, #100]	; (80069bc <TIM_OC4_SetConfig+0xcc>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d00f      	beq.n	800697c <TIM_OC4_SetConfig+0x8c>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a18      	ldr	r2, [pc, #96]	; (80069c0 <TIM_OC4_SetConfig+0xd0>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d00b      	beq.n	800697c <TIM_OC4_SetConfig+0x8c>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a17      	ldr	r2, [pc, #92]	; (80069c4 <TIM_OC4_SetConfig+0xd4>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d007      	beq.n	800697c <TIM_OC4_SetConfig+0x8c>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a16      	ldr	r2, [pc, #88]	; (80069c8 <TIM_OC4_SetConfig+0xd8>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d003      	beq.n	800697c <TIM_OC4_SetConfig+0x8c>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a15      	ldr	r2, [pc, #84]	; (80069cc <TIM_OC4_SetConfig+0xdc>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d109      	bne.n	8006990 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006982:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	019b      	lsls	r3, r3, #6
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	621a      	str	r2, [r3, #32]
}
 80069aa:	bf00      	nop
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	40012c00 	.word	0x40012c00
 80069bc:	40013400 	.word	0x40013400
 80069c0:	40014000 	.word	0x40014000
 80069c4:	40014400 	.word	0x40014400
 80069c8:	40014800 	.word	0x40014800
 80069cc:	40015000 	.word	0x40015000

080069d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	041b      	lsls	r3, r3, #16
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a19      	ldr	r2, [pc, #100]	; (8006a8c <TIM_OC5_SetConfig+0xbc>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d013      	beq.n	8006a52 <TIM_OC5_SetConfig+0x82>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a18      	ldr	r2, [pc, #96]	; (8006a90 <TIM_OC5_SetConfig+0xc0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d00f      	beq.n	8006a52 <TIM_OC5_SetConfig+0x82>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a17      	ldr	r2, [pc, #92]	; (8006a94 <TIM_OC5_SetConfig+0xc4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00b      	beq.n	8006a52 <TIM_OC5_SetConfig+0x82>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a16      	ldr	r2, [pc, #88]	; (8006a98 <TIM_OC5_SetConfig+0xc8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d007      	beq.n	8006a52 <TIM_OC5_SetConfig+0x82>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a15      	ldr	r2, [pc, #84]	; (8006a9c <TIM_OC5_SetConfig+0xcc>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d003      	beq.n	8006a52 <TIM_OC5_SetConfig+0x82>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a14      	ldr	r2, [pc, #80]	; (8006aa0 <TIM_OC5_SetConfig+0xd0>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d109      	bne.n	8006a66 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	021b      	lsls	r3, r3, #8
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	621a      	str	r2, [r3, #32]
}
 8006a80:	bf00      	nop
 8006a82:	371c      	adds	r7, #28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	40012c00 	.word	0x40012c00
 8006a90:	40013400 	.word	0x40013400
 8006a94:	40014000 	.word	0x40014000
 8006a98:	40014400 	.word	0x40014400
 8006a9c:	40014800 	.word	0x40014800
 8006aa0:	40015000 	.word	0x40015000

08006aa4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	021b      	lsls	r3, r3, #8
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	051b      	lsls	r3, r3, #20
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a1a      	ldr	r2, [pc, #104]	; (8006b64 <TIM_OC6_SetConfig+0xc0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d013      	beq.n	8006b28 <TIM_OC6_SetConfig+0x84>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a19      	ldr	r2, [pc, #100]	; (8006b68 <TIM_OC6_SetConfig+0xc4>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d00f      	beq.n	8006b28 <TIM_OC6_SetConfig+0x84>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a18      	ldr	r2, [pc, #96]	; (8006b6c <TIM_OC6_SetConfig+0xc8>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d00b      	beq.n	8006b28 <TIM_OC6_SetConfig+0x84>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a17      	ldr	r2, [pc, #92]	; (8006b70 <TIM_OC6_SetConfig+0xcc>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d007      	beq.n	8006b28 <TIM_OC6_SetConfig+0x84>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a16      	ldr	r2, [pc, #88]	; (8006b74 <TIM_OC6_SetConfig+0xd0>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d003      	beq.n	8006b28 <TIM_OC6_SetConfig+0x84>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a15      	ldr	r2, [pc, #84]	; (8006b78 <TIM_OC6_SetConfig+0xd4>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d109      	bne.n	8006b3c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	029b      	lsls	r3, r3, #10
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	621a      	str	r2, [r3, #32]
}
 8006b56:	bf00      	nop
 8006b58:	371c      	adds	r7, #28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	40012c00 	.word	0x40012c00
 8006b68:	40013400 	.word	0x40013400
 8006b6c:	40014000 	.word	0x40014000
 8006b70:	40014400 	.word	0x40014400
 8006b74:	40014800 	.word	0x40014800
 8006b78:	40015000 	.word	0x40015000

08006b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	f023 0201 	bic.w	r2, r3, #1
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f023 030a 	bic.w	r3, r3, #10
 8006bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	621a      	str	r2, [r3, #32]
}
 8006bce:	bf00      	nop
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b087      	sub	sp, #28
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f023 0210 	bic.w	r2, r3, #16
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	031b      	lsls	r3, r3, #12
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	621a      	str	r2, [r3, #32]
}
 8006c2e:	bf00      	nop
 8006c30:	371c      	adds	r7, #28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b085      	sub	sp, #20
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	f043 0307 	orr.w	r3, r3, #7
 8006c5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	609a      	str	r2, [r3, #8]
}
 8006c64:	bf00      	nop
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
 8006c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	021a      	lsls	r2, r3, #8
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	431a      	orrs	r2, r3
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	609a      	str	r2, [r3, #8]
}
 8006ca4:	bf00      	nop
 8006ca6:	371c      	adds	r7, #28
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	f003 031f 	and.w	r3, r3, #31
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6a1a      	ldr	r2, [r3, #32]
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	43db      	mvns	r3, r3
 8006cd2:	401a      	ands	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a1a      	ldr	r2, [r3, #32]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	f003 031f 	and.w	r3, r3, #31
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	621a      	str	r2, [r3, #32]
}
 8006cee:	bf00      	nop
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
	...

08006cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d101      	bne.n	8006d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d10:	2302      	movs	r3, #2
 8006d12:	e06d      	b.n	8006df0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a30      	ldr	r2, [pc, #192]	; (8006dfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d009      	beq.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a2f      	ldr	r2, [pc, #188]	; (8006e00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d004      	beq.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a2d      	ldr	r2, [pc, #180]	; (8006e04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d108      	bne.n	8006d64 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a1e      	ldr	r2, [pc, #120]	; (8006dfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d01d      	beq.n	8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d90:	d018      	beq.n	8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a1c      	ldr	r2, [pc, #112]	; (8006e08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d013      	beq.n	8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1a      	ldr	r2, [pc, #104]	; (8006e0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d00e      	beq.n	8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a15      	ldr	r2, [pc, #84]	; (8006e00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d009      	beq.n	8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a16      	ldr	r2, [pc, #88]	; (8006e10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d004      	beq.n	8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a11      	ldr	r2, [pc, #68]	; (8006e04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d10c      	bne.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	40012c00 	.word	0x40012c00
 8006e00:	40013400 	.word	0x40013400
 8006e04:	40015000 	.word	0x40015000
 8006e08:	40000400 	.word	0x40000400
 8006e0c:	40000800 	.word	0x40000800
 8006e10:	40014000 	.word	0x40014000

08006e14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e040      	b.n	8006ea8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d106      	bne.n	8006e3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7fb fb02 	bl	8002440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2224      	movs	r2, #36	; 0x24
 8006e40:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 0201 	bic.w	r2, r2, #1
 8006e50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fc5e 	bl	8007714 <UART_SetConfig>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d101      	bne.n	8006e62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e022      	b.n	8006ea8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d002      	beq.n	8006e70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fe26 	bl	8007abc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0201 	orr.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fead 	bl	8007c00 <UART_CheckIdleState>
 8006ea6:	4603      	mov	r3, r0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08a      	sub	sp, #40	; 0x28
 8006eb4:	af02      	add	r7, sp, #8
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	603b      	str	r3, [r7, #0]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ec4:	2b20      	cmp	r3, #32
 8006ec6:	d178      	bne.n	8006fba <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d002      	beq.n	8006ed4 <HAL_UART_Transmit+0x24>
 8006ece:	88fb      	ldrh	r3, [r7, #6]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e071      	b.n	8006fbc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2221      	movs	r2, #33	; 0x21
 8006ee4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ee6:	f7fb fcd9 	bl	800289c <HAL_GetTick>
 8006eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	88fa      	ldrh	r2, [r7, #6]
 8006ef0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	88fa      	ldrh	r2, [r7, #6]
 8006ef8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f04:	d108      	bne.n	8006f18 <HAL_UART_Transmit+0x68>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d104      	bne.n	8006f18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	61bb      	str	r3, [r7, #24]
 8006f16:	e003      	b.n	8006f20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f20:	e030      	b.n	8006f84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2180      	movs	r1, #128	; 0x80
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 ff0f 	bl	8007d50 <UART_WaitOnFlagUntilTimeout>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d004      	beq.n	8006f42 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e03c      	b.n	8006fbc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10b      	bne.n	8006f60 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	881a      	ldrh	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f54:	b292      	uxth	r2, r2
 8006f56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	3302      	adds	r3, #2
 8006f5c:	61bb      	str	r3, [r7, #24]
 8006f5e:	e008      	b.n	8006f72 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	781a      	ldrb	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	b292      	uxth	r2, r2
 8006f6a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1c8      	bne.n	8006f22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2200      	movs	r2, #0
 8006f98:	2140      	movs	r1, #64	; 0x40
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f000 fed8 	bl	8007d50 <UART_WaitOnFlagUntilTimeout>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d004      	beq.n	8006fb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2220      	movs	r2, #32
 8006faa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e005      	b.n	8006fbc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	e000      	b.n	8006fbc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006fba:	2302      	movs	r3, #2
  }
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3720      	adds	r7, #32
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b08b      	sub	sp, #44	; 0x2c
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fd6:	2b20      	cmp	r3, #32
 8006fd8:	d147      	bne.n	800706a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <HAL_UART_Transmit_IT+0x22>
 8006fe0:	88fb      	ldrh	r3, [r7, #6]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e040      	b.n	800706c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	88fa      	ldrh	r2, [r7, #6]
 8006ff4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	88fa      	ldrh	r2, [r7, #6]
 8006ffc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2221      	movs	r2, #33	; 0x21
 8007012:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800701c:	d107      	bne.n	800702e <HAL_UART_Transmit_IT+0x6a>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d103      	bne.n	800702e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	4a13      	ldr	r2, [pc, #76]	; (8007078 <HAL_UART_Transmit_IT+0xb4>)
 800702a:	66da      	str	r2, [r3, #108]	; 0x6c
 800702c:	e002      	b.n	8007034 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	4a12      	ldr	r2, [pc, #72]	; (800707c <HAL_UART_Transmit_IT+0xb8>)
 8007032:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	e853 3f00 	ldrex	r3, [r3]
 8007040:	613b      	str	r3, [r7, #16]
   return(result);
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007048:	627b      	str	r3, [r7, #36]	; 0x24
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007052:	623b      	str	r3, [r7, #32]
 8007054:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007056:	69f9      	ldr	r1, [r7, #28]
 8007058:	6a3a      	ldr	r2, [r7, #32]
 800705a:	e841 2300 	strex	r3, r2, [r1]
 800705e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1e6      	bne.n	8007034 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8007066:	2300      	movs	r3, #0
 8007068:	e000      	b.n	800706c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800706a:	2302      	movs	r3, #2
  }
}
 800706c:	4618      	mov	r0, r3
 800706e:	372c      	adds	r7, #44	; 0x2c
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	08008159 	.word	0x08008159
 800707c:	080080a1 	.word	0x080080a1

08007080 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b08a      	sub	sp, #40	; 0x28
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	4613      	mov	r3, r2
 800708c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007094:	2b20      	cmp	r3, #32
 8007096:	d132      	bne.n	80070fe <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <HAL_UART_Receive_IT+0x24>
 800709e:	88fb      	ldrh	r3, [r7, #6]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e02b      	b.n	8007100 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d018      	beq.n	80070ee <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	e853 3f00 	ldrex	r3, [r3]
 80070c8:	613b      	str	r3, [r7, #16]
   return(result);
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070d0:	627b      	str	r3, [r7, #36]	; 0x24
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	623b      	str	r3, [r7, #32]
 80070dc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	69f9      	ldr	r1, [r7, #28]
 80070e0:	6a3a      	ldr	r2, [r7, #32]
 80070e2:	e841 2300 	strex	r3, r2, [r1]
 80070e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e6      	bne.n	80070bc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80070ee:	88fb      	ldrh	r3, [r7, #6]
 80070f0:	461a      	mov	r2, r3
 80070f2:	68b9      	ldr	r1, [r7, #8]
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 fe93 	bl	8007e20 <UART_Start_Receive_IT>
 80070fa:	4603      	mov	r3, r0
 80070fc:	e000      	b.n	8007100 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80070fe:	2302      	movs	r3, #2
  }
}
 8007100:	4618      	mov	r0, r3
 8007102:	3728      	adds	r7, #40	; 0x28
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b0ba      	sub	sp, #232	; 0xe8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800712e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007132:	f640 030f 	movw	r3, #2063	; 0x80f
 8007136:	4013      	ands	r3, r2
 8007138:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800713c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007140:	2b00      	cmp	r3, #0
 8007142:	d115      	bne.n	8007170 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007148:	f003 0320 	and.w	r3, r3, #32
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00f      	beq.n	8007170 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007154:	f003 0320 	and.w	r3, r3, #32
 8007158:	2b00      	cmp	r3, #0
 800715a:	d009      	beq.n	8007170 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 82ab 	beq.w	80076bc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	4798      	blx	r3
      }
      return;
 800716e:	e2a5      	b.n	80076bc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007170:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 8117 	beq.w	80073a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800717a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d106      	bne.n	8007194 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007186:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800718a:	4b85      	ldr	r3, [pc, #532]	; (80073a0 <HAL_UART_IRQHandler+0x298>)
 800718c:	4013      	ands	r3, r2
 800718e:	2b00      	cmp	r3, #0
 8007190:	f000 810a 	beq.w	80073a8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d011      	beq.n	80071c4 <HAL_UART_IRQHandler+0xbc>
 80071a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00b      	beq.n	80071c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2201      	movs	r2, #1
 80071b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ba:	f043 0201 	orr.w	r2, r3, #1
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c8:	f003 0302 	and.w	r3, r3, #2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d011      	beq.n	80071f4 <HAL_UART_IRQHandler+0xec>
 80071d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00b      	beq.n	80071f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2202      	movs	r2, #2
 80071e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ea:	f043 0204 	orr.w	r2, r3, #4
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d011      	beq.n	8007224 <HAL_UART_IRQHandler+0x11c>
 8007200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00b      	beq.n	8007224 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2204      	movs	r2, #4
 8007212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800721a:	f043 0202 	orr.w	r2, r3, #2
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	2b00      	cmp	r3, #0
 800722e:	d017      	beq.n	8007260 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007234:	f003 0320 	and.w	r3, r3, #32
 8007238:	2b00      	cmp	r3, #0
 800723a:	d105      	bne.n	8007248 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800723c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007240:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00b      	beq.n	8007260 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2208      	movs	r2, #8
 800724e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007256:	f043 0208 	orr.w	r2, r3, #8
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007268:	2b00      	cmp	r3, #0
 800726a:	d012      	beq.n	8007292 <HAL_UART_IRQHandler+0x18a>
 800726c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007270:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00c      	beq.n	8007292 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007280:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007288:	f043 0220 	orr.w	r2, r3, #32
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 8211 	beq.w	80076c0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800729e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a2:	f003 0320 	and.w	r3, r3, #32
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00d      	beq.n	80072c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80072aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d007      	beq.n	80072c6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072da:	2b40      	cmp	r3, #64	; 0x40
 80072dc:	d005      	beq.n	80072ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80072de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d04f      	beq.n	800738a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fe5e 	bl	8007fac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fa:	2b40      	cmp	r3, #64	; 0x40
 80072fc:	d141      	bne.n	8007382 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3308      	adds	r3, #8
 8007304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007314:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800731c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3308      	adds	r3, #8
 8007326:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800732a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800732e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007336:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1d9      	bne.n	80072fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800734e:	2b00      	cmp	r3, #0
 8007350:	d013      	beq.n	800737a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007356:	4a13      	ldr	r2, [pc, #76]	; (80073a4 <HAL_UART_IRQHandler+0x29c>)
 8007358:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800735e:	4618      	mov	r0, r3
 8007360:	f7fc fcf4 	bl	8003d4c <HAL_DMA_Abort_IT>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d017      	beq.n	800739a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800736e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007374:	4610      	mov	r0, r2
 8007376:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007378:	e00f      	b.n	800739a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f9b4 	bl	80076e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007380:	e00b      	b.n	800739a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f9b0 	bl	80076e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007388:	e007      	b.n	800739a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f9ac 	bl	80076e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007398:	e192      	b.n	80076c0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800739a:	bf00      	nop
    return;
 800739c:	e190      	b.n	80076c0 <HAL_UART_IRQHandler+0x5b8>
 800739e:	bf00      	nop
 80073a0:	04000120 	.word	0x04000120
 80073a4:	08008075 	.word	0x08008075

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	f040 814b 	bne.w	8007648 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80073b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b6:	f003 0310 	and.w	r3, r3, #16
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 8144 	beq.w	8007648 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80073c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073c4:	f003 0310 	and.w	r3, r3, #16
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 813d 	beq.w	8007648 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2210      	movs	r2, #16
 80073d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e0:	2b40      	cmp	r3, #64	; 0x40
 80073e2:	f040 80b5 	bne.w	8007550 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 8164 	beq.w	80076c4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007406:	429a      	cmp	r2, r3
 8007408:	f080 815c 	bcs.w	80076c4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007412:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	2b20      	cmp	r3, #32
 800741e:	f000 8086 	beq.w	800752e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800742e:	e853 3f00 	ldrex	r3, [r3]
 8007432:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007436:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800743a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800743e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800744c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007450:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007454:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007458:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800745c:	e841 2300 	strex	r3, r2, [r1]
 8007460:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007464:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1da      	bne.n	8007422 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3308      	adds	r3, #8
 8007472:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007476:	e853 3f00 	ldrex	r3, [r3]
 800747a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800747c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800747e:	f023 0301 	bic.w	r3, r3, #1
 8007482:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3308      	adds	r3, #8
 800748c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007490:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007494:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007498:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800749c:	e841 2300 	strex	r3, r2, [r1]
 80074a0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1e1      	bne.n	800746c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3308      	adds	r3, #8
 80074ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074b2:	e853 3f00 	ldrex	r3, [r3]
 80074b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80074b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3308      	adds	r3, #8
 80074c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80074cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80074ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80074d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074d4:	e841 2300 	strex	r3, r2, [r1]
 80074d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80074da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e3      	bne.n	80074a8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2220      	movs	r2, #32
 80074e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f6:	e853 3f00 	ldrex	r3, [r3]
 80074fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074fe:	f023 0310 	bic.w	r3, r3, #16
 8007502:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007510:	65bb      	str	r3, [r7, #88]	; 0x58
 8007512:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007514:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007516:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007518:	e841 2300 	strex	r3, r2, [r1]
 800751c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800751e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1e4      	bne.n	80074ee <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007528:	4618      	mov	r0, r3
 800752a:	f7fc fbd6 	bl	8003cda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2202      	movs	r2, #2
 8007532:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007540:	b29b      	uxth	r3, r3
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	b29b      	uxth	r3, r3
 8007546:	4619      	mov	r1, r3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f8d7 	bl	80076fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800754e:	e0b9      	b.n	80076c4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800755c:	b29b      	uxth	r3, r3
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800756a:	b29b      	uxth	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 80ab 	beq.w	80076c8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007572:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 80a6 	beq.w	80076c8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007584:	e853 3f00 	ldrex	r3, [r3]
 8007588:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800758a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800758c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007590:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	461a      	mov	r2, r3
 800759a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800759e:	647b      	str	r3, [r7, #68]	; 0x44
 80075a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075a6:	e841 2300 	strex	r3, r2, [r1]
 80075aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1e4      	bne.n	800757c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	3308      	adds	r3, #8
 80075b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	e853 3f00 	ldrex	r3, [r3]
 80075c0:	623b      	str	r3, [r7, #32]
   return(result);
 80075c2:	6a3b      	ldr	r3, [r7, #32]
 80075c4:	f023 0301 	bic.w	r3, r3, #1
 80075c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3308      	adds	r3, #8
 80075d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80075d6:	633a      	str	r2, [r7, #48]	; 0x30
 80075d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075de:	e841 2300 	strex	r3, r2, [r1]
 80075e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1e3      	bne.n	80075b2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	e853 3f00 	ldrex	r3, [r3]
 800760a:	60fb      	str	r3, [r7, #12]
   return(result);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0310 	bic.w	r3, r3, #16
 8007612:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	461a      	mov	r2, r3
 800761c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007620:	61fb      	str	r3, [r7, #28]
 8007622:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	69b9      	ldr	r1, [r7, #24]
 8007626:	69fa      	ldr	r2, [r7, #28]
 8007628:	e841 2300 	strex	r3, r2, [r1]
 800762c:	617b      	str	r3, [r7, #20]
   return(result);
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e4      	bne.n	80075fe <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2202      	movs	r2, #2
 8007638:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800763a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 f85b 	bl	80076fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007646:	e03f      	b.n	80076c8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800764c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00e      	beq.n	8007672 <HAL_UART_IRQHandler+0x56a>
 8007654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007658:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d008      	beq.n	8007672 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007668:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 ffa6 	bl	80085bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007670:	e02d      	b.n	80076ce <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00e      	beq.n	800769c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800767e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007686:	2b00      	cmp	r3, #0
 8007688:	d008      	beq.n	800769c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800768e:	2b00      	cmp	r3, #0
 8007690:	d01c      	beq.n	80076cc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4798      	blx	r3
    }
    return;
 800769a:	e017      	b.n	80076cc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800769c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d012      	beq.n	80076ce <HAL_UART_IRQHandler+0x5c6>
 80076a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00c      	beq.n	80076ce <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fdaf 	bl	8008218 <UART_EndTransmit_IT>
    return;
 80076ba:	e008      	b.n	80076ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80076bc:	bf00      	nop
 80076be:	e006      	b.n	80076ce <HAL_UART_IRQHandler+0x5c6>
    return;
 80076c0:	bf00      	nop
 80076c2:	e004      	b.n	80076ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80076c4:	bf00      	nop
 80076c6:	e002      	b.n	80076ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80076c8:	bf00      	nop
 80076ca:	e000      	b.n	80076ce <HAL_UART_IRQHandler+0x5c6>
    return;
 80076cc:	bf00      	nop
  }

}
 80076ce:	37e8      	adds	r7, #232	; 0xe8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	460b      	mov	r3, r1
 8007706:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b088      	sub	sp, #32
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800771c:	2300      	movs	r3, #0
 800771e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	689a      	ldr	r2, [r3, #8]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	431a      	orrs	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	431a      	orrs	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	4313      	orrs	r3, r2
 8007736:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	4b92      	ldr	r3, [pc, #584]	; (8007988 <UART_SetConfig+0x274>)
 8007740:	4013      	ands	r3, r2
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	6812      	ldr	r2, [r2, #0]
 8007746:	6979      	ldr	r1, [r7, #20]
 8007748:	430b      	orrs	r3, r1
 800774a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68da      	ldr	r2, [r3, #12]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	430a      	orrs	r2, r1
 8007760:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	4313      	orrs	r3, r2
 8007770:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	430a      	orrs	r2, r1
 8007784:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a80      	ldr	r2, [pc, #512]	; (800798c <UART_SetConfig+0x278>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d120      	bne.n	80077d2 <UART_SetConfig+0xbe>
 8007790:	4b7f      	ldr	r3, [pc, #508]	; (8007990 <UART_SetConfig+0x27c>)
 8007792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007794:	f003 0303 	and.w	r3, r3, #3
 8007798:	2b03      	cmp	r3, #3
 800779a:	d817      	bhi.n	80077cc <UART_SetConfig+0xb8>
 800779c:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <UART_SetConfig+0x90>)
 800779e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a2:	bf00      	nop
 80077a4:	080077b5 	.word	0x080077b5
 80077a8:	080077c1 	.word	0x080077c1
 80077ac:	080077c7 	.word	0x080077c7
 80077b0:	080077bb 	.word	0x080077bb
 80077b4:	2301      	movs	r3, #1
 80077b6:	77fb      	strb	r3, [r7, #31]
 80077b8:	e0b5      	b.n	8007926 <UART_SetConfig+0x212>
 80077ba:	2302      	movs	r3, #2
 80077bc:	77fb      	strb	r3, [r7, #31]
 80077be:	e0b2      	b.n	8007926 <UART_SetConfig+0x212>
 80077c0:	2304      	movs	r3, #4
 80077c2:	77fb      	strb	r3, [r7, #31]
 80077c4:	e0af      	b.n	8007926 <UART_SetConfig+0x212>
 80077c6:	2308      	movs	r3, #8
 80077c8:	77fb      	strb	r3, [r7, #31]
 80077ca:	e0ac      	b.n	8007926 <UART_SetConfig+0x212>
 80077cc:	2310      	movs	r3, #16
 80077ce:	77fb      	strb	r3, [r7, #31]
 80077d0:	e0a9      	b.n	8007926 <UART_SetConfig+0x212>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a6f      	ldr	r2, [pc, #444]	; (8007994 <UART_SetConfig+0x280>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d124      	bne.n	8007826 <UART_SetConfig+0x112>
 80077dc:	4b6c      	ldr	r3, [pc, #432]	; (8007990 <UART_SetConfig+0x27c>)
 80077de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80077e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077e8:	d011      	beq.n	800780e <UART_SetConfig+0xfa>
 80077ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077ee:	d817      	bhi.n	8007820 <UART_SetConfig+0x10c>
 80077f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077f4:	d011      	beq.n	800781a <UART_SetConfig+0x106>
 80077f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077fa:	d811      	bhi.n	8007820 <UART_SetConfig+0x10c>
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d003      	beq.n	8007808 <UART_SetConfig+0xf4>
 8007800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007804:	d006      	beq.n	8007814 <UART_SetConfig+0x100>
 8007806:	e00b      	b.n	8007820 <UART_SetConfig+0x10c>
 8007808:	2300      	movs	r3, #0
 800780a:	77fb      	strb	r3, [r7, #31]
 800780c:	e08b      	b.n	8007926 <UART_SetConfig+0x212>
 800780e:	2302      	movs	r3, #2
 8007810:	77fb      	strb	r3, [r7, #31]
 8007812:	e088      	b.n	8007926 <UART_SetConfig+0x212>
 8007814:	2304      	movs	r3, #4
 8007816:	77fb      	strb	r3, [r7, #31]
 8007818:	e085      	b.n	8007926 <UART_SetConfig+0x212>
 800781a:	2308      	movs	r3, #8
 800781c:	77fb      	strb	r3, [r7, #31]
 800781e:	e082      	b.n	8007926 <UART_SetConfig+0x212>
 8007820:	2310      	movs	r3, #16
 8007822:	77fb      	strb	r3, [r7, #31]
 8007824:	e07f      	b.n	8007926 <UART_SetConfig+0x212>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a5b      	ldr	r2, [pc, #364]	; (8007998 <UART_SetConfig+0x284>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d124      	bne.n	800787a <UART_SetConfig+0x166>
 8007830:	4b57      	ldr	r3, [pc, #348]	; (8007990 <UART_SetConfig+0x27c>)
 8007832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007834:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007838:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800783c:	d011      	beq.n	8007862 <UART_SetConfig+0x14e>
 800783e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007842:	d817      	bhi.n	8007874 <UART_SetConfig+0x160>
 8007844:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007848:	d011      	beq.n	800786e <UART_SetConfig+0x15a>
 800784a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800784e:	d811      	bhi.n	8007874 <UART_SetConfig+0x160>
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <UART_SetConfig+0x148>
 8007854:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007858:	d006      	beq.n	8007868 <UART_SetConfig+0x154>
 800785a:	e00b      	b.n	8007874 <UART_SetConfig+0x160>
 800785c:	2300      	movs	r3, #0
 800785e:	77fb      	strb	r3, [r7, #31]
 8007860:	e061      	b.n	8007926 <UART_SetConfig+0x212>
 8007862:	2302      	movs	r3, #2
 8007864:	77fb      	strb	r3, [r7, #31]
 8007866:	e05e      	b.n	8007926 <UART_SetConfig+0x212>
 8007868:	2304      	movs	r3, #4
 800786a:	77fb      	strb	r3, [r7, #31]
 800786c:	e05b      	b.n	8007926 <UART_SetConfig+0x212>
 800786e:	2308      	movs	r3, #8
 8007870:	77fb      	strb	r3, [r7, #31]
 8007872:	e058      	b.n	8007926 <UART_SetConfig+0x212>
 8007874:	2310      	movs	r3, #16
 8007876:	77fb      	strb	r3, [r7, #31]
 8007878:	e055      	b.n	8007926 <UART_SetConfig+0x212>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a47      	ldr	r2, [pc, #284]	; (800799c <UART_SetConfig+0x288>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d124      	bne.n	80078ce <UART_SetConfig+0x1ba>
 8007884:	4b42      	ldr	r3, [pc, #264]	; (8007990 <UART_SetConfig+0x27c>)
 8007886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007888:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800788c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007890:	d011      	beq.n	80078b6 <UART_SetConfig+0x1a2>
 8007892:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007896:	d817      	bhi.n	80078c8 <UART_SetConfig+0x1b4>
 8007898:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800789c:	d011      	beq.n	80078c2 <UART_SetConfig+0x1ae>
 800789e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078a2:	d811      	bhi.n	80078c8 <UART_SetConfig+0x1b4>
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d003      	beq.n	80078b0 <UART_SetConfig+0x19c>
 80078a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078ac:	d006      	beq.n	80078bc <UART_SetConfig+0x1a8>
 80078ae:	e00b      	b.n	80078c8 <UART_SetConfig+0x1b4>
 80078b0:	2300      	movs	r3, #0
 80078b2:	77fb      	strb	r3, [r7, #31]
 80078b4:	e037      	b.n	8007926 <UART_SetConfig+0x212>
 80078b6:	2302      	movs	r3, #2
 80078b8:	77fb      	strb	r3, [r7, #31]
 80078ba:	e034      	b.n	8007926 <UART_SetConfig+0x212>
 80078bc:	2304      	movs	r3, #4
 80078be:	77fb      	strb	r3, [r7, #31]
 80078c0:	e031      	b.n	8007926 <UART_SetConfig+0x212>
 80078c2:	2308      	movs	r3, #8
 80078c4:	77fb      	strb	r3, [r7, #31]
 80078c6:	e02e      	b.n	8007926 <UART_SetConfig+0x212>
 80078c8:	2310      	movs	r3, #16
 80078ca:	77fb      	strb	r3, [r7, #31]
 80078cc:	e02b      	b.n	8007926 <UART_SetConfig+0x212>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a33      	ldr	r2, [pc, #204]	; (80079a0 <UART_SetConfig+0x28c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d124      	bne.n	8007922 <UART_SetConfig+0x20e>
 80078d8:	4b2d      	ldr	r3, [pc, #180]	; (8007990 <UART_SetConfig+0x27c>)
 80078da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078dc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80078e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80078e4:	d011      	beq.n	800790a <UART_SetConfig+0x1f6>
 80078e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80078ea:	d817      	bhi.n	800791c <UART_SetConfig+0x208>
 80078ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078f0:	d011      	beq.n	8007916 <UART_SetConfig+0x202>
 80078f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078f6:	d811      	bhi.n	800791c <UART_SetConfig+0x208>
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d003      	beq.n	8007904 <UART_SetConfig+0x1f0>
 80078fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007900:	d006      	beq.n	8007910 <UART_SetConfig+0x1fc>
 8007902:	e00b      	b.n	800791c <UART_SetConfig+0x208>
 8007904:	2300      	movs	r3, #0
 8007906:	77fb      	strb	r3, [r7, #31]
 8007908:	e00d      	b.n	8007926 <UART_SetConfig+0x212>
 800790a:	2302      	movs	r3, #2
 800790c:	77fb      	strb	r3, [r7, #31]
 800790e:	e00a      	b.n	8007926 <UART_SetConfig+0x212>
 8007910:	2304      	movs	r3, #4
 8007912:	77fb      	strb	r3, [r7, #31]
 8007914:	e007      	b.n	8007926 <UART_SetConfig+0x212>
 8007916:	2308      	movs	r3, #8
 8007918:	77fb      	strb	r3, [r7, #31]
 800791a:	e004      	b.n	8007926 <UART_SetConfig+0x212>
 800791c:	2310      	movs	r3, #16
 800791e:	77fb      	strb	r3, [r7, #31]
 8007920:	e001      	b.n	8007926 <UART_SetConfig+0x212>
 8007922:	2310      	movs	r3, #16
 8007924:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800792e:	d16b      	bne.n	8007a08 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007930:	7ffb      	ldrb	r3, [r7, #31]
 8007932:	2b08      	cmp	r3, #8
 8007934:	d838      	bhi.n	80079a8 <UART_SetConfig+0x294>
 8007936:	a201      	add	r2, pc, #4	; (adr r2, 800793c <UART_SetConfig+0x228>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	08007961 	.word	0x08007961
 8007940:	08007969 	.word	0x08007969
 8007944:	08007971 	.word	0x08007971
 8007948:	080079a9 	.word	0x080079a9
 800794c:	08007977 	.word	0x08007977
 8007950:	080079a9 	.word	0x080079a9
 8007954:	080079a9 	.word	0x080079a9
 8007958:	080079a9 	.word	0x080079a9
 800795c:	0800797f 	.word	0x0800797f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007960:	f7fd ff64 	bl	800582c <HAL_RCC_GetPCLK1Freq>
 8007964:	61b8      	str	r0, [r7, #24]
        break;
 8007966:	e024      	b.n	80079b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007968:	f7fd ff82 	bl	8005870 <HAL_RCC_GetPCLK2Freq>
 800796c:	61b8      	str	r0, [r7, #24]
        break;
 800796e:	e020      	b.n	80079b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007970:	4b0c      	ldr	r3, [pc, #48]	; (80079a4 <UART_SetConfig+0x290>)
 8007972:	61bb      	str	r3, [r7, #24]
        break;
 8007974:	e01d      	b.n	80079b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007976:	f7fd fee3 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 800797a:	61b8      	str	r0, [r7, #24]
        break;
 800797c:	e019      	b.n	80079b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800797e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007982:	61bb      	str	r3, [r7, #24]
        break;
 8007984:	e015      	b.n	80079b2 <UART_SetConfig+0x29e>
 8007986:	bf00      	nop
 8007988:	efff69f3 	.word	0xefff69f3
 800798c:	40013800 	.word	0x40013800
 8007990:	40021000 	.word	0x40021000
 8007994:	40004400 	.word	0x40004400
 8007998:	40004800 	.word	0x40004800
 800799c:	40004c00 	.word	0x40004c00
 80079a0:	40005000 	.word	0x40005000
 80079a4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80079a8:	2300      	movs	r3, #0
 80079aa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	77bb      	strb	r3, [r7, #30]
        break;
 80079b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d073      	beq.n	8007aa0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	005a      	lsls	r2, r3, #1
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	085b      	lsrs	r3, r3, #1
 80079c2:	441a      	add	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	2b0f      	cmp	r3, #15
 80079d2:	d916      	bls.n	8007a02 <UART_SetConfig+0x2ee>
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079da:	d212      	bcs.n	8007a02 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	b29b      	uxth	r3, r3
 80079e0:	f023 030f 	bic.w	r3, r3, #15
 80079e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	085b      	lsrs	r3, r3, #1
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	f003 0307 	and.w	r3, r3, #7
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	89fb      	ldrh	r3, [r7, #14]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	89fa      	ldrh	r2, [r7, #14]
 80079fe:	60da      	str	r2, [r3, #12]
 8007a00:	e04e      	b.n	8007aa0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	77bb      	strb	r3, [r7, #30]
 8007a06:	e04b      	b.n	8007aa0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a08:	7ffb      	ldrb	r3, [r7, #31]
 8007a0a:	2b08      	cmp	r3, #8
 8007a0c:	d827      	bhi.n	8007a5e <UART_SetConfig+0x34a>
 8007a0e:	a201      	add	r2, pc, #4	; (adr r2, 8007a14 <UART_SetConfig+0x300>)
 8007a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a14:	08007a39 	.word	0x08007a39
 8007a18:	08007a41 	.word	0x08007a41
 8007a1c:	08007a49 	.word	0x08007a49
 8007a20:	08007a5f 	.word	0x08007a5f
 8007a24:	08007a4f 	.word	0x08007a4f
 8007a28:	08007a5f 	.word	0x08007a5f
 8007a2c:	08007a5f 	.word	0x08007a5f
 8007a30:	08007a5f 	.word	0x08007a5f
 8007a34:	08007a57 	.word	0x08007a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a38:	f7fd fef8 	bl	800582c <HAL_RCC_GetPCLK1Freq>
 8007a3c:	61b8      	str	r0, [r7, #24]
        break;
 8007a3e:	e013      	b.n	8007a68 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a40:	f7fd ff16 	bl	8005870 <HAL_RCC_GetPCLK2Freq>
 8007a44:	61b8      	str	r0, [r7, #24]
        break;
 8007a46:	e00f      	b.n	8007a68 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a48:	4b1b      	ldr	r3, [pc, #108]	; (8007ab8 <UART_SetConfig+0x3a4>)
 8007a4a:	61bb      	str	r3, [r7, #24]
        break;
 8007a4c:	e00c      	b.n	8007a68 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a4e:	f7fd fe77 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 8007a52:	61b8      	str	r0, [r7, #24]
        break;
 8007a54:	e008      	b.n	8007a68 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a5a:	61bb      	str	r3, [r7, #24]
        break;
 8007a5c:	e004      	b.n	8007a68 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	77bb      	strb	r3, [r7, #30]
        break;
 8007a66:	bf00      	nop
    }

    if (pclk != 0U)
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d018      	beq.n	8007aa0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	085a      	lsrs	r2, r3, #1
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	441a      	add	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	2b0f      	cmp	r3, #15
 8007a86:	d909      	bls.n	8007a9c <UART_SetConfig+0x388>
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a8e:	d205      	bcs.n	8007a9c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	60da      	str	r2, [r3, #12]
 8007a9a:	e001      	b.n	8007aa0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007aac:	7fbb      	ldrb	r3, [r7, #30]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3720      	adds	r7, #32
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	007a1200 	.word	0x007a1200

08007abc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00a      	beq.n	8007ae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	430a      	orrs	r2, r1
 8007b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00a      	beq.n	8007b2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2e:	f003 0308 	and.w	r3, r3, #8
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b50:	f003 0310 	and.w	r3, r3, #16
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00a      	beq.n	8007b6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b72:	f003 0320 	and.w	r3, r3, #32
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00a      	beq.n	8007b90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d01a      	beq.n	8007bd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bba:	d10a      	bne.n	8007bd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	605a      	str	r2, [r3, #4]
  }
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b098      	sub	sp, #96	; 0x60
 8007c04:	af02      	add	r7, sp, #8
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c10:	f7fa fe44 	bl	800289c <HAL_GetTick>
 8007c14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0308 	and.w	r3, r3, #8
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	d12e      	bne.n	8007c82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f88c 	bl	8007d50 <UART_WaitOnFlagUntilTimeout>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d021      	beq.n	8007c82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c46:	e853 3f00 	ldrex	r3, [r3]
 8007c4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c52:	653b      	str	r3, [r7, #80]	; 0x50
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c64:	e841 2300 	strex	r3, r2, [r1]
 8007c68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1e6      	bne.n	8007c3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2220      	movs	r2, #32
 8007c74:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e062      	b.n	8007d48 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0304 	and.w	r3, r3, #4
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	d149      	bne.n	8007d24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f856 	bl	8007d50 <UART_WaitOnFlagUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d03c      	beq.n	8007d24 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	e853 3f00 	ldrex	r3, [r3]
 8007cb6:	623b      	str	r3, [r7, #32]
   return(result);
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8007cca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ccc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cd0:	e841 2300 	strex	r3, r2, [r1]
 8007cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1e6      	bne.n	8007caa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f023 0301 	bic.w	r3, r3, #1
 8007cf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3308      	adds	r3, #8
 8007cfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cfc:	61fa      	str	r2, [r7, #28]
 8007cfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	69b9      	ldr	r1, [r7, #24]
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	e841 2300 	strex	r3, r2, [r1]
 8007d08:	617b      	str	r3, [r7, #20]
   return(result);
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e5      	bne.n	8007cdc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2220      	movs	r2, #32
 8007d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e011      	b.n	8007d48 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2220      	movs	r2, #32
 8007d28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3758      	adds	r7, #88	; 0x58
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	603b      	str	r3, [r7, #0]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d60:	e049      	b.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d68:	d045      	beq.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d6a:	f7fa fd97 	bl	800289c <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	69ba      	ldr	r2, [r7, #24]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d302      	bcc.n	8007d80 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e048      	b.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0304 	and.w	r3, r3, #4
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d031      	beq.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	69db      	ldr	r3, [r3, #28]
 8007d98:	f003 0308 	and.w	r3, r3, #8
 8007d9c:	2b08      	cmp	r3, #8
 8007d9e:	d110      	bne.n	8007dc2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2208      	movs	r2, #8
 8007da6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 f8ff 	bl	8007fac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2208      	movs	r2, #8
 8007db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e029      	b.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dd0:	d111      	bne.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 f8e5 	bl	8007fac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2220      	movs	r2, #32
 8007de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e00f      	b.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	69da      	ldr	r2, [r3, #28]
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	bf0c      	ite	eq
 8007e06:	2301      	moveq	r3, #1
 8007e08:	2300      	movne	r3, #0
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	79fb      	ldrb	r3, [r7, #7]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d0a6      	beq.n	8007d62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b097      	sub	sp, #92	; 0x5c
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	88fa      	ldrh	r2, [r7, #6]
 8007e38:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	88fa      	ldrh	r2, [r7, #6]
 8007e40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e52:	d10e      	bne.n	8007e72 <UART_Start_Receive_IT+0x52>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d105      	bne.n	8007e68 <UART_Start_Receive_IT+0x48>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007e62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e66:	e02d      	b.n	8007ec4 <UART_Start_Receive_IT+0xa4>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	22ff      	movs	r2, #255	; 0xff
 8007e6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e70:	e028      	b.n	8007ec4 <UART_Start_Receive_IT+0xa4>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10d      	bne.n	8007e96 <UART_Start_Receive_IT+0x76>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d104      	bne.n	8007e8c <UART_Start_Receive_IT+0x6c>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	22ff      	movs	r2, #255	; 0xff
 8007e86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e8a:	e01b      	b.n	8007ec4 <UART_Start_Receive_IT+0xa4>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	227f      	movs	r2, #127	; 0x7f
 8007e90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e94:	e016      	b.n	8007ec4 <UART_Start_Receive_IT+0xa4>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e9e:	d10d      	bne.n	8007ebc <UART_Start_Receive_IT+0x9c>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d104      	bne.n	8007eb2 <UART_Start_Receive_IT+0x92>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	227f      	movs	r2, #127	; 0x7f
 8007eac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007eb0:	e008      	b.n	8007ec4 <UART_Start_Receive_IT+0xa4>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	223f      	movs	r2, #63	; 0x3f
 8007eb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007eba:	e003      	b.n	8007ec4 <UART_Start_Receive_IT+0xa4>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2222      	movs	r2, #34	; 0x22
 8007ed0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	3308      	adds	r3, #8
 8007eda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ede:	e853 3f00 	ldrex	r3, [r3]
 8007ee2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee6:	f043 0301 	orr.w	r3, r3, #1
 8007eea:	657b      	str	r3, [r7, #84]	; 0x54
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3308      	adds	r3, #8
 8007ef2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ef4:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ef6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007efa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007efc:	e841 2300 	strex	r3, r2, [r1]
 8007f00:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e5      	bne.n	8007ed4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f10:	d107      	bne.n	8007f22 <UART_Start_Receive_IT+0x102>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d103      	bne.n	8007f22 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	4a21      	ldr	r2, [pc, #132]	; (8007fa4 <UART_Start_Receive_IT+0x184>)
 8007f1e:	669a      	str	r2, [r3, #104]	; 0x68
 8007f20:	e002      	b.n	8007f28 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	4a20      	ldr	r2, [pc, #128]	; (8007fa8 <UART_Start_Receive_IT+0x188>)
 8007f26:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d019      	beq.n	8007f64 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f38:	e853 3f00 	ldrex	r3, [r3]
 8007f3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007f44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007f50:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f56:	e841 2300 	strex	r3, r2, [r1]
 8007f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1e6      	bne.n	8007f30 <UART_Start_Receive_IT+0x110>
 8007f62:	e018      	b.n	8007f96 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	613b      	str	r3, [r7, #16]
   return(result);
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f043 0320 	orr.w	r3, r3, #32
 8007f78:	653b      	str	r3, [r7, #80]	; 0x50
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f82:	623b      	str	r3, [r7, #32]
 8007f84:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f86:	69f9      	ldr	r1, [r7, #28]
 8007f88:	6a3a      	ldr	r2, [r7, #32]
 8007f8a:	e841 2300 	strex	r3, r2, [r1]
 8007f8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1e6      	bne.n	8007f64 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	375c      	adds	r7, #92	; 0x5c
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	08008415 	.word	0x08008415
 8007fa8:	0800826d 	.word	0x0800826d

08007fac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b095      	sub	sp, #84	; 0x54
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fbc:	e853 3f00 	ldrex	r3, [r3]
 8007fc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8007fd4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fda:	e841 2300 	strex	r3, r2, [r1]
 8007fde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1e6      	bne.n	8007fb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3308      	adds	r3, #8
 8007fec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fee:	6a3b      	ldr	r3, [r7, #32]
 8007ff0:	e853 3f00 	ldrex	r3, [r3]
 8007ff4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	f023 0301 	bic.w	r3, r3, #1
 8007ffc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3308      	adds	r3, #8
 8008004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008006:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008008:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800800c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800800e:	e841 2300 	strex	r3, r2, [r1]
 8008012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1e5      	bne.n	8007fe6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800801e:	2b01      	cmp	r3, #1
 8008020:	d118      	bne.n	8008054 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	e853 3f00 	ldrex	r3, [r3]
 800802e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f023 0310 	bic.w	r3, r3, #16
 8008036:	647b      	str	r3, [r7, #68]	; 0x44
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	461a      	mov	r2, r3
 800803e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008040:	61bb      	str	r3, [r7, #24]
 8008042:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008044:	6979      	ldr	r1, [r7, #20]
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	e841 2300 	strex	r3, r2, [r1]
 800804c:	613b      	str	r3, [r7, #16]
   return(result);
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1e6      	bne.n	8008022 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2220      	movs	r2, #32
 8008058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008068:	bf00      	nop
 800806a:	3754      	adds	r7, #84	; 0x54
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008080:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f7ff fb28 	bl	80076e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008098:	bf00      	nop
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b08f      	sub	sp, #60	; 0x3c
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080ac:	2b21      	cmp	r3, #33	; 0x21
 80080ae:	d14d      	bne.n	800814c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d132      	bne.n	8008122 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c2:	6a3b      	ldr	r3, [r7, #32]
 80080c4:	e853 3f00 	ldrex	r3, [r3]
 80080c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080d0:	637b      	str	r3, [r7, #52]	; 0x34
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080dc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080e2:	e841 2300 	strex	r3, r2, [r1]
 80080e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1e6      	bne.n	80080bc <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	e853 3f00 	ldrex	r3, [r3]
 80080fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008102:	633b      	str	r3, [r7, #48]	; 0x30
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	461a      	mov	r2, r3
 800810a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810c:	61bb      	str	r3, [r7, #24]
 800810e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008110:	6979      	ldr	r1, [r7, #20]
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	e841 2300 	strex	r3, r2, [r1]
 8008118:	613b      	str	r3, [r7, #16]
   return(result);
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e6      	bne.n	80080ee <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008120:	e014      	b.n	800814c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008126:	781a      	ldrb	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	b292      	uxth	r2, r2
 800812e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008134:	1c5a      	adds	r2, r3, #1
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008140:	b29b      	uxth	r3, r3
 8008142:	3b01      	subs	r3, #1
 8008144:	b29a      	uxth	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800814c:	bf00      	nop
 800814e:	373c      	adds	r7, #60	; 0x3c
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008158:	b480      	push	{r7}
 800815a:	b091      	sub	sp, #68	; 0x44
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008164:	2b21      	cmp	r3, #33	; 0x21
 8008166:	d151      	bne.n	800820c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800816e:	b29b      	uxth	r3, r3
 8008170:	2b00      	cmp	r3, #0
 8008172:	d132      	bne.n	80081da <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	e853 3f00 	ldrex	r3, [r3]
 8008180:	623b      	str	r3, [r7, #32]
   return(result);
 8008182:	6a3b      	ldr	r3, [r7, #32]
 8008184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008188:	63bb      	str	r3, [r7, #56]	; 0x38
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	461a      	mov	r2, r3
 8008190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008192:	633b      	str	r3, [r7, #48]	; 0x30
 8008194:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800819a:	e841 2300 	strex	r3, r2, [r1]
 800819e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1e6      	bne.n	8008174 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	e853 3f00 	ldrex	r3, [r3]
 80081b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ba:	637b      	str	r3, [r7, #52]	; 0x34
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	461a      	mov	r2, r3
 80081c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c4:	61fb      	str	r3, [r7, #28]
 80081c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c8:	69b9      	ldr	r1, [r7, #24]
 80081ca:	69fa      	ldr	r2, [r7, #28]
 80081cc:	e841 2300 	strex	r3, r2, [r1]
 80081d0:	617b      	str	r3, [r7, #20]
   return(result);
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1e6      	bne.n	80081a6 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80081d8:	e018      	b.n	800820c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081de:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80081e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e2:	881a      	ldrh	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081ec:	b292      	uxth	r2, r2
 80081ee:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f4:	1c9a      	adds	r2, r3, #2
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008200:	b29b      	uxth	r3, r3
 8008202:	3b01      	subs	r3, #1
 8008204:	b29a      	uxth	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800820c:	bf00      	nop
 800820e:	3744      	adds	r7, #68	; 0x44
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	e853 3f00 	ldrex	r3, [r3]
 800822c:	60bb      	str	r3, [r7, #8]
   return(result);
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008234:	61fb      	str	r3, [r7, #28]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	61bb      	str	r3, [r7, #24]
 8008240:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	6979      	ldr	r1, [r7, #20]
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	613b      	str	r3, [r7, #16]
   return(result);
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e6      	bne.n	8008220 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2220      	movs	r2, #32
 8008256:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7ff fa38 	bl	80076d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008264:	bf00      	nop
 8008266:	3720      	adds	r7, #32
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b09c      	sub	sp, #112	; 0x70
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800827a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008284:	2b22      	cmp	r3, #34	; 0x22
 8008286:	f040 80b9 	bne.w	80083fc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008290:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008294:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008298:	b2d9      	uxtb	r1, r3
 800829a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a4:	400a      	ands	r2, r1
 80082a6:	b2d2      	uxtb	r2, r2
 80082a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	3b01      	subs	r3, #1
 80082be:	b29a      	uxth	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f040 809c 	bne.w	800840c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082dc:	e853 3f00 	ldrex	r3, [r3]
 80082e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80082f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082fa:	e841 2300 	strex	r3, r2, [r1]
 80082fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1e6      	bne.n	80082d4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	3308      	adds	r3, #8
 800830c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008310:	e853 3f00 	ldrex	r3, [r3]
 8008314:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008318:	f023 0301 	bic.w	r3, r3, #1
 800831c:	667b      	str	r3, [r7, #100]	; 0x64
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	3308      	adds	r3, #8
 8008324:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008326:	647a      	str	r2, [r7, #68]	; 0x44
 8008328:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800832c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800832e:	e841 2300 	strex	r3, r2, [r1]
 8008332:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1e5      	bne.n	8008306 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2220      	movs	r2, #32
 800833e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d018      	beq.n	800838e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008364:	e853 3f00 	ldrex	r3, [r3]
 8008368:	623b      	str	r3, [r7, #32]
   return(result);
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008370:	663b      	str	r3, [r7, #96]	; 0x60
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800837a:	633b      	str	r3, [r7, #48]	; 0x30
 800837c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008382:	e841 2300 	strex	r3, r2, [r1]
 8008386:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1e6      	bne.n	800835c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008392:	2b01      	cmp	r3, #1
 8008394:	d12e      	bne.n	80083f4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f023 0310 	bic.w	r3, r3, #16
 80083b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	461a      	mov	r2, r3
 80083b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083ba:	61fb      	str	r3, [r7, #28]
 80083bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083be:	69b9      	ldr	r1, [r7, #24]
 80083c0:	69fa      	ldr	r2, [r7, #28]
 80083c2:	e841 2300 	strex	r3, r2, [r1]
 80083c6:	617b      	str	r3, [r7, #20]
   return(result);
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1e6      	bne.n	800839c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	69db      	ldr	r3, [r3, #28]
 80083d4:	f003 0310 	and.w	r3, r3, #16
 80083d8:	2b10      	cmp	r3, #16
 80083da:	d103      	bne.n	80083e4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2210      	movs	r2, #16
 80083e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7ff f985 	bl	80076fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083f2:	e00b      	b.n	800840c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7f8 fa59 	bl	80008ac <HAL_UART_RxCpltCallback>
}
 80083fa:	e007      	b.n	800840c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	699a      	ldr	r2, [r3, #24]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f042 0208 	orr.w	r2, r2, #8
 800840a:	619a      	str	r2, [r3, #24]
}
 800840c:	bf00      	nop
 800840e:	3770      	adds	r7, #112	; 0x70
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b09c      	sub	sp, #112	; 0x70
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008422:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800842c:	2b22      	cmp	r3, #34	; 0x22
 800842e:	f040 80b9 	bne.w	80085a4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008438:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008440:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008442:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008446:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800844a:	4013      	ands	r3, r2
 800844c:	b29a      	uxth	r2, r3
 800844e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008450:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008456:	1c9a      	adds	r2, r3, #2
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008462:	b29b      	uxth	r3, r3
 8008464:	3b01      	subs	r3, #1
 8008466:	b29a      	uxth	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008474:	b29b      	uxth	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	f040 809c 	bne.w	80085b4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008484:	e853 3f00 	ldrex	r3, [r3]
 8008488:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800848a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800848c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008490:	667b      	str	r3, [r7, #100]	; 0x64
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800849a:	657b      	str	r3, [r7, #84]	; 0x54
 800849c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80084a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084a2:	e841 2300 	strex	r3, r2, [r1]
 80084a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80084a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1e6      	bne.n	800847c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3308      	adds	r3, #8
 80084b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b8:	e853 3f00 	ldrex	r3, [r3]
 80084bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c0:	f023 0301 	bic.w	r3, r3, #1
 80084c4:	663b      	str	r3, [r7, #96]	; 0x60
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	3308      	adds	r3, #8
 80084cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084ce:	643a      	str	r2, [r7, #64]	; 0x40
 80084d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084d6:	e841 2300 	strex	r3, r2, [r1]
 80084da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1e5      	bne.n	80084ae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2220      	movs	r2, #32
 80084e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d018      	beq.n	8008536 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	e853 3f00 	ldrex	r3, [r3]
 8008510:	61fb      	str	r3, [r7, #28]
   return(result);
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008518:	65fb      	str	r3, [r7, #92]	; 0x5c
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008524:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800852a:	e841 2300 	strex	r3, r2, [r1]
 800852e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1e6      	bne.n	8008504 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800853a:	2b01      	cmp	r3, #1
 800853c:	d12e      	bne.n	800859c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	e853 3f00 	ldrex	r3, [r3]
 8008550:	60bb      	str	r3, [r7, #8]
   return(result);
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	f023 0310 	bic.w	r3, r3, #16
 8008558:	65bb      	str	r3, [r7, #88]	; 0x58
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008562:	61bb      	str	r3, [r7, #24]
 8008564:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008566:	6979      	ldr	r1, [r7, #20]
 8008568:	69ba      	ldr	r2, [r7, #24]
 800856a:	e841 2300 	strex	r3, r2, [r1]
 800856e:	613b      	str	r3, [r7, #16]
   return(result);
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1e6      	bne.n	8008544 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	69db      	ldr	r3, [r3, #28]
 800857c:	f003 0310 	and.w	r3, r3, #16
 8008580:	2b10      	cmp	r3, #16
 8008582:	d103      	bne.n	800858c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2210      	movs	r2, #16
 800858a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008592:	4619      	mov	r1, r3
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f7ff f8b1 	bl	80076fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800859a:	e00b      	b.n	80085b4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7f8 f985 	bl	80008ac <HAL_UART_RxCpltCallback>
}
 80085a2:	e007      	b.n	80085b4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	699a      	ldr	r2, [r3, #24]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f042 0208 	orr.w	r2, r2, #8
 80085b2:	619a      	str	r2, [r3, #24]
}
 80085b4:	bf00      	nop
 80085b6:	3770      	adds	r7, #112	; 0x70
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <atoi>:
 80085d0:	220a      	movs	r2, #10
 80085d2:	2100      	movs	r1, #0
 80085d4:	f000 b8d4 	b.w	8008780 <strtol>

080085d8 <__errno>:
 80085d8:	4b01      	ldr	r3, [pc, #4]	; (80085e0 <__errno+0x8>)
 80085da:	6818      	ldr	r0, [r3, #0]
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	20000070 	.word	0x20000070

080085e4 <__libc_init_array>:
 80085e4:	b570      	push	{r4, r5, r6, lr}
 80085e6:	4d0d      	ldr	r5, [pc, #52]	; (800861c <__libc_init_array+0x38>)
 80085e8:	4c0d      	ldr	r4, [pc, #52]	; (8008620 <__libc_init_array+0x3c>)
 80085ea:	1b64      	subs	r4, r4, r5
 80085ec:	10a4      	asrs	r4, r4, #2
 80085ee:	2600      	movs	r6, #0
 80085f0:	42a6      	cmp	r6, r4
 80085f2:	d109      	bne.n	8008608 <__libc_init_array+0x24>
 80085f4:	4d0b      	ldr	r5, [pc, #44]	; (8008624 <__libc_init_array+0x40>)
 80085f6:	4c0c      	ldr	r4, [pc, #48]	; (8008628 <__libc_init_array+0x44>)
 80085f8:	f000 fd1a 	bl	8009030 <_init>
 80085fc:	1b64      	subs	r4, r4, r5
 80085fe:	10a4      	asrs	r4, r4, #2
 8008600:	2600      	movs	r6, #0
 8008602:	42a6      	cmp	r6, r4
 8008604:	d105      	bne.n	8008612 <__libc_init_array+0x2e>
 8008606:	bd70      	pop	{r4, r5, r6, pc}
 8008608:	f855 3b04 	ldr.w	r3, [r5], #4
 800860c:	4798      	blx	r3
 800860e:	3601      	adds	r6, #1
 8008610:	e7ee      	b.n	80085f0 <__libc_init_array+0xc>
 8008612:	f855 3b04 	ldr.w	r3, [r5], #4
 8008616:	4798      	blx	r3
 8008618:	3601      	adds	r6, #1
 800861a:	e7f2      	b.n	8008602 <__libc_init_array+0x1e>
 800861c:	08009344 	.word	0x08009344
 8008620:	08009344 	.word	0x08009344
 8008624:	08009344 	.word	0x08009344
 8008628:	08009348 	.word	0x08009348

0800862c <memset>:
 800862c:	4402      	add	r2, r0
 800862e:	4603      	mov	r3, r0
 8008630:	4293      	cmp	r3, r2
 8008632:	d100      	bne.n	8008636 <memset+0xa>
 8008634:	4770      	bx	lr
 8008636:	f803 1b01 	strb.w	r1, [r3], #1
 800863a:	e7f9      	b.n	8008630 <memset+0x4>

0800863c <siprintf>:
 800863c:	b40e      	push	{r1, r2, r3}
 800863e:	b500      	push	{lr}
 8008640:	b09c      	sub	sp, #112	; 0x70
 8008642:	ab1d      	add	r3, sp, #116	; 0x74
 8008644:	9002      	str	r0, [sp, #8]
 8008646:	9006      	str	r0, [sp, #24]
 8008648:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800864c:	4809      	ldr	r0, [pc, #36]	; (8008674 <siprintf+0x38>)
 800864e:	9107      	str	r1, [sp, #28]
 8008650:	9104      	str	r1, [sp, #16]
 8008652:	4909      	ldr	r1, [pc, #36]	; (8008678 <siprintf+0x3c>)
 8008654:	f853 2b04 	ldr.w	r2, [r3], #4
 8008658:	9105      	str	r1, [sp, #20]
 800865a:	6800      	ldr	r0, [r0, #0]
 800865c:	9301      	str	r3, [sp, #4]
 800865e:	a902      	add	r1, sp, #8
 8008660:	f000 f8f4 	bl	800884c <_svfiprintf_r>
 8008664:	9b02      	ldr	r3, [sp, #8]
 8008666:	2200      	movs	r2, #0
 8008668:	701a      	strb	r2, [r3, #0]
 800866a:	b01c      	add	sp, #112	; 0x70
 800866c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008670:	b003      	add	sp, #12
 8008672:	4770      	bx	lr
 8008674:	20000070 	.word	0x20000070
 8008678:	ffff0208 	.word	0xffff0208

0800867c <_strtol_l.constprop.0>:
 800867c:	2b01      	cmp	r3, #1
 800867e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008682:	d001      	beq.n	8008688 <_strtol_l.constprop.0+0xc>
 8008684:	2b24      	cmp	r3, #36	; 0x24
 8008686:	d906      	bls.n	8008696 <_strtol_l.constprop.0+0x1a>
 8008688:	f7ff ffa6 	bl	80085d8 <__errno>
 800868c:	2316      	movs	r3, #22
 800868e:	6003      	str	r3, [r0, #0]
 8008690:	2000      	movs	r0, #0
 8008692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008696:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800877c <_strtol_l.constprop.0+0x100>
 800869a:	460d      	mov	r5, r1
 800869c:	462e      	mov	r6, r5
 800869e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086a2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80086a6:	f017 0708 	ands.w	r7, r7, #8
 80086aa:	d1f7      	bne.n	800869c <_strtol_l.constprop.0+0x20>
 80086ac:	2c2d      	cmp	r4, #45	; 0x2d
 80086ae:	d132      	bne.n	8008716 <_strtol_l.constprop.0+0x9a>
 80086b0:	782c      	ldrb	r4, [r5, #0]
 80086b2:	2701      	movs	r7, #1
 80086b4:	1cb5      	adds	r5, r6, #2
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d05b      	beq.n	8008772 <_strtol_l.constprop.0+0xf6>
 80086ba:	2b10      	cmp	r3, #16
 80086bc:	d109      	bne.n	80086d2 <_strtol_l.constprop.0+0x56>
 80086be:	2c30      	cmp	r4, #48	; 0x30
 80086c0:	d107      	bne.n	80086d2 <_strtol_l.constprop.0+0x56>
 80086c2:	782c      	ldrb	r4, [r5, #0]
 80086c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80086c8:	2c58      	cmp	r4, #88	; 0x58
 80086ca:	d14d      	bne.n	8008768 <_strtol_l.constprop.0+0xec>
 80086cc:	786c      	ldrb	r4, [r5, #1]
 80086ce:	2310      	movs	r3, #16
 80086d0:	3502      	adds	r5, #2
 80086d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80086d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80086da:	f04f 0c00 	mov.w	ip, #0
 80086de:	fbb8 f9f3 	udiv	r9, r8, r3
 80086e2:	4666      	mov	r6, ip
 80086e4:	fb03 8a19 	mls	sl, r3, r9, r8
 80086e8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80086ec:	f1be 0f09 	cmp.w	lr, #9
 80086f0:	d816      	bhi.n	8008720 <_strtol_l.constprop.0+0xa4>
 80086f2:	4674      	mov	r4, lr
 80086f4:	42a3      	cmp	r3, r4
 80086f6:	dd24      	ble.n	8008742 <_strtol_l.constprop.0+0xc6>
 80086f8:	f1bc 0f00 	cmp.w	ip, #0
 80086fc:	db1e      	blt.n	800873c <_strtol_l.constprop.0+0xc0>
 80086fe:	45b1      	cmp	r9, r6
 8008700:	d31c      	bcc.n	800873c <_strtol_l.constprop.0+0xc0>
 8008702:	d101      	bne.n	8008708 <_strtol_l.constprop.0+0x8c>
 8008704:	45a2      	cmp	sl, r4
 8008706:	db19      	blt.n	800873c <_strtol_l.constprop.0+0xc0>
 8008708:	fb06 4603 	mla	r6, r6, r3, r4
 800870c:	f04f 0c01 	mov.w	ip, #1
 8008710:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008714:	e7e8      	b.n	80086e8 <_strtol_l.constprop.0+0x6c>
 8008716:	2c2b      	cmp	r4, #43	; 0x2b
 8008718:	bf04      	itt	eq
 800871a:	782c      	ldrbeq	r4, [r5, #0]
 800871c:	1cb5      	addeq	r5, r6, #2
 800871e:	e7ca      	b.n	80086b6 <_strtol_l.constprop.0+0x3a>
 8008720:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008724:	f1be 0f19 	cmp.w	lr, #25
 8008728:	d801      	bhi.n	800872e <_strtol_l.constprop.0+0xb2>
 800872a:	3c37      	subs	r4, #55	; 0x37
 800872c:	e7e2      	b.n	80086f4 <_strtol_l.constprop.0+0x78>
 800872e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008732:	f1be 0f19 	cmp.w	lr, #25
 8008736:	d804      	bhi.n	8008742 <_strtol_l.constprop.0+0xc6>
 8008738:	3c57      	subs	r4, #87	; 0x57
 800873a:	e7db      	b.n	80086f4 <_strtol_l.constprop.0+0x78>
 800873c:	f04f 3cff 	mov.w	ip, #4294967295
 8008740:	e7e6      	b.n	8008710 <_strtol_l.constprop.0+0x94>
 8008742:	f1bc 0f00 	cmp.w	ip, #0
 8008746:	da05      	bge.n	8008754 <_strtol_l.constprop.0+0xd8>
 8008748:	2322      	movs	r3, #34	; 0x22
 800874a:	6003      	str	r3, [r0, #0]
 800874c:	4646      	mov	r6, r8
 800874e:	b942      	cbnz	r2, 8008762 <_strtol_l.constprop.0+0xe6>
 8008750:	4630      	mov	r0, r6
 8008752:	e79e      	b.n	8008692 <_strtol_l.constprop.0+0x16>
 8008754:	b107      	cbz	r7, 8008758 <_strtol_l.constprop.0+0xdc>
 8008756:	4276      	negs	r6, r6
 8008758:	2a00      	cmp	r2, #0
 800875a:	d0f9      	beq.n	8008750 <_strtol_l.constprop.0+0xd4>
 800875c:	f1bc 0f00 	cmp.w	ip, #0
 8008760:	d000      	beq.n	8008764 <_strtol_l.constprop.0+0xe8>
 8008762:	1e69      	subs	r1, r5, #1
 8008764:	6011      	str	r1, [r2, #0]
 8008766:	e7f3      	b.n	8008750 <_strtol_l.constprop.0+0xd4>
 8008768:	2430      	movs	r4, #48	; 0x30
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1b1      	bne.n	80086d2 <_strtol_l.constprop.0+0x56>
 800876e:	2308      	movs	r3, #8
 8008770:	e7af      	b.n	80086d2 <_strtol_l.constprop.0+0x56>
 8008772:	2c30      	cmp	r4, #48	; 0x30
 8008774:	d0a5      	beq.n	80086c2 <_strtol_l.constprop.0+0x46>
 8008776:	230a      	movs	r3, #10
 8008778:	e7ab      	b.n	80086d2 <_strtol_l.constprop.0+0x56>
 800877a:	bf00      	nop
 800877c:	08009211 	.word	0x08009211

08008780 <strtol>:
 8008780:	4613      	mov	r3, r2
 8008782:	460a      	mov	r2, r1
 8008784:	4601      	mov	r1, r0
 8008786:	4802      	ldr	r0, [pc, #8]	; (8008790 <strtol+0x10>)
 8008788:	6800      	ldr	r0, [r0, #0]
 800878a:	f7ff bf77 	b.w	800867c <_strtol_l.constprop.0>
 800878e:	bf00      	nop
 8008790:	20000070 	.word	0x20000070

08008794 <__ssputs_r>:
 8008794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008798:	688e      	ldr	r6, [r1, #8]
 800879a:	429e      	cmp	r6, r3
 800879c:	4682      	mov	sl, r0
 800879e:	460c      	mov	r4, r1
 80087a0:	4690      	mov	r8, r2
 80087a2:	461f      	mov	r7, r3
 80087a4:	d838      	bhi.n	8008818 <__ssputs_r+0x84>
 80087a6:	898a      	ldrh	r2, [r1, #12]
 80087a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087ac:	d032      	beq.n	8008814 <__ssputs_r+0x80>
 80087ae:	6825      	ldr	r5, [r4, #0]
 80087b0:	6909      	ldr	r1, [r1, #16]
 80087b2:	eba5 0901 	sub.w	r9, r5, r1
 80087b6:	6965      	ldr	r5, [r4, #20]
 80087b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087c0:	3301      	adds	r3, #1
 80087c2:	444b      	add	r3, r9
 80087c4:	106d      	asrs	r5, r5, #1
 80087c6:	429d      	cmp	r5, r3
 80087c8:	bf38      	it	cc
 80087ca:	461d      	movcc	r5, r3
 80087cc:	0553      	lsls	r3, r2, #21
 80087ce:	d531      	bpl.n	8008834 <__ssputs_r+0xa0>
 80087d0:	4629      	mov	r1, r5
 80087d2:	f000 fb63 	bl	8008e9c <_malloc_r>
 80087d6:	4606      	mov	r6, r0
 80087d8:	b950      	cbnz	r0, 80087f0 <__ssputs_r+0x5c>
 80087da:	230c      	movs	r3, #12
 80087dc:	f8ca 3000 	str.w	r3, [sl]
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087e6:	81a3      	strh	r3, [r4, #12]
 80087e8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f0:	6921      	ldr	r1, [r4, #16]
 80087f2:	464a      	mov	r2, r9
 80087f4:	f000 fabe 	bl	8008d74 <memcpy>
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008802:	81a3      	strh	r3, [r4, #12]
 8008804:	6126      	str	r6, [r4, #16]
 8008806:	6165      	str	r5, [r4, #20]
 8008808:	444e      	add	r6, r9
 800880a:	eba5 0509 	sub.w	r5, r5, r9
 800880e:	6026      	str	r6, [r4, #0]
 8008810:	60a5      	str	r5, [r4, #8]
 8008812:	463e      	mov	r6, r7
 8008814:	42be      	cmp	r6, r7
 8008816:	d900      	bls.n	800881a <__ssputs_r+0x86>
 8008818:	463e      	mov	r6, r7
 800881a:	6820      	ldr	r0, [r4, #0]
 800881c:	4632      	mov	r2, r6
 800881e:	4641      	mov	r1, r8
 8008820:	f000 fab6 	bl	8008d90 <memmove>
 8008824:	68a3      	ldr	r3, [r4, #8]
 8008826:	1b9b      	subs	r3, r3, r6
 8008828:	60a3      	str	r3, [r4, #8]
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	4433      	add	r3, r6
 800882e:	6023      	str	r3, [r4, #0]
 8008830:	2000      	movs	r0, #0
 8008832:	e7db      	b.n	80087ec <__ssputs_r+0x58>
 8008834:	462a      	mov	r2, r5
 8008836:	f000 fba5 	bl	8008f84 <_realloc_r>
 800883a:	4606      	mov	r6, r0
 800883c:	2800      	cmp	r0, #0
 800883e:	d1e1      	bne.n	8008804 <__ssputs_r+0x70>
 8008840:	6921      	ldr	r1, [r4, #16]
 8008842:	4650      	mov	r0, sl
 8008844:	f000 fabe 	bl	8008dc4 <_free_r>
 8008848:	e7c7      	b.n	80087da <__ssputs_r+0x46>
	...

0800884c <_svfiprintf_r>:
 800884c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008850:	4698      	mov	r8, r3
 8008852:	898b      	ldrh	r3, [r1, #12]
 8008854:	061b      	lsls	r3, r3, #24
 8008856:	b09d      	sub	sp, #116	; 0x74
 8008858:	4607      	mov	r7, r0
 800885a:	460d      	mov	r5, r1
 800885c:	4614      	mov	r4, r2
 800885e:	d50e      	bpl.n	800887e <_svfiprintf_r+0x32>
 8008860:	690b      	ldr	r3, [r1, #16]
 8008862:	b963      	cbnz	r3, 800887e <_svfiprintf_r+0x32>
 8008864:	2140      	movs	r1, #64	; 0x40
 8008866:	f000 fb19 	bl	8008e9c <_malloc_r>
 800886a:	6028      	str	r0, [r5, #0]
 800886c:	6128      	str	r0, [r5, #16]
 800886e:	b920      	cbnz	r0, 800887a <_svfiprintf_r+0x2e>
 8008870:	230c      	movs	r3, #12
 8008872:	603b      	str	r3, [r7, #0]
 8008874:	f04f 30ff 	mov.w	r0, #4294967295
 8008878:	e0d1      	b.n	8008a1e <_svfiprintf_r+0x1d2>
 800887a:	2340      	movs	r3, #64	; 0x40
 800887c:	616b      	str	r3, [r5, #20]
 800887e:	2300      	movs	r3, #0
 8008880:	9309      	str	r3, [sp, #36]	; 0x24
 8008882:	2320      	movs	r3, #32
 8008884:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008888:	f8cd 800c 	str.w	r8, [sp, #12]
 800888c:	2330      	movs	r3, #48	; 0x30
 800888e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008a38 <_svfiprintf_r+0x1ec>
 8008892:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008896:	f04f 0901 	mov.w	r9, #1
 800889a:	4623      	mov	r3, r4
 800889c:	469a      	mov	sl, r3
 800889e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088a2:	b10a      	cbz	r2, 80088a8 <_svfiprintf_r+0x5c>
 80088a4:	2a25      	cmp	r2, #37	; 0x25
 80088a6:	d1f9      	bne.n	800889c <_svfiprintf_r+0x50>
 80088a8:	ebba 0b04 	subs.w	fp, sl, r4
 80088ac:	d00b      	beq.n	80088c6 <_svfiprintf_r+0x7a>
 80088ae:	465b      	mov	r3, fp
 80088b0:	4622      	mov	r2, r4
 80088b2:	4629      	mov	r1, r5
 80088b4:	4638      	mov	r0, r7
 80088b6:	f7ff ff6d 	bl	8008794 <__ssputs_r>
 80088ba:	3001      	adds	r0, #1
 80088bc:	f000 80aa 	beq.w	8008a14 <_svfiprintf_r+0x1c8>
 80088c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088c2:	445a      	add	r2, fp
 80088c4:	9209      	str	r2, [sp, #36]	; 0x24
 80088c6:	f89a 3000 	ldrb.w	r3, [sl]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 80a2 	beq.w	8008a14 <_svfiprintf_r+0x1c8>
 80088d0:	2300      	movs	r3, #0
 80088d2:	f04f 32ff 	mov.w	r2, #4294967295
 80088d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088da:	f10a 0a01 	add.w	sl, sl, #1
 80088de:	9304      	str	r3, [sp, #16]
 80088e0:	9307      	str	r3, [sp, #28]
 80088e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088e6:	931a      	str	r3, [sp, #104]	; 0x68
 80088e8:	4654      	mov	r4, sl
 80088ea:	2205      	movs	r2, #5
 80088ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f0:	4851      	ldr	r0, [pc, #324]	; (8008a38 <_svfiprintf_r+0x1ec>)
 80088f2:	f7f7 fc85 	bl	8000200 <memchr>
 80088f6:	9a04      	ldr	r2, [sp, #16]
 80088f8:	b9d8      	cbnz	r0, 8008932 <_svfiprintf_r+0xe6>
 80088fa:	06d0      	lsls	r0, r2, #27
 80088fc:	bf44      	itt	mi
 80088fe:	2320      	movmi	r3, #32
 8008900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008904:	0711      	lsls	r1, r2, #28
 8008906:	bf44      	itt	mi
 8008908:	232b      	movmi	r3, #43	; 0x2b
 800890a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800890e:	f89a 3000 	ldrb.w	r3, [sl]
 8008912:	2b2a      	cmp	r3, #42	; 0x2a
 8008914:	d015      	beq.n	8008942 <_svfiprintf_r+0xf6>
 8008916:	9a07      	ldr	r2, [sp, #28]
 8008918:	4654      	mov	r4, sl
 800891a:	2000      	movs	r0, #0
 800891c:	f04f 0c0a 	mov.w	ip, #10
 8008920:	4621      	mov	r1, r4
 8008922:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008926:	3b30      	subs	r3, #48	; 0x30
 8008928:	2b09      	cmp	r3, #9
 800892a:	d94e      	bls.n	80089ca <_svfiprintf_r+0x17e>
 800892c:	b1b0      	cbz	r0, 800895c <_svfiprintf_r+0x110>
 800892e:	9207      	str	r2, [sp, #28]
 8008930:	e014      	b.n	800895c <_svfiprintf_r+0x110>
 8008932:	eba0 0308 	sub.w	r3, r0, r8
 8008936:	fa09 f303 	lsl.w	r3, r9, r3
 800893a:	4313      	orrs	r3, r2
 800893c:	9304      	str	r3, [sp, #16]
 800893e:	46a2      	mov	sl, r4
 8008940:	e7d2      	b.n	80088e8 <_svfiprintf_r+0x9c>
 8008942:	9b03      	ldr	r3, [sp, #12]
 8008944:	1d19      	adds	r1, r3, #4
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	9103      	str	r1, [sp, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	bfbb      	ittet	lt
 800894e:	425b      	neglt	r3, r3
 8008950:	f042 0202 	orrlt.w	r2, r2, #2
 8008954:	9307      	strge	r3, [sp, #28]
 8008956:	9307      	strlt	r3, [sp, #28]
 8008958:	bfb8      	it	lt
 800895a:	9204      	strlt	r2, [sp, #16]
 800895c:	7823      	ldrb	r3, [r4, #0]
 800895e:	2b2e      	cmp	r3, #46	; 0x2e
 8008960:	d10c      	bne.n	800897c <_svfiprintf_r+0x130>
 8008962:	7863      	ldrb	r3, [r4, #1]
 8008964:	2b2a      	cmp	r3, #42	; 0x2a
 8008966:	d135      	bne.n	80089d4 <_svfiprintf_r+0x188>
 8008968:	9b03      	ldr	r3, [sp, #12]
 800896a:	1d1a      	adds	r2, r3, #4
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	9203      	str	r2, [sp, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	bfb8      	it	lt
 8008974:	f04f 33ff 	movlt.w	r3, #4294967295
 8008978:	3402      	adds	r4, #2
 800897a:	9305      	str	r3, [sp, #20]
 800897c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a48 <_svfiprintf_r+0x1fc>
 8008980:	7821      	ldrb	r1, [r4, #0]
 8008982:	2203      	movs	r2, #3
 8008984:	4650      	mov	r0, sl
 8008986:	f7f7 fc3b 	bl	8000200 <memchr>
 800898a:	b140      	cbz	r0, 800899e <_svfiprintf_r+0x152>
 800898c:	2340      	movs	r3, #64	; 0x40
 800898e:	eba0 000a 	sub.w	r0, r0, sl
 8008992:	fa03 f000 	lsl.w	r0, r3, r0
 8008996:	9b04      	ldr	r3, [sp, #16]
 8008998:	4303      	orrs	r3, r0
 800899a:	3401      	adds	r4, #1
 800899c:	9304      	str	r3, [sp, #16]
 800899e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a2:	4826      	ldr	r0, [pc, #152]	; (8008a3c <_svfiprintf_r+0x1f0>)
 80089a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089a8:	2206      	movs	r2, #6
 80089aa:	f7f7 fc29 	bl	8000200 <memchr>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d038      	beq.n	8008a24 <_svfiprintf_r+0x1d8>
 80089b2:	4b23      	ldr	r3, [pc, #140]	; (8008a40 <_svfiprintf_r+0x1f4>)
 80089b4:	bb1b      	cbnz	r3, 80089fe <_svfiprintf_r+0x1b2>
 80089b6:	9b03      	ldr	r3, [sp, #12]
 80089b8:	3307      	adds	r3, #7
 80089ba:	f023 0307 	bic.w	r3, r3, #7
 80089be:	3308      	adds	r3, #8
 80089c0:	9303      	str	r3, [sp, #12]
 80089c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c4:	4433      	add	r3, r6
 80089c6:	9309      	str	r3, [sp, #36]	; 0x24
 80089c8:	e767      	b.n	800889a <_svfiprintf_r+0x4e>
 80089ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80089ce:	460c      	mov	r4, r1
 80089d0:	2001      	movs	r0, #1
 80089d2:	e7a5      	b.n	8008920 <_svfiprintf_r+0xd4>
 80089d4:	2300      	movs	r3, #0
 80089d6:	3401      	adds	r4, #1
 80089d8:	9305      	str	r3, [sp, #20]
 80089da:	4619      	mov	r1, r3
 80089dc:	f04f 0c0a 	mov.w	ip, #10
 80089e0:	4620      	mov	r0, r4
 80089e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089e6:	3a30      	subs	r2, #48	; 0x30
 80089e8:	2a09      	cmp	r2, #9
 80089ea:	d903      	bls.n	80089f4 <_svfiprintf_r+0x1a8>
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d0c5      	beq.n	800897c <_svfiprintf_r+0x130>
 80089f0:	9105      	str	r1, [sp, #20]
 80089f2:	e7c3      	b.n	800897c <_svfiprintf_r+0x130>
 80089f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80089f8:	4604      	mov	r4, r0
 80089fa:	2301      	movs	r3, #1
 80089fc:	e7f0      	b.n	80089e0 <_svfiprintf_r+0x194>
 80089fe:	ab03      	add	r3, sp, #12
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	462a      	mov	r2, r5
 8008a04:	4b0f      	ldr	r3, [pc, #60]	; (8008a44 <_svfiprintf_r+0x1f8>)
 8008a06:	a904      	add	r1, sp, #16
 8008a08:	4638      	mov	r0, r7
 8008a0a:	f3af 8000 	nop.w
 8008a0e:	1c42      	adds	r2, r0, #1
 8008a10:	4606      	mov	r6, r0
 8008a12:	d1d6      	bne.n	80089c2 <_svfiprintf_r+0x176>
 8008a14:	89ab      	ldrh	r3, [r5, #12]
 8008a16:	065b      	lsls	r3, r3, #25
 8008a18:	f53f af2c 	bmi.w	8008874 <_svfiprintf_r+0x28>
 8008a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a1e:	b01d      	add	sp, #116	; 0x74
 8008a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a24:	ab03      	add	r3, sp, #12
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	462a      	mov	r2, r5
 8008a2a:	4b06      	ldr	r3, [pc, #24]	; (8008a44 <_svfiprintf_r+0x1f8>)
 8008a2c:	a904      	add	r1, sp, #16
 8008a2e:	4638      	mov	r0, r7
 8008a30:	f000 f87a 	bl	8008b28 <_printf_i>
 8008a34:	e7eb      	b.n	8008a0e <_svfiprintf_r+0x1c2>
 8008a36:	bf00      	nop
 8008a38:	08009311 	.word	0x08009311
 8008a3c:	0800931b 	.word	0x0800931b
 8008a40:	00000000 	.word	0x00000000
 8008a44:	08008795 	.word	0x08008795
 8008a48:	08009317 	.word	0x08009317

08008a4c <_printf_common>:
 8008a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a50:	4616      	mov	r6, r2
 8008a52:	4699      	mov	r9, r3
 8008a54:	688a      	ldr	r2, [r1, #8]
 8008a56:	690b      	ldr	r3, [r1, #16]
 8008a58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	bfb8      	it	lt
 8008a60:	4613      	movlt	r3, r2
 8008a62:	6033      	str	r3, [r6, #0]
 8008a64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a68:	4607      	mov	r7, r0
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	b10a      	cbz	r2, 8008a72 <_printf_common+0x26>
 8008a6e:	3301      	adds	r3, #1
 8008a70:	6033      	str	r3, [r6, #0]
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	0699      	lsls	r1, r3, #26
 8008a76:	bf42      	ittt	mi
 8008a78:	6833      	ldrmi	r3, [r6, #0]
 8008a7a:	3302      	addmi	r3, #2
 8008a7c:	6033      	strmi	r3, [r6, #0]
 8008a7e:	6825      	ldr	r5, [r4, #0]
 8008a80:	f015 0506 	ands.w	r5, r5, #6
 8008a84:	d106      	bne.n	8008a94 <_printf_common+0x48>
 8008a86:	f104 0a19 	add.w	sl, r4, #25
 8008a8a:	68e3      	ldr	r3, [r4, #12]
 8008a8c:	6832      	ldr	r2, [r6, #0]
 8008a8e:	1a9b      	subs	r3, r3, r2
 8008a90:	42ab      	cmp	r3, r5
 8008a92:	dc26      	bgt.n	8008ae2 <_printf_common+0x96>
 8008a94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a98:	1e13      	subs	r3, r2, #0
 8008a9a:	6822      	ldr	r2, [r4, #0]
 8008a9c:	bf18      	it	ne
 8008a9e:	2301      	movne	r3, #1
 8008aa0:	0692      	lsls	r2, r2, #26
 8008aa2:	d42b      	bmi.n	8008afc <_printf_common+0xb0>
 8008aa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008aa8:	4649      	mov	r1, r9
 8008aaa:	4638      	mov	r0, r7
 8008aac:	47c0      	blx	r8
 8008aae:	3001      	adds	r0, #1
 8008ab0:	d01e      	beq.n	8008af0 <_printf_common+0xa4>
 8008ab2:	6823      	ldr	r3, [r4, #0]
 8008ab4:	68e5      	ldr	r5, [r4, #12]
 8008ab6:	6832      	ldr	r2, [r6, #0]
 8008ab8:	f003 0306 	and.w	r3, r3, #6
 8008abc:	2b04      	cmp	r3, #4
 8008abe:	bf08      	it	eq
 8008ac0:	1aad      	subeq	r5, r5, r2
 8008ac2:	68a3      	ldr	r3, [r4, #8]
 8008ac4:	6922      	ldr	r2, [r4, #16]
 8008ac6:	bf0c      	ite	eq
 8008ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008acc:	2500      	movne	r5, #0
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	bfc4      	itt	gt
 8008ad2:	1a9b      	subgt	r3, r3, r2
 8008ad4:	18ed      	addgt	r5, r5, r3
 8008ad6:	2600      	movs	r6, #0
 8008ad8:	341a      	adds	r4, #26
 8008ada:	42b5      	cmp	r5, r6
 8008adc:	d11a      	bne.n	8008b14 <_printf_common+0xc8>
 8008ade:	2000      	movs	r0, #0
 8008ae0:	e008      	b.n	8008af4 <_printf_common+0xa8>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	4652      	mov	r2, sl
 8008ae6:	4649      	mov	r1, r9
 8008ae8:	4638      	mov	r0, r7
 8008aea:	47c0      	blx	r8
 8008aec:	3001      	adds	r0, #1
 8008aee:	d103      	bne.n	8008af8 <_printf_common+0xac>
 8008af0:	f04f 30ff 	mov.w	r0, #4294967295
 8008af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af8:	3501      	adds	r5, #1
 8008afa:	e7c6      	b.n	8008a8a <_printf_common+0x3e>
 8008afc:	18e1      	adds	r1, r4, r3
 8008afe:	1c5a      	adds	r2, r3, #1
 8008b00:	2030      	movs	r0, #48	; 0x30
 8008b02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b06:	4422      	add	r2, r4
 8008b08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b10:	3302      	adds	r3, #2
 8008b12:	e7c7      	b.n	8008aa4 <_printf_common+0x58>
 8008b14:	2301      	movs	r3, #1
 8008b16:	4622      	mov	r2, r4
 8008b18:	4649      	mov	r1, r9
 8008b1a:	4638      	mov	r0, r7
 8008b1c:	47c0      	blx	r8
 8008b1e:	3001      	adds	r0, #1
 8008b20:	d0e6      	beq.n	8008af0 <_printf_common+0xa4>
 8008b22:	3601      	adds	r6, #1
 8008b24:	e7d9      	b.n	8008ada <_printf_common+0x8e>
	...

08008b28 <_printf_i>:
 8008b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	7e0f      	ldrb	r7, [r1, #24]
 8008b2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b30:	2f78      	cmp	r7, #120	; 0x78
 8008b32:	4691      	mov	r9, r2
 8008b34:	4680      	mov	r8, r0
 8008b36:	460c      	mov	r4, r1
 8008b38:	469a      	mov	sl, r3
 8008b3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b3e:	d807      	bhi.n	8008b50 <_printf_i+0x28>
 8008b40:	2f62      	cmp	r7, #98	; 0x62
 8008b42:	d80a      	bhi.n	8008b5a <_printf_i+0x32>
 8008b44:	2f00      	cmp	r7, #0
 8008b46:	f000 80d8 	beq.w	8008cfa <_printf_i+0x1d2>
 8008b4a:	2f58      	cmp	r7, #88	; 0x58
 8008b4c:	f000 80a3 	beq.w	8008c96 <_printf_i+0x16e>
 8008b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b58:	e03a      	b.n	8008bd0 <_printf_i+0xa8>
 8008b5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b5e:	2b15      	cmp	r3, #21
 8008b60:	d8f6      	bhi.n	8008b50 <_printf_i+0x28>
 8008b62:	a101      	add	r1, pc, #4	; (adr r1, 8008b68 <_printf_i+0x40>)
 8008b64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b68:	08008bc1 	.word	0x08008bc1
 8008b6c:	08008bd5 	.word	0x08008bd5
 8008b70:	08008b51 	.word	0x08008b51
 8008b74:	08008b51 	.word	0x08008b51
 8008b78:	08008b51 	.word	0x08008b51
 8008b7c:	08008b51 	.word	0x08008b51
 8008b80:	08008bd5 	.word	0x08008bd5
 8008b84:	08008b51 	.word	0x08008b51
 8008b88:	08008b51 	.word	0x08008b51
 8008b8c:	08008b51 	.word	0x08008b51
 8008b90:	08008b51 	.word	0x08008b51
 8008b94:	08008ce1 	.word	0x08008ce1
 8008b98:	08008c05 	.word	0x08008c05
 8008b9c:	08008cc3 	.word	0x08008cc3
 8008ba0:	08008b51 	.word	0x08008b51
 8008ba4:	08008b51 	.word	0x08008b51
 8008ba8:	08008d03 	.word	0x08008d03
 8008bac:	08008b51 	.word	0x08008b51
 8008bb0:	08008c05 	.word	0x08008c05
 8008bb4:	08008b51 	.word	0x08008b51
 8008bb8:	08008b51 	.word	0x08008b51
 8008bbc:	08008ccb 	.word	0x08008ccb
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	1d1a      	adds	r2, r3, #4
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	602a      	str	r2, [r5, #0]
 8008bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e0a3      	b.n	8008d1c <_printf_i+0x1f4>
 8008bd4:	6820      	ldr	r0, [r4, #0]
 8008bd6:	6829      	ldr	r1, [r5, #0]
 8008bd8:	0606      	lsls	r6, r0, #24
 8008bda:	f101 0304 	add.w	r3, r1, #4
 8008bde:	d50a      	bpl.n	8008bf6 <_printf_i+0xce>
 8008be0:	680e      	ldr	r6, [r1, #0]
 8008be2:	602b      	str	r3, [r5, #0]
 8008be4:	2e00      	cmp	r6, #0
 8008be6:	da03      	bge.n	8008bf0 <_printf_i+0xc8>
 8008be8:	232d      	movs	r3, #45	; 0x2d
 8008bea:	4276      	negs	r6, r6
 8008bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bf0:	485e      	ldr	r0, [pc, #376]	; (8008d6c <_printf_i+0x244>)
 8008bf2:	230a      	movs	r3, #10
 8008bf4:	e019      	b.n	8008c2a <_printf_i+0x102>
 8008bf6:	680e      	ldr	r6, [r1, #0]
 8008bf8:	602b      	str	r3, [r5, #0]
 8008bfa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008bfe:	bf18      	it	ne
 8008c00:	b236      	sxthne	r6, r6
 8008c02:	e7ef      	b.n	8008be4 <_printf_i+0xbc>
 8008c04:	682b      	ldr	r3, [r5, #0]
 8008c06:	6820      	ldr	r0, [r4, #0]
 8008c08:	1d19      	adds	r1, r3, #4
 8008c0a:	6029      	str	r1, [r5, #0]
 8008c0c:	0601      	lsls	r1, r0, #24
 8008c0e:	d501      	bpl.n	8008c14 <_printf_i+0xec>
 8008c10:	681e      	ldr	r6, [r3, #0]
 8008c12:	e002      	b.n	8008c1a <_printf_i+0xf2>
 8008c14:	0646      	lsls	r6, r0, #25
 8008c16:	d5fb      	bpl.n	8008c10 <_printf_i+0xe8>
 8008c18:	881e      	ldrh	r6, [r3, #0]
 8008c1a:	4854      	ldr	r0, [pc, #336]	; (8008d6c <_printf_i+0x244>)
 8008c1c:	2f6f      	cmp	r7, #111	; 0x6f
 8008c1e:	bf0c      	ite	eq
 8008c20:	2308      	moveq	r3, #8
 8008c22:	230a      	movne	r3, #10
 8008c24:	2100      	movs	r1, #0
 8008c26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c2a:	6865      	ldr	r5, [r4, #4]
 8008c2c:	60a5      	str	r5, [r4, #8]
 8008c2e:	2d00      	cmp	r5, #0
 8008c30:	bfa2      	ittt	ge
 8008c32:	6821      	ldrge	r1, [r4, #0]
 8008c34:	f021 0104 	bicge.w	r1, r1, #4
 8008c38:	6021      	strge	r1, [r4, #0]
 8008c3a:	b90e      	cbnz	r6, 8008c40 <_printf_i+0x118>
 8008c3c:	2d00      	cmp	r5, #0
 8008c3e:	d04d      	beq.n	8008cdc <_printf_i+0x1b4>
 8008c40:	4615      	mov	r5, r2
 8008c42:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c46:	fb03 6711 	mls	r7, r3, r1, r6
 8008c4a:	5dc7      	ldrb	r7, [r0, r7]
 8008c4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c50:	4637      	mov	r7, r6
 8008c52:	42bb      	cmp	r3, r7
 8008c54:	460e      	mov	r6, r1
 8008c56:	d9f4      	bls.n	8008c42 <_printf_i+0x11a>
 8008c58:	2b08      	cmp	r3, #8
 8008c5a:	d10b      	bne.n	8008c74 <_printf_i+0x14c>
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	07de      	lsls	r6, r3, #31
 8008c60:	d508      	bpl.n	8008c74 <_printf_i+0x14c>
 8008c62:	6923      	ldr	r3, [r4, #16]
 8008c64:	6861      	ldr	r1, [r4, #4]
 8008c66:	4299      	cmp	r1, r3
 8008c68:	bfde      	ittt	le
 8008c6a:	2330      	movle	r3, #48	; 0x30
 8008c6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c74:	1b52      	subs	r2, r2, r5
 8008c76:	6122      	str	r2, [r4, #16]
 8008c78:	f8cd a000 	str.w	sl, [sp]
 8008c7c:	464b      	mov	r3, r9
 8008c7e:	aa03      	add	r2, sp, #12
 8008c80:	4621      	mov	r1, r4
 8008c82:	4640      	mov	r0, r8
 8008c84:	f7ff fee2 	bl	8008a4c <_printf_common>
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d14c      	bne.n	8008d26 <_printf_i+0x1fe>
 8008c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c90:	b004      	add	sp, #16
 8008c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c96:	4835      	ldr	r0, [pc, #212]	; (8008d6c <_printf_i+0x244>)
 8008c98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c9c:	6829      	ldr	r1, [r5, #0]
 8008c9e:	6823      	ldr	r3, [r4, #0]
 8008ca0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ca4:	6029      	str	r1, [r5, #0]
 8008ca6:	061d      	lsls	r5, r3, #24
 8008ca8:	d514      	bpl.n	8008cd4 <_printf_i+0x1ac>
 8008caa:	07df      	lsls	r7, r3, #31
 8008cac:	bf44      	itt	mi
 8008cae:	f043 0320 	orrmi.w	r3, r3, #32
 8008cb2:	6023      	strmi	r3, [r4, #0]
 8008cb4:	b91e      	cbnz	r6, 8008cbe <_printf_i+0x196>
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	f023 0320 	bic.w	r3, r3, #32
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	2310      	movs	r3, #16
 8008cc0:	e7b0      	b.n	8008c24 <_printf_i+0xfc>
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	f043 0320 	orr.w	r3, r3, #32
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	2378      	movs	r3, #120	; 0x78
 8008ccc:	4828      	ldr	r0, [pc, #160]	; (8008d70 <_printf_i+0x248>)
 8008cce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cd2:	e7e3      	b.n	8008c9c <_printf_i+0x174>
 8008cd4:	0659      	lsls	r1, r3, #25
 8008cd6:	bf48      	it	mi
 8008cd8:	b2b6      	uxthmi	r6, r6
 8008cda:	e7e6      	b.n	8008caa <_printf_i+0x182>
 8008cdc:	4615      	mov	r5, r2
 8008cde:	e7bb      	b.n	8008c58 <_printf_i+0x130>
 8008ce0:	682b      	ldr	r3, [r5, #0]
 8008ce2:	6826      	ldr	r6, [r4, #0]
 8008ce4:	6961      	ldr	r1, [r4, #20]
 8008ce6:	1d18      	adds	r0, r3, #4
 8008ce8:	6028      	str	r0, [r5, #0]
 8008cea:	0635      	lsls	r5, r6, #24
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	d501      	bpl.n	8008cf4 <_printf_i+0x1cc>
 8008cf0:	6019      	str	r1, [r3, #0]
 8008cf2:	e002      	b.n	8008cfa <_printf_i+0x1d2>
 8008cf4:	0670      	lsls	r0, r6, #25
 8008cf6:	d5fb      	bpl.n	8008cf0 <_printf_i+0x1c8>
 8008cf8:	8019      	strh	r1, [r3, #0]
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	6123      	str	r3, [r4, #16]
 8008cfe:	4615      	mov	r5, r2
 8008d00:	e7ba      	b.n	8008c78 <_printf_i+0x150>
 8008d02:	682b      	ldr	r3, [r5, #0]
 8008d04:	1d1a      	adds	r2, r3, #4
 8008d06:	602a      	str	r2, [r5, #0]
 8008d08:	681d      	ldr	r5, [r3, #0]
 8008d0a:	6862      	ldr	r2, [r4, #4]
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	4628      	mov	r0, r5
 8008d10:	f7f7 fa76 	bl	8000200 <memchr>
 8008d14:	b108      	cbz	r0, 8008d1a <_printf_i+0x1f2>
 8008d16:	1b40      	subs	r0, r0, r5
 8008d18:	6060      	str	r0, [r4, #4]
 8008d1a:	6863      	ldr	r3, [r4, #4]
 8008d1c:	6123      	str	r3, [r4, #16]
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d24:	e7a8      	b.n	8008c78 <_printf_i+0x150>
 8008d26:	6923      	ldr	r3, [r4, #16]
 8008d28:	462a      	mov	r2, r5
 8008d2a:	4649      	mov	r1, r9
 8008d2c:	4640      	mov	r0, r8
 8008d2e:	47d0      	blx	sl
 8008d30:	3001      	adds	r0, #1
 8008d32:	d0ab      	beq.n	8008c8c <_printf_i+0x164>
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	079b      	lsls	r3, r3, #30
 8008d38:	d413      	bmi.n	8008d62 <_printf_i+0x23a>
 8008d3a:	68e0      	ldr	r0, [r4, #12]
 8008d3c:	9b03      	ldr	r3, [sp, #12]
 8008d3e:	4298      	cmp	r0, r3
 8008d40:	bfb8      	it	lt
 8008d42:	4618      	movlt	r0, r3
 8008d44:	e7a4      	b.n	8008c90 <_printf_i+0x168>
 8008d46:	2301      	movs	r3, #1
 8008d48:	4632      	mov	r2, r6
 8008d4a:	4649      	mov	r1, r9
 8008d4c:	4640      	mov	r0, r8
 8008d4e:	47d0      	blx	sl
 8008d50:	3001      	adds	r0, #1
 8008d52:	d09b      	beq.n	8008c8c <_printf_i+0x164>
 8008d54:	3501      	adds	r5, #1
 8008d56:	68e3      	ldr	r3, [r4, #12]
 8008d58:	9903      	ldr	r1, [sp, #12]
 8008d5a:	1a5b      	subs	r3, r3, r1
 8008d5c:	42ab      	cmp	r3, r5
 8008d5e:	dcf2      	bgt.n	8008d46 <_printf_i+0x21e>
 8008d60:	e7eb      	b.n	8008d3a <_printf_i+0x212>
 8008d62:	2500      	movs	r5, #0
 8008d64:	f104 0619 	add.w	r6, r4, #25
 8008d68:	e7f5      	b.n	8008d56 <_printf_i+0x22e>
 8008d6a:	bf00      	nop
 8008d6c:	08009322 	.word	0x08009322
 8008d70:	08009333 	.word	0x08009333

08008d74 <memcpy>:
 8008d74:	440a      	add	r2, r1
 8008d76:	4291      	cmp	r1, r2
 8008d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d7c:	d100      	bne.n	8008d80 <memcpy+0xc>
 8008d7e:	4770      	bx	lr
 8008d80:	b510      	push	{r4, lr}
 8008d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d8a:	4291      	cmp	r1, r2
 8008d8c:	d1f9      	bne.n	8008d82 <memcpy+0xe>
 8008d8e:	bd10      	pop	{r4, pc}

08008d90 <memmove>:
 8008d90:	4288      	cmp	r0, r1
 8008d92:	b510      	push	{r4, lr}
 8008d94:	eb01 0402 	add.w	r4, r1, r2
 8008d98:	d902      	bls.n	8008da0 <memmove+0x10>
 8008d9a:	4284      	cmp	r4, r0
 8008d9c:	4623      	mov	r3, r4
 8008d9e:	d807      	bhi.n	8008db0 <memmove+0x20>
 8008da0:	1e43      	subs	r3, r0, #1
 8008da2:	42a1      	cmp	r1, r4
 8008da4:	d008      	beq.n	8008db8 <memmove+0x28>
 8008da6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008daa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dae:	e7f8      	b.n	8008da2 <memmove+0x12>
 8008db0:	4402      	add	r2, r0
 8008db2:	4601      	mov	r1, r0
 8008db4:	428a      	cmp	r2, r1
 8008db6:	d100      	bne.n	8008dba <memmove+0x2a>
 8008db8:	bd10      	pop	{r4, pc}
 8008dba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dc2:	e7f7      	b.n	8008db4 <memmove+0x24>

08008dc4 <_free_r>:
 8008dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dc6:	2900      	cmp	r1, #0
 8008dc8:	d044      	beq.n	8008e54 <_free_r+0x90>
 8008dca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dce:	9001      	str	r0, [sp, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f1a1 0404 	sub.w	r4, r1, #4
 8008dd6:	bfb8      	it	lt
 8008dd8:	18e4      	addlt	r4, r4, r3
 8008dda:	f000 f913 	bl	8009004 <__malloc_lock>
 8008dde:	4a1e      	ldr	r2, [pc, #120]	; (8008e58 <_free_r+0x94>)
 8008de0:	9801      	ldr	r0, [sp, #4]
 8008de2:	6813      	ldr	r3, [r2, #0]
 8008de4:	b933      	cbnz	r3, 8008df4 <_free_r+0x30>
 8008de6:	6063      	str	r3, [r4, #4]
 8008de8:	6014      	str	r4, [r2, #0]
 8008dea:	b003      	add	sp, #12
 8008dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008df0:	f000 b90e 	b.w	8009010 <__malloc_unlock>
 8008df4:	42a3      	cmp	r3, r4
 8008df6:	d908      	bls.n	8008e0a <_free_r+0x46>
 8008df8:	6825      	ldr	r5, [r4, #0]
 8008dfa:	1961      	adds	r1, r4, r5
 8008dfc:	428b      	cmp	r3, r1
 8008dfe:	bf01      	itttt	eq
 8008e00:	6819      	ldreq	r1, [r3, #0]
 8008e02:	685b      	ldreq	r3, [r3, #4]
 8008e04:	1949      	addeq	r1, r1, r5
 8008e06:	6021      	streq	r1, [r4, #0]
 8008e08:	e7ed      	b.n	8008de6 <_free_r+0x22>
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	b10b      	cbz	r3, 8008e14 <_free_r+0x50>
 8008e10:	42a3      	cmp	r3, r4
 8008e12:	d9fa      	bls.n	8008e0a <_free_r+0x46>
 8008e14:	6811      	ldr	r1, [r2, #0]
 8008e16:	1855      	adds	r5, r2, r1
 8008e18:	42a5      	cmp	r5, r4
 8008e1a:	d10b      	bne.n	8008e34 <_free_r+0x70>
 8008e1c:	6824      	ldr	r4, [r4, #0]
 8008e1e:	4421      	add	r1, r4
 8008e20:	1854      	adds	r4, r2, r1
 8008e22:	42a3      	cmp	r3, r4
 8008e24:	6011      	str	r1, [r2, #0]
 8008e26:	d1e0      	bne.n	8008dea <_free_r+0x26>
 8008e28:	681c      	ldr	r4, [r3, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	6053      	str	r3, [r2, #4]
 8008e2e:	4421      	add	r1, r4
 8008e30:	6011      	str	r1, [r2, #0]
 8008e32:	e7da      	b.n	8008dea <_free_r+0x26>
 8008e34:	d902      	bls.n	8008e3c <_free_r+0x78>
 8008e36:	230c      	movs	r3, #12
 8008e38:	6003      	str	r3, [r0, #0]
 8008e3a:	e7d6      	b.n	8008dea <_free_r+0x26>
 8008e3c:	6825      	ldr	r5, [r4, #0]
 8008e3e:	1961      	adds	r1, r4, r5
 8008e40:	428b      	cmp	r3, r1
 8008e42:	bf04      	itt	eq
 8008e44:	6819      	ldreq	r1, [r3, #0]
 8008e46:	685b      	ldreq	r3, [r3, #4]
 8008e48:	6063      	str	r3, [r4, #4]
 8008e4a:	bf04      	itt	eq
 8008e4c:	1949      	addeq	r1, r1, r5
 8008e4e:	6021      	streq	r1, [r4, #0]
 8008e50:	6054      	str	r4, [r2, #4]
 8008e52:	e7ca      	b.n	8008dea <_free_r+0x26>
 8008e54:	b003      	add	sp, #12
 8008e56:	bd30      	pop	{r4, r5, pc}
 8008e58:	20002354 	.word	0x20002354

08008e5c <sbrk_aligned>:
 8008e5c:	b570      	push	{r4, r5, r6, lr}
 8008e5e:	4e0e      	ldr	r6, [pc, #56]	; (8008e98 <sbrk_aligned+0x3c>)
 8008e60:	460c      	mov	r4, r1
 8008e62:	6831      	ldr	r1, [r6, #0]
 8008e64:	4605      	mov	r5, r0
 8008e66:	b911      	cbnz	r1, 8008e6e <sbrk_aligned+0x12>
 8008e68:	f000 f8bc 	bl	8008fe4 <_sbrk_r>
 8008e6c:	6030      	str	r0, [r6, #0]
 8008e6e:	4621      	mov	r1, r4
 8008e70:	4628      	mov	r0, r5
 8008e72:	f000 f8b7 	bl	8008fe4 <_sbrk_r>
 8008e76:	1c43      	adds	r3, r0, #1
 8008e78:	d00a      	beq.n	8008e90 <sbrk_aligned+0x34>
 8008e7a:	1cc4      	adds	r4, r0, #3
 8008e7c:	f024 0403 	bic.w	r4, r4, #3
 8008e80:	42a0      	cmp	r0, r4
 8008e82:	d007      	beq.n	8008e94 <sbrk_aligned+0x38>
 8008e84:	1a21      	subs	r1, r4, r0
 8008e86:	4628      	mov	r0, r5
 8008e88:	f000 f8ac 	bl	8008fe4 <_sbrk_r>
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	d101      	bne.n	8008e94 <sbrk_aligned+0x38>
 8008e90:	f04f 34ff 	mov.w	r4, #4294967295
 8008e94:	4620      	mov	r0, r4
 8008e96:	bd70      	pop	{r4, r5, r6, pc}
 8008e98:	20002358 	.word	0x20002358

08008e9c <_malloc_r>:
 8008e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea0:	1ccd      	adds	r5, r1, #3
 8008ea2:	f025 0503 	bic.w	r5, r5, #3
 8008ea6:	3508      	adds	r5, #8
 8008ea8:	2d0c      	cmp	r5, #12
 8008eaa:	bf38      	it	cc
 8008eac:	250c      	movcc	r5, #12
 8008eae:	2d00      	cmp	r5, #0
 8008eb0:	4607      	mov	r7, r0
 8008eb2:	db01      	blt.n	8008eb8 <_malloc_r+0x1c>
 8008eb4:	42a9      	cmp	r1, r5
 8008eb6:	d905      	bls.n	8008ec4 <_malloc_r+0x28>
 8008eb8:	230c      	movs	r3, #12
 8008eba:	603b      	str	r3, [r7, #0]
 8008ebc:	2600      	movs	r6, #0
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec4:	4e2e      	ldr	r6, [pc, #184]	; (8008f80 <_malloc_r+0xe4>)
 8008ec6:	f000 f89d 	bl	8009004 <__malloc_lock>
 8008eca:	6833      	ldr	r3, [r6, #0]
 8008ecc:	461c      	mov	r4, r3
 8008ece:	bb34      	cbnz	r4, 8008f1e <_malloc_r+0x82>
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	4638      	mov	r0, r7
 8008ed4:	f7ff ffc2 	bl	8008e5c <sbrk_aligned>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	4604      	mov	r4, r0
 8008edc:	d14d      	bne.n	8008f7a <_malloc_r+0xde>
 8008ede:	6834      	ldr	r4, [r6, #0]
 8008ee0:	4626      	mov	r6, r4
 8008ee2:	2e00      	cmp	r6, #0
 8008ee4:	d140      	bne.n	8008f68 <_malloc_r+0xcc>
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	4631      	mov	r1, r6
 8008eea:	4638      	mov	r0, r7
 8008eec:	eb04 0803 	add.w	r8, r4, r3
 8008ef0:	f000 f878 	bl	8008fe4 <_sbrk_r>
 8008ef4:	4580      	cmp	r8, r0
 8008ef6:	d13a      	bne.n	8008f6e <_malloc_r+0xd2>
 8008ef8:	6821      	ldr	r1, [r4, #0]
 8008efa:	3503      	adds	r5, #3
 8008efc:	1a6d      	subs	r5, r5, r1
 8008efe:	f025 0503 	bic.w	r5, r5, #3
 8008f02:	3508      	adds	r5, #8
 8008f04:	2d0c      	cmp	r5, #12
 8008f06:	bf38      	it	cc
 8008f08:	250c      	movcc	r5, #12
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	4638      	mov	r0, r7
 8008f0e:	f7ff ffa5 	bl	8008e5c <sbrk_aligned>
 8008f12:	3001      	adds	r0, #1
 8008f14:	d02b      	beq.n	8008f6e <_malloc_r+0xd2>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	442b      	add	r3, r5
 8008f1a:	6023      	str	r3, [r4, #0]
 8008f1c:	e00e      	b.n	8008f3c <_malloc_r+0xa0>
 8008f1e:	6822      	ldr	r2, [r4, #0]
 8008f20:	1b52      	subs	r2, r2, r5
 8008f22:	d41e      	bmi.n	8008f62 <_malloc_r+0xc6>
 8008f24:	2a0b      	cmp	r2, #11
 8008f26:	d916      	bls.n	8008f56 <_malloc_r+0xba>
 8008f28:	1961      	adds	r1, r4, r5
 8008f2a:	42a3      	cmp	r3, r4
 8008f2c:	6025      	str	r5, [r4, #0]
 8008f2e:	bf18      	it	ne
 8008f30:	6059      	strne	r1, [r3, #4]
 8008f32:	6863      	ldr	r3, [r4, #4]
 8008f34:	bf08      	it	eq
 8008f36:	6031      	streq	r1, [r6, #0]
 8008f38:	5162      	str	r2, [r4, r5]
 8008f3a:	604b      	str	r3, [r1, #4]
 8008f3c:	4638      	mov	r0, r7
 8008f3e:	f104 060b 	add.w	r6, r4, #11
 8008f42:	f000 f865 	bl	8009010 <__malloc_unlock>
 8008f46:	f026 0607 	bic.w	r6, r6, #7
 8008f4a:	1d23      	adds	r3, r4, #4
 8008f4c:	1af2      	subs	r2, r6, r3
 8008f4e:	d0b6      	beq.n	8008ebe <_malloc_r+0x22>
 8008f50:	1b9b      	subs	r3, r3, r6
 8008f52:	50a3      	str	r3, [r4, r2]
 8008f54:	e7b3      	b.n	8008ebe <_malloc_r+0x22>
 8008f56:	6862      	ldr	r2, [r4, #4]
 8008f58:	42a3      	cmp	r3, r4
 8008f5a:	bf0c      	ite	eq
 8008f5c:	6032      	streq	r2, [r6, #0]
 8008f5e:	605a      	strne	r2, [r3, #4]
 8008f60:	e7ec      	b.n	8008f3c <_malloc_r+0xa0>
 8008f62:	4623      	mov	r3, r4
 8008f64:	6864      	ldr	r4, [r4, #4]
 8008f66:	e7b2      	b.n	8008ece <_malloc_r+0x32>
 8008f68:	4634      	mov	r4, r6
 8008f6a:	6876      	ldr	r6, [r6, #4]
 8008f6c:	e7b9      	b.n	8008ee2 <_malloc_r+0x46>
 8008f6e:	230c      	movs	r3, #12
 8008f70:	603b      	str	r3, [r7, #0]
 8008f72:	4638      	mov	r0, r7
 8008f74:	f000 f84c 	bl	8009010 <__malloc_unlock>
 8008f78:	e7a1      	b.n	8008ebe <_malloc_r+0x22>
 8008f7a:	6025      	str	r5, [r4, #0]
 8008f7c:	e7de      	b.n	8008f3c <_malloc_r+0xa0>
 8008f7e:	bf00      	nop
 8008f80:	20002354 	.word	0x20002354

08008f84 <_realloc_r>:
 8008f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f88:	4680      	mov	r8, r0
 8008f8a:	4614      	mov	r4, r2
 8008f8c:	460e      	mov	r6, r1
 8008f8e:	b921      	cbnz	r1, 8008f9a <_realloc_r+0x16>
 8008f90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f94:	4611      	mov	r1, r2
 8008f96:	f7ff bf81 	b.w	8008e9c <_malloc_r>
 8008f9a:	b92a      	cbnz	r2, 8008fa8 <_realloc_r+0x24>
 8008f9c:	f7ff ff12 	bl	8008dc4 <_free_r>
 8008fa0:	4625      	mov	r5, r4
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa8:	f000 f838 	bl	800901c <_malloc_usable_size_r>
 8008fac:	4284      	cmp	r4, r0
 8008fae:	4607      	mov	r7, r0
 8008fb0:	d802      	bhi.n	8008fb8 <_realloc_r+0x34>
 8008fb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fb6:	d812      	bhi.n	8008fde <_realloc_r+0x5a>
 8008fb8:	4621      	mov	r1, r4
 8008fba:	4640      	mov	r0, r8
 8008fbc:	f7ff ff6e 	bl	8008e9c <_malloc_r>
 8008fc0:	4605      	mov	r5, r0
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d0ed      	beq.n	8008fa2 <_realloc_r+0x1e>
 8008fc6:	42bc      	cmp	r4, r7
 8008fc8:	4622      	mov	r2, r4
 8008fca:	4631      	mov	r1, r6
 8008fcc:	bf28      	it	cs
 8008fce:	463a      	movcs	r2, r7
 8008fd0:	f7ff fed0 	bl	8008d74 <memcpy>
 8008fd4:	4631      	mov	r1, r6
 8008fd6:	4640      	mov	r0, r8
 8008fd8:	f7ff fef4 	bl	8008dc4 <_free_r>
 8008fdc:	e7e1      	b.n	8008fa2 <_realloc_r+0x1e>
 8008fde:	4635      	mov	r5, r6
 8008fe0:	e7df      	b.n	8008fa2 <_realloc_r+0x1e>
	...

08008fe4 <_sbrk_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4d06      	ldr	r5, [pc, #24]	; (8009000 <_sbrk_r+0x1c>)
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4604      	mov	r4, r0
 8008fec:	4608      	mov	r0, r1
 8008fee:	602b      	str	r3, [r5, #0]
 8008ff0:	f7f9 fb88 	bl	8002704 <_sbrk>
 8008ff4:	1c43      	adds	r3, r0, #1
 8008ff6:	d102      	bne.n	8008ffe <_sbrk_r+0x1a>
 8008ff8:	682b      	ldr	r3, [r5, #0]
 8008ffa:	b103      	cbz	r3, 8008ffe <_sbrk_r+0x1a>
 8008ffc:	6023      	str	r3, [r4, #0]
 8008ffe:	bd38      	pop	{r3, r4, r5, pc}
 8009000:	2000235c 	.word	0x2000235c

08009004 <__malloc_lock>:
 8009004:	4801      	ldr	r0, [pc, #4]	; (800900c <__malloc_lock+0x8>)
 8009006:	f000 b811 	b.w	800902c <__retarget_lock_acquire_recursive>
 800900a:	bf00      	nop
 800900c:	20002360 	.word	0x20002360

08009010 <__malloc_unlock>:
 8009010:	4801      	ldr	r0, [pc, #4]	; (8009018 <__malloc_unlock+0x8>)
 8009012:	f000 b80c 	b.w	800902e <__retarget_lock_release_recursive>
 8009016:	bf00      	nop
 8009018:	20002360 	.word	0x20002360

0800901c <_malloc_usable_size_r>:
 800901c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009020:	1f18      	subs	r0, r3, #4
 8009022:	2b00      	cmp	r3, #0
 8009024:	bfbc      	itt	lt
 8009026:	580b      	ldrlt	r3, [r1, r0]
 8009028:	18c0      	addlt	r0, r0, r3
 800902a:	4770      	bx	lr

0800902c <__retarget_lock_acquire_recursive>:
 800902c:	4770      	bx	lr

0800902e <__retarget_lock_release_recursive>:
 800902e:	4770      	bx	lr

08009030 <_init>:
 8009030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009032:	bf00      	nop
 8009034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009036:	bc08      	pop	{r3}
 8009038:	469e      	mov	lr, r3
 800903a:	4770      	bx	lr

0800903c <_fini>:
 800903c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903e:	bf00      	nop
 8009040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009042:	bc08      	pop	{r3}
 8009044:	469e      	mov	lr, r3
 8009046:	4770      	bx	lr

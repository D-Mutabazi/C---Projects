
Multi-Functional Light-Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c9c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08007e34  08007e34  00017e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080dc  080080dc  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  080080dc  080080dc  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080080dc  080080dc  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080dc  080080dc  000180dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080e0  080080e0  000180e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  080080e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200cc  2**0
                  CONTENTS
 10 .bss          00002260  200000cc  200000cc  000200cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000232c  2000232c  000200cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013495  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000253d  00000000  00000000  00033591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  00035ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ec0  00000000  00000000  00036a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d17  00000000  00000000  00037928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001434e  00000000  00000000  0005963f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3aa0  00000000  00000000  0006d98d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014142d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043bc  00000000  00000000  00141480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000cc 	.word	0x200000cc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007e1c 	.word	0x08007e1c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000d0 	.word	0x200000d0
 80001d4:	08007e1c 	.word	0x08007e1c

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2uiz>:
 80007a4:	004a      	lsls	r2, r1, #1
 80007a6:	d211      	bcs.n	80007cc <__aeabi_d2uiz+0x28>
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d211      	bcs.n	80007d2 <__aeabi_d2uiz+0x2e>
 80007ae:	d50d      	bpl.n	80007cc <__aeabi_d2uiz+0x28>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d40e      	bmi.n	80007d8 <__aeabi_d2uiz+0x34>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d102      	bne.n	80007de <__aeabi_d2uiz+0x3a>
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr

080007e4 <HAL_UART_RxCpltCallback>:

char STATE[3] = {' '} ;
char PARAM1[3] = {' '} ;
char PARAM2[3] ={' '};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

	// store recieved characters one at at time
	set_or_ret_sys_state[num_characters] = recvd_char[0] ;
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <HAL_UART_RxCpltCallback+0x80>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <HAL_UART_RxCpltCallback+0x84>)
 80007f4:	7819      	ldrb	r1, [r3, #0]
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <HAL_UART_RxCpltCallback+0x88>)
 80007f8:	5499      	strb	r1, [r3, r2]

	num_characters++ ;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <HAL_UART_RxCpltCallback+0x80>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_UART_RxCpltCallback+0x80>)
 8000804:	701a      	strb	r2, [r3, #0]

	if(recvd_char[0] == '\n'){
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <HAL_UART_RxCpltCallback+0x84>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b0a      	cmp	r3, #10
 800080c:	d121      	bne.n	8000852 <HAL_UART_RxCpltCallback+0x6e>
		if(num_characters == 19){
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_UART_RxCpltCallback+0x80>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b13      	cmp	r3, #19
 8000814:	d108      	bne.n	8000828 <HAL_UART_RxCpltCallback+0x44>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"set mode\n",9 ) ;
 8000816:	2209      	movs	r2, #9
 8000818:	4915      	ldr	r1, [pc, #84]	; (8000870 <HAL_UART_RxCpltCallback+0x8c>)
 800081a:	4816      	ldr	r0, [pc, #88]	; (8000874 <HAL_UART_RxCpltCallback+0x90>)
 800081c:	f005 ff36 	bl	800668c <HAL_UART_Transmit_IT>
			UART_set_syst_state = 1 ;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <HAL_UART_RxCpltCallback+0x94>)
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
 8000826:	e011      	b.n	800084c <HAL_UART_RxCpltCallback+0x68>
		}else if( num_characters == 7){
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_UART_RxCpltCallback+0x80>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b07      	cmp	r3, #7
 800082e:	d108      	bne.n	8000842 <HAL_UART_RxCpltCallback+0x5e>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"request mode\n", 13) ;
 8000830:	220d      	movs	r2, #13
 8000832:	4912      	ldr	r1, [pc, #72]	; (800087c <HAL_UART_RxCpltCallback+0x98>)
 8000834:	480f      	ldr	r0, [pc, #60]	; (8000874 <HAL_UART_RxCpltCallback+0x90>)
 8000836:	f005 ff29 	bl	800668c <HAL_UART_Transmit_IT>
			UART_ret_sys_state = 1 ;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <HAL_UART_RxCpltCallback+0x9c>)
 800083c:	2201      	movs	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	e004      	b.n	800084c <HAL_UART_RxCpltCallback+0x68>
		}else{
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Incorrect status request size\n", 30) ;
 8000842:	221e      	movs	r2, #30
 8000844:	490f      	ldr	r1, [pc, #60]	; (8000884 <HAL_UART_RxCpltCallback+0xa0>)
 8000846:	480b      	ldr	r0, [pc, #44]	; (8000874 <HAL_UART_RxCpltCallback+0x90>)
 8000848:	f005 ff20 	bl	800668c <HAL_UART_Transmit_IT>
		}

		num_characters =  0;
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_UART_RxCpltCallback+0x80>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]

	}


	// recieve character - re-prime receiver to receive single characters at a time
	HAL_UART_Receive_IT(&huart2, (uint8_t*)recvd_char, 1);
 8000852:	2201      	movs	r2, #1
 8000854:	4904      	ldr	r1, [pc, #16]	; (8000868 <HAL_UART_RxCpltCallback+0x84>)
 8000856:	4807      	ldr	r0, [pc, #28]	; (8000874 <HAL_UART_RxCpltCallback+0x90>)
 8000858:	f005 ff76 	bl	8006748 <HAL_UART_Receive_IT>


}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20002315 	.word	0x20002315
 8000868:	20002314 	.word	0x20002314
 800086c:	2000003c 	.word	0x2000003c
 8000870:	08007f64 	.word	0x08007f64
 8000874:	20000260 	.word	0x20000260
 8000878:	20002316 	.word	0x20002316
 800087c:	08007f70 	.word	0x08007f70
 8000880:	20002317 	.word	0x20002317
 8000884:	08007f80 	.word	0x08007f80

08000888 <adc_dma_val_processing>:

/**
 * scale up transmit ADC values
 */

void adc_dma_val_processing(){
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0

	if(adc_conv_complete == 1){
 800088e:	4b3c      	ldr	r3, [pc, #240]	; (8000980 <adc_dma_val_processing+0xf8>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d142      	bne.n	800091c <adc_dma_val_processing+0x94>

		adc_conv_complete =0  ;
 8000896:	4b3a      	ldr	r3, [pc, #232]	; (8000980 <adc_dma_val_processing+0xf8>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
		sum = 0 ;
 800089c:	4b39      	ldr	r3, [pc, #228]	; (8000984 <adc_dma_val_processing+0xfc>)
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
		for(int i = 0 ; i < adc_buf_len ; i++){
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	e00c      	b.n	80008c2 <adc_dma_val_processing+0x3a>
			sum += adc_buf[i] ;
 80008a8:	4a37      	ldr	r2, [pc, #220]	; (8000988 <adc_dma_val_processing+0x100>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b34      	ldr	r3, [pc, #208]	; (8000984 <adc_dma_val_processing+0xfc>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	4a32      	ldr	r2, [pc, #200]	; (8000984 <adc_dma_val_processing+0xfc>)
 80008ba:	6013      	str	r3, [r2, #0]
		for(int i = 0 ; i < adc_buf_len ; i++){
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3301      	adds	r3, #1
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008c8:	dbee      	blt.n	80008a8 <adc_dma_val_processing+0x20>
		}
		raw_adc_dma_val =(uint16_t)(sum/adc_buf_len) ;
 80008ca:	4b2e      	ldr	r3, [pc, #184]	; (8000984 <adc_dma_val_processing+0xfc>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	da01      	bge.n	80008d6 <adc_dma_val_processing+0x4e>
 80008d2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80008d6:	131b      	asrs	r3, r3, #12
 80008d8:	b29a      	uxth	r2, r3
 80008da:	4b2c      	ldr	r3, [pc, #176]	; (800098c <adc_dma_val_processing+0x104>)
 80008dc:	801a      	strh	r2, [r3, #0]

		scaled_adc_val = (uint16_t)raw_adc_dma_val*adc_scale_up ; //adc scaled to max =4095
 80008de:	4b2b      	ldr	r3, [pc, #172]	; (800098c <adc_dma_val_processing+0x104>)
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fef4 	bl	80006d0 <__aeabi_i2d>
 80008e8:	4b29      	ldr	r3, [pc, #164]	; (8000990 <adc_dma_val_processing+0x108>)
 80008ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ee:	f7ff fc73 	bl	80001d8 <__aeabi_dmul>
 80008f2:	4602      	mov	r2, r0
 80008f4:	460b      	mov	r3, r1
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	f7ff ff53 	bl	80007a4 <__aeabi_d2uiz>
 80008fe:	4603      	mov	r3, r0
 8000900:	b29a      	uxth	r2, r3
 8000902:	4b24      	ldr	r3, [pc, #144]	; (8000994 <adc_dma_val_processing+0x10c>)
 8000904:	801a      	strh	r2, [r3, #0]

		//capture previous adc cal
		if(adc_val_capture == 1){
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <adc_dma_val_processing+0x110>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d106      	bne.n	800091c <adc_dma_val_processing+0x94>
			adc_val_snapshot = scaled_adc_val ;
 800090e:	4b21      	ldr	r3, [pc, #132]	; (8000994 <adc_dma_val_processing+0x10c>)
 8000910:	881a      	ldrh	r2, [r3, #0]
 8000912:	4b22      	ldr	r3, [pc, #136]	; (800099c <adc_dma_val_processing+0x114>)
 8000914:	801a      	strh	r2, [r3, #0]
			adc_val_capture = 0 ;
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <adc_dma_val_processing+0x110>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
		}
	}

	// if ADC movement significant update LED intensity
	if(abs(scaled_adc_val - adc_val_snapshot) >15){
 800091c:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <adc_dma_val_processing+0x10c>)
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <adc_dma_val_processing+0x114>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	2b00      	cmp	r3, #0
 800092a:	bfb8      	it	lt
 800092c:	425b      	neglt	r3, r3
 800092e:	2b0f      	cmp	r3, #15
 8000930:	dd02      	ble.n	8000938 <adc_dma_val_processing+0xb0>
	  update_led_via_ADC = 1 ;
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <adc_dma_val_processing+0x118>)
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
	}

//	 WHITE LED intensity
	LED_intensity =(float)(scaled_adc_val)*(512.0/4095.0)  ;
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <adc_dma_val_processing+0x10c>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	ee07 3a90 	vmov	s15, r3
 8000940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000944:	ee17 0a90 	vmov	r0, s15
 8000948:	f7ff fed4 	bl	80006f4 <__aeabi_f2d>
 800094c:	a30a      	add	r3, pc, #40	; (adr r3, 8000978 <adc_dma_val_processing+0xf0>)
 800094e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000952:	f7ff fc41 	bl	80001d8 <__aeabi_dmul>
 8000956:	4602      	mov	r2, r0
 8000958:	460b      	mov	r3, r1
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	f7ff ff21 	bl	80007a4 <__aeabi_d2uiz>
 8000962:	4603      	mov	r3, r0
 8000964:	b29a      	uxth	r2, r3
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <adc_dma_val_processing+0x11c>)
 8000968:	801a      	strh	r2, [r3, #0]


}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	f3af 8000 	nop.w
 8000978:	10010010 	.word	0x10010010
 800097c:	3fc00100 	.word	0x3fc00100
 8000980:	200022fa 	.word	0x200022fa
 8000984:	200022f4 	.word	0x200022f4
 8000988:	200002f0 	.word	0x200002f0
 800098c:	200022f0 	.word	0x200022f0
 8000990:	20000008 	.word	0x20000008
 8000994:	200022fc 	.word	0x200022fc
 8000998:	20000002 	.word	0x20000002
 800099c:	200022f8 	.word	0x200022f8
 80009a0:	200022fe 	.word	0x200022fe
 80009a4:	20000010 	.word	0x20000010

080009a8 <system_state_update>:

void system_state_update(){
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
	 if(left_button_pressed ==1 && UART_set_syst_state == 0 ){
 80009ac:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <system_state_update+0x9c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d11d      	bne.n	80009f0 <system_state_update+0x48>
 80009b4:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <system_state_update+0xa0>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d119      	bne.n	80009f0 <system_state_update+0x48>

		 button_count++ ;
 80009bc:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <system_state_update+0xa4>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	3301      	adds	r3, #1
 80009c2:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <system_state_update+0xa4>)
 80009c4:	6013      	str	r3, [r2, #0]
		 if(button_count > 2){
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <system_state_update+0xa4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	dd02      	ble.n	80009d4 <system_state_update+0x2c>
			 button_count = 0 ;
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <system_state_update+0xa4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
		 }
		 update_led_via_ADC =  0 ; // don't read ADC by default in next state
 80009d4:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <system_state_update+0xa8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
		 // snapshot of ADC taken in next state
		 if(adc_conv_complete == 1){
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <system_state_update+0xac>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d102      	bne.n	80009e8 <system_state_update+0x40>
			 adc_val_capture =1  ; // capture ADC value
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <system_state_update+0xb0>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]
		 }


		 left_button_pressed = 0 ;
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <system_state_update+0x9c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
				 button_count =2 ;

			 }
		 }
	 }
}
 80009ee:	e024      	b.n	8000a3a <system_state_update+0x92>
	 }else if( UART_set_syst_state == 1 && left_button_pressed == 0){ // System state update to come from only one source
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <system_state_update+0xa0>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d120      	bne.n	8000a3a <system_state_update+0x92>
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <system_state_update+0x9c>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d11c      	bne.n	8000a3a <system_state_update+0x92>
		 UART_set_syst_state = 0;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <system_state_update+0xa0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
		 UART_state_update =1;
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <system_state_update+0xb4>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
		 if(set_or_ret_sys_state[3] == 'F'){
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <system_state_update+0xb8>)
 8000a0e:	78db      	ldrb	r3, [r3, #3]
 8000a10:	2b46      	cmp	r3, #70	; 0x46
 8000a12:	d103      	bne.n	8000a1c <system_state_update+0x74>
			 button_count =0 ;
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <system_state_update+0xa4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
}
 8000a1a:	e00e      	b.n	8000a3a <system_state_update+0x92>
		 else if(set_or_ret_sys_state[3] =='E'){
 8000a1c:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <system_state_update+0xb8>)
 8000a1e:	78db      	ldrb	r3, [r3, #3]
 8000a20:	2b45      	cmp	r3, #69	; 0x45
 8000a22:	d103      	bne.n	8000a2c <system_state_update+0x84>
			 button_count =1;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <system_state_update+0xa4>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	601a      	str	r2, [r3, #0]
}
 8000a2a:	e006      	b.n	8000a3a <system_state_update+0x92>
			 if(set_or_ret_sys_state[3] == 'M'){
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <system_state_update+0xb8>)
 8000a2e:	78db      	ldrb	r3, [r3, #3]
 8000a30:	2b4d      	cmp	r3, #77	; 0x4d
 8000a32:	d102      	bne.n	8000a3a <system_state_update+0x92>
				 button_count =2 ;
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <system_state_update+0xa4>)
 8000a36:	2202      	movs	r2, #2
 8000a38:	601a      	str	r2, [r3, #0]
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	20002326 	.word	0x20002326
 8000a48:	20002316 	.word	0x20002316
 8000a4c:	200002e8 	.word	0x200002e8
 8000a50:	200022fe 	.word	0x200022fe
 8000a54:	200022fa 	.word	0x200022fa
 8000a58:	20000002 	.word	0x20000002
 8000a5c:	20002318 	.word	0x20002318
 8000a60:	2000003c 	.word	0x2000003c

08000a64 <right_button_state_update>:

/**
 * Updates system state after right button pressed in emergency mode
 */
void right_button_state_update(){
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
	if(button_count == 1){
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <right_button_state_update+0x5c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d117      	bne.n	8000aa0 <right_button_state_update+0x3c>
		if(right_button_pressed){
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <right_button_state_update+0x60>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d01e      	beq.n	8000ab6 <right_button_state_update+0x52>
			right_button_pressed = 0 ;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <right_button_state_update+0x60>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]

			update_led_via_ADC = 0 ; // dont read adc by default in next state
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <right_button_state_update+0x64>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]

			 em_count++ ;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <right_button_state_update+0x68>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <right_button_state_update+0x68>)
 8000a8e:	701a      	strb	r2, [r3, #0]

			 if(em_count>2){
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <right_button_state_update+0x68>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d90e      	bls.n	8000ab6 <right_button_state_update+0x52>
				 em_count = 0;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <right_button_state_update+0x68>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
		}
	}else if( button_count != 1 && right_button_pressed){
		right_button_pressed = 0; //do not read right button presses triggered
								  // in other states except emergency mode
	}
}
 8000a9e:	e00a      	b.n	8000ab6 <right_button_state_update+0x52>
	}else if( button_count != 1 && right_button_pressed){
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <right_button_state_update+0x5c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d006      	beq.n	8000ab6 <right_button_state_update+0x52>
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <right_button_state_update+0x60>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d002      	beq.n	8000ab6 <right_button_state_update+0x52>
		right_button_pressed = 0; //do not read right button presses triggered
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <right_button_state_update+0x60>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	200002e8 	.word	0x200002e8
 8000ac4:	20002325 	.word	0x20002325
 8000ac8:	200022fe 	.word	0x200022fe
 8000acc:	200002ec 	.word	0x200002ec

08000ad0 <TURN_LED_ON_OFF>:

/**
 * Middle button press turns LED ON/OFF
 */
void TURN_LED_ON_OFF(){
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
	if(middle_button_pressed == 1){
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <TURN_LED_ON_OFF+0x54>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d11d      	bne.n	8000b18 <TURN_LED_ON_OFF+0x48>
		 LED_ON = !LED_ON ;  // turns the LED on OR off
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <TURN_LED_ON_OFF+0x58>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	bf0c      	ite	eq
 8000ae4:	2301      	moveq	r3, #1
 8000ae6:	2300      	movne	r3, #0
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <TURN_LED_ON_OFF+0x58>)
 8000aee:	701a      	strb	r2, [r3, #0]

		 // Middle button press -> LED ON / OFF
		 if(LED_ON == 1){
 8000af0:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <TURN_LED_ON_OFF+0x58>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d104      	bne.n	8000b02 <TURN_LED_ON_OFF+0x32>
			 htim2.Instance->CCR1 = 1 ; // LED ON
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <TURN_LED_ON_OFF+0x5c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2201      	movs	r2, #1
 8000afe:	635a      	str	r2, [r3, #52]	; 0x34
 8000b00:	e007      	b.n	8000b12 <TURN_LED_ON_OFF+0x42>
		 }else if(LED_ON ==0){
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <TURN_LED_ON_OFF+0x58>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d103      	bne.n	8000b12 <TURN_LED_ON_OFF+0x42>
			 htim2.Instance->CCR1 = 0 ; //LED OFFS
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <TURN_LED_ON_OFF+0x5c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	635a      	str	r2, [r3, #52]	; 0x34
		 }

		 middle_button_pressed = 0 ;
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <TURN_LED_ON_OFF+0x54>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
	 }
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20002324 	.word	0x20002324
 8000b28:	200022ff 	.word	0x200022ff
 8000b2c:	2000017c 	.word	0x2000017c

08000b30 <EM_mode_Strobe>:

/**
 * LED strobed with provided number of ms
 */
void EM_mode_Strobe(uint16_t strobe_delay){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	80fb      	strh	r3, [r7, #6]

	 // default delay 512ms
	 timePassed =HAL_GetTick() - strobe_ticks ;
 8000b3a:	f001 fa13 	bl	8001f64 <HAL_GetTick>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <EM_mode_Strobe+0x84>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	4a1c      	ldr	r2, [pc, #112]	; (8000bb8 <EM_mode_Strobe+0x88>)
 8000b48:	6013      	str	r3, [r2, #0]
	 // time passed >512
	 if( timePassed >= strobe_delay && led_strobe_on == 0){
 8000b4a:	88fa      	ldrh	r2, [r7, #6]
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <EM_mode_Strobe+0x88>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d80a      	bhi.n	8000b6a <EM_mode_Strobe+0x3a>
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <EM_mode_Strobe+0x8c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d106      	bne.n	8000b6a <EM_mode_Strobe+0x3a>
		 led_strobe_on =1 ;
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <EM_mode_Strobe+0x8c>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
		 htim2.Instance->CCR1 = 0 ;
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <EM_mode_Strobe+0x90>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2200      	movs	r2, #0
 8000b68:	635a      	str	r2, [r3, #52]	; 0x34
	 }
	 // time Passed > 1024
	 if(timePassed >= 1024 && led_strobe_on == 1){
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <EM_mode_Strobe+0x88>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b72:	d31a      	bcc.n	8000baa <EM_mode_Strobe+0x7a>
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <EM_mode_Strobe+0x8c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d116      	bne.n	8000baa <EM_mode_Strobe+0x7a>
		 strobe_ticks =  HAL_GetTick() ; // update current time
 8000b7c:	f001 f9f2 	bl	8001f64 <HAL_GetTick>
 8000b80:	4603      	mov	r3, r0
 8000b82:	4a0c      	ldr	r2, [pc, #48]	; (8000bb4 <EM_mode_Strobe+0x84>)
 8000b84:	6013      	str	r3, [r2, #0]
		 led_strobe_on = 0 ;
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <EM_mode_Strobe+0x8c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]


		 if(update_led_via_ADC ==1){ // update LED intensity if the slider moved
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <EM_mode_Strobe+0x94>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d105      	bne.n	8000ba0 <EM_mode_Strobe+0x70>
			 htim2.Instance->CCR1 = LED_intensity ;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <EM_mode_Strobe+0x98>)
 8000b96:	881a      	ldrh	r2, [r3, #0]
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <EM_mode_Strobe+0x90>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	635a      	str	r2, [r3, #52]	; 0x34
		 }else{ // if no slider movement strobe with default intensity
			 htim2.Instance->CCR1 =256;
		 }
	 }

}
 8000b9e:	e004      	b.n	8000baa <EM_mode_Strobe+0x7a>
			 htim2.Instance->CCR1 =256;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <EM_mode_Strobe+0x90>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20002300 	.word	0x20002300
 8000bb8:	20002308 	.word	0x20002308
 8000bbc:	20002304 	.word	0x20002304
 8000bc0:	2000017c 	.word	0x2000017c
 8000bc4:	200022fe 	.word	0x200022fe
 8000bc8:	20000010 	.word	0x20000010

08000bcc <convert_UART_state_params_to_Int>:

void convert_UART_state_params_to_Int(){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
	if(UART_set_syst_state) {
 8000bd2:	4b42      	ldr	r3, [pc, #264]	; (8000cdc <convert_UART_state_params_to_Int+0x110>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d07b      	beq.n	8000cd2 <convert_UART_state_params_to_Int+0x106>
		for(int i = 0; i < 19 ; i++){
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	e060      	b.n	8000ca2 <convert_UART_state_params_to_Int+0xd6>
			switch(i){
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b05      	subs	r3, #5
 8000be4:	2b0a      	cmp	r3, #10
 8000be6:	d858      	bhi.n	8000c9a <convert_UART_state_params_to_Int+0xce>
 8000be8:	a201      	add	r2, pc, #4	; (adr r2, 8000bf0 <convert_UART_state_params_to_Int+0x24>)
 8000bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bee:	bf00      	nop
 8000bf0:	08000c1d 	.word	0x08000c1d
 8000bf4:	08000c2b 	.word	0x08000c2b
 8000bf8:	08000c39 	.word	0x08000c39
 8000bfc:	08000c9b 	.word	0x08000c9b
 8000c00:	08000c47 	.word	0x08000c47
 8000c04:	08000c55 	.word	0x08000c55
 8000c08:	08000c63 	.word	0x08000c63
 8000c0c:	08000c9b 	.word	0x08000c9b
 8000c10:	08000c71 	.word	0x08000c71
 8000c14:	08000c7f 	.word	0x08000c7f
 8000c18:	08000c8d 	.word	0x08000c8d
			case 5:
				STATE[0]= set_or_ret_sys_state[i] ;
 8000c1c:	4a30      	ldr	r2, [pc, #192]	; (8000ce0 <convert_UART_state_params_to_Int+0x114>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	781a      	ldrb	r2, [r3, #0]
 8000c24:	4b2f      	ldr	r3, [pc, #188]	; (8000ce4 <convert_UART_state_params_to_Int+0x118>)
 8000c26:	701a      	strb	r2, [r3, #0]
				break;
 8000c28:	e038      	b.n	8000c9c <convert_UART_state_params_to_Int+0xd0>
			case 6:
				STATE[1]= set_or_ret_sys_state[i] ;
 8000c2a:	4a2d      	ldr	r2, [pc, #180]	; (8000ce0 <convert_UART_state_params_to_Int+0x114>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4413      	add	r3, r2
 8000c30:	781a      	ldrb	r2, [r3, #0]
 8000c32:	4b2c      	ldr	r3, [pc, #176]	; (8000ce4 <convert_UART_state_params_to_Int+0x118>)
 8000c34:	705a      	strb	r2, [r3, #1]
				break;
 8000c36:	e031      	b.n	8000c9c <convert_UART_state_params_to_Int+0xd0>
			case 7:
				STATE[2] = set_or_ret_sys_state[i] ;
 8000c38:	4a29      	ldr	r2, [pc, #164]	; (8000ce0 <convert_UART_state_params_to_Int+0x114>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	781a      	ldrb	r2, [r3, #0]
 8000c40:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <convert_UART_state_params_to_Int+0x118>)
 8000c42:	709a      	strb	r2, [r3, #2]
				break;
 8000c44:	e02a      	b.n	8000c9c <convert_UART_state_params_to_Int+0xd0>

			case 9:
				PARAM1[0] = set_or_ret_sys_state[i];
 8000c46:	4a26      	ldr	r2, [pc, #152]	; (8000ce0 <convert_UART_state_params_to_Int+0x114>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	781a      	ldrb	r2, [r3, #0]
 8000c4e:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <convert_UART_state_params_to_Int+0x11c>)
 8000c50:	701a      	strb	r2, [r3, #0]
				break;
 8000c52:	e023      	b.n	8000c9c <convert_UART_state_params_to_Int+0xd0>
			case 10:
				PARAM1[1] = set_or_ret_sys_state[i] ;
 8000c54:	4a22      	ldr	r2, [pc, #136]	; (8000ce0 <convert_UART_state_params_to_Int+0x114>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <convert_UART_state_params_to_Int+0x11c>)
 8000c5e:	705a      	strb	r2, [r3, #1]
				break;
 8000c60:	e01c      	b.n	8000c9c <convert_UART_state_params_to_Int+0xd0>
			case 11:
				PARAM1[2] = set_or_ret_sys_state[i] ;
 8000c62:	4a1f      	ldr	r2, [pc, #124]	; (8000ce0 <convert_UART_state_params_to_Int+0x114>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4413      	add	r3, r2
 8000c68:	781a      	ldrb	r2, [r3, #0]
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <convert_UART_state_params_to_Int+0x11c>)
 8000c6c:	709a      	strb	r2, [r3, #2]
				break ;
 8000c6e:	e015      	b.n	8000c9c <convert_UART_state_params_to_Int+0xd0>
			case 13:
				PARAM2[0] = set_or_ret_sys_state[i] ;
 8000c70:	4a1b      	ldr	r2, [pc, #108]	; (8000ce0 <convert_UART_state_params_to_Int+0x114>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	781a      	ldrb	r2, [r3, #0]
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <convert_UART_state_params_to_Int+0x120>)
 8000c7a:	701a      	strb	r2, [r3, #0]
				break;
 8000c7c:	e00e      	b.n	8000c9c <convert_UART_state_params_to_Int+0xd0>
			case 14:
				PARAM2[1] = set_or_ret_sys_state[i] ;
 8000c7e:	4a18      	ldr	r2, [pc, #96]	; (8000ce0 <convert_UART_state_params_to_Int+0x114>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4413      	add	r3, r2
 8000c84:	781a      	ldrb	r2, [r3, #0]
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <convert_UART_state_params_to_Int+0x120>)
 8000c88:	705a      	strb	r2, [r3, #1]
				break;
 8000c8a:	e007      	b.n	8000c9c <convert_UART_state_params_to_Int+0xd0>
			case 15:
				PARAM2[2] = set_or_ret_sys_state[i ];
 8000c8c:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <convert_UART_state_params_to_Int+0x114>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	781a      	ldrb	r2, [r3, #0]
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <convert_UART_state_params_to_Int+0x120>)
 8000c96:	709a      	strb	r2, [r3, #2]
				break;
 8000c98:	e000      	b.n	8000c9c <convert_UART_state_params_to_Int+0xd0>

			default:
				break ;
 8000c9a:	bf00      	nop
		for(int i = 0; i < 19 ; i++){
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b12      	cmp	r3, #18
 8000ca6:	dd9b      	ble.n	8000be0 <convert_UART_state_params_to_Int+0x14>
			}

		}

		state = atoi(STATE) ;
 8000ca8:	480e      	ldr	r0, [pc, #56]	; (8000ce4 <convert_UART_state_params_to_Int+0x118>)
 8000caa:	f006 fff5 	bl	8007c98 <atoi>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <convert_UART_state_params_to_Int+0x124>)
 8000cb4:	801a      	strh	r2, [r3, #0]
		param1 = atoi(PARAM1);
 8000cb6:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <convert_UART_state_params_to_Int+0x11c>)
 8000cb8:	f006 ffee 	bl	8007c98 <atoi>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <convert_UART_state_params_to_Int+0x128>)
 8000cc2:	801a      	strh	r2, [r3, #0]
		param2 = atoi(PARAM2) ;
 8000cc4:	4809      	ldr	r0, [pc, #36]	; (8000cec <convert_UART_state_params_to_Int+0x120>)
 8000cc6:	f006 ffe7 	bl	8007c98 <atoi>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <convert_UART_state_params_to_Int+0x12c>)
 8000cd0:	801a      	strh	r2, [r3, #0]

	}
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20002316 	.word	0x20002316
 8000ce0:	2000003c 	.word	0x2000003c
 8000ce4:	20000050 	.word	0x20000050
 8000ce8:	20000054 	.word	0x20000054
 8000cec:	20000058 	.word	0x20000058
 8000cf0:	2000231a 	.word	0x2000231a
 8000cf4:	2000231c 	.word	0x2000231c
 8000cf8:	2000231e 	.word	0x2000231e

08000cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d02:	f001 f8d5 	bl	8001eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d06:	f000 fa1d 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0a:	f000 fcb5 	bl	8001678 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d0e:	f000 fc95 	bl	800163c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d12:	f000 fc61 	bl	80015d8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d16:	f000 fa7d 	bl	8001214 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000d1a:	f000 faeb 	bl	80012f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d1e:	f000 fb6b 	bl	80013f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d22:	f000 fbe1 	bl	80014e8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(200);
 8000d26:	20c8      	movs	r0, #200	; 0xc8
 8000d28:	f001 f928 	bl	8001f7c <HAL_Delay>
  HAL_UART_Transmit(&huart2, studentNum, 13, 150); //transmit student number
 8000d2c:	2396      	movs	r3, #150	; 0x96
 8000d2e:	220d      	movs	r2, #13
 8000d30:	4995      	ldr	r1, [pc, #596]	; (8000f88 <main+0x28c>)
 8000d32:	4896      	ldr	r0, [pc, #600]	; (8000f8c <main+0x290>)
 8000d34:	f005 fc20 	bl	8006578 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)recvd_char, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4995      	ldr	r1, [pc, #596]	; (8000f90 <main+0x294>)
 8000d3c:	4893      	ldr	r0, [pc, #588]	; (8000f8c <main+0x290>)
 8000d3e:	f005 fd03 	bl	8006748 <HAL_UART_Receive_IT>

  //Startup ADC
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, adc_buf_len) ;
 8000d42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d46:	4993      	ldr	r1, [pc, #588]	; (8000f94 <main+0x298>)
 8000d48:	4893      	ldr	r0, [pc, #588]	; (8000f98 <main+0x29c>)
 8000d4a:	f001 fb49 	bl	80023e0 <HAL_ADC_Start_DMA>

  // TIM2_CH1 start PWM
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1) ;
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4892      	ldr	r0, [pc, #584]	; (8000f9c <main+0x2a0>)
 8000d52:	f004 fbe9 	bl	8005528 <HAL_TIM_PWM_Start>
  // TIM2_CH4 start PWM - red LED
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) ;
 8000d56:	210c      	movs	r1, #12
 8000d58:	4890      	ldr	r0, [pc, #576]	; (8000f9c <main+0x2a0>)
 8000d5a:	f004 fbe5 	bl	8005528 <HAL_TIM_PWM_Start>
  // TIM3_CH4 start PWM - GREEN LED
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000d5e:	210c      	movs	r1, #12
 8000d60:	488f      	ldr	r0, [pc, #572]	; (8000fa0 <main+0x2a4>)
 8000d62:	f004 fbe1 	bl	8005528 <HAL_TIM_PWM_Start>
  // TIM4_CH1 start PWM - BLUE LED
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) ;
 8000d66:	2100      	movs	r1, #0
 8000d68:	488e      	ldr	r0, [pc, #568]	; (8000fa4 <main+0x2a8>)
 8000d6a:	f004 fbdd 	bl	8005528 <HAL_TIM_PWM_Start>

  strobe_ticks  = HAL_GetTick() ;
 8000d6e:	f001 f8f9 	bl	8001f64 <HAL_GetTick>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4a8c      	ldr	r2, [pc, #560]	; (8000fa8 <main+0x2ac>)
 8000d76:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // left button press to update system state (MF -> ME -> MM)
	  system_state_update() ;
 8000d78:	f7ff fe16 	bl	80009a8 <system_state_update>
	  //run adc and capture previous snapshot of ADC value and adc movement processing
	  adc_dma_val_processing();
 8000d7c:	f7ff fd84 	bl	8000888 <adc_dma_val_processing>
	  // Turn LED ON/OFF
	  TURN_LED_ON_OFF() ;
 8000d80:	f7ff fea6 	bl	8000ad0 <TURN_LED_ON_OFF>
	  // read UART params
	  convert_UART_state_params_to_Int() ;
 8000d84:	f7ff ff22 	bl	8000bcc <convert_UART_state_params_to_Int>

	 // system state
	 if(button_count == 0 || start_up == 1 ){
 8000d88:	4b88      	ldr	r3, [pc, #544]	; (8000fac <main+0x2b0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d003      	beq.n	8000d98 <main+0x9c>
 8000d90:	4b87      	ldr	r3, [pc, #540]	; (8000fb0 <main+0x2b4>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d137      	bne.n	8000e08 <main+0x10c>

		 start_up = 0 ; //for default MF state
 8000d98:	4b85      	ldr	r3, [pc, #532]	; (8000fb0 <main+0x2b4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]

		 MF_mode_LED() ; // sets the corresponding mode LED
 8000d9e:	f000 fd0f 	bl	80017c0 <MF_mode_LED>
		 em_count=0;     // reset the emergency mode count
 8000da2:	4b84      	ldr	r3, [pc, #528]	; (8000fb4 <main+0x2b8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
		 em_default = 1; // to re-enter the EM state
 8000da8:	4b83      	ldr	r3, [pc, #524]	; (8000fb8 <main+0x2bc>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]

		if(LED_ON == 1){
 8000dae:	4b83      	ldr	r3, [pc, #524]	; (8000fbc <main+0x2c0>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d159      	bne.n	8000e6a <main+0x16e>
			 // if LED_ON and SLIDER MOVED -> updated LED intensity
			if(update_led_via_ADC == 1 && UART_state_update == 0){
 8000db6:	4b82      	ldr	r3, [pc, #520]	; (8000fc0 <main+0x2c4>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d109      	bne.n	8000dd2 <main+0xd6>
 8000dbe:	4b81      	ldr	r3, [pc, #516]	; (8000fc4 <main+0x2c8>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d105      	bne.n	8000dd2 <main+0xd6>

			  htim2.Instance->CCR1 =  LED_intensity ; // vary the duty cycle of the LED [1:512]
 8000dc6:	4b80      	ldr	r3, [pc, #512]	; (8000fc8 <main+0x2cc>)
 8000dc8:	881a      	ldrh	r2, [r3, #0]
 8000dca:	4b74      	ldr	r3, [pc, #464]	; (8000f9c <main+0x2a0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34
		if(LED_ON == 1){
 8000dd0:	e04b      	b.n	8000e6a <main+0x16e>
			}
			else{

				if(UART_state_update == 1 && state > 0 ){
 8000dd2:	4b7c      	ldr	r3, [pc, #496]	; (8000fc4 <main+0x2c8>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d147      	bne.n	8000e6a <main+0x16e>
 8000dda:	4b7c      	ldr	r3, [pc, #496]	; (8000fcc <main+0x2d0>)
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d043      	beq.n	8000e6a <main+0x16e>

					if(adc_conv_complete == 1){
 8000de2:	4b7b      	ldr	r3, [pc, #492]	; (8000fd0 <main+0x2d4>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d105      	bne.n	8000df6 <main+0xfa>
						adc_val_capture = 1 ; // capture slider value
 8000dea:	4b7a      	ldr	r3, [pc, #488]	; (8000fd4 <main+0x2d8>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
						update_led_via_ADC = 0 ; // dont read until slider moved
 8000df0:	4b73      	ldr	r3, [pc, #460]	; (8000fc0 <main+0x2c4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
					}
					htim2.Instance->CCR1 = state ;
 8000df6:	4b75      	ldr	r3, [pc, #468]	; (8000fcc <main+0x2d0>)
 8000df8:	881a      	ldrh	r2, [r3, #0]
 8000dfa:	4b68      	ldr	r3, [pc, #416]	; (8000f9c <main+0x2a0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	635a      	str	r2, [r3, #52]	; 0x34
//					UART_set_syst_state = 0;
					UART_state_update = 0;
 8000e00:	4b70      	ldr	r3, [pc, #448]	; (8000fc4 <main+0x2c8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
		if(LED_ON == 1){
 8000e06:	e030      	b.n	8000e6a <main+0x16e>
				}

			}
		}

	 }else if(button_count == 1 ){// right button system state updated
 8000e08:	4b68      	ldr	r3, [pc, #416]	; (8000fac <main+0x2b0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d102      	bne.n	8000e16 <main+0x11a>
		 ME_mode_LED() ; // sets the corresponding modes LED
 8000e10:	f000 fcf4 	bl	80017fc <ME_mode_LED>
 8000e14:	e02a      	b.n	8000e6c <main+0x170>


	 }else{
		 if(button_count == 2){ // Mood Mode
 8000e16:	4b65      	ldr	r3, [pc, #404]	; (8000fac <main+0x2b0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d126      	bne.n	8000e6c <main+0x170>
			 // SET THE NECESSARY STATES
			 em_count=0; // reset the emergency mode state
 8000e1e:	4b65      	ldr	r3, [pc, #404]	; (8000fb4 <main+0x2b8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
			 em_default = 1; // to re-enter EM state
 8000e24:	4b64      	ldr	r3, [pc, #400]	; (8000fb8 <main+0x2bc>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]

			 MM_mode_LED() ; //sets the corresponding modes LED
 8000e2a:	f000 fcff 	bl	800182c <MM_mode_LED>

			 if(LED_ON == 1){
 8000e2e:	4b63      	ldr	r3, [pc, #396]	; (8000fbc <main+0x2c0>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d10c      	bne.n	8000e50 <main+0x154>
				 // set to channel intensities to default values
				 // no longer default mode - reset back to default in other states?
				 //red channel
				 htim2.Instance->CCR4 = 128 ;
 8000e36:	4b59      	ldr	r3, [pc, #356]	; (8000f9c <main+0x2a0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2280      	movs	r2, #128	; 0x80
 8000e3c:	641a      	str	r2, [r3, #64]	; 0x40
				 // GREEN channel
				 htim3.Instance->CCR4 = 128 ;
 8000e3e:	4b58      	ldr	r3, [pc, #352]	; (8000fa0 <main+0x2a4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2280      	movs	r2, #128	; 0x80
 8000e44:	641a      	str	r2, [r3, #64]	; 0x40
				 // BLUE channel
				 htim4.Instance->CCR1 = 128 ;
 8000e46:	4b57      	ldr	r3, [pc, #348]	; (8000fa4 <main+0x2a8>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2280      	movs	r2, #128	; 0x80
 8000e4c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e4e:	e00d      	b.n	8000e6c <main+0x170>


			 }else{
				 // put all channels off
				 //red channel
				 htim2.Instance->CCR4 =  0;
 8000e50:	4b52      	ldr	r3, [pc, #328]	; (8000f9c <main+0x2a0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2200      	movs	r2, #0
 8000e56:	641a      	str	r2, [r3, #64]	; 0x40
				 // GREEN channel
				 htim3.Instance->CCR4 = 0 ;
 8000e58:	4b51      	ldr	r3, [pc, #324]	; (8000fa0 <main+0x2a4>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	641a      	str	r2, [r3, #64]	; 0x40
				 // BLUE channel
				 htim4.Instance->CCR1 = 0 ;
 8000e60:	4b50      	ldr	r3, [pc, #320]	; (8000fa4 <main+0x2a8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2200      	movs	r2, #0
 8000e66:	635a      	str	r2, [r3, #52]	; 0x34
 8000e68:	e000      	b.n	8000e6c <main+0x170>
		if(LED_ON == 1){
 8000e6a:	bf00      	nop

		 }
	 }

	 // right button state update
	 right_button_state_update() ;
 8000e6c:	f7ff fdfa 	bl	8000a64 <right_button_state_update>
	 //EMERGENCY MODES
	  if(button_count ==1 ){
 8000e70:	4b4e      	ldr	r3, [pc, #312]	; (8000fac <main+0x2b0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	f47f af7f 	bne.w	8000d78 <main+0x7c>

		 if(em_count == 0 || em_default ==1){ //strobe wit default intensity
 8000e7a:	4b4e      	ldr	r3, [pc, #312]	; (8000fb4 <main+0x2b8>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <main+0x18e>
 8000e82:	4b4d      	ldr	r3, [pc, #308]	; (8000fb8 <main+0x2bc>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d112      	bne.n	8000eb0 <main+0x1b4>
			 em_default = 0 ; //default state reached
 8000e8a:	4b4b      	ldr	r3, [pc, #300]	; (8000fb8 <main+0x2bc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2120      	movs	r1, #32
 8000e94:	4850      	ldr	r0, [pc, #320]	; (8000fd8 <main+0x2dc>)
 8000e96:	f002 fdab 	bl	80039f0 <HAL_GPIO_WritePin>


			 if(LED_ON){ //LED_on =?
 8000e9a:	4b48      	ldr	r3, [pc, #288]	; (8000fbc <main+0x2c0>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 8136 	beq.w	8001110 <main+0x414>
				 // strobe LED with provided on time
				 EM_mode_Strobe(strobe_delay) ;
 8000ea4:	4b4d      	ldr	r3, [pc, #308]	; (8000fdc <main+0x2e0>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fe41 	bl	8000b30 <EM_mode_Strobe>
			 if(LED_ON){ //LED_on =?
 8000eae:	e12f      	b.n	8001110 <main+0x414>
			 }
		 }
		 else if(em_count ==1){ // SOS MOSRE
 8000eb0:	4b40      	ldr	r3, [pc, #256]	; (8000fb4 <main+0x2b8>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	f040 8121 	bne.w	80010fc <main+0x400>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2120      	movs	r1, #32
 8000ebe:	4846      	ldr	r0, [pc, #280]	; (8000fd8 <main+0x2dc>)
 8000ec0:	f002 fd96 	bl	80039f0 <HAL_GPIO_WritePin>

			 for(int i = 0; SOS[i] !='\0' ; i++){
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	e110      	b.n	80010ec <main+0x3f0>

				 if(SOS[i] == '.' && DOT == 1){
 8000eca:	4a45      	ldr	r2, [pc, #276]	; (8000fe0 <main+0x2e4>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4413      	add	r3, r2
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b2e      	cmp	r3, #46	; 0x2e
 8000ed4:	d12a      	bne.n	8000f2c <main+0x230>
 8000ed6:	4b43      	ldr	r3, [pc, #268]	; (8000fe4 <main+0x2e8>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d126      	bne.n	8000f2c <main+0x230>

					 htim2.Instance->CCR1 = 512 ;
 8000ede:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <main+0x2a0>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee6:	635a      	str	r2, [r3, #52]	; 0x34
					 timePassed = HAL_GetTick() - morse_current_time ;
 8000ee8:	f001 f83c 	bl	8001f64 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	4b3e      	ldr	r3, [pc, #248]	; (8000fe8 <main+0x2ec>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	4a3d      	ldr	r2, [pc, #244]	; (8000fec <main+0x2f0>)
 8000ef6:	6013      	str	r3, [r2, #0]
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 8000ef8:	f001 f834 	bl	8001f64 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <main+0x2ec>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	4a3a      	ldr	r2, [pc, #232]	; (8000ff0 <main+0x2f4>)
 8000f06:	8812      	ldrh	r2, [r2, #0]
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	f0c0 80de 	bcc.w	80010ca <main+0x3ce>
						 morse_current_time = HAL_GetTick() ;
 8000f0e:	f001 f829 	bl	8001f64 <HAL_GetTick>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4a34      	ldr	r2, [pc, #208]	; (8000fe8 <main+0x2ec>)
 8000f16:	6013      	str	r3, [r2, #0]

						 DOT=0;
 8000f18:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <main+0x2e8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
						 DASH =0 ;
 8000f1e:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <main+0x2f8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
						 space_in_letter = 1 ;
 8000f24:	4b34      	ldr	r3, [pc, #208]	; (8000ff8 <main+0x2fc>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 8000f2a:	e0ce      	b.n	80010ca <main+0x3ce>

					 }
				 }
				 else if(SOS[i] =='-'  && DASH == 1){
 8000f2c:	4a2c      	ldr	r2, [pc, #176]	; (8000fe0 <main+0x2e4>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b2d      	cmp	r3, #45	; 0x2d
 8000f36:	d161      	bne.n	8000ffc <main+0x300>
 8000f38:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <main+0x2f8>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d15d      	bne.n	8000ffc <main+0x300>

					 htim2.Instance->CCR1 = 512 ;
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <main+0x2a0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f48:	635a      	str	r2, [r3, #52]	; 0x34
					 if(HAL_GetTick() - morse_current_time >= 3*time_unit  ){
 8000f4a:	f001 f80b 	bl	8001f64 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <main+0x2ec>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	1ad2      	subs	r2, r2, r3
 8000f56:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <main+0x2f4>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	440b      	add	r3, r1
 8000f62:	429a      	cmp	r2, r3
 8000f64:	f0c0 80b1 	bcc.w	80010ca <main+0x3ce>
						 morse_current_time = HAL_GetTick() ;
 8000f68:	f000 fffc 	bl	8001f64 <HAL_GetTick>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4a1e      	ldr	r2, [pc, #120]	; (8000fe8 <main+0x2ec>)
 8000f70:	6013      	str	r3, [r2, #0]

						 DOT =  0 ;
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <main+0x2e8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
						 DASH = 0 ;
 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <main+0x2f8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
						 space_in_letter = 1 ;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <main+0x2fc>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
					 if(HAL_GetTick() - morse_current_time >= 3*time_unit  ){
 8000f84:	e0a1      	b.n	80010ca <main+0x3ce>
 8000f86:	bf00      	nop
 8000f88:	2000002c 	.word	0x2000002c
 8000f8c:	20000260 	.word	0x20000260
 8000f90:	20002314 	.word	0x20002314
 8000f94:	200002f0 	.word	0x200002f0
 8000f98:	200000e8 	.word	0x200000e8
 8000f9c:	2000017c 	.word	0x2000017c
 8000fa0:	200001c8 	.word	0x200001c8
 8000fa4:	20000214 	.word	0x20000214
 8000fa8:	20002300 	.word	0x20002300
 8000fac:	200002e8 	.word	0x200002e8
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	200002ec 	.word	0x200002ec
 8000fb8:	20000001 	.word	0x20000001
 8000fbc:	200022ff 	.word	0x200022ff
 8000fc0:	200022fe 	.word	0x200022fe
 8000fc4:	20002318 	.word	0x20002318
 8000fc8:	20000010 	.word	0x20000010
 8000fcc:	2000231a 	.word	0x2000231a
 8000fd0:	200022fa 	.word	0x200022fa
 8000fd4:	20000002 	.word	0x20000002
 8000fd8:	48000400 	.word	0x48000400
 8000fdc:	20000012 	.word	0x20000012
 8000fe0:	20000018 	.word	0x20000018
 8000fe4:	20000016 	.word	0x20000016
 8000fe8:	2000230c 	.word	0x2000230c
 8000fec:	20002308 	.word	0x20002308
 8000ff0:	20000014 	.word	0x20000014
 8000ff4:	20000017 	.word	0x20000017
 8000ff8:	20002310 	.word	0x20002310

					 }
				 }
				 else if(SOS[i]== ' '   && space_in_letter ==1){
 8000ffc:	4a45      	ldr	r2, [pc, #276]	; (8001114 <main+0x418>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b20      	cmp	r3, #32
 8001006:	d141      	bne.n	800108c <main+0x390>
 8001008:	4b43      	ldr	r3, [pc, #268]	; (8001118 <main+0x41c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d13d      	bne.n	800108c <main+0x390>

					 htim2.Instance->CCR1 = 0 ;
 8001010:	4b42      	ldr	r3, [pc, #264]	; (800111c <main+0x420>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2200      	movs	r2, #0
 8001016:	635a      	str	r2, [r3, #52]	; 0x34

					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 8001018:	f000 ffa4 	bl	8001f64 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	4b40      	ldr	r3, [pc, #256]	; (8001120 <main+0x424>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	4a3f      	ldr	r2, [pc, #252]	; (8001124 <main+0x428>)
 8001026:	8812      	ldrh	r2, [r2, #0]
 8001028:	4293      	cmp	r3, r2
 800102a:	d34d      	bcc.n	80010c8 <main+0x3cc>
						 morse_current_time = HAL_GetTick() ;
 800102c:	f000 ff9a 	bl	8001f64 <HAL_GetTick>
 8001030:	4603      	mov	r3, r0
 8001032:	4a3b      	ldr	r2, [pc, #236]	; (8001120 <main+0x424>)
 8001034:	6013      	str	r3, [r2, #0]
						 space_in_letter = 0 ;
 8001036:	4b38      	ldr	r3, [pc, #224]	; (8001118 <main+0x41c>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]

						 //NEXT CHARACTER CHECK
						 next_char_check = i ;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b39      	ldr	r3, [pc, #228]	; (8001128 <main+0x42c>)
 8001042:	701a      	strb	r2, [r3, #0]
						 next_char_check++ ;
 8001044:	4b38      	ldr	r3, [pc, #224]	; (8001128 <main+0x42c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	3301      	adds	r3, #1
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b36      	ldr	r3, [pc, #216]	; (8001128 <main+0x42c>)
 800104e:	701a      	strb	r2, [r3, #0]
						 if(SOS[next_char_check] == '.' && DOT == 0 ){
 8001050:	4b35      	ldr	r3, [pc, #212]	; (8001128 <main+0x42c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <main+0x418>)
 8001058:	5c9b      	ldrb	r3, [r3, r2]
 800105a:	2b2e      	cmp	r3, #46	; 0x2e
 800105c:	d107      	bne.n	800106e <main+0x372>
 800105e:	4b33      	ldr	r3, [pc, #204]	; (800112c <main+0x430>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d103      	bne.n	800106e <main+0x372>
							 DOT= 1 ;
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <main+0x430>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 800106c:	e02c      	b.n	80010c8 <main+0x3cc>
						 }else if(SOS[next_char_check] == '-' && DASH == 0){
 800106e:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <main+0x42c>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	4b27      	ldr	r3, [pc, #156]	; (8001114 <main+0x418>)
 8001076:	5c9b      	ldrb	r3, [r3, r2]
 8001078:	2b2d      	cmp	r3, #45	; 0x2d
 800107a:	d125      	bne.n	80010c8 <main+0x3cc>
 800107c:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <main+0x434>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d121      	bne.n	80010c8 <main+0x3cc>
							 DASH =1;
 8001084:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <main+0x434>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 800108a:	e01d      	b.n	80010c8 <main+0x3cc>

					 }

				 }
				 else{
					 if(SOS[i]== '\0'){
 800108c:	4a21      	ldr	r2, [pc, #132]	; (8001114 <main+0x418>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d118      	bne.n	80010ca <main+0x3ce>

						 htim2.Instance->CCR1 = 0 ;
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <main+0x420>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2200      	movs	r2, #0
 800109e:	635a      	str	r2, [r3, #52]	; 0x34
						 if(HAL_GetTick() - morse_current_time >= 3*time_unit){
 80010a0:	f000 ff60 	bl	8001f64 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <main+0x424>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	1ad2      	subs	r2, r2, r3
 80010ac:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <main+0x428>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	460b      	mov	r3, r1
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	440b      	add	r3, r1
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d306      	bcc.n	80010ca <main+0x3ce>
							morse_current_time = HAL_GetTick() ;
 80010bc:	f000 ff52 	bl	8001f64 <HAL_GetTick>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4a17      	ldr	r2, [pc, #92]	; (8001120 <main+0x424>)
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e000      	b.n	80010ca <main+0x3ce>
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 80010c8:	bf00      	nop

						 }
					 }
				 }
				 if(next_char_checked == 1){
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <main+0x438>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d109      	bne.n	80010e6 <main+0x3ea>
					 character = SOS[i++] ;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	1c5a      	adds	r2, r3, #1
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <main+0x418>)
 80010da:	5cd2      	ldrb	r2, [r2, r3]
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <main+0x43c>)
 80010de:	701a      	strb	r2, [r3, #0]
					 next_char_checked = 0;
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <main+0x438>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
			 for(int i = 0; SOS[i] !='\0' ; i++){
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3301      	adds	r3, #1
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	4a09      	ldr	r2, [pc, #36]	; (8001114 <main+0x418>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f47f aee8 	bne.w	8000eca <main+0x1ce>
 80010fa:	e63d      	b.n	8000d78 <main+0x7c>
				 }
			 }
		 }
		 else{
			 if(em_count == 2){ // CUSTOM MORSE
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <main+0x440>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b02      	cmp	r3, #2
 8001102:	f47f ae39 	bne.w	8000d78 <main+0x7c>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2120      	movs	r1, #32
 800110a:	480d      	ldr	r0, [pc, #52]	; (8001140 <main+0x444>)
 800110c:	f002 fc70 	bl	80039f0 <HAL_GPIO_WritePin>
	  system_state_update() ;
 8001110:	e632      	b.n	8000d78 <main+0x7c>
 8001112:	bf00      	nop
 8001114:	20000018 	.word	0x20000018
 8001118:	20002310 	.word	0x20002310
 800111c:	2000017c 	.word	0x2000017c
 8001120:	2000230c 	.word	0x2000230c
 8001124:	20000014 	.word	0x20000014
 8001128:	20002311 	.word	0x20002311
 800112c:	20000016 	.word	0x20000016
 8001130:	20000017 	.word	0x20000017
 8001134:	20002312 	.word	0x20002312
 8001138:	20002313 	.word	0x20002313
 800113c:	200002ec 	.word	0x200002ec
 8001140:	48000400 	.word	0x48000400

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b0a6      	sub	sp, #152	; 0x98
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800114e:	2228      	movs	r2, #40	; 0x28
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f006 fdce 	bl	8007cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2258      	movs	r2, #88	; 0x58
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f006 fdc0 	bl	8007cf4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001174:	2302      	movs	r3, #2
 8001176:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001178:	2301      	movs	r3, #1
 800117a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117c:	2310      	movs	r3, #16
 800117e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001182:	2302      	movs	r3, #2
 8001184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800118c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001190:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001194:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011a2:	4618      	mov	r0, r3
 80011a4:	f002 fc60 	bl	8003a68 <HAL_RCC_OscConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011ae:	f000 fb6b 	bl	8001888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b2:	230f      	movs	r3, #15
 80011b4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b6:	2302      	movs	r3, #2
 80011b8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011cc:	2102      	movs	r1, #2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 fc9e 	bl	8004b10 <HAL_RCC_ClockConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011da:	f000 fb55 	bl	8001888 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <SystemClock_Config+0xcc>)
 80011e0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80011e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 fec0 	bl	8004f7c <HAL_RCCEx_PeriphCLKConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001202:	f000 fb41 	bl	8001888 <Error_Handler>
  }
}
 8001206:	bf00      	nop
 8001208:	3798      	adds	r7, #152	; 0x98
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	00300082 	.word	0x00300082

08001214 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
 8001234:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001236:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <MX_ADC1_Init+0xdc>)
 8001238:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800123c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800123e:	4b2c      	ldr	r3, [pc, #176]	; (80012f0 <MX_ADC1_Init+0xdc>)
 8001240:	2200      	movs	r2, #0
 8001242:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001244:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <MX_ADC1_Init+0xdc>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800124a:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <MX_ADC1_Init+0xdc>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001250:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <MX_ADC1_Init+0xdc>)
 8001252:	2201      	movs	r2, #1
 8001254:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <MX_ADC1_Init+0xdc>)
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800125e:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <MX_ADC1_Init+0xdc>)
 8001260:	2200      	movs	r2, #0
 8001262:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <MX_ADC1_Init+0xdc>)
 8001266:	2201      	movs	r2, #1
 8001268:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <MX_ADC1_Init+0xdc>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001270:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <MX_ADC1_Init+0xdc>)
 8001272:	2201      	movs	r2, #1
 8001274:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <MX_ADC1_Init+0xdc>)
 8001278:	2201      	movs	r2, #1
 800127a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800127e:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <MX_ADC1_Init+0xdc>)
 8001280:	2204      	movs	r2, #4
 8001282:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_ADC1_Init+0xdc>)
 8001286:	2200      	movs	r2, #0
 8001288:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <MX_ADC1_Init+0xdc>)
 800128c:	2200      	movs	r2, #0
 800128e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001290:	4817      	ldr	r0, [pc, #92]	; (80012f0 <MX_ADC1_Init+0xdc>)
 8001292:	f000 feab 	bl	8001fec <HAL_ADC_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800129c:	f000 faf4 	bl	8001888 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4619      	mov	r1, r3
 80012aa:	4811      	ldr	r0, [pc, #68]	; (80012f0 <MX_ADC1_Init+0xdc>)
 80012ac:	f001 fca0 	bl	8002bf0 <HAL_ADCEx_MultiModeConfigChannel>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80012b6:	f000 fae7 	bl	8001888 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012be:	2301      	movs	r3, #1
 80012c0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	4619      	mov	r1, r3
 80012d6:	4806      	ldr	r0, [pc, #24]	; (80012f0 <MX_ADC1_Init+0xdc>)
 80012d8:	f001 f99e 	bl	8002618 <HAL_ADC_ConfigChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80012e2:	f000 fad1 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	3728      	adds	r7, #40	; 0x28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200000e8 	.word	0x200000e8

080012f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08e      	sub	sp, #56	; 0x38
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001314:	463b      	mov	r3, r7
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]
 8001322:	615a      	str	r2, [r3, #20]
 8001324:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001326:	4b33      	ldr	r3, [pc, #204]	; (80013f4 <MX_TIM2_Init+0x100>)
 8001328:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800132c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36;
 800132e:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <MX_TIM2_Init+0x100>)
 8001330:	2224      	movs	r2, #36	; 0x24
 8001332:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <MX_TIM2_Init+0x100>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 512;
 800133a:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <MX_TIM2_Init+0x100>)
 800133c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001340:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001342:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <MX_TIM2_Init+0x100>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001348:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <MX_TIM2_Init+0x100>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800134e:	4829      	ldr	r0, [pc, #164]	; (80013f4 <MX_TIM2_Init+0x100>)
 8001350:	f004 f832 	bl	80053b8 <HAL_TIM_Base_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800135a:	f000 fa95 	bl	8001888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001364:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001368:	4619      	mov	r1, r3
 800136a:	4822      	ldr	r0, [pc, #136]	; (80013f4 <MX_TIM2_Init+0x100>)
 800136c:	f004 fafc 	bl	8005968 <HAL_TIM_ConfigClockSource>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001376:	f000 fa87 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800137a:	481e      	ldr	r0, [pc, #120]	; (80013f4 <MX_TIM2_Init+0x100>)
 800137c:	f004 f873 	bl	8005466 <HAL_TIM_PWM_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001386:	f000 fa7f 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	4816      	ldr	r0, [pc, #88]	; (80013f4 <MX_TIM2_Init+0x100>)
 800139a:	f005 f813 	bl	80063c4 <HAL_TIMEx_MasterConfigSynchronization>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80013a4:	f000 fa70 	bl	8001888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a8:	2360      	movs	r3, #96	; 0x60
 80013aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	4619      	mov	r1, r3
 80013be:	480d      	ldr	r0, [pc, #52]	; (80013f4 <MX_TIM2_Init+0x100>)
 80013c0:	f004 f9be 	bl	8005740 <HAL_TIM_PWM_ConfigChannel>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80013ca:	f000 fa5d 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	220c      	movs	r2, #12
 80013d2:	4619      	mov	r1, r3
 80013d4:	4807      	ldr	r0, [pc, #28]	; (80013f4 <MX_TIM2_Init+0x100>)
 80013d6:	f004 f9b3 	bl	8005740 <HAL_TIM_PWM_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80013e0:	f000 fa52 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013e4:	4803      	ldr	r0, [pc, #12]	; (80013f4 <MX_TIM2_Init+0x100>)
 80013e6:	f000 fb27 	bl	8001a38 <HAL_TIM_MspPostInit>

}
 80013ea:	bf00      	nop
 80013ec:	3738      	adds	r7, #56	; 0x38
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000017c 	.word	0x2000017c

080013f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08e      	sub	sp, #56	; 0x38
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001418:	463b      	mov	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]
 8001426:	615a      	str	r2, [r3, #20]
 8001428:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800142a:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <MX_TIM3_Init+0xe8>)
 800142c:	4a2d      	ldr	r2, [pc, #180]	; (80014e4 <MX_TIM3_Init+0xec>)
 800142e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36;
 8001430:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <MX_TIM3_Init+0xe8>)
 8001432:	2224      	movs	r2, #36	; 0x24
 8001434:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001436:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <MX_TIM3_Init+0xe8>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 512;
 800143c:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <MX_TIM3_Init+0xe8>)
 800143e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001442:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001444:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <MX_TIM3_Init+0xe8>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144a:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <MX_TIM3_Init+0xe8>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001450:	4823      	ldr	r0, [pc, #140]	; (80014e0 <MX_TIM3_Init+0xe8>)
 8001452:	f003 ffb1 	bl	80053b8 <HAL_TIM_Base_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800145c:	f000 fa14 	bl	8001888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800146a:	4619      	mov	r1, r3
 800146c:	481c      	ldr	r0, [pc, #112]	; (80014e0 <MX_TIM3_Init+0xe8>)
 800146e:	f004 fa7b 	bl	8005968 <HAL_TIM_ConfigClockSource>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001478:	f000 fa06 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800147c:	4818      	ldr	r0, [pc, #96]	; (80014e0 <MX_TIM3_Init+0xe8>)
 800147e:	f003 fff2 	bl	8005466 <HAL_TIM_PWM_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001488:	f000 f9fe 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	4811      	ldr	r0, [pc, #68]	; (80014e0 <MX_TIM3_Init+0xe8>)
 800149c:	f004 ff92 	bl	80063c4 <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80014a6:	f000 f9ef 	bl	8001888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014aa:	2360      	movs	r3, #96	; 0x60
 80014ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014ba:	463b      	mov	r3, r7
 80014bc:	220c      	movs	r2, #12
 80014be:	4619      	mov	r1, r3
 80014c0:	4807      	ldr	r0, [pc, #28]	; (80014e0 <MX_TIM3_Init+0xe8>)
 80014c2:	f004 f93d 	bl	8005740 <HAL_TIM_PWM_ConfigChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80014cc:	f000 f9dc 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <MX_TIM3_Init+0xe8>)
 80014d2:	f000 fab1 	bl	8001a38 <HAL_TIM_MspPostInit>

}
 80014d6:	bf00      	nop
 80014d8:	3738      	adds	r7, #56	; 0x38
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200001c8 	.word	0x200001c8
 80014e4:	40000400 	.word	0x40000400

080014e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08e      	sub	sp, #56	; 0x38
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001508:	463b      	mov	r3, r7
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	615a      	str	r2, [r3, #20]
 8001518:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800151a:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <MX_TIM4_Init+0xe8>)
 800151c:	4a2d      	ldr	r2, [pc, #180]	; (80015d4 <MX_TIM4_Init+0xec>)
 800151e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36;
 8001520:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <MX_TIM4_Init+0xe8>)
 8001522:	2224      	movs	r2, #36	; 0x24
 8001524:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001526:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <MX_TIM4_Init+0xe8>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800152c:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <MX_TIM4_Init+0xe8>)
 800152e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001532:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <MX_TIM4_Init+0xe8>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153a:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <MX_TIM4_Init+0xe8>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001540:	4823      	ldr	r0, [pc, #140]	; (80015d0 <MX_TIM4_Init+0xe8>)
 8001542:	f003 ff39 	bl	80053b8 <HAL_TIM_Base_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800154c:	f000 f99c 	bl	8001888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800155a:	4619      	mov	r1, r3
 800155c:	481c      	ldr	r0, [pc, #112]	; (80015d0 <MX_TIM4_Init+0xe8>)
 800155e:	f004 fa03 	bl	8005968 <HAL_TIM_ConfigClockSource>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001568:	f000 f98e 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800156c:	4818      	ldr	r0, [pc, #96]	; (80015d0 <MX_TIM4_Init+0xe8>)
 800156e:	f003 ff7a 	bl	8005466 <HAL_TIM_PWM_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001578:	f000 f986 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4811      	ldr	r0, [pc, #68]	; (80015d0 <MX_TIM4_Init+0xe8>)
 800158c:	f004 ff1a 	bl	80063c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001596:	f000 f977 	bl	8001888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800159a:	2360      	movs	r3, #96	; 0x60
 800159c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015aa:	463b      	mov	r3, r7
 80015ac:	2200      	movs	r2, #0
 80015ae:	4619      	mov	r1, r3
 80015b0:	4807      	ldr	r0, [pc, #28]	; (80015d0 <MX_TIM4_Init+0xe8>)
 80015b2:	f004 f8c5 	bl	8005740 <HAL_TIM_PWM_ConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80015bc:	f000 f964 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015c0:	4803      	ldr	r0, [pc, #12]	; (80015d0 <MX_TIM4_Init+0xe8>)
 80015c2:	f000 fa39 	bl	8001a38 <HAL_TIM_MspPostInit>

}
 80015c6:	bf00      	nop
 80015c8:	3738      	adds	r7, #56	; 0x38
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000214 	.word	0x20000214
 80015d4:	40000800 	.word	0x40000800

080015d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <MX_USART2_UART_Init+0x5c>)
 80015de:	4a16      	ldr	r2, [pc, #88]	; (8001638 <MX_USART2_UART_Init+0x60>)
 80015e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_USART2_UART_Init+0x5c>)
 80015e4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80015e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <MX_USART2_UART_Init+0x5c>)
 80015ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015f0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <MX_USART2_UART_Init+0x5c>)
 80015f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <MX_USART2_UART_Init+0x5c>)
 80015fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001600:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <MX_USART2_UART_Init+0x5c>)
 8001604:	220c      	movs	r2, #12
 8001606:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <MX_USART2_UART_Init+0x5c>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_USART2_UART_Init+0x5c>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <MX_USART2_UART_Init+0x5c>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_USART2_UART_Init+0x5c>)
 800161c:	2200      	movs	r2, #0
 800161e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <MX_USART2_UART_Init+0x5c>)
 8001622:	f004 ff5b 	bl	80064dc <HAL_UART_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800162c:	f000 f92c 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000260 	.word	0x20000260
 8001638:	40004400 	.word	0x40004400

0800163c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <MX_DMA_Init+0x38>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <MX_DMA_Init+0x38>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6153      	str	r3, [r2, #20]
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <MX_DMA_Init+0x38>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	200b      	movs	r0, #11
 8001660:	f001 fdc3 	bl	80031ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001664:	200b      	movs	r0, #11
 8001666:	f001 fddc 	bl	8003222 <HAL_NVIC_EnableIRQ>

}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000

08001678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168e:	4b49      	ldr	r3, [pc, #292]	; (80017b4 <MX_GPIO_Init+0x13c>)
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	4a48      	ldr	r2, [pc, #288]	; (80017b4 <MX_GPIO_Init+0x13c>)
 8001694:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001698:	6153      	str	r3, [r2, #20]
 800169a:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <MX_GPIO_Init+0x13c>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016a6:	4b43      	ldr	r3, [pc, #268]	; (80017b4 <MX_GPIO_Init+0x13c>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	4a42      	ldr	r2, [pc, #264]	; (80017b4 <MX_GPIO_Init+0x13c>)
 80016ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016b0:	6153      	str	r3, [r2, #20]
 80016b2:	4b40      	ldr	r3, [pc, #256]	; (80017b4 <MX_GPIO_Init+0x13c>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	4b3d      	ldr	r3, [pc, #244]	; (80017b4 <MX_GPIO_Init+0x13c>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	4a3c      	ldr	r2, [pc, #240]	; (80017b4 <MX_GPIO_Init+0x13c>)
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	6153      	str	r3, [r2, #20]
 80016ca:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <MX_GPIO_Init+0x13c>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	4b37      	ldr	r3, [pc, #220]	; (80017b4 <MX_GPIO_Init+0x13c>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	4a36      	ldr	r2, [pc, #216]	; (80017b4 <MX_GPIO_Init+0x13c>)
 80016dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e0:	6153      	str	r3, [r2, #20]
 80016e2:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <MX_GPIO_Init+0x13c>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D3_Pin|LED_D4_Pin|LED_D5_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80016f4:	4830      	ldr	r0, [pc, #192]	; (80017b8 <MX_GPIO_Init+0x140>)
 80016f6:	f002 f97b 	bl	80039f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001704:	f002 f974 	bl	80039f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800170e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	4827      	ldr	r0, [pc, #156]	; (80017bc <MX_GPIO_Init+0x144>)
 8001720:	f001 ffc4 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001724:	23c0      	movs	r3, #192	; 0xc0
 8001726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001728:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800172c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800172e:	2301      	movs	r3, #1
 8001730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173c:	f001 ffb6 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D3_Pin LED_D4_Pin LED_D5_Pin */
  GPIO_InitStruct.Pin = LED_D3_Pin|LED_D4_Pin|LED_D5_Pin;
 8001740:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001746:	2301      	movs	r3, #1
 8001748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	4817      	ldr	r0, [pc, #92]	; (80017b8 <MX_GPIO_Init+0x140>)
 800175a:	f001 ffa7 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D2_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 800175e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	2301      	movs	r3, #1
 8001766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177a:	f001 ff97 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800177e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001784:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800178a:	2301      	movs	r3, #1
 800178c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4619      	mov	r1, r3
 8001794:	4808      	ldr	r0, [pc, #32]	; (80017b8 <MX_GPIO_Init+0x140>)
 8001796:	f001 ff89 	bl	80036ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	2017      	movs	r0, #23
 80017a0:	f001 fd23 	bl	80031ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017a4:	2017      	movs	r0, #23
 80017a6:	f001 fd3c 	bl	8003222 <HAL_NVIC_EnableIRQ>

}
 80017aa:	bf00      	nop
 80017ac:	3728      	adds	r7, #40	; 0x28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	48000400 	.word	0x48000400
 80017bc:	48000800 	.word	0x48000800

080017c0 <MF_mode_LED>:

/* USER CODE BEGIN 4 */
// FUNCTIONS
void MF_mode_LED(){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80017c4:	2201      	movs	r2, #1
 80017c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ce:	f002 f90f 	bl	80039f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80017d2:	2200      	movs	r2, #0
 80017d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017d8:	4807      	ldr	r0, [pc, #28]	; (80017f8 <MF_mode_LED+0x38>)
 80017da:	f002 f909 	bl	80039f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	2110      	movs	r1, #16
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MF_mode_LED+0x38>)
 80017e4:	f002 f904 	bl	80039f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2120      	movs	r1, #32
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <MF_mode_LED+0x38>)
 80017ee:	f002 f8ff 	bl	80039f0 <HAL_GPIO_WritePin>
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	48000400 	.word	0x48000400

080017fc <ME_mode_LED>:

void ME_mode_LED(){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180a:	f002 f8f1 	bl	80039f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800180e:	2201      	movs	r2, #1
 8001810:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001814:	4804      	ldr	r0, [pc, #16]	; (8001828 <ME_mode_LED+0x2c>)
 8001816:	f002 f8eb 	bl	80039f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	2110      	movs	r1, #16
 800181e:	4802      	ldr	r0, [pc, #8]	; (8001828 <ME_mode_LED+0x2c>)
 8001820:	f002 f8e6 	bl	80039f0 <HAL_GPIO_WritePin>
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	48000400 	.word	0x48000400

0800182c <MM_mode_LED>:

void MM_mode_LED(){
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183a:	f002 f8d9 	bl	80039f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001844:	4807      	ldr	r0, [pc, #28]	; (8001864 <MM_mode_LED+0x38>)
 8001846:	f002 f8d3 	bl	80039f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800184a:	2201      	movs	r2, #1
 800184c:	2110      	movs	r1, #16
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <MM_mode_LED+0x38>)
 8001850:	f002 f8ce 	bl	80039f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	2120      	movs	r1, #32
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <MM_mode_LED+0x38>)
 800185a:	f002 f8c9 	bl	80039f0 <HAL_GPIO_WritePin>
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	48000400 	.word	0x48000400

08001868 <HAL_ADC_ConvCpltCallback>:


// adc buffer filled by dma circular sampling
// data should not be processed in the interrupt, it makes rest of the
// progam inaccessible
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	adc_conv_complete = 1 ;
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001872:	2201      	movs	r2, #1
 8001874:	701a      	strb	r2, [r3, #0]

}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	200022fa 	.word	0x200022fa

08001888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800188c:	b672      	cpsid	i
}
 800188e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001890:	e7fe      	b.n	8001890 <Error_Handler+0x8>
	...

08001894 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <HAL_MspInit+0x44>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <HAL_MspInit+0x44>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6193      	str	r3, [r2, #24]
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <HAL_MspInit+0x44>)
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_MspInit+0x44>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <HAL_MspInit+0x44>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	61d3      	str	r3, [r2, #28]
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_MspInit+0x44>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018ca:	2007      	movs	r0, #7
 80018cc:	f001 fc82 	bl	80031d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000

080018dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018fc:	d14c      	bne.n	8001998 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80018fe:	4b28      	ldr	r3, [pc, #160]	; (80019a0 <HAL_ADC_MspInit+0xc4>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	4a27      	ldr	r2, [pc, #156]	; (80019a0 <HAL_ADC_MspInit+0xc4>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	6153      	str	r3, [r2, #20]
 800190a:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <HAL_ADC_MspInit+0xc4>)
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <HAL_ADC_MspInit+0xc4>)
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	4a21      	ldr	r2, [pc, #132]	; (80019a0 <HAL_ADC_MspInit+0xc4>)
 800191c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001920:	6153      	str	r3, [r2, #20]
 8001922:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <HAL_ADC_MspInit+0xc4>)
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800192e:	2301      	movs	r3, #1
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001932:	2303      	movs	r3, #3
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001944:	f001 feb2 	bl	80036ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <HAL_ADC_MspInit+0xc8>)
 800194a:	4a17      	ldr	r2, [pc, #92]	; (80019a8 <HAL_ADC_MspInit+0xcc>)
 800194c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_ADC_MspInit+0xc8>)
 8001950:	2200      	movs	r2, #0
 8001952:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <HAL_ADC_MspInit+0xc8>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_ADC_MspInit+0xc8>)
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <HAL_ADC_MspInit+0xc8>)
 8001962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001966:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001968:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <HAL_ADC_MspInit+0xc8>)
 800196a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800196e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <HAL_ADC_MspInit+0xc8>)
 8001972:	2220      	movs	r2, #32
 8001974:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_ADC_MspInit+0xc8>)
 8001978:	2200      	movs	r2, #0
 800197a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800197c:	4809      	ldr	r0, [pc, #36]	; (80019a4 <HAL_ADC_MspInit+0xc8>)
 800197e:	f001 fc6a 	bl	8003256 <HAL_DMA_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001988:	f7ff ff7e 	bl	8001888 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <HAL_ADC_MspInit+0xc8>)
 8001990:	639a      	str	r2, [r3, #56]	; 0x38
 8001992:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <HAL_ADC_MspInit+0xc8>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001998:	bf00      	nop
 800199a:	3728      	adds	r7, #40	; 0x28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000
 80019a4:	20000138 	.word	0x20000138
 80019a8:	40020008 	.word	0x40020008

080019ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019bc:	d10c      	bne.n	80019d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_TIM_Base_MspInit+0x80>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	4a1a      	ldr	r2, [pc, #104]	; (8001a2c <HAL_TIM_Base_MspInit+0x80>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	61d3      	str	r3, [r2, #28]
 80019ca:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <HAL_TIM_Base_MspInit+0x80>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019d6:	e022      	b.n	8001a1e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <HAL_TIM_Base_MspInit+0x84>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d10c      	bne.n	80019fc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_TIM_Base_MspInit+0x80>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4a11      	ldr	r2, [pc, #68]	; (8001a2c <HAL_TIM_Base_MspInit+0x80>)
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	61d3      	str	r3, [r2, #28]
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <HAL_TIM_Base_MspInit+0x80>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
}
 80019fa:	e010      	b.n	8001a1e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0c      	ldr	r2, [pc, #48]	; (8001a34 <HAL_TIM_Base_MspInit+0x88>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10b      	bne.n	8001a1e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_TIM_Base_MspInit+0x80>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	4a08      	ldr	r2, [pc, #32]	; (8001a2c <HAL_TIM_Base_MspInit+0x80>)
 8001a0c:	f043 0304 	orr.w	r3, r3, #4
 8001a10:	61d3      	str	r3, [r2, #28]
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_TIM_Base_MspInit+0x80>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
}
 8001a1e:	bf00      	nop
 8001a20:	371c      	adds	r7, #28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40000400 	.word	0x40000400
 8001a34:	40000800 	.word	0x40000800

08001a38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08c      	sub	sp, #48	; 0x30
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 031c 	add.w	r3, r7, #28
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a58:	d13a      	bne.n	8001ad0 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	4b42      	ldr	r3, [pc, #264]	; (8001b64 <HAL_TIM_MspPostInit+0x12c>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	4a41      	ldr	r2, [pc, #260]	; (8001b64 <HAL_TIM_MspPostInit+0x12c>)
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a64:	6153      	str	r3, [r2, #20]
 8001a66:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <HAL_TIM_MspPostInit+0x12c>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	61bb      	str	r3, [r7, #24]
 8001a70:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a72:	4b3c      	ldr	r3, [pc, #240]	; (8001b64 <HAL_TIM_MspPostInit+0x12c>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	4a3b      	ldr	r2, [pc, #236]	; (8001b64 <HAL_TIM_MspPostInit+0x12c>)
 8001a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7c:	6153      	str	r3, [r2, #20]
 8001a7e:	4b39      	ldr	r3, [pc, #228]	; (8001b64 <HAL_TIM_MspPostInit+0x12c>)
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a8a:	2320      	movs	r3, #32
 8001a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	2300      	movs	r3, #0
 8001a98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f107 031c 	add.w	r3, r7, #28
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa8:	f001 fe00 	bl	80036ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001aac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4827      	ldr	r0, [pc, #156]	; (8001b68 <HAL_TIM_MspPostInit+0x130>)
 8001aca:	f001 fdef 	bl	80036ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ace:	e044      	b.n	8001b5a <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM3)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <HAL_TIM_MspPostInit+0x134>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d11c      	bne.n	8001b14 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ada:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <HAL_TIM_MspPostInit+0x12c>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	4a21      	ldr	r2, [pc, #132]	; (8001b64 <HAL_TIM_MspPostInit+0x12c>)
 8001ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae4:	6153      	str	r3, [r2, #20]
 8001ae6:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <HAL_TIM_MspPostInit+0x12c>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001af2:	2302      	movs	r3, #2
 8001af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b02:	2302      	movs	r3, #2
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4816      	ldr	r0, [pc, #88]	; (8001b68 <HAL_TIM_MspPostInit+0x130>)
 8001b0e:	f001 fdcd 	bl	80036ac <HAL_GPIO_Init>
}
 8001b12:	e022      	b.n	8001b5a <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM4)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a15      	ldr	r2, [pc, #84]	; (8001b70 <HAL_TIM_MspPostInit+0x138>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d11d      	bne.n	8001b5a <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_TIM_MspPostInit+0x12c>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <HAL_TIM_MspPostInit+0x12c>)
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b28:	6153      	str	r3, [r2, #20]
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_TIM_MspPostInit+0x12c>)
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001b48:	230a      	movs	r3, #10
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	4619      	mov	r1, r3
 8001b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b56:	f001 fda9 	bl	80036ac <HAL_GPIO_Init>
}
 8001b5a:	bf00      	nop
 8001b5c:	3730      	adds	r7, #48	; 0x30
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	48000400 	.word	0x48000400
 8001b6c:	40000400 	.word	0x40000400
 8001b70:	40000800 	.word	0x40000800

08001b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	; 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1b      	ldr	r2, [pc, #108]	; (8001c00 <HAL_UART_MspInit+0x8c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d130      	bne.n	8001bf8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b96:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <HAL_UART_MspInit+0x90>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	4a1a      	ldr	r2, [pc, #104]	; (8001c04 <HAL_UART_MspInit+0x90>)
 8001b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba0:	61d3      	str	r3, [r2, #28]
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <HAL_UART_MspInit+0x90>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_UART_MspInit+0x90>)
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <HAL_UART_MspInit+0x90>)
 8001bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb8:	6153      	str	r3, [r2, #20]
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_UART_MspInit+0x90>)
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bc6:	230c      	movs	r3, #12
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bd6:	2307      	movs	r3, #7
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be4:	f001 fd62 	bl	80036ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2100      	movs	r1, #0
 8001bec:	2026      	movs	r0, #38	; 0x26
 8001bee:	f001 fafc 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bf2:	2026      	movs	r0, #38	; 0x26
 8001bf4:	f001 fb15 	bl	8003222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bf8:	bf00      	nop
 8001bfa:	3728      	adds	r7, #40	; 0x28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40004400 	.word	0x40004400
 8001c04:	40021000 	.word	0x40021000

08001c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <NMI_Handler+0x4>

08001c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <HardFault_Handler+0x4>

08001c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <MemManage_Handler+0x4>

08001c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <BusFault_Handler+0x4>

08001c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <UsageFault_Handler+0x4>

08001c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c54:	f000 f972 	bl	8001f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <DMA1_Channel1_IRQHandler+0x10>)
 8001c62:	f001 fc15 	bl	8003490 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000138 	.word	0x20000138

08001c70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 8001c74:	4b64      	ldr	r3, [pc, #400]	; (8001e08 <EXTI9_5_IRQHandler+0x198>)
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d038      	beq.n	8001cf2 <EXTI9_5_IRQHandler+0x82>

		if(HAL_GetTick() - ticks_pressed >= 20){
 8001c80:	f000 f970 	bl	8001f64 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b61      	ldr	r3, [pc, #388]	; (8001e0c <EXTI9_5_IRQHandler+0x19c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b13      	cmp	r3, #19
 8001c8e:	d92c      	bls.n	8001cea <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 8001c90:	4b5f      	ldr	r3, [pc, #380]	; (8001e10 <EXTI9_5_IRQHandler+0x1a0>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d112      	bne.n	8001cc0 <EXTI9_5_IRQHandler+0x50>
 8001c9a:	2140      	movs	r1, #64	; 0x40
 8001c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca0:	f001 fe8e 	bl	80039c0 <HAL_GPIO_ReadPin>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10a      	bne.n	8001cc0 <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 8001caa:	4b59      	ldr	r3, [pc, #356]	; (8001e10 <EXTI9_5_IRQHandler+0x1a0>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8001cb0:	f000 f958 	bl	8001f64 <HAL_GetTick>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4a55      	ldr	r2, [pc, #340]	; (8001e0c <EXTI9_5_IRQHandler+0x19c>)
 8001cb8:	6013      	str	r3, [r2, #0]

				middle_button_pressed = 1;
 8001cba:	4b56      	ldr	r3, [pc, #344]	; (8001e14 <EXTI9_5_IRQHandler+0x1a4>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 8001cc0:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <EXTI9_5_IRQHandler+0x1a0>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10f      	bne.n	8001cea <EXTI9_5_IRQHandler+0x7a>
 8001cca:	2140      	movs	r1, #64	; 0x40
 8001ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd0:	f001 fe76 	bl	80039c0 <HAL_GPIO_ReadPin>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d107      	bne.n	8001cea <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 8001cda:	f000 f943 	bl	8001f64 <HAL_GetTick>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4a4a      	ldr	r2, [pc, #296]	; (8001e0c <EXTI9_5_IRQHandler+0x19c>)
 8001ce2:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8001ce4:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <EXTI9_5_IRQHandler+0x1a0>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 8001cea:	4b47      	ldr	r3, [pc, #284]	; (8001e08 <EXTI9_5_IRQHandler+0x198>)
 8001cec:	2240      	movs	r2, #64	; 0x40
 8001cee:	615a      	str	r2, [r3, #20]
 8001cf0:	e07d      	b.n	8001dee <EXTI9_5_IRQHandler+0x17e>
	}
	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8001cf2:	4b45      	ldr	r3, [pc, #276]	; (8001e08 <EXTI9_5_IRQHandler+0x198>)
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d038      	beq.n	8001d70 <EXTI9_5_IRQHandler+0x100>

			if(HAL_GetTick() - ticks_pressed >= 20){
 8001cfe:	f000 f931 	bl	8001f64 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <EXTI9_5_IRQHandler+0x19c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b13      	cmp	r3, #19
 8001d0c:	d92c      	bls.n	8001d68 <EXTI9_5_IRQHandler+0xf8>
				// stable low state
				if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 8001d0e:	4b40      	ldr	r3, [pc, #256]	; (8001e10 <EXTI9_5_IRQHandler+0x1a0>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d112      	bne.n	8001d3e <EXTI9_5_IRQHandler+0xce>
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1e:	f001 fe4f 	bl	80039c0 <HAL_GPIO_ReadPin>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10a      	bne.n	8001d3e <EXTI9_5_IRQHandler+0xce>
					button_state =0 ; // stable low reached
 8001d28:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <EXTI9_5_IRQHandler+0x1a0>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
					ticks_pressed = HAL_GetTick() ;
 8001d2e:	f000 f919 	bl	8001f64 <HAL_GetTick>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4a35      	ldr	r2, [pc, #212]	; (8001e0c <EXTI9_5_IRQHandler+0x19c>)
 8001d36:	6013      	str	r3, [r2, #0]

					right_button_pressed = 1;
 8001d38:	4b37      	ldr	r3, [pc, #220]	; (8001e18 <EXTI9_5_IRQHandler+0x1a8>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
				}

				// stable high state
				if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 8001d3e:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <EXTI9_5_IRQHandler+0x1a0>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10f      	bne.n	8001d68 <EXTI9_5_IRQHandler+0xf8>
 8001d48:	2180      	movs	r1, #128	; 0x80
 8001d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4e:	f001 fe37 	bl	80039c0 <HAL_GPIO_ReadPin>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d107      	bne.n	8001d68 <EXTI9_5_IRQHandler+0xf8>
					ticks_pressed = HAL_GetTick() ;
 8001d58:	f000 f904 	bl	8001f64 <HAL_GetTick>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4a2b      	ldr	r2, [pc, #172]	; (8001e0c <EXTI9_5_IRQHandler+0x19c>)
 8001d60:	6013      	str	r3, [r2, #0]
					button_state =1 ; // stable high state
 8001d62:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <EXTI9_5_IRQHandler+0x1a0>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	701a      	strb	r2, [r3, #0]

				}
			}


			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <EXTI9_5_IRQHandler+0x198>)
 8001d6a:	2280      	movs	r2, #128	; 0x80
 8001d6c:	615a      	str	r2, [r3, #20]
 8001d6e:	e03e      	b.n	8001dee <EXTI9_5_IRQHandler+0x17e>
	}
	else{
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 8001d70:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <EXTI9_5_IRQHandler+0x198>)
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d038      	beq.n	8001dee <EXTI9_5_IRQHandler+0x17e>

				if(HAL_GetTick() - ticks_pressed >= 20){
 8001d7c:	f000 f8f2 	bl	8001f64 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <EXTI9_5_IRQHandler+0x19c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b13      	cmp	r3, #19
 8001d8a:	d92c      	bls.n	8001de6 <EXTI9_5_IRQHandler+0x176>
					// stable low state
					if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 8001d8c:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <EXTI9_5_IRQHandler+0x1a0>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d112      	bne.n	8001dbc <EXTI9_5_IRQHandler+0x14c>
 8001d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d9a:	4820      	ldr	r0, [pc, #128]	; (8001e1c <EXTI9_5_IRQHandler+0x1ac>)
 8001d9c:	f001 fe10 	bl	80039c0 <HAL_GPIO_ReadPin>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10a      	bne.n	8001dbc <EXTI9_5_IRQHandler+0x14c>
						button_state =0 ; // stable low reached
 8001da6:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <EXTI9_5_IRQHandler+0x1a0>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
						ticks_pressed = HAL_GetTick() ;
 8001dac:	f000 f8da 	bl	8001f64 <HAL_GetTick>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4a16      	ldr	r2, [pc, #88]	; (8001e0c <EXTI9_5_IRQHandler+0x19c>)
 8001db4:	6013      	str	r3, [r2, #0]

						left_button_pressed = 1;
 8001db6:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <EXTI9_5_IRQHandler+0x1b0>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
					}

					// stable high state
					if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <EXTI9_5_IRQHandler+0x1a0>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10f      	bne.n	8001de6 <EXTI9_5_IRQHandler+0x176>
 8001dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dca:	4814      	ldr	r0, [pc, #80]	; (8001e1c <EXTI9_5_IRQHandler+0x1ac>)
 8001dcc:	f001 fdf8 	bl	80039c0 <HAL_GPIO_ReadPin>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d107      	bne.n	8001de6 <EXTI9_5_IRQHandler+0x176>
						ticks_pressed = HAL_GetTick() ;
 8001dd6:	f000 f8c5 	bl	8001f64 <HAL_GetTick>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <EXTI9_5_IRQHandler+0x19c>)
 8001dde:	6013      	str	r3, [r2, #0]
						button_state =1 ; // stable high state
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <EXTI9_5_IRQHandler+0x1a0>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]

					}
				}
				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <EXTI9_5_IRQHandler+0x198>)
 8001de8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dec:	615a      	str	r2, [r3, #20]
			}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001dee:	2040      	movs	r0, #64	; 0x40
 8001df0:	f001 fe16 	bl	8003a20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001df4:	2080      	movs	r0, #128	; 0x80
 8001df6:	f001 fe13 	bl	8003a20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001dfa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001dfe:	f001 fe0f 	bl	8003a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40010400 	.word	0x40010400
 8001e0c:	20002320 	.word	0x20002320
 8001e10:	2000005b 	.word	0x2000005b
 8001e14:	20002324 	.word	0x20002324
 8001e18:	20002325 	.word	0x20002325
 8001e1c:	48000400 	.word	0x48000400
 8001e20:	20002326 	.word	0x20002326

08001e24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <USART2_IRQHandler+0x10>)
 8001e2a:	f004 fcd1 	bl	80067d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000260 	.word	0x20000260

08001e38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <SystemInit+0x20>)
 8001e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e42:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <SystemInit+0x20>)
 8001e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e94 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e60:	f7ff ffea 	bl	8001e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e64:	480c      	ldr	r0, [pc, #48]	; (8001e98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e66:	490d      	ldr	r1, [pc, #52]	; (8001e9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e68:	4a0d      	ldr	r2, [pc, #52]	; (8001ea0 <LoopForever+0xe>)
  movs r3, #0
 8001e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e6c:	e002      	b.n	8001e74 <LoopCopyDataInit>

08001e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e72:	3304      	adds	r3, #4

08001e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e78:	d3f9      	bcc.n	8001e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e7c:	4c0a      	ldr	r4, [pc, #40]	; (8001ea8 <LoopForever+0x16>)
  movs r3, #0
 8001e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e80:	e001      	b.n	8001e86 <LoopFillZerobss>

08001e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e84:	3204      	adds	r2, #4

08001e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e88:	d3fb      	bcc.n	8001e82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e8a:	f005 ff0f 	bl	8007cac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e8e:	f7fe ff35 	bl	8000cfc <main>

08001e92 <LoopForever>:

LoopForever:
    b LoopForever
 8001e92:	e7fe      	b.n	8001e92 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e94:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e9c:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001ea0:	080080e4 	.word	0x080080e4
  ldr r2, =_sbss
 8001ea4:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001ea8:	2000232c 	.word	0x2000232c

08001eac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001eac:	e7fe      	b.n	8001eac <ADC1_2_IRQHandler>
	...

08001eb0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <HAL_Init+0x28>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a07      	ldr	r2, [pc, #28]	; (8001ed8 <HAL_Init+0x28>)
 8001eba:	f043 0310 	orr.w	r3, r3, #16
 8001ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec0:	2003      	movs	r0, #3
 8001ec2:	f001 f987 	bl	80031d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f000 f808 	bl	8001edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ecc:	f7ff fce2 	bl	8001894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40022000 	.word	0x40022000

08001edc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_InitTick+0x54>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_InitTick+0x58>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	4619      	mov	r1, r3
 8001eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	f001 f99f 	bl	800323e <HAL_SYSTICK_Config>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00e      	b.n	8001f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b0f      	cmp	r3, #15
 8001f0e:	d80a      	bhi.n	8001f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f10:	2200      	movs	r2, #0
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	f04f 30ff 	mov.w	r0, #4294967295
 8001f18:	f001 f967 	bl	80031ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f1c:	4a06      	ldr	r2, [pc, #24]	; (8001f38 <HAL_InitTick+0x5c>)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	e000      	b.n	8001f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	2000005c 	.word	0x2000005c
 8001f34:	20000064 	.word	0x20000064
 8001f38:	20000060 	.word	0x20000060

08001f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_IncTick+0x20>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_IncTick+0x24>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <HAL_IncTick+0x24>)
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000064 	.word	0x20000064
 8001f60:	20002328 	.word	0x20002328

08001f64 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return uwTick;  
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <HAL_GetTick+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20002328 	.word	0x20002328

08001f7c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f84:	f7ff ffee 	bl	8001f64 <HAL_GetTick>
 8001f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f94:	d005      	beq.n	8001fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_Delay+0x44>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001fa2:	bf00      	nop
 8001fa4:	f7ff ffde 	bl	8001f64 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d8f7      	bhi.n	8001fa4 <HAL_Delay+0x28>
  {
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000064 	.word	0x20000064

08001fc4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b09a      	sub	sp, #104	; 0x68
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e1e3      	b.n	80023d4 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	2b00      	cmp	r3, #0
 800201c:	d176      	bne.n	800210c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	2b00      	cmp	r3, #0
 8002024:	d152      	bne.n	80020cc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff fc4b 	bl	80018dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d13b      	bne.n	80020cc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 ff87 	bl	8002f68 <ADC_Disable>
 800205a:	4603      	mov	r3, r0
 800205c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	2b00      	cmp	r3, #0
 800206a:	d12f      	bne.n	80020cc <HAL_ADC_Init+0xe0>
 800206c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002070:	2b00      	cmp	r3, #0
 8002072:	d12b      	bne.n	80020cc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800207c:	f023 0302 	bic.w	r3, r3, #2
 8002080:	f043 0202 	orr.w	r2, r3, #2
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002096:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020a6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020a8:	4b92      	ldr	r3, [pc, #584]	; (80022f4 <HAL_ADC_Init+0x308>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a92      	ldr	r2, [pc, #584]	; (80022f8 <HAL_ADC_Init+0x30c>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	0c9a      	lsrs	r2, r3, #18
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020be:	e002      	b.n	80020c6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f9      	bne.n	80020c0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d007      	beq.n	80020ea <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80020e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020e8:	d110      	bne.n	800210c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f023 0312 	bic.w	r3, r3, #18
 80020f2:	f043 0210 	orr.w	r2, r3, #16
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	f043 0201 	orr.w	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b00      	cmp	r3, #0
 8002116:	f040 8150 	bne.w	80023ba <HAL_ADC_Init+0x3ce>
 800211a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800211e:	2b00      	cmp	r3, #0
 8002120:	f040 814b 	bne.w	80023ba <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800212e:	2b00      	cmp	r3, #0
 8002130:	f040 8143 	bne.w	80023ba <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800213c:	f043 0202 	orr.w	r2, r3, #2
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800214c:	d004      	beq.n	8002158 <HAL_ADC_Init+0x16c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a6a      	ldr	r2, [pc, #424]	; (80022fc <HAL_ADC_Init+0x310>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_ADC_Init+0x170>
 8002158:	4b69      	ldr	r3, [pc, #420]	; (8002300 <HAL_ADC_Init+0x314>)
 800215a:	e000      	b.n	800215e <HAL_ADC_Init+0x172>
 800215c:	4b69      	ldr	r3, [pc, #420]	; (8002304 <HAL_ADC_Init+0x318>)
 800215e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002168:	d102      	bne.n	8002170 <HAL_ADC_Init+0x184>
 800216a:	4b64      	ldr	r3, [pc, #400]	; (80022fc <HAL_ADC_Init+0x310>)
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	e01a      	b.n	80021a6 <HAL_ADC_Init+0x1ba>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a61      	ldr	r2, [pc, #388]	; (80022fc <HAL_ADC_Init+0x310>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d103      	bne.n	8002182 <HAL_ADC_Init+0x196>
 800217a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	e011      	b.n	80021a6 <HAL_ADC_Init+0x1ba>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a60      	ldr	r2, [pc, #384]	; (8002308 <HAL_ADC_Init+0x31c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d102      	bne.n	8002192 <HAL_ADC_Init+0x1a6>
 800218c:	4b5f      	ldr	r3, [pc, #380]	; (800230c <HAL_ADC_Init+0x320>)
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	e009      	b.n	80021a6 <HAL_ADC_Init+0x1ba>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a5d      	ldr	r2, [pc, #372]	; (800230c <HAL_ADC_Init+0x320>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d102      	bne.n	80021a2 <HAL_ADC_Init+0x1b6>
 800219c:	4b5a      	ldr	r3, [pc, #360]	; (8002308 <HAL_ADC_Init+0x31c>)
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	e001      	b.n	80021a6 <HAL_ADC_Init+0x1ba>
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d108      	bne.n	80021c6 <HAL_ADC_Init+0x1da>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_Init+0x1da>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_ADC_Init+0x1dc>
 80021c6:	2300      	movs	r3, #0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d11c      	bne.n	8002206 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021cc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d010      	beq.n	80021f4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d107      	bne.n	80021ee <HAL_ADC_Init+0x202>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_Init+0x202>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_ADC_Init+0x204>
 80021ee:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d108      	bne.n	8002206 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80021f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	431a      	orrs	r2, r3
 8002202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002204:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	7e5b      	ldrb	r3, [r3, #25]
 800220a:	035b      	lsls	r3, r3, #13
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002210:	2a01      	cmp	r2, #1
 8002212:	d002      	beq.n	800221a <HAL_ADC_Init+0x22e>
 8002214:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002218:	e000      	b.n	800221c <HAL_ADC_Init+0x230>
 800221a:	2200      	movs	r2, #0
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4313      	orrs	r3, r2
 800222a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800222c:	4313      	orrs	r3, r2
 800222e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d11b      	bne.n	8002272 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7e5b      	ldrb	r3, [r3, #25]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	3b01      	subs	r3, #1
 8002248:	045a      	lsls	r2, r3, #17
 800224a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800224c:	4313      	orrs	r3, r2
 800224e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002252:	663b      	str	r3, [r7, #96]	; 0x60
 8002254:	e00d      	b.n	8002272 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800225e:	f043 0220 	orr.w	r2, r3, #32
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	f043 0201 	orr.w	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	2b01      	cmp	r3, #1
 8002278:	d054      	beq.n	8002324 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a22      	ldr	r2, [pc, #136]	; (8002308 <HAL_ADC_Init+0x31c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d004      	beq.n	800228e <HAL_ADC_Init+0x2a2>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a20      	ldr	r2, [pc, #128]	; (800230c <HAL_ADC_Init+0x320>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d140      	bne.n	8002310 <HAL_ADC_Init+0x324>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002292:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002296:	d02a      	beq.n	80022ee <HAL_ADC_Init+0x302>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a0:	d022      	beq.n	80022e8 <HAL_ADC_Init+0x2fc>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80022aa:	d01a      	beq.n	80022e2 <HAL_ADC_Init+0x2f6>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80022b4:	d012      	beq.n	80022dc <HAL_ADC_Init+0x2f0>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80022be:	d00a      	beq.n	80022d6 <HAL_ADC_Init+0x2ea>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c4:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80022c8:	d002      	beq.n	80022d0 <HAL_ADC_Init+0x2e4>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	e023      	b.n	8002318 <HAL_ADC_Init+0x32c>
 80022d0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80022d4:	e020      	b.n	8002318 <HAL_ADC_Init+0x32c>
 80022d6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80022da:	e01d      	b.n	8002318 <HAL_ADC_Init+0x32c>
 80022dc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80022e0:	e01a      	b.n	8002318 <HAL_ADC_Init+0x32c>
 80022e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e6:	e017      	b.n	8002318 <HAL_ADC_Init+0x32c>
 80022e8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80022ec:	e014      	b.n	8002318 <HAL_ADC_Init+0x32c>
 80022ee:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80022f2:	e011      	b.n	8002318 <HAL_ADC_Init+0x32c>
 80022f4:	2000005c 	.word	0x2000005c
 80022f8:	431bde83 	.word	0x431bde83
 80022fc:	50000100 	.word	0x50000100
 8002300:	50000300 	.word	0x50000300
 8002304:	50000700 	.word	0x50000700
 8002308:	50000400 	.word	0x50000400
 800230c:	50000500 	.word	0x50000500
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800231c:	4313      	orrs	r3, r2
 800231e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002320:	4313      	orrs	r3, r2
 8002322:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b00      	cmp	r3, #0
 8002330:	d114      	bne.n	800235c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002340:	f023 0302 	bic.w	r3, r3, #2
 8002344:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	7e1b      	ldrb	r3, [r3, #24]
 800234a:	039a      	lsls	r2, r3, #14
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4313      	orrs	r3, r2
 8002356:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002358:	4313      	orrs	r3, r2
 800235a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <HAL_ADC_Init+0x3f0>)
 8002364:	4013      	ands	r3, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800236c:	430b      	orrs	r3, r1
 800236e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d10c      	bne.n	8002392 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f023 010f 	bic.w	r1, r3, #15
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	1e5a      	subs	r2, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
 8002390:	e007      	b.n	80023a2 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 020f 	bic.w	r2, r2, #15
 80023a0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	f023 0303 	bic.w	r3, r3, #3
 80023b0:	f043 0201 	orr.w	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40
 80023b8:	e00a      	b.n	80023d0 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f023 0312 	bic.w	r3, r3, #18
 80023c2:	f043 0210 	orr.w	r2, r3, #16
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80023ca:	2301      	movs	r3, #1
 80023cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80023d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3768      	adds	r7, #104	; 0x68
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	fff0c007 	.word	0xfff0c007

080023e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f040 80f7 	bne.w	80025ee <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_ADC_Start_DMA+0x2e>
 800240a:	2302      	movs	r3, #2
 800240c:	e0f2      	b.n	80025f4 <HAL_ADC_Start_DMA+0x214>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800241e:	d004      	beq.n	800242a <HAL_ADC_Start_DMA+0x4a>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a75      	ldr	r2, [pc, #468]	; (80025fc <HAL_ADC_Start_DMA+0x21c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d109      	bne.n	800243e <HAL_ADC_Start_DMA+0x5e>
 800242a:	4b75      	ldr	r3, [pc, #468]	; (8002600 <HAL_ADC_Start_DMA+0x220>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	2b00      	cmp	r3, #0
 8002434:	bf0c      	ite	eq
 8002436:	2301      	moveq	r3, #1
 8002438:	2300      	movne	r3, #0
 800243a:	b2db      	uxtb	r3, r3
 800243c:	e008      	b.n	8002450 <HAL_ADC_Start_DMA+0x70>
 800243e:	4b71      	ldr	r3, [pc, #452]	; (8002604 <HAL_ADC_Start_DMA+0x224>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	2b00      	cmp	r3, #0
 8002448:	bf0c      	ite	eq
 800244a:	2301      	moveq	r3, #1
 800244c:	2300      	movne	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80c5 	beq.w	80025e0 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fd22 	bl	8002ea0 <ADC_Enable>
 800245c:	4603      	mov	r3, r0
 800245e:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002460:	7dfb      	ldrb	r3, [r7, #23]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 80b7 	bne.w	80025d6 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002470:	f023 0301 	bic.w	r3, r3, #1
 8002474:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002484:	d004      	beq.n	8002490 <HAL_ADC_Start_DMA+0xb0>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a5c      	ldr	r2, [pc, #368]	; (80025fc <HAL_ADC_Start_DMA+0x21c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d106      	bne.n	800249e <HAL_ADC_Start_DMA+0xbe>
 8002490:	4b5b      	ldr	r3, [pc, #364]	; (8002600 <HAL_ADC_Start_DMA+0x220>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	2b00      	cmp	r3, #0
 800249a:	d010      	beq.n	80024be <HAL_ADC_Start_DMA+0xde>
 800249c:	e005      	b.n	80024aa <HAL_ADC_Start_DMA+0xca>
 800249e:	4b59      	ldr	r3, [pc, #356]	; (8002604 <HAL_ADC_Start_DMA+0x224>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 031f 	and.w	r3, r3, #31
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d009      	beq.n	80024be <HAL_ADC_Start_DMA+0xde>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024b2:	d004      	beq.n	80024be <HAL_ADC_Start_DMA+0xde>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a53      	ldr	r2, [pc, #332]	; (8002608 <HAL_ADC_Start_DMA+0x228>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d115      	bne.n	80024ea <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d036      	beq.n	8002546 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80024e8:	e02d      	b.n	8002546 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024fe:	d004      	beq.n	800250a <HAL_ADC_Start_DMA+0x12a>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a3d      	ldr	r2, [pc, #244]	; (80025fc <HAL_ADC_Start_DMA+0x21c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d10a      	bne.n	8002520 <HAL_ADC_Start_DMA+0x140>
 800250a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	bf14      	ite	ne
 8002518:	2301      	movne	r3, #1
 800251a:	2300      	moveq	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	e008      	b.n	8002532 <HAL_ADC_Start_DMA+0x152>
 8002520:	4b39      	ldr	r3, [pc, #228]	; (8002608 <HAL_ADC_Start_DMA+0x228>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf14      	ite	ne
 800252c:	2301      	movne	r3, #1
 800252e:	2300      	moveq	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800253e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800254e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002552:	d106      	bne.n	8002562 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002558:	f023 0206 	bic.w	r2, r3, #6
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	645a      	str	r2, [r3, #68]	; 0x44
 8002560:	e002      	b.n	8002568 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002574:	4a25      	ldr	r2, [pc, #148]	; (800260c <HAL_ADC_Start_DMA+0x22c>)
 8002576:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257c:	4a24      	ldr	r2, [pc, #144]	; (8002610 <HAL_ADC_Start_DMA+0x230>)
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	4a23      	ldr	r2, [pc, #140]	; (8002614 <HAL_ADC_Start_DMA+0x234>)
 8002586:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	221c      	movs	r2, #28
 800258e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0210 	orr.w	r2, r2, #16
 800259e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	3340      	adds	r3, #64	; 0x40
 80025ba:	4619      	mov	r1, r3
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f000 fe90 	bl	80032e4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0204 	orr.w	r2, r2, #4
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	e00d      	b.n	80025f2 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80025de:	e008      	b.n	80025f2 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80025ec:	e001      	b.n	80025f2 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
 80025f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	50000100 	.word	0x50000100
 8002600:	50000300 	.word	0x50000300
 8002604:	50000700 	.word	0x50000700
 8002608:	50000400 	.word	0x50000400
 800260c:	08002dd5 	.word	0x08002dd5
 8002610:	08002e4f 	.word	0x08002e4f
 8002614:	08002e6b 	.word	0x08002e6b

08002618 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002618:	b480      	push	{r7}
 800261a:	b09b      	sub	sp, #108	; 0x6c
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_ADC_ConfigChannel+0x22>
 8002636:	2302      	movs	r3, #2
 8002638:	e2ca      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x5b8>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	f040 82ae 	bne.w	8002bae <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b04      	cmp	r3, #4
 8002658:	d81c      	bhi.n	8002694 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	461a      	mov	r2, r3
 800266e:	231f      	movs	r3, #31
 8002670:	4093      	lsls	r3, r2
 8002672:	43db      	mvns	r3, r3
 8002674:	4019      	ands	r1, r3
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	fa00 f203 	lsl.w	r2, r0, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	631a      	str	r2, [r3, #48]	; 0x30
 8002692:	e063      	b.n	800275c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b09      	cmp	r3, #9
 800269a:	d81e      	bhi.n	80026da <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4413      	add	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	3b1e      	subs	r3, #30
 80026b0:	221f      	movs	r2, #31
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	4019      	ands	r1, r3
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	3b1e      	subs	r3, #30
 80026cc:	fa00 f203 	lsl.w	r2, r0, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	635a      	str	r2, [r3, #52]	; 0x34
 80026d8:	e040      	b.n	800275c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b0e      	cmp	r3, #14
 80026e0:	d81e      	bhi.n	8002720 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	3b3c      	subs	r3, #60	; 0x3c
 80026f6:	221f      	movs	r2, #31
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	4019      	ands	r1, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	3b3c      	subs	r3, #60	; 0x3c
 8002712:	fa00 f203 	lsl.w	r2, r0, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	639a      	str	r2, [r3, #56]	; 0x38
 800271e:	e01d      	b.n	800275c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	3b5a      	subs	r3, #90	; 0x5a
 8002734:	221f      	movs	r2, #31
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	4019      	ands	r1, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	3b5a      	subs	r3, #90	; 0x5a
 8002750:	fa00 f203 	lsl.w	r2, r0, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b00      	cmp	r3, #0
 8002768:	f040 80e5 	bne.w	8002936 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b09      	cmp	r3, #9
 8002772:	d91c      	bls.n	80027ae <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6999      	ldr	r1, [r3, #24]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	3b1e      	subs	r3, #30
 8002786:	2207      	movs	r2, #7
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	4019      	ands	r1, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	6898      	ldr	r0, [r3, #8]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4613      	mov	r3, r2
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4413      	add	r3, r2
 800279e:	3b1e      	subs	r3, #30
 80027a0:	fa00 f203 	lsl.w	r2, r0, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	619a      	str	r2, [r3, #24]
 80027ac:	e019      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6959      	ldr	r1, [r3, #20]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	2207      	movs	r2, #7
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	4019      	ands	r1, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	6898      	ldr	r0, [r3, #8]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4613      	mov	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	fa00 f203 	lsl.w	r2, r0, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	695a      	ldr	r2, [r3, #20]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	08db      	lsrs	r3, r3, #3
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	3b01      	subs	r3, #1
 8002800:	2b03      	cmp	r3, #3
 8002802:	d84f      	bhi.n	80028a4 <HAL_ADC_ConfigChannel+0x28c>
 8002804:	a201      	add	r2, pc, #4	; (adr r2, 800280c <HAL_ADC_ConfigChannel+0x1f4>)
 8002806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280a:	bf00      	nop
 800280c:	0800281d 	.word	0x0800281d
 8002810:	0800283f 	.word	0x0800283f
 8002814:	08002861 	.word	0x08002861
 8002818:	08002883 	.word	0x08002883
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002822:	4b9a      	ldr	r3, [pc, #616]	; (8002a8c <HAL_ADC_ConfigChannel+0x474>)
 8002824:	4013      	ands	r3, r2
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	0691      	lsls	r1, r2, #26
 800282c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800282e:	430a      	orrs	r2, r1
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800283a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800283c:	e07e      	b.n	800293c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002844:	4b91      	ldr	r3, [pc, #580]	; (8002a8c <HAL_ADC_ConfigChannel+0x474>)
 8002846:	4013      	ands	r3, r2
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	0691      	lsls	r1, r2, #26
 800284e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002850:	430a      	orrs	r2, r1
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800285c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800285e:	e06d      	b.n	800293c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002866:	4b89      	ldr	r3, [pc, #548]	; (8002a8c <HAL_ADC_ConfigChannel+0x474>)
 8002868:	4013      	ands	r3, r2
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	0691      	lsls	r1, r2, #26
 8002870:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002872:	430a      	orrs	r2, r1
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800287e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002880:	e05c      	b.n	800293c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002888:	4b80      	ldr	r3, [pc, #512]	; (8002a8c <HAL_ADC_ConfigChannel+0x474>)
 800288a:	4013      	ands	r3, r2
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	0691      	lsls	r1, r2, #26
 8002892:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002894:	430a      	orrs	r2, r1
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028a0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80028a2:	e04b      	b.n	800293c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	069b      	lsls	r3, r3, #26
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d107      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028c6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	069b      	lsls	r3, r3, #26
 80028d8:	429a      	cmp	r2, r3
 80028da:	d107      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028ea:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	069b      	lsls	r3, r3, #26
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d107      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800290e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002916:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	069b      	lsls	r3, r3, #26
 8002920:	429a      	cmp	r2, r3
 8002922:	d10a      	bne.n	800293a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002932:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002934:	e001      	b.n	800293a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002936:	bf00      	nop
 8002938:	e000      	b.n	800293c <HAL_ADC_ConfigChannel+0x324>
      break;
 800293a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d108      	bne.n	800295c <HAL_ADC_ConfigChannel+0x344>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_ADC_ConfigChannel+0x344>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <HAL_ADC_ConfigChannel+0x346>
 800295c:	2300      	movs	r3, #0
 800295e:	2b00      	cmp	r3, #0
 8002960:	f040 8130 	bne.w	8002bc4 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d00f      	beq.n	800298c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2201      	movs	r2, #1
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	400a      	ands	r2, r1
 8002986:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800298a:	e049      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2201      	movs	r2, #1
 800299a:	409a      	lsls	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b09      	cmp	r3, #9
 80029ac:	d91c      	bls.n	80029e8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6999      	ldr	r1, [r3, #24]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	3b1b      	subs	r3, #27
 80029c0:	2207      	movs	r2, #7
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	4019      	ands	r1, r3
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6898      	ldr	r0, [r3, #8]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	4613      	mov	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4413      	add	r3, r2
 80029d8:	3b1b      	subs	r3, #27
 80029da:	fa00 f203 	lsl.w	r2, r0, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	619a      	str	r2, [r3, #24]
 80029e6:	e01b      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6959      	ldr	r1, [r3, #20]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	4613      	mov	r3, r2
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4413      	add	r3, r2
 80029fa:	2207      	movs	r2, #7
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	4019      	ands	r1, r3
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	6898      	ldr	r0, [r3, #8]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	4613      	mov	r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4413      	add	r3, r2
 8002a14:	fa00 f203 	lsl.w	r2, r0, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a28:	d004      	beq.n	8002a34 <HAL_ADC_ConfigChannel+0x41c>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a18      	ldr	r2, [pc, #96]	; (8002a90 <HAL_ADC_ConfigChannel+0x478>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x420>
 8002a34:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <HAL_ADC_ConfigChannel+0x47c>)
 8002a36:	e000      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x422>
 8002a38:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <HAL_ADC_ConfigChannel+0x480>)
 8002a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d105      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d015      	beq.n	8002a7c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a54:	2b11      	cmp	r3, #17
 8002a56:	d105      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00b      	beq.n	8002a7c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a68:	2b12      	cmp	r3, #18
 8002a6a:	f040 80ab 	bne.w	8002bc4 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f040 80a4 	bne.w	8002bc4 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a84:	d10a      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x484>
 8002a86:	4b02      	ldr	r3, [pc, #8]	; (8002a90 <HAL_ADC_ConfigChannel+0x478>)
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	e022      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x4ba>
 8002a8c:	83fff000 	.word	0x83fff000
 8002a90:	50000100 	.word	0x50000100
 8002a94:	50000300 	.word	0x50000300
 8002a98:	50000700 	.word	0x50000700
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a4e      	ldr	r2, [pc, #312]	; (8002bdc <HAL_ADC_ConfigChannel+0x5c4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d103      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x496>
 8002aa6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	e011      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x4ba>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a4b      	ldr	r2, [pc, #300]	; (8002be0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d102      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x4a6>
 8002ab8:	4b4a      	ldr	r3, [pc, #296]	; (8002be4 <HAL_ADC_ConfigChannel+0x5cc>)
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	e009      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x4ba>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a48      	ldr	r2, [pc, #288]	; (8002be4 <HAL_ADC_ConfigChannel+0x5cc>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d102      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x4b6>
 8002ac8:	4b45      	ldr	r3, [pc, #276]	; (8002be0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	e001      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x4ba>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d108      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x4da>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x4da>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x4dc>
 8002af2:	2300      	movs	r3, #0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d150      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002af8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d010      	beq.n	8002b20 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d107      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x502>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x502>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x504>
 8002b1a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d13c      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b10      	cmp	r3, #16
 8002b26:	d11d      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x54c>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b30:	d118      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b3c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b3e:	4b2a      	ldr	r3, [pc, #168]	; (8002be8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a2a      	ldr	r2, [pc, #168]	; (8002bec <HAL_ADC_ConfigChannel+0x5d4>)
 8002b44:	fba2 2303 	umull	r2, r3, r2, r3
 8002b48:	0c9a      	lsrs	r2, r3, #18
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b54:	e002      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f9      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b62:	e02e      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b11      	cmp	r3, #17
 8002b6a:	d10b      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x56c>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b74:	d106      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b80:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b82:	e01e      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b12      	cmp	r3, #18
 8002b8a:	d11a      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b96:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b98:	e013      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f043 0220 	orr.w	r2, r3, #32
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002bac:	e00a      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f043 0220 	orr.w	r2, r3, #32
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002bc0:	e000      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bc2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002bcc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	376c      	adds	r7, #108	; 0x6c
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	50000100 	.word	0x50000100
 8002be0:	50000400 	.word	0x50000400
 8002be4:	50000500 	.word	0x50000500
 8002be8:	2000005c 	.word	0x2000005c
 8002bec:	431bde83 	.word	0x431bde83

08002bf0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b099      	sub	sp, #100	; 0x64
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c08:	d102      	bne.n	8002c10 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002c0a:	4b6d      	ldr	r3, [pc, #436]	; (8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	e01a      	b.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a6a      	ldr	r2, [pc, #424]	; (8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d103      	bne.n	8002c22 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002c1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	e011      	b.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a67      	ldr	r2, [pc, #412]	; (8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d102      	bne.n	8002c32 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c2c:	4b66      	ldr	r3, [pc, #408]	; (8002dc8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	e009      	b.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a64      	ldr	r2, [pc, #400]	; (8002dc8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d102      	bne.n	8002c42 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002c3c:	4b61      	ldr	r3, [pc, #388]	; (8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	e001      	b.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002c42:	2300      	movs	r3, #0
 8002c44:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0b0      	b.n	8002db2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e0a9      	b.n	8002db2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f040 808d 	bne.w	8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f040 8086 	bne.w	8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c8c:	d004      	beq.n	8002c98 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a4b      	ldr	r2, [pc, #300]	; (8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d101      	bne.n	8002c9c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002c98:	4b4c      	ldr	r3, [pc, #304]	; (8002dcc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002c9a:	e000      	b.n	8002c9e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002c9c:	4b4c      	ldr	r3, [pc, #304]	; (8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002c9e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d040      	beq.n	8002d2a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002ca8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	6859      	ldr	r1, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cba:	035b      	lsls	r3, r3, #13
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d108      	bne.n	8002ce4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d15c      	bne.n	8002da4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d107      	bne.n	8002d06 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002d06:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d14b      	bne.n	8002da4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002d0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d14:	f023 030f 	bic.w	r3, r3, #15
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	6811      	ldr	r1, [r2, #0]
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	6892      	ldr	r2, [r2, #8]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	431a      	orrs	r2, r3
 8002d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d26:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d28:	e03c      	b.n	8002da4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d34:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d108      	bne.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002d56:	2300      	movs	r3, #0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d123      	bne.n	8002da4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d107      	bne.n	8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002d78:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d112      	bne.n	8002da4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002d7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d86:	f023 030f 	bic.w	r3, r3, #15
 8002d8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d8c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d8e:	e009      	b.n	8002da4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f043 0220 	orr.w	r2, r3, #32
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002da2:	e000      	b.n	8002da6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002da4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002dae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002db2:	4618      	mov	r0, r3
 8002db4:	3764      	adds	r7, #100	; 0x64
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	50000100 	.word	0x50000100
 8002dc4:	50000400 	.word	0x50000400
 8002dc8:	50000500 	.word	0x50000500
 8002dcc:	50000300 	.word	0x50000300
 8002dd0:	50000700 	.word	0x50000700

08002dd4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d126      	bne.n	8002e3c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d115      	bne.n	8002e34 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d111      	bne.n	8002e34 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	f043 0201 	orr.w	r2, r3, #1
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f7fe fd17 	bl	8001868 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002e3a:	e004      	b.n	8002e46 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	4798      	blx	r3
}
 8002e46:	bf00      	nop
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f7ff f8b1 	bl	8001fc4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e88:	f043 0204 	orr.w	r2, r3, #4
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f7ff f8a1 	bl	8001fd8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e96:	bf00      	nop
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d108      	bne.n	8002ecc <ADC_Enable+0x2c>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <ADC_Enable+0x2c>
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <ADC_Enable+0x2e>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d143      	bne.n	8002f5a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <ADC_Enable+0xc4>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00d      	beq.n	8002efc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f043 0210 	orr.w	r2, r3, #16
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef0:	f043 0201 	orr.w	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e02f      	b.n	8002f5c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002f0c:	f7ff f82a 	bl	8001f64 <HAL_GetTick>
 8002f10:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f12:	e01b      	b.n	8002f4c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f14:	f7ff f826 	bl	8001f64 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d914      	bls.n	8002f4c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d00d      	beq.n	8002f4c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	f043 0210 	orr.w	r2, r3, #16
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f40:	f043 0201 	orr.w	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e007      	b.n	8002f5c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d1dc      	bne.n	8002f14 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	8000003f 	.word	0x8000003f

08002f68 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d108      	bne.n	8002f94 <ADC_Disable+0x2c>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <ADC_Disable+0x2c>
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <ADC_Disable+0x2e>
 8002f94:	2300      	movs	r3, #0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d047      	beq.n	800302a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 030d 	and.w	r3, r3, #13
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d10f      	bne.n	8002fc8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0202 	orr.w	r2, r2, #2
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002fc0:	f7fe ffd0 	bl	8001f64 <HAL_GetTick>
 8002fc4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002fc6:	e029      	b.n	800301c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	f043 0210 	orr.w	r2, r3, #16
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	f043 0201 	orr.w	r2, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e023      	b.n	800302c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fe4:	f7fe ffbe 	bl	8001f64 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d914      	bls.n	800301c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d10d      	bne.n	800301c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	f043 0210 	orr.w	r2, r3, #16
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003010:	f043 0201 	orr.w	r2, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e007      	b.n	800302c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b01      	cmp	r3, #1
 8003028:	d0dc      	beq.n	8002fe4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003044:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <__NVIC_SetPriorityGrouping+0x44>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003050:	4013      	ands	r3, r2
 8003052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800305c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003066:	4a04      	ldr	r2, [pc, #16]	; (8003078 <__NVIC_SetPriorityGrouping+0x44>)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	60d3      	str	r3, [r2, #12]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003080:	4b04      	ldr	r3, [pc, #16]	; (8003094 <__NVIC_GetPriorityGrouping+0x18>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	0a1b      	lsrs	r3, r3, #8
 8003086:	f003 0307 	and.w	r3, r3, #7
}
 800308a:	4618      	mov	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	db0b      	blt.n	80030c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	f003 021f 	and.w	r2, r3, #31
 80030b0:	4907      	ldr	r1, [pc, #28]	; (80030d0 <__NVIC_EnableIRQ+0x38>)
 80030b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	2001      	movs	r0, #1
 80030ba:	fa00 f202 	lsl.w	r2, r0, r2
 80030be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	e000e100 	.word	0xe000e100

080030d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	6039      	str	r1, [r7, #0]
 80030de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	db0a      	blt.n	80030fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	490c      	ldr	r1, [pc, #48]	; (8003120 <__NVIC_SetPriority+0x4c>)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	0112      	lsls	r2, r2, #4
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	440b      	add	r3, r1
 80030f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030fc:	e00a      	b.n	8003114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	b2da      	uxtb	r2, r3
 8003102:	4908      	ldr	r1, [pc, #32]	; (8003124 <__NVIC_SetPriority+0x50>)
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	3b04      	subs	r3, #4
 800310c:	0112      	lsls	r2, r2, #4
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	440b      	add	r3, r1
 8003112:	761a      	strb	r2, [r3, #24]
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	e000e100 	.word	0xe000e100
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003128:	b480      	push	{r7}
 800312a:	b089      	sub	sp, #36	; 0x24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f1c3 0307 	rsb	r3, r3, #7
 8003142:	2b04      	cmp	r3, #4
 8003144:	bf28      	it	cs
 8003146:	2304      	movcs	r3, #4
 8003148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3304      	adds	r3, #4
 800314e:	2b06      	cmp	r3, #6
 8003150:	d902      	bls.n	8003158 <NVIC_EncodePriority+0x30>
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3b03      	subs	r3, #3
 8003156:	e000      	b.n	800315a <NVIC_EncodePriority+0x32>
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800315c:	f04f 32ff 	mov.w	r2, #4294967295
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43da      	mvns	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	401a      	ands	r2, r3
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003170:	f04f 31ff 	mov.w	r1, #4294967295
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	fa01 f303 	lsl.w	r3, r1, r3
 800317a:	43d9      	mvns	r1, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003180:	4313      	orrs	r3, r2
         );
}
 8003182:	4618      	mov	r0, r3
 8003184:	3724      	adds	r7, #36	; 0x24
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031a0:	d301      	bcc.n	80031a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031a2:	2301      	movs	r3, #1
 80031a4:	e00f      	b.n	80031c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031a6:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <SysTick_Config+0x40>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ae:	210f      	movs	r1, #15
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295
 80031b4:	f7ff ff8e 	bl	80030d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <SysTick_Config+0x40>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031be:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <SysTick_Config+0x40>)
 80031c0:	2207      	movs	r2, #7
 80031c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	e000e010 	.word	0xe000e010

080031d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff ff29 	bl	8003034 <__NVIC_SetPriorityGrouping>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b086      	sub	sp, #24
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	4603      	mov	r3, r0
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031fc:	f7ff ff3e 	bl	800307c <__NVIC_GetPriorityGrouping>
 8003200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	6978      	ldr	r0, [r7, #20]
 8003208:	f7ff ff8e 	bl	8003128 <NVIC_EncodePriority>
 800320c:	4602      	mov	r2, r0
 800320e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff5d 	bl	80030d4 <__NVIC_SetPriority>
}
 800321a:	bf00      	nop
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	4603      	mov	r3, r0
 800322a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff31 	bl	8003098 <__NVIC_EnableIRQ>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff ffa2 	bl	8003190 <SysTick_Config>
 800324c:	4603      	mov	r3, r0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e037      	b.n	80032dc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003282:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003286:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003290:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800329c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f9b8 	bl	8003634 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}  
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_DMA_Start_IT+0x20>
 8003300:	2302      	movs	r3, #2
 8003302:	e04a      	b.n	800339a <HAL_DMA_Start_IT+0xb6>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003312:	2b01      	cmp	r3, #1
 8003314:	d13a      	bne.n	800338c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2202      	movs	r2, #2
 800331a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0201 	bic.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f94b 	bl	80035d6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 020e 	orr.w	r2, r2, #14
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	e00f      	b.n	800337a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 020a 	orr.w	r2, r2, #10
 8003368:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0204 	bic.w	r2, r2, #4
 8003378:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0201 	orr.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	e005      	b.n	8003398 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003394:	2302      	movs	r3, #2
 8003396:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003398:	7dfb      	ldrb	r3, [r7, #23]
} 
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d008      	beq.n	80033c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2204      	movs	r2, #4
 80033b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e020      	b.n	8003408 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 020e 	bic.w	r2, r2, #14
 80033d4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ee:	2101      	movs	r1, #1
 80033f0:	fa01 f202 	lsl.w	r2, r1, r2
 80033f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003426:	2b02      	cmp	r3, #2
 8003428:	d005      	beq.n	8003436 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2204      	movs	r2, #4
 800342e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
 8003434:	e027      	b.n	8003486 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 020e 	bic.w	r2, r2, #14
 8003444:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0201 	bic.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345e:	2101      	movs	r1, #1
 8003460:	fa01 f202 	lsl.w	r2, r1, r2
 8003464:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	4798      	blx	r3
    } 
  }
  return status;
 8003486:	7bfb      	ldrb	r3, [r7, #15]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	2204      	movs	r2, #4
 80034ae:	409a      	lsls	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d024      	beq.n	8003502 <HAL_DMA_IRQHandler+0x72>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d01f      	beq.n	8003502 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d107      	bne.n	80034e0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0204 	bic.w	r2, r2, #4
 80034de:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e8:	2104      	movs	r1, #4
 80034ea:	fa01 f202 	lsl.w	r2, r1, r2
 80034ee:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d06a      	beq.n	80035ce <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003500:	e065      	b.n	80035ce <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	2202      	movs	r2, #2
 8003508:	409a      	lsls	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4013      	ands	r3, r2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d02c      	beq.n	800356c <HAL_DMA_IRQHandler+0xdc>
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d027      	beq.n	800356c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10b      	bne.n	8003542 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 020a 	bic.w	r2, r2, #10
 8003538:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354a:	2102      	movs	r1, #2
 800354c:	fa01 f202 	lsl.w	r2, r1, r2
 8003550:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	2b00      	cmp	r3, #0
 8003560:	d035      	beq.n	80035ce <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800356a:	e030      	b.n	80035ce <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	2208      	movs	r2, #8
 8003572:	409a      	lsls	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4013      	ands	r3, r2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d028      	beq.n	80035ce <HAL_DMA_IRQHandler+0x13e>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d023      	beq.n	80035ce <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 020e 	bic.w	r2, r2, #14
 8003594:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359e:	2101      	movs	r1, #1
 80035a0:	fa01 f202 	lsl.w	r2, r1, r2
 80035a4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4798      	blx	r3
    }
  }
}  
 80035cc:	e7ff      	b.n	80035ce <HAL_DMA_IRQHandler+0x13e>
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ec:	2101      	movs	r1, #1
 80035ee:	fa01 f202 	lsl.w	r2, r1, r2
 80035f2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b10      	cmp	r3, #16
 8003602:	d108      	bne.n	8003616 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003614:	e007      	b.n	8003626 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	60da      	str	r2, [r3, #12]
}
 8003626:	bf00      	nop
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	4b14      	ldr	r3, [pc, #80]	; (8003694 <DMA_CalcBaseAndBitshift+0x60>)
 8003644:	429a      	cmp	r2, r3
 8003646:	d80f      	bhi.n	8003668 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	4b12      	ldr	r3, [pc, #72]	; (8003698 <DMA_CalcBaseAndBitshift+0x64>)
 8003650:	4413      	add	r3, r2
 8003652:	4a12      	ldr	r2, [pc, #72]	; (800369c <DMA_CalcBaseAndBitshift+0x68>)
 8003654:	fba2 2303 	umull	r2, r3, r2, r3
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	009a      	lsls	r2, r3, #2
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a0f      	ldr	r2, [pc, #60]	; (80036a0 <DMA_CalcBaseAndBitshift+0x6c>)
 8003664:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003666:	e00e      	b.n	8003686 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <DMA_CalcBaseAndBitshift+0x70>)
 8003670:	4413      	add	r3, r2
 8003672:	4a0a      	ldr	r2, [pc, #40]	; (800369c <DMA_CalcBaseAndBitshift+0x68>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	091b      	lsrs	r3, r3, #4
 800367a:	009a      	lsls	r2, r3, #2
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a09      	ldr	r2, [pc, #36]	; (80036a8 <DMA_CalcBaseAndBitshift+0x74>)
 8003684:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40020407 	.word	0x40020407
 8003698:	bffdfff8 	.word	0xbffdfff8
 800369c:	cccccccd 	.word	0xcccccccd
 80036a0:	40020000 	.word	0x40020000
 80036a4:	bffdfbf8 	.word	0xbffdfbf8
 80036a8:	40020400 	.word	0x40020400

080036ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ba:	e160      	b.n	800397e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	2101      	movs	r1, #1
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	fa01 f303 	lsl.w	r3, r1, r3
 80036c8:	4013      	ands	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 8152 	beq.w	8003978 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d005      	beq.n	80036ec <HAL_GPIO_Init+0x40>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d130      	bne.n	800374e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	2203      	movs	r2, #3
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4013      	ands	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4313      	orrs	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003722:	2201      	movs	r2, #1
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43db      	mvns	r3, r3
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4013      	ands	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	091b      	lsrs	r3, r3, #4
 8003738:	f003 0201 	and.w	r2, r3, #1
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b03      	cmp	r3, #3
 8003758:	d017      	beq.n	800378a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	2203      	movs	r2, #3
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43db      	mvns	r3, r3
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4013      	ands	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d123      	bne.n	80037de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	08da      	lsrs	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3208      	adds	r2, #8
 800379e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	220f      	movs	r2, #15
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4013      	ands	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	08da      	lsrs	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3208      	adds	r2, #8
 80037d8:	6939      	ldr	r1, [r7, #16]
 80037da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	2203      	movs	r2, #3
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43db      	mvns	r3, r3
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4013      	ands	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 0203 	and.w	r2, r3, #3
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 80ac 	beq.w	8003978 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003820:	4b5e      	ldr	r3, [pc, #376]	; (800399c <HAL_GPIO_Init+0x2f0>)
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	4a5d      	ldr	r2, [pc, #372]	; (800399c <HAL_GPIO_Init+0x2f0>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6193      	str	r3, [r2, #24]
 800382c:	4b5b      	ldr	r3, [pc, #364]	; (800399c <HAL_GPIO_Init+0x2f0>)
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003838:	4a59      	ldr	r2, [pc, #356]	; (80039a0 <HAL_GPIO_Init+0x2f4>)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	089b      	lsrs	r3, r3, #2
 800383e:	3302      	adds	r3, #2
 8003840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003844:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	220f      	movs	r2, #15
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003862:	d025      	beq.n	80038b0 <HAL_GPIO_Init+0x204>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a4f      	ldr	r2, [pc, #316]	; (80039a4 <HAL_GPIO_Init+0x2f8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d01f      	beq.n	80038ac <HAL_GPIO_Init+0x200>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a4e      	ldr	r2, [pc, #312]	; (80039a8 <HAL_GPIO_Init+0x2fc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d019      	beq.n	80038a8 <HAL_GPIO_Init+0x1fc>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a4d      	ldr	r2, [pc, #308]	; (80039ac <HAL_GPIO_Init+0x300>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d013      	beq.n	80038a4 <HAL_GPIO_Init+0x1f8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a4c      	ldr	r2, [pc, #304]	; (80039b0 <HAL_GPIO_Init+0x304>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00d      	beq.n	80038a0 <HAL_GPIO_Init+0x1f4>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a4b      	ldr	r2, [pc, #300]	; (80039b4 <HAL_GPIO_Init+0x308>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d007      	beq.n	800389c <HAL_GPIO_Init+0x1f0>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a4a      	ldr	r2, [pc, #296]	; (80039b8 <HAL_GPIO_Init+0x30c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d101      	bne.n	8003898 <HAL_GPIO_Init+0x1ec>
 8003894:	2306      	movs	r3, #6
 8003896:	e00c      	b.n	80038b2 <HAL_GPIO_Init+0x206>
 8003898:	2307      	movs	r3, #7
 800389a:	e00a      	b.n	80038b2 <HAL_GPIO_Init+0x206>
 800389c:	2305      	movs	r3, #5
 800389e:	e008      	b.n	80038b2 <HAL_GPIO_Init+0x206>
 80038a0:	2304      	movs	r3, #4
 80038a2:	e006      	b.n	80038b2 <HAL_GPIO_Init+0x206>
 80038a4:	2303      	movs	r3, #3
 80038a6:	e004      	b.n	80038b2 <HAL_GPIO_Init+0x206>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e002      	b.n	80038b2 <HAL_GPIO_Init+0x206>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <HAL_GPIO_Init+0x206>
 80038b0:	2300      	movs	r3, #0
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	f002 0203 	and.w	r2, r2, #3
 80038b8:	0092      	lsls	r2, r2, #2
 80038ba:	4093      	lsls	r3, r2
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038c2:	4937      	ldr	r1, [pc, #220]	; (80039a0 <HAL_GPIO_Init+0x2f4>)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	089b      	lsrs	r3, r3, #2
 80038c8:	3302      	adds	r3, #2
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038d0:	4b3a      	ldr	r3, [pc, #232]	; (80039bc <HAL_GPIO_Init+0x310>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	43db      	mvns	r3, r3
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4013      	ands	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80038f4:	4a31      	ldr	r2, [pc, #196]	; (80039bc <HAL_GPIO_Init+0x310>)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038fa:	4b30      	ldr	r3, [pc, #192]	; (80039bc <HAL_GPIO_Init+0x310>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	43db      	mvns	r3, r3
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4013      	ands	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800391e:	4a27      	ldr	r2, [pc, #156]	; (80039bc <HAL_GPIO_Init+0x310>)
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003924:	4b25      	ldr	r3, [pc, #148]	; (80039bc <HAL_GPIO_Init+0x310>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	43db      	mvns	r3, r3
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4013      	ands	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003948:	4a1c      	ldr	r2, [pc, #112]	; (80039bc <HAL_GPIO_Init+0x310>)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800394e:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <HAL_GPIO_Init+0x310>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	43db      	mvns	r3, r3
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4013      	ands	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003972:	4a12      	ldr	r2, [pc, #72]	; (80039bc <HAL_GPIO_Init+0x310>)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	3301      	adds	r3, #1
 800397c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	f47f ae97 	bne.w	80036bc <HAL_GPIO_Init+0x10>
  }
}
 800398e:	bf00      	nop
 8003990:	bf00      	nop
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	40021000 	.word	0x40021000
 80039a0:	40010000 	.word	0x40010000
 80039a4:	48000400 	.word	0x48000400
 80039a8:	48000800 	.word	0x48000800
 80039ac:	48000c00 	.word	0x48000c00
 80039b0:	48001000 	.word	0x48001000
 80039b4:	48001400 	.word	0x48001400
 80039b8:	48001800 	.word	0x48001800
 80039bc:	40010400 	.word	0x40010400

080039c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	887b      	ldrh	r3, [r7, #2]
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
 80039dc:	e001      	b.n	80039e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039de:	2300      	movs	r3, #0
 80039e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	807b      	strh	r3, [r7, #2]
 80039fc:	4613      	mov	r3, r2
 80039fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a00:	787b      	ldrb	r3, [r7, #1]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a06:	887a      	ldrh	r2, [r7, #2]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a0c:	e002      	b.n	8003a14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a0e:	887a      	ldrh	r2, [r7, #2]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a2a:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d006      	beq.n	8003a44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a36:	4a05      	ldr	r2, [pc, #20]	; (8003a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f806 	bl	8003a50 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40010400 	.word	0x40010400

08003a50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
	...

08003a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a78:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d102      	bne.n	8003a8e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	f001 b83a 	b.w	8004b02 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 816f 	beq.w	8003d82 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003aa4:	4bb5      	ldr	r3, [pc, #724]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 030c 	and.w	r3, r3, #12
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d00c      	beq.n	8003aca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ab0:	4bb2      	ldr	r3, [pc, #712]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 030c 	and.w	r3, r3, #12
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d15c      	bne.n	8003b76 <HAL_RCC_OscConfig+0x10e>
 8003abc:	4baf      	ldr	r3, [pc, #700]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac8:	d155      	bne.n	8003b76 <HAL_RCC_OscConfig+0x10e>
 8003aca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ace:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ad6:	fa93 f3a3 	rbit	r3, r3
 8003ada:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ade:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae2:	fab3 f383 	clz	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d102      	bne.n	8003afc <HAL_RCC_OscConfig+0x94>
 8003af6:	4ba1      	ldr	r3, [pc, #644]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	e015      	b.n	8003b28 <HAL_RCC_OscConfig+0xc0>
 8003afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b00:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b04:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003b08:	fa93 f3a3 	rbit	r3, r3
 8003b0c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b14:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003b18:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003b1c:	fa93 f3a3 	rbit	r3, r3
 8003b20:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003b24:	4b95      	ldr	r3, [pc, #596]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b2c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003b30:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003b34:	fa92 f2a2 	rbit	r2, r2
 8003b38:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003b3c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003b40:	fab2 f282 	clz	r2, r2
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	f042 0220 	orr.w	r2, r2, #32
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	f002 021f 	and.w	r2, r2, #31
 8003b50:	2101      	movs	r1, #1
 8003b52:	fa01 f202 	lsl.w	r2, r1, r2
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8111 	beq.w	8003d80 <HAL_RCC_OscConfig+0x318>
 8003b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f040 8108 	bne.w	8003d80 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	f000 bfc6 	b.w	8004b02 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b86:	d106      	bne.n	8003b96 <HAL_RCC_OscConfig+0x12e>
 8003b88:	4b7c      	ldr	r3, [pc, #496]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a7b      	ldr	r2, [pc, #492]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	e036      	b.n	8003c04 <HAL_RCC_OscConfig+0x19c>
 8003b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x158>
 8003ba6:	4b75      	ldr	r3, [pc, #468]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a74      	ldr	r2, [pc, #464]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	4b72      	ldr	r3, [pc, #456]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a71      	ldr	r2, [pc, #452]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003bb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	e021      	b.n	8003c04 <HAL_RCC_OscConfig+0x19c>
 8003bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bc4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCC_OscConfig+0x184>
 8003bd2:	4b6a      	ldr	r3, [pc, #424]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a69      	ldr	r2, [pc, #420]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	4b67      	ldr	r3, [pc, #412]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a66      	ldr	r2, [pc, #408]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e00b      	b.n	8003c04 <HAL_RCC_OscConfig+0x19c>
 8003bec:	4b63      	ldr	r3, [pc, #396]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a62      	ldr	r2, [pc, #392]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	4b60      	ldr	r3, [pc, #384]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a5f      	ldr	r2, [pc, #380]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c02:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c08:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d059      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fe f9a6 	bl	8001f64 <HAL_GetTick>
 8003c18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1c:	e00a      	b.n	8003c34 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c1e:	f7fe f9a1 	bl	8001f64 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	; 0x64
 8003c2c:	d902      	bls.n	8003c34 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	f000 bf67 	b.w	8004b02 <HAL_RCC_OscConfig+0x109a>
 8003c34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c38:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003c40:	fa93 f3a3 	rbit	r3, r3
 8003c44:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003c48:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4c:	fab3 f383 	clz	r3, r3
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d102      	bne.n	8003c66 <HAL_RCC_OscConfig+0x1fe>
 8003c60:	4b46      	ldr	r3, [pc, #280]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	e015      	b.n	8003c92 <HAL_RCC_OscConfig+0x22a>
 8003c66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c6a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003c7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c7e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003c82:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003c86:	fa93 f3a3 	rbit	r3, r3
 8003c8a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003c8e:	4b3b      	ldr	r3, [pc, #236]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c96:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003c9a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003c9e:	fa92 f2a2 	rbit	r2, r2
 8003ca2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003ca6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003caa:	fab2 f282 	clz	r2, r2
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	f042 0220 	orr.w	r2, r2, #32
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	f002 021f 	and.w	r2, r2, #31
 8003cba:	2101      	movs	r1, #1
 8003cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0ab      	beq.n	8003c1e <HAL_RCC_OscConfig+0x1b6>
 8003cc6:	e05c      	b.n	8003d82 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fe f94c 	bl	8001f64 <HAL_GetTick>
 8003ccc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd0:	e00a      	b.n	8003ce8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd2:	f7fe f947 	bl	8001f64 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b64      	cmp	r3, #100	; 0x64
 8003ce0:	d902      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	f000 bf0d 	b.w	8004b02 <HAL_RCC_OscConfig+0x109a>
 8003ce8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cec:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003cf4:	fa93 f3a3 	rbit	r3, r3
 8003cf8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003cfc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d102      	bne.n	8003d1a <HAL_RCC_OscConfig+0x2b2>
 8003d14:	4b19      	ldr	r3, [pc, #100]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	e015      	b.n	8003d46 <HAL_RCC_OscConfig+0x2de>
 8003d1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d1e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003d26:	fa93 f3a3 	rbit	r3, r3
 8003d2a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003d2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d32:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003d36:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d3a:	fa93 f3a3 	rbit	r3, r3
 8003d3e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003d42:	4b0e      	ldr	r3, [pc, #56]	; (8003d7c <HAL_RCC_OscConfig+0x314>)
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d4a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003d4e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003d52:	fa92 f2a2 	rbit	r2, r2
 8003d56:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003d5a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003d5e:	fab2 f282 	clz	r2, r2
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	f042 0220 	orr.w	r2, r2, #32
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	f002 021f 	and.w	r2, r2, #31
 8003d6e:	2101      	movs	r1, #1
 8003d70:	fa01 f202 	lsl.w	r2, r1, r2
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1ab      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x26a>
 8003d7a:	e002      	b.n	8003d82 <HAL_RCC_OscConfig+0x31a>
 8003d7c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 817f 	beq.w	8004096 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d98:	4ba7      	ldr	r3, [pc, #668]	; (8004038 <HAL_RCC_OscConfig+0x5d0>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 030c 	and.w	r3, r3, #12
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00c      	beq.n	8003dbe <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003da4:	4ba4      	ldr	r3, [pc, #656]	; (8004038 <HAL_RCC_OscConfig+0x5d0>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 030c 	and.w	r3, r3, #12
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d173      	bne.n	8003e98 <HAL_RCC_OscConfig+0x430>
 8003db0:	4ba1      	ldr	r3, [pc, #644]	; (8004038 <HAL_RCC_OscConfig+0x5d0>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dbc:	d16c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x430>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003dc8:	fa93 f3a3 	rbit	r3, r3
 8003dcc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003dd0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dd4:	fab3 f383 	clz	r3, r3
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d102      	bne.n	8003dee <HAL_RCC_OscConfig+0x386>
 8003de8:	4b93      	ldr	r3, [pc, #588]	; (8004038 <HAL_RCC_OscConfig+0x5d0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	e013      	b.n	8003e16 <HAL_RCC_OscConfig+0x3ae>
 8003dee:	2302      	movs	r3, #2
 8003df0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003df8:	fa93 f3a3 	rbit	r3, r3
 8003dfc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003e00:	2302      	movs	r3, #2
 8003e02:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003e06:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003e0a:	fa93 f3a3 	rbit	r3, r3
 8003e0e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003e12:	4b89      	ldr	r3, [pc, #548]	; (8004038 <HAL_RCC_OscConfig+0x5d0>)
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	2202      	movs	r2, #2
 8003e18:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003e1c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003e20:	fa92 f2a2 	rbit	r2, r2
 8003e24:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003e28:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003e2c:	fab2 f282 	clz	r2, r2
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	f042 0220 	orr.w	r2, r2, #32
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	f002 021f 	and.w	r2, r2, #31
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCC_OscConfig+0x3f6>
 8003e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d002      	beq.n	8003e5e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f000 be52 	b.w	8004b02 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5e:	4b76      	ldr	r3, [pc, #472]	; (8004038 <HAL_RCC_OscConfig+0x5d0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e6a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	21f8      	movs	r1, #248	; 0xf8
 8003e74:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e78:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003e7c:	fa91 f1a1 	rbit	r1, r1
 8003e80:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003e84:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003e88:	fab1 f181 	clz	r1, r1
 8003e8c:	b2c9      	uxtb	r1, r1
 8003e8e:	408b      	lsls	r3, r1
 8003e90:	4969      	ldr	r1, [pc, #420]	; (8004038 <HAL_RCC_OscConfig+0x5d0>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e96:	e0fe      	b.n	8004096 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 8088 	beq.w	8003fba <HAL_RCC_OscConfig+0x552>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003eb4:	fa93 f3a3 	rbit	r3, r3
 8003eb8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003ebc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ec0:	fab3 f383 	clz	r3, r3
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003eca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed6:	f7fe f845 	bl	8001f64 <HAL_GetTick>
 8003eda:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ede:	e00a      	b.n	8003ef6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ee0:	f7fe f840 	bl	8001f64 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d902      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	f000 be06 	b.w	8004b02 <HAL_RCC_OscConfig+0x109a>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f00:	fa93 f3a3 	rbit	r3, r3
 8003f04:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003f08:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0c:	fab3 f383 	clz	r3, r3
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d102      	bne.n	8003f26 <HAL_RCC_OscConfig+0x4be>
 8003f20:	4b45      	ldr	r3, [pc, #276]	; (8004038 <HAL_RCC_OscConfig+0x5d0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	e013      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e6>
 8003f26:	2302      	movs	r3, #2
 8003f28:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003f30:	fa93 f3a3 	rbit	r3, r3
 8003f34:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003f38:	2302      	movs	r3, #2
 8003f3a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003f3e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003f42:	fa93 f3a3 	rbit	r3, r3
 8003f46:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003f4a:	4b3b      	ldr	r3, [pc, #236]	; (8004038 <HAL_RCC_OscConfig+0x5d0>)
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003f54:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003f58:	fa92 f2a2 	rbit	r2, r2
 8003f5c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003f60:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003f64:	fab2 f282 	clz	r2, r2
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	f042 0220 	orr.w	r2, r2, #32
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	f002 021f 	and.w	r2, r2, #31
 8003f74:	2101      	movs	r1, #1
 8003f76:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0af      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f80:	4b2d      	ldr	r3, [pc, #180]	; (8004038 <HAL_RCC_OscConfig+0x5d0>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	21f8      	movs	r1, #248	; 0xf8
 8003f96:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003f9e:	fa91 f1a1 	rbit	r1, r1
 8003fa2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003fa6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003faa:	fab1 f181 	clz	r1, r1
 8003fae:	b2c9      	uxtb	r1, r1
 8003fb0:	408b      	lsls	r3, r1
 8003fb2:	4921      	ldr	r1, [pc, #132]	; (8004038 <HAL_RCC_OscConfig+0x5d0>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	600b      	str	r3, [r1, #0]
 8003fb8:	e06d      	b.n	8004096 <HAL_RCC_OscConfig+0x62e>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003fc4:	fa93 f3a3 	rbit	r3, r3
 8003fc8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003fcc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fd0:	fab3 f383 	clz	r3, r3
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe6:	f7fd ffbd 	bl	8001f64 <HAL_GetTick>
 8003fea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fee:	e00a      	b.n	8004006 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff0:	f7fd ffb8 	bl	8001f64 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d902      	bls.n	8004006 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	f000 bd7e 	b.w	8004b02 <HAL_RCC_OscConfig+0x109a>
 8004006:	2302      	movs	r3, #2
 8004008:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004010:	fa93 f3a3 	rbit	r3, r3
 8004014:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004018:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800401c:	fab3 f383 	clz	r3, r3
 8004020:	b2db      	uxtb	r3, r3
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b01      	cmp	r3, #1
 800402e:	d105      	bne.n	800403c <HAL_RCC_OscConfig+0x5d4>
 8004030:	4b01      	ldr	r3, [pc, #4]	; (8004038 <HAL_RCC_OscConfig+0x5d0>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	e016      	b.n	8004064 <HAL_RCC_OscConfig+0x5fc>
 8004036:	bf00      	nop
 8004038:	40021000 	.word	0x40021000
 800403c:	2302      	movs	r3, #2
 800403e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004046:	fa93 f3a3 	rbit	r3, r3
 800404a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800404e:	2302      	movs	r3, #2
 8004050:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004054:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004058:	fa93 f3a3 	rbit	r3, r3
 800405c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004060:	4bbf      	ldr	r3, [pc, #764]	; (8004360 <HAL_RCC_OscConfig+0x8f8>)
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	2202      	movs	r2, #2
 8004066:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800406a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800406e:	fa92 f2a2 	rbit	r2, r2
 8004072:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004076:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800407a:	fab2 f282 	clz	r2, r2
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	f042 0220 	orr.w	r2, r2, #32
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	f002 021f 	and.w	r2, r2, #31
 800408a:	2101      	movs	r1, #1
 800408c:	fa01 f202 	lsl.w	r2, r1, r2
 8004090:	4013      	ands	r3, r2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1ac      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004096:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800409a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8113 	beq.w	80042d2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d07c      	beq.n	80041b6 <HAL_RCC_OscConfig+0x74e>
 80040bc:	2301      	movs	r3, #1
 80040be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040c6:	fa93 f3a3 	rbit	r3, r3
 80040ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80040ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040d2:	fab3 f383 	clz	r3, r3
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	4ba2      	ldr	r3, [pc, #648]	; (8004364 <HAL_RCC_OscConfig+0x8fc>)
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	461a      	mov	r2, r3
 80040e2:	2301      	movs	r3, #1
 80040e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e6:	f7fd ff3d 	bl	8001f64 <HAL_GetTick>
 80040ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ee:	e00a      	b.n	8004106 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040f0:	f7fd ff38 	bl	8001f64 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d902      	bls.n	8004106 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	f000 bcfe 	b.w	8004b02 <HAL_RCC_OscConfig+0x109a>
 8004106:	2302      	movs	r3, #2
 8004108:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004110:	fa93 f2a3 	rbit	r2, r3
 8004114:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004118:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004122:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004126:	2202      	movs	r2, #2
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800412e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	fa93 f2a3 	rbit	r2, r3
 8004138:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800413c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004146:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800414a:	2202      	movs	r2, #2
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004152:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	fa93 f2a3 	rbit	r2, r3
 800415c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004160:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004164:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004166:	4b7e      	ldr	r3, [pc, #504]	; (8004360 <HAL_RCC_OscConfig+0x8f8>)
 8004168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800416a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800416e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004172:	2102      	movs	r1, #2
 8004174:	6019      	str	r1, [r3, #0]
 8004176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800417a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	fa93 f1a3 	rbit	r1, r3
 8004184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004188:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800418c:	6019      	str	r1, [r3, #0]
  return result;
 800418e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004192:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	fab3 f383 	clz	r3, r3
 800419c:	b2db      	uxtb	r3, r3
 800419e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	2101      	movs	r1, #1
 80041aa:	fa01 f303 	lsl.w	r3, r1, r3
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d09d      	beq.n	80040f0 <HAL_RCC_OscConfig+0x688>
 80041b4:	e08d      	b.n	80042d2 <HAL_RCC_OscConfig+0x86a>
 80041b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80041be:	2201      	movs	r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	fa93 f2a3 	rbit	r2, r3
 80041d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041d4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80041d8:	601a      	str	r2, [r3, #0]
  return result;
 80041da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80041e2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e4:	fab3 f383 	clz	r3, r3
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	4b5d      	ldr	r3, [pc, #372]	; (8004364 <HAL_RCC_OscConfig+0x8fc>)
 80041ee:	4413      	add	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	461a      	mov	r2, r3
 80041f4:	2300      	movs	r3, #0
 80041f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f8:	f7fd feb4 	bl	8001f64 <HAL_GetTick>
 80041fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004200:	e00a      	b.n	8004218 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004202:	f7fd feaf 	bl	8001f64 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d902      	bls.n	8004218 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	f000 bc75 	b.w	8004b02 <HAL_RCC_OscConfig+0x109a>
 8004218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800421c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004220:	2202      	movs	r2, #2
 8004222:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004224:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004228:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	fa93 f2a3 	rbit	r2, r3
 8004232:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004236:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004240:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004244:	2202      	movs	r2, #2
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800424c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	fa93 f2a3 	rbit	r2, r3
 8004256:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800425a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004264:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004268:	2202      	movs	r2, #2
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004270:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	fa93 f2a3 	rbit	r2, r3
 800427a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800427e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004282:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004284:	4b36      	ldr	r3, [pc, #216]	; (8004360 <HAL_RCC_OscConfig+0x8f8>)
 8004286:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800428c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004290:	2102      	movs	r1, #2
 8004292:	6019      	str	r1, [r3, #0]
 8004294:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004298:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	fa93 f1a3 	rbit	r1, r3
 80042a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042a6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80042aa:	6019      	str	r1, [r3, #0]
  return result;
 80042ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	fab3 f383 	clz	r3, r3
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	2101      	movs	r1, #1
 80042c8:	fa01 f303 	lsl.w	r3, r1, r3
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d197      	bne.n	8004202 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 81a5 	beq.w	8004632 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e8:	2300      	movs	r3, #0
 80042ea:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ee:	4b1c      	ldr	r3, [pc, #112]	; (8004360 <HAL_RCC_OscConfig+0x8f8>)
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d116      	bne.n	8004328 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fa:	4b19      	ldr	r3, [pc, #100]	; (8004360 <HAL_RCC_OscConfig+0x8f8>)
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	4a18      	ldr	r2, [pc, #96]	; (8004360 <HAL_RCC_OscConfig+0x8f8>)
 8004300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004304:	61d3      	str	r3, [r2, #28]
 8004306:	4b16      	ldr	r3, [pc, #88]	; (8004360 <HAL_RCC_OscConfig+0x8f8>)
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800430e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004312:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800431c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004320:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004322:	2301      	movs	r3, #1
 8004324:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004328:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <HAL_RCC_OscConfig+0x900>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004330:	2b00      	cmp	r3, #0
 8004332:	d121      	bne.n	8004378 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <HAL_RCC_OscConfig+0x900>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a0b      	ldr	r2, [pc, #44]	; (8004368 <HAL_RCC_OscConfig+0x900>)
 800433a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004340:	f7fd fe10 	bl	8001f64 <HAL_GetTick>
 8004344:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004348:	e010      	b.n	800436c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800434a:	f7fd fe0b 	bl	8001f64 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b64      	cmp	r3, #100	; 0x64
 8004358:	d908      	bls.n	800436c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e3d1      	b.n	8004b02 <HAL_RCC_OscConfig+0x109a>
 800435e:	bf00      	nop
 8004360:	40021000 	.word	0x40021000
 8004364:	10908120 	.word	0x10908120
 8004368:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436c:	4b8d      	ldr	r3, [pc, #564]	; (80045a4 <HAL_RCC_OscConfig+0xb3c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0e8      	beq.n	800434a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004378:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800437c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d106      	bne.n	8004396 <HAL_RCC_OscConfig+0x92e>
 8004388:	4b87      	ldr	r3, [pc, #540]	; (80045a8 <HAL_RCC_OscConfig+0xb40>)
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	4a86      	ldr	r2, [pc, #536]	; (80045a8 <HAL_RCC_OscConfig+0xb40>)
 800438e:	f043 0301 	orr.w	r3, r3, #1
 8004392:	6213      	str	r3, [r2, #32]
 8004394:	e035      	b.n	8004402 <HAL_RCC_OscConfig+0x99a>
 8004396:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800439a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10c      	bne.n	80043c0 <HAL_RCC_OscConfig+0x958>
 80043a6:	4b80      	ldr	r3, [pc, #512]	; (80045a8 <HAL_RCC_OscConfig+0xb40>)
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	4a7f      	ldr	r2, [pc, #508]	; (80045a8 <HAL_RCC_OscConfig+0xb40>)
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	6213      	str	r3, [r2, #32]
 80043b2:	4b7d      	ldr	r3, [pc, #500]	; (80045a8 <HAL_RCC_OscConfig+0xb40>)
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	4a7c      	ldr	r2, [pc, #496]	; (80045a8 <HAL_RCC_OscConfig+0xb40>)
 80043b8:	f023 0304 	bic.w	r3, r3, #4
 80043bc:	6213      	str	r3, [r2, #32]
 80043be:	e020      	b.n	8004402 <HAL_RCC_OscConfig+0x99a>
 80043c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b05      	cmp	r3, #5
 80043ce:	d10c      	bne.n	80043ea <HAL_RCC_OscConfig+0x982>
 80043d0:	4b75      	ldr	r3, [pc, #468]	; (80045a8 <HAL_RCC_OscConfig+0xb40>)
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	4a74      	ldr	r2, [pc, #464]	; (80045a8 <HAL_RCC_OscConfig+0xb40>)
 80043d6:	f043 0304 	orr.w	r3, r3, #4
 80043da:	6213      	str	r3, [r2, #32]
 80043dc:	4b72      	ldr	r3, [pc, #456]	; (80045a8 <HAL_RCC_OscConfig+0xb40>)
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	4a71      	ldr	r2, [pc, #452]	; (80045a8 <HAL_RCC_OscConfig+0xb40>)
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	6213      	str	r3, [r2, #32]
 80043e8:	e00b      	b.n	8004402 <HAL_RCC_OscConfig+0x99a>
 80043ea:	4b6f      	ldr	r3, [pc, #444]	; (80045a8 <HAL_RCC_OscConfig+0xb40>)
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	4a6e      	ldr	r2, [pc, #440]	; (80045a8 <HAL_RCC_OscConfig+0xb40>)
 80043f0:	f023 0301 	bic.w	r3, r3, #1
 80043f4:	6213      	str	r3, [r2, #32]
 80043f6:	4b6c      	ldr	r3, [pc, #432]	; (80045a8 <HAL_RCC_OscConfig+0xb40>)
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	4a6b      	ldr	r2, [pc, #428]	; (80045a8 <HAL_RCC_OscConfig+0xb40>)
 80043fc:	f023 0304 	bic.w	r3, r3, #4
 8004400:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004402:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004406:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 8081 	beq.w	8004516 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004414:	f7fd fda6 	bl	8001f64 <HAL_GetTick>
 8004418:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441c:	e00b      	b.n	8004436 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800441e:	f7fd fda1 	bl	8001f64 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f241 3288 	movw	r2, #5000	; 0x1388
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e365      	b.n	8004b02 <HAL_RCC_OscConfig+0x109a>
 8004436:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800443a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800443e:	2202      	movs	r2, #2
 8004440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004442:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004446:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	fa93 f2a3 	rbit	r2, r3
 8004450:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004454:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800445e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004462:	2202      	movs	r2, #2
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800446a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	fa93 f2a3 	rbit	r2, r3
 8004474:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004478:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800447c:	601a      	str	r2, [r3, #0]
  return result;
 800447e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004482:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004486:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004488:	fab3 f383 	clz	r3, r3
 800448c:	b2db      	uxtb	r3, r3
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	b2db      	uxtb	r3, r3
 8004492:	f043 0302 	orr.w	r3, r3, #2
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d102      	bne.n	80044a2 <HAL_RCC_OscConfig+0xa3a>
 800449c:	4b42      	ldr	r3, [pc, #264]	; (80045a8 <HAL_RCC_OscConfig+0xb40>)
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	e013      	b.n	80044ca <HAL_RCC_OscConfig+0xa62>
 80044a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044a6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80044aa:	2202      	movs	r2, #2
 80044ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	fa93 f2a3 	rbit	r2, r3
 80044bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044c0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	4b38      	ldr	r3, [pc, #224]	; (80045a8 <HAL_RCC_OscConfig+0xb40>)
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80044ce:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80044d2:	2102      	movs	r1, #2
 80044d4:	6011      	str	r1, [r2, #0]
 80044d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80044da:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	fa92 f1a2 	rbit	r1, r2
 80044e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80044e8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80044ec:	6011      	str	r1, [r2, #0]
  return result;
 80044ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80044f2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80044f6:	6812      	ldr	r2, [r2, #0]
 80044f8:	fab2 f282 	clz	r2, r2
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	f002 021f 	and.w	r2, r2, #31
 8004508:	2101      	movs	r1, #1
 800450a:	fa01 f202 	lsl.w	r2, r1, r2
 800450e:	4013      	ands	r3, r2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d084      	beq.n	800441e <HAL_RCC_OscConfig+0x9b6>
 8004514:	e083      	b.n	800461e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004516:	f7fd fd25 	bl	8001f64 <HAL_GetTick>
 800451a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800451e:	e00b      	b.n	8004538 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004520:	f7fd fd20 	bl	8001f64 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004530:	4293      	cmp	r3, r2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e2e4      	b.n	8004b02 <HAL_RCC_OscConfig+0x109a>
 8004538:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800453c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004540:	2202      	movs	r2, #2
 8004542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004544:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004548:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	fa93 f2a3 	rbit	r2, r3
 8004552:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004556:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004560:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004564:	2202      	movs	r2, #2
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800456c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	fa93 f2a3 	rbit	r2, r3
 8004576:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800457a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800457e:	601a      	str	r2, [r3, #0]
  return result;
 8004580:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004584:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004588:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800458a:	fab3 f383 	clz	r3, r3
 800458e:	b2db      	uxtb	r3, r3
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	b2db      	uxtb	r3, r3
 8004594:	f043 0302 	orr.w	r3, r3, #2
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d106      	bne.n	80045ac <HAL_RCC_OscConfig+0xb44>
 800459e:	4b02      	ldr	r3, [pc, #8]	; (80045a8 <HAL_RCC_OscConfig+0xb40>)
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	e017      	b.n	80045d4 <HAL_RCC_OscConfig+0xb6c>
 80045a4:	40007000 	.word	0x40007000
 80045a8:	40021000 	.word	0x40021000
 80045ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80045b4:	2202      	movs	r2, #2
 80045b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045bc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	fa93 f2a3 	rbit	r2, r3
 80045c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045ca:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	4bb3      	ldr	r3, [pc, #716]	; (80048a0 <HAL_RCC_OscConfig+0xe38>)
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80045d8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80045dc:	2102      	movs	r1, #2
 80045de:	6011      	str	r1, [r2, #0]
 80045e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80045e4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80045e8:	6812      	ldr	r2, [r2, #0]
 80045ea:	fa92 f1a2 	rbit	r1, r2
 80045ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80045f2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80045f6:	6011      	str	r1, [r2, #0]
  return result;
 80045f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80045fc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004600:	6812      	ldr	r2, [r2, #0]
 8004602:	fab2 f282 	clz	r2, r2
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	f002 021f 	and.w	r2, r2, #31
 8004612:	2101      	movs	r1, #1
 8004614:	fa01 f202 	lsl.w	r2, r1, r2
 8004618:	4013      	ands	r3, r2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d180      	bne.n	8004520 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800461e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004622:	2b01      	cmp	r3, #1
 8004624:	d105      	bne.n	8004632 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004626:	4b9e      	ldr	r3, [pc, #632]	; (80048a0 <HAL_RCC_OscConfig+0xe38>)
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	4a9d      	ldr	r2, [pc, #628]	; (80048a0 <HAL_RCC_OscConfig+0xe38>)
 800462c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004630:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004632:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004636:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 825e 	beq.w	8004b00 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004644:	4b96      	ldr	r3, [pc, #600]	; (80048a0 <HAL_RCC_OscConfig+0xe38>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f003 030c 	and.w	r3, r3, #12
 800464c:	2b08      	cmp	r3, #8
 800464e:	f000 821f 	beq.w	8004a90 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004652:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004656:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b02      	cmp	r3, #2
 8004660:	f040 8170 	bne.w	8004944 <HAL_RCC_OscConfig+0xedc>
 8004664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004668:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800466c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004672:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004676:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	fa93 f2a3 	rbit	r2, r3
 8004680:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004684:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004688:	601a      	str	r2, [r3, #0]
  return result;
 800468a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800468e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004692:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004694:	fab3 f383 	clz	r3, r3
 8004698:	b2db      	uxtb	r3, r3
 800469a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800469e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	461a      	mov	r2, r3
 80046a6:	2300      	movs	r3, #0
 80046a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046aa:	f7fd fc5b 	bl	8001f64 <HAL_GetTick>
 80046ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046b2:	e009      	b.n	80046c8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046b4:	f7fd fc56 	bl	8001f64 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e21c      	b.n	8004b02 <HAL_RCC_OscConfig+0x109a>
 80046c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046cc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80046d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046da:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	fa93 f2a3 	rbit	r2, r3
 80046e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046e8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80046ec:	601a      	str	r2, [r3, #0]
  return result;
 80046ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046f2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80046f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046f8:	fab3 f383 	clz	r3, r3
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	b2db      	uxtb	r3, r3
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b01      	cmp	r3, #1
 800470a:	d102      	bne.n	8004712 <HAL_RCC_OscConfig+0xcaa>
 800470c:	4b64      	ldr	r3, [pc, #400]	; (80048a0 <HAL_RCC_OscConfig+0xe38>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	e027      	b.n	8004762 <HAL_RCC_OscConfig+0xcfa>
 8004712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004716:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800471a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800471e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004720:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004724:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	fa93 f2a3 	rbit	r2, r3
 800472e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004732:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800473c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004740:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800474a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	fa93 f2a3 	rbit	r2, r3
 8004754:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004758:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	4b50      	ldr	r3, [pc, #320]	; (80048a0 <HAL_RCC_OscConfig+0xe38>)
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004766:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800476a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800476e:	6011      	str	r1, [r2, #0]
 8004770:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004774:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004778:	6812      	ldr	r2, [r2, #0]
 800477a:	fa92 f1a2 	rbit	r1, r2
 800477e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004782:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004786:	6011      	str	r1, [r2, #0]
  return result;
 8004788:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800478c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004790:	6812      	ldr	r2, [r2, #0]
 8004792:	fab2 f282 	clz	r2, r2
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	f042 0220 	orr.w	r2, r2, #32
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	f002 021f 	and.w	r2, r2, #31
 80047a2:	2101      	movs	r1, #1
 80047a4:	fa01 f202 	lsl.w	r2, r1, r2
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d182      	bne.n	80046b4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ae:	4b3c      	ldr	r3, [pc, #240]	; (80048a0 <HAL_RCC_OscConfig+0xe38>)
 80047b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b2:	f023 020f 	bic.w	r2, r3, #15
 80047b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	4937      	ldr	r1, [pc, #220]	; (80048a0 <HAL_RCC_OscConfig+0xe38>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80047c8:	4b35      	ldr	r3, [pc, #212]	; (80048a0 <HAL_RCC_OscConfig+0xe38>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80047d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6a19      	ldr	r1, [r3, #32]
 80047dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	430b      	orrs	r3, r1
 80047ea:	492d      	ldr	r1, [pc, #180]	; (80048a0 <HAL_RCC_OscConfig+0xe38>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	604b      	str	r3, [r1, #4]
 80047f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047f4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80047f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004802:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	fa93 f2a3 	rbit	r2, r3
 800480c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004810:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004814:	601a      	str	r2, [r3, #0]
  return result;
 8004816:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800481a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800481e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004820:	fab3 f383 	clz	r3, r3
 8004824:	b2db      	uxtb	r3, r3
 8004826:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800482a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	461a      	mov	r2, r3
 8004832:	2301      	movs	r3, #1
 8004834:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004836:	f7fd fb95 	bl	8001f64 <HAL_GetTick>
 800483a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800483e:	e009      	b.n	8004854 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004840:	f7fd fb90 	bl	8001f64 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e156      	b.n	8004b02 <HAL_RCC_OscConfig+0x109a>
 8004854:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004858:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800485c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004862:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004866:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	fa93 f2a3 	rbit	r2, r3
 8004870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004874:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004878:	601a      	str	r2, [r3, #0]
  return result;
 800487a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800487e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004882:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004884:	fab3 f383 	clz	r3, r3
 8004888:	b2db      	uxtb	r3, r3
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	b2db      	uxtb	r3, r3
 800488e:	f043 0301 	orr.w	r3, r3, #1
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b01      	cmp	r3, #1
 8004896:	d105      	bne.n	80048a4 <HAL_RCC_OscConfig+0xe3c>
 8004898:	4b01      	ldr	r3, [pc, #4]	; (80048a0 <HAL_RCC_OscConfig+0xe38>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	e02a      	b.n	80048f4 <HAL_RCC_OscConfig+0xe8c>
 800489e:	bf00      	nop
 80048a0:	40021000 	.word	0x40021000
 80048a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048a8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80048ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048b6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	fa93 f2a3 	rbit	r2, r3
 80048c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048c4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048ce:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80048d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048dc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	fa93 f2a3 	rbit	r2, r3
 80048e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048ea:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	4b86      	ldr	r3, [pc, #536]	; (8004b0c <HAL_RCC_OscConfig+0x10a4>)
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048f8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80048fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004900:	6011      	str	r1, [r2, #0]
 8004902:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004906:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	fa92 f1a2 	rbit	r1, r2
 8004910:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004914:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004918:	6011      	str	r1, [r2, #0]
  return result;
 800491a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800491e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	fab2 f282 	clz	r2, r2
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	f042 0220 	orr.w	r2, r2, #32
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	f002 021f 	and.w	r2, r2, #31
 8004934:	2101      	movs	r1, #1
 8004936:	fa01 f202 	lsl.w	r2, r1, r2
 800493a:	4013      	ands	r3, r2
 800493c:	2b00      	cmp	r3, #0
 800493e:	f43f af7f 	beq.w	8004840 <HAL_RCC_OscConfig+0xdd8>
 8004942:	e0dd      	b.n	8004b00 <HAL_RCC_OscConfig+0x1098>
 8004944:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004948:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800494c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004956:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	fa93 f2a3 	rbit	r2, r3
 8004960:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004964:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004968:	601a      	str	r2, [r3, #0]
  return result;
 800496a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800496e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004972:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004974:	fab3 f383 	clz	r3, r3
 8004978:	b2db      	uxtb	r3, r3
 800497a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800497e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	461a      	mov	r2, r3
 8004986:	2300      	movs	r3, #0
 8004988:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498a:	f7fd faeb 	bl	8001f64 <HAL_GetTick>
 800498e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004992:	e009      	b.n	80049a8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004994:	f7fd fae6 	bl	8001f64 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e0ac      	b.n	8004b02 <HAL_RCC_OscConfig+0x109a>
 80049a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049ac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80049b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049ba:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	fa93 f2a3 	rbit	r2, r3
 80049c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049c8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80049cc:	601a      	str	r2, [r3, #0]
  return result;
 80049ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049d2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80049d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049d8:	fab3 f383 	clz	r3, r3
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d102      	bne.n	80049f2 <HAL_RCC_OscConfig+0xf8a>
 80049ec:	4b47      	ldr	r3, [pc, #284]	; (8004b0c <HAL_RCC_OscConfig+0x10a4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	e027      	b.n	8004a42 <HAL_RCC_OscConfig+0xfda>
 80049f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049f6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80049fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a04:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	fa93 f2a3 	rbit	r2, r3
 8004a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a12:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a1c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004a20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a2a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	fa93 f2a3 	rbit	r2, r3
 8004a34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a38:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	4b33      	ldr	r3, [pc, #204]	; (8004b0c <HAL_RCC_OscConfig+0x10a4>)
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a46:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004a4a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a4e:	6011      	str	r1, [r2, #0]
 8004a50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a54:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	fa92 f1a2 	rbit	r1, r2
 8004a5e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a62:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004a66:	6011      	str	r1, [r2, #0]
  return result;
 8004a68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a6c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004a70:	6812      	ldr	r2, [r2, #0]
 8004a72:	fab2 f282 	clz	r2, r2
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	f042 0220 	orr.w	r2, r2, #32
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	f002 021f 	and.w	r2, r2, #31
 8004a82:	2101      	movs	r1, #1
 8004a84:	fa01 f202 	lsl.w	r2, r1, r2
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d182      	bne.n	8004994 <HAL_RCC_OscConfig+0xf2c>
 8004a8e:	e037      	b.n	8004b00 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a94:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e02e      	b.n	8004b02 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004aa4:	4b19      	ldr	r3, [pc, #100]	; (8004b0c <HAL_RCC_OscConfig+0x10a4>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004aac:	4b17      	ldr	r3, [pc, #92]	; (8004b0c <HAL_RCC_OscConfig+0x10a4>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ab4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ab8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004abc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ac0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d117      	bne.n	8004afc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004acc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ad0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ad8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d10b      	bne.n	8004afc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004ae4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ae8:	f003 020f 	and.w	r2, r3, #15
 8004aec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004af0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d001      	beq.n	8004b00 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40021000 	.word	0x40021000

08004b10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b09e      	sub	sp, #120	; 0x78
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e162      	b.n	8004dee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b28:	4b90      	ldr	r3, [pc, #576]	; (8004d6c <HAL_RCC_ClockConfig+0x25c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d910      	bls.n	8004b58 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b36:	4b8d      	ldr	r3, [pc, #564]	; (8004d6c <HAL_RCC_ClockConfig+0x25c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f023 0207 	bic.w	r2, r3, #7
 8004b3e:	498b      	ldr	r1, [pc, #556]	; (8004d6c <HAL_RCC_ClockConfig+0x25c>)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b46:	4b89      	ldr	r3, [pc, #548]	; (8004d6c <HAL_RCC_ClockConfig+0x25c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e14a      	b.n	8004dee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b64:	4b82      	ldr	r3, [pc, #520]	; (8004d70 <HAL_RCC_ClockConfig+0x260>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	497f      	ldr	r1, [pc, #508]	; (8004d70 <HAL_RCC_ClockConfig+0x260>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 80dc 	beq.w	8004d3c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d13c      	bne.n	8004c06 <HAL_RCC_ClockConfig+0xf6>
 8004b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b90:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b94:	fa93 f3a3 	rbit	r3, r3
 8004b98:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9c:	fab3 f383 	clz	r3, r3
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d102      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xa6>
 8004bb0:	4b6f      	ldr	r3, [pc, #444]	; (8004d70 <HAL_RCC_ClockConfig+0x260>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	e00f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0xc6>
 8004bb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bbe:	fa93 f3a3 	rbit	r3, r3
 8004bc2:	667b      	str	r3, [r7, #100]	; 0x64
 8004bc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bc8:	663b      	str	r3, [r7, #96]	; 0x60
 8004bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bcc:	fa93 f3a3 	rbit	r3, r3
 8004bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bd2:	4b67      	ldr	r3, [pc, #412]	; (8004d70 <HAL_RCC_ClockConfig+0x260>)
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004bda:	65ba      	str	r2, [r7, #88]	; 0x58
 8004bdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bde:	fa92 f2a2 	rbit	r2, r2
 8004be2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004be4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004be6:	fab2 f282 	clz	r2, r2
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	f042 0220 	orr.w	r2, r2, #32
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	f002 021f 	and.w	r2, r2, #31
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d17b      	bne.n	8004cfa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e0f3      	b.n	8004dee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d13c      	bne.n	8004c88 <HAL_RCC_ClockConfig+0x178>
 8004c0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c16:	fa93 f3a3 	rbit	r3, r3
 8004c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1e:	fab3 f383 	clz	r3, r3
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	f043 0301 	orr.w	r3, r3, #1
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d102      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x128>
 8004c32:	4b4f      	ldr	r3, [pc, #316]	; (8004d70 <HAL_RCC_ClockConfig+0x260>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	e00f      	b.n	8004c58 <HAL_RCC_ClockConfig+0x148>
 8004c38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c40:	fa93 f3a3 	rbit	r3, r3
 8004c44:	647b      	str	r3, [r7, #68]	; 0x44
 8004c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c4a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c4e:	fa93 f3a3 	rbit	r3, r3
 8004c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c54:	4b46      	ldr	r3, [pc, #280]	; (8004d70 <HAL_RCC_ClockConfig+0x260>)
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c5c:	63ba      	str	r2, [r7, #56]	; 0x38
 8004c5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c60:	fa92 f2a2 	rbit	r2, r2
 8004c64:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c68:	fab2 f282 	clz	r2, r2
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	f042 0220 	orr.w	r2, r2, #32
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	f002 021f 	and.w	r2, r2, #31
 8004c78:	2101      	movs	r1, #1
 8004c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d13a      	bne.n	8004cfa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e0b2      	b.n	8004dee <HAL_RCC_ClockConfig+0x2de>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	fa93 f3a3 	rbit	r3, r3
 8004c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c96:	fab3 f383 	clz	r3, r3
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d102      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0x1a0>
 8004caa:	4b31      	ldr	r3, [pc, #196]	; (8004d70 <HAL_RCC_ClockConfig+0x260>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	e00d      	b.n	8004ccc <HAL_RCC_ClockConfig+0x1bc>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	fa93 f3a3 	rbit	r3, r3
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	623b      	str	r3, [r7, #32]
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	fa93 f3a3 	rbit	r3, r3
 8004cc6:	61fb      	str	r3, [r7, #28]
 8004cc8:	4b29      	ldr	r3, [pc, #164]	; (8004d70 <HAL_RCC_ClockConfig+0x260>)
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	2202      	movs	r2, #2
 8004cce:	61ba      	str	r2, [r7, #24]
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	fa92 f2a2 	rbit	r2, r2
 8004cd6:	617a      	str	r2, [r7, #20]
  return result;
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	fab2 f282 	clz	r2, r2
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	f042 0220 	orr.w	r2, r2, #32
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	f002 021f 	and.w	r2, r2, #31
 8004cea:	2101      	movs	r1, #1
 8004cec:	fa01 f202 	lsl.w	r2, r1, r2
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e079      	b.n	8004dee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cfa:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <HAL_RCC_ClockConfig+0x260>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f023 0203 	bic.w	r2, r3, #3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	491a      	ldr	r1, [pc, #104]	; (8004d70 <HAL_RCC_ClockConfig+0x260>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d0c:	f7fd f92a 	bl	8001f64 <HAL_GetTick>
 8004d10:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d12:	e00a      	b.n	8004d2a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d14:	f7fd f926 	bl	8001f64 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e061      	b.n	8004dee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d2a:	4b11      	ldr	r3, [pc, #68]	; (8004d70 <HAL_RCC_ClockConfig+0x260>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f003 020c 	and.w	r2, r3, #12
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d1eb      	bne.n	8004d14 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <HAL_RCC_ClockConfig+0x25c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d214      	bcs.n	8004d74 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4a:	4b08      	ldr	r3, [pc, #32]	; (8004d6c <HAL_RCC_ClockConfig+0x25c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f023 0207 	bic.w	r2, r3, #7
 8004d52:	4906      	ldr	r1, [pc, #24]	; (8004d6c <HAL_RCC_ClockConfig+0x25c>)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5a:	4b04      	ldr	r3, [pc, #16]	; (8004d6c <HAL_RCC_ClockConfig+0x25c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d005      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e040      	b.n	8004dee <HAL_RCC_ClockConfig+0x2de>
 8004d6c:	40022000 	.word	0x40022000
 8004d70:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d80:	4b1d      	ldr	r3, [pc, #116]	; (8004df8 <HAL_RCC_ClockConfig+0x2e8>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	491a      	ldr	r1, [pc, #104]	; (8004df8 <HAL_RCC_ClockConfig+0x2e8>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d9e:	4b16      	ldr	r3, [pc, #88]	; (8004df8 <HAL_RCC_ClockConfig+0x2e8>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	4912      	ldr	r1, [pc, #72]	; (8004df8 <HAL_RCC_ClockConfig+0x2e8>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004db2:	f000 f829 	bl	8004e08 <HAL_RCC_GetSysClockFreq>
 8004db6:	4601      	mov	r1, r0
 8004db8:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <HAL_RCC_ClockConfig+0x2e8>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dc0:	22f0      	movs	r2, #240	; 0xf0
 8004dc2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	fa92 f2a2 	rbit	r2, r2
 8004dca:	60fa      	str	r2, [r7, #12]
  return result;
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	fab2 f282 	clz	r2, r2
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	40d3      	lsrs	r3, r2
 8004dd6:	4a09      	ldr	r2, [pc, #36]	; (8004dfc <HAL_RCC_ClockConfig+0x2ec>)
 8004dd8:	5cd3      	ldrb	r3, [r2, r3]
 8004dda:	fa21 f303 	lsr.w	r3, r1, r3
 8004dde:	4a08      	ldr	r2, [pc, #32]	; (8004e00 <HAL_RCC_ClockConfig+0x2f0>)
 8004de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004de2:	4b08      	ldr	r3, [pc, #32]	; (8004e04 <HAL_RCC_ClockConfig+0x2f4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fd f878 	bl	8001edc <HAL_InitTick>
  
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3778      	adds	r7, #120	; 0x78
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	08007fa0 	.word	0x08007fa0
 8004e00:	2000005c 	.word	0x2000005c
 8004e04:	20000060 	.word	0x20000060

08004e08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b08b      	sub	sp, #44	; 0x2c
 8004e0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]
 8004e12:	2300      	movs	r3, #0
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	2300      	movs	r3, #0
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004e22:	4b2a      	ldr	r3, [pc, #168]	; (8004ecc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d002      	beq.n	8004e38 <HAL_RCC_GetSysClockFreq+0x30>
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d003      	beq.n	8004e3e <HAL_RCC_GetSysClockFreq+0x36>
 8004e36:	e03f      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e38:	4b25      	ldr	r3, [pc, #148]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004e3a:	623b      	str	r3, [r7, #32]
      break;
 8004e3c:	e03f      	b.n	8004ebe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004e44:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004e48:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	fa92 f2a2 	rbit	r2, r2
 8004e50:	607a      	str	r2, [r7, #4]
  return result;
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	fab2 f282 	clz	r2, r2
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	40d3      	lsrs	r3, r2
 8004e5c:	4a1d      	ldr	r2, [pc, #116]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004e5e:	5cd3      	ldrb	r3, [r2, r3]
 8004e60:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004e62:	4b1a      	ldr	r3, [pc, #104]	; (8004ecc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	220f      	movs	r2, #15
 8004e6c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	fa92 f2a2 	rbit	r2, r2
 8004e74:	60fa      	str	r2, [r7, #12]
  return result;
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	fab2 f282 	clz	r2, r2
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	40d3      	lsrs	r3, r2
 8004e80:	4a15      	ldr	r2, [pc, #84]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e82:	5cd3      	ldrb	r3, [r2, r3]
 8004e84:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d008      	beq.n	8004ea2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004e90:	4a0f      	ldr	r2, [pc, #60]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	fb02 f303 	mul.w	r3, r2, r3
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea0:	e007      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ea2:	4a0b      	ldr	r2, [pc, #44]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	fb02 f303 	mul.w	r3, r2, r3
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	623b      	str	r3, [r7, #32]
      break;
 8004eb6:	e002      	b.n	8004ebe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004eb8:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004eba:	623b      	str	r3, [r7, #32]
      break;
 8004ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	372c      	adds	r7, #44	; 0x2c
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	007a1200 	.word	0x007a1200
 8004ed4:	08007fb8 	.word	0x08007fb8
 8004ed8:	08007fc8 	.word	0x08007fc8

08004edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ee0:	4b03      	ldr	r3, [pc, #12]	; (8004ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	2000005c 	.word	0x2000005c

08004ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004efa:	f7ff ffef 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8004efe:	4601      	mov	r1, r0
 8004f00:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f08:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004f0c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	fa92 f2a2 	rbit	r2, r2
 8004f14:	603a      	str	r2, [r7, #0]
  return result;
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	fab2 f282 	clz	r2, r2
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	40d3      	lsrs	r3, r2
 8004f20:	4a04      	ldr	r2, [pc, #16]	; (8004f34 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004f22:	5cd3      	ldrb	r3, [r2, r3]
 8004f24:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40021000 	.word	0x40021000
 8004f34:	08007fb0 	.word	0x08007fb0

08004f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004f3e:	f7ff ffcd 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8004f42:	4601      	mov	r1, r0
 8004f44:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004f4c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004f50:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	fa92 f2a2 	rbit	r2, r2
 8004f58:	603a      	str	r2, [r7, #0]
  return result;
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	fab2 f282 	clz	r2, r2
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	40d3      	lsrs	r3, r2
 8004f64:	4a04      	ldr	r2, [pc, #16]	; (8004f78 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004f66:	5cd3      	ldrb	r3, [r2, r3]
 8004f68:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40021000 	.word	0x40021000
 8004f78:	08007fb0 	.word	0x08007fb0

08004f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b092      	sub	sp, #72	; 0x48
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 80d4 	beq.w	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fa0:	4b4e      	ldr	r3, [pc, #312]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10e      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fac:	4b4b      	ldr	r3, [pc, #300]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	4a4a      	ldr	r2, [pc, #296]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb6:	61d3      	str	r3, [r2, #28]
 8004fb8:	4b48      	ldr	r3, [pc, #288]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	60bb      	str	r3, [r7, #8]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fca:	4b45      	ldr	r3, [pc, #276]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d118      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fd6:	4b42      	ldr	r3, [pc, #264]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a41      	ldr	r2, [pc, #260]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fe2:	f7fc ffbf 	bl	8001f64 <HAL_GetTick>
 8004fe6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe8:	e008      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fea:	f7fc ffbb 	bl	8001f64 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b64      	cmp	r3, #100	; 0x64
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e1d6      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ffc:	4b38      	ldr	r3, [pc, #224]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0f0      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005008:	4b34      	ldr	r3, [pc, #208]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005010:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 8084 	beq.w	8005122 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005022:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005024:	429a      	cmp	r2, r3
 8005026:	d07c      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005028:	4b2c      	ldr	r3, [pc, #176]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005032:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005036:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	fa93 f3a3 	rbit	r3, r3
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005042:	fab3 f383 	clz	r3, r3
 8005046:	b2db      	uxtb	r3, r3
 8005048:	461a      	mov	r2, r3
 800504a:	4b26      	ldr	r3, [pc, #152]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	461a      	mov	r2, r3
 8005052:	2301      	movs	r3, #1
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800505a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505e:	fa93 f3a3 	rbit	r3, r3
 8005062:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005066:	fab3 f383 	clz	r3, r3
 800506a:	b2db      	uxtb	r3, r3
 800506c:	461a      	mov	r2, r3
 800506e:	4b1d      	ldr	r3, [pc, #116]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005070:	4413      	add	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	461a      	mov	r2, r3
 8005076:	2300      	movs	r3, #0
 8005078:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800507a:	4a18      	ldr	r2, [pc, #96]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800507c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800507e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d04b      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508a:	f7fc ff6b 	bl	8001f64 <HAL_GetTick>
 800508e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005090:	e00a      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005092:	f7fc ff67 	bl	8001f64 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e180      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80050a8:	2302      	movs	r3, #2
 80050aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	fa93 f3a3 	rbit	r3, r3
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
 80050b4:	2302      	movs	r3, #2
 80050b6:	623b      	str	r3, [r7, #32]
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	fa93 f3a3 	rbit	r3, r3
 80050be:	61fb      	str	r3, [r7, #28]
  return result;
 80050c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c2:	fab3 f383 	clz	r3, r3
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	095b      	lsrs	r3, r3, #5
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	f043 0302 	orr.w	r3, r3, #2
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d108      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80050d6:	4b01      	ldr	r3, [pc, #4]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	e00d      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80050dc:	40021000 	.word	0x40021000
 80050e0:	40007000 	.word	0x40007000
 80050e4:	10908100 	.word	0x10908100
 80050e8:	2302      	movs	r3, #2
 80050ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	fa93 f3a3 	rbit	r3, r3
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	4b9a      	ldr	r3, [pc, #616]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	2202      	movs	r2, #2
 80050fa:	613a      	str	r2, [r7, #16]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	fa92 f2a2 	rbit	r2, r2
 8005102:	60fa      	str	r2, [r7, #12]
  return result;
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	fab2 f282 	clz	r2, r2
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	f002 021f 	and.w	r2, r2, #31
 8005116:	2101      	movs	r1, #1
 8005118:	fa01 f202 	lsl.w	r2, r1, r2
 800511c:	4013      	ands	r3, r2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0b7      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005122:	4b8f      	ldr	r3, [pc, #572]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	498c      	ldr	r1, [pc, #560]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005130:	4313      	orrs	r3, r2
 8005132:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005134:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005138:	2b01      	cmp	r3, #1
 800513a:	d105      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800513c:	4b88      	ldr	r3, [pc, #544]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	4a87      	ldr	r2, [pc, #540]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005146:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d008      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005154:	4b82      	ldr	r3, [pc, #520]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	f023 0203 	bic.w	r2, r3, #3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	497f      	ldr	r1, [pc, #508]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005162:	4313      	orrs	r3, r2
 8005164:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d008      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005172:	4b7b      	ldr	r3, [pc, #492]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005176:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	4978      	ldr	r1, [pc, #480]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005180:	4313      	orrs	r3, r2
 8005182:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	d008      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005190:	4b73      	ldr	r3, [pc, #460]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	4970      	ldr	r1, [pc, #448]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d008      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051ae:	4b6c      	ldr	r3, [pc, #432]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	f023 0210 	bic.w	r2, r3, #16
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	4969      	ldr	r1, [pc, #420]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80051cc:	4b64      	ldr	r3, [pc, #400]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d8:	4961      	ldr	r1, [pc, #388]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d008      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051ea:	4b5d      	ldr	r3, [pc, #372]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ee:	f023 0220 	bic.w	r2, r3, #32
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	495a      	ldr	r1, [pc, #360]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d008      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005208:	4b55      	ldr	r3, [pc, #340]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800520a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	4952      	ldr	r1, [pc, #328]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005216:	4313      	orrs	r3, r2
 8005218:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d008      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005226:	4b4e      	ldr	r3, [pc, #312]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	494b      	ldr	r1, [pc, #300]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005234:	4313      	orrs	r3, r2
 8005236:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0310 	and.w	r3, r3, #16
 8005240:	2b00      	cmp	r3, #0
 8005242:	d008      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005244:	4b46      	ldr	r3, [pc, #280]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005248:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	4943      	ldr	r1, [pc, #268]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005252:	4313      	orrs	r3, r2
 8005254:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800525e:	2b00      	cmp	r3, #0
 8005260:	d008      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005262:	4b3f      	ldr	r3, [pc, #252]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	493c      	ldr	r1, [pc, #240]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005270:	4313      	orrs	r3, r2
 8005272:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527c:	2b00      	cmp	r3, #0
 800527e:	d008      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005280:	4b37      	ldr	r3, [pc, #220]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528c:	4934      	ldr	r1, [pc, #208]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800528e:	4313      	orrs	r3, r2
 8005290:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529a:	2b00      	cmp	r3, #0
 800529c:	d008      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800529e:	4b30      	ldr	r3, [pc, #192]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052aa:	492d      	ldr	r1, [pc, #180]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d008      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80052bc:	4b28      	ldr	r3, [pc, #160]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c8:	4925      	ldr	r1, [pc, #148]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d008      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80052da:	4b21      	ldr	r3, [pc, #132]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	491e      	ldr	r1, [pc, #120]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80052f8:	4b19      	ldr	r3, [pc, #100]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	4916      	ldr	r1, [pc, #88]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005306:	4313      	orrs	r3, r2
 8005308:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d008      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005316:	4b12      	ldr	r3, [pc, #72]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005322:	490f      	ldr	r1, [pc, #60]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005324:	4313      	orrs	r3, r2
 8005326:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d008      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005334:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005338:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005340:	4907      	ldr	r1, [pc, #28]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005342:	4313      	orrs	r3, r2
 8005344:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00c      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005352:	4b03      	ldr	r3, [pc, #12]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005356:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	e002      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800535e:	bf00      	nop
 8005360:	40021000 	.word	0x40021000
 8005364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005366:	4913      	ldr	r1, [pc, #76]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005368:	4313      	orrs	r3, r2
 800536a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d008      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005378:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005384:	490b      	ldr	r1, [pc, #44]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005386:	4313      	orrs	r3, r2
 8005388:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d008      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005396:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a2:	4904      	ldr	r1, [pc, #16]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3748      	adds	r7, #72	; 0x48
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40021000 	.word	0x40021000

080053b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e049      	b.n	800545e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d106      	bne.n	80053e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fc fae4 	bl	80019ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3304      	adds	r3, #4
 80053f4:	4619      	mov	r1, r3
 80053f6:	4610      	mov	r0, r2
 80053f8:	f000 fb80 	bl	8005afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e049      	b.n	800550c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d106      	bne.n	8005492 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f841 	bl	8005514 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3304      	adds	r3, #4
 80054a2:	4619      	mov	r1, r3
 80054a4:	4610      	mov	r0, r2
 80054a6:	f000 fb29 	bl	8005afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d109      	bne.n	800554c <HAL_TIM_PWM_Start+0x24>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b01      	cmp	r3, #1
 8005542:	bf14      	ite	ne
 8005544:	2301      	movne	r3, #1
 8005546:	2300      	moveq	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	e03c      	b.n	80055c6 <HAL_TIM_PWM_Start+0x9e>
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2b04      	cmp	r3, #4
 8005550:	d109      	bne.n	8005566 <HAL_TIM_PWM_Start+0x3e>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b01      	cmp	r3, #1
 800555c:	bf14      	ite	ne
 800555e:	2301      	movne	r3, #1
 8005560:	2300      	moveq	r3, #0
 8005562:	b2db      	uxtb	r3, r3
 8005564:	e02f      	b.n	80055c6 <HAL_TIM_PWM_Start+0x9e>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b08      	cmp	r3, #8
 800556a:	d109      	bne.n	8005580 <HAL_TIM_PWM_Start+0x58>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b01      	cmp	r3, #1
 8005576:	bf14      	ite	ne
 8005578:	2301      	movne	r3, #1
 800557a:	2300      	moveq	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	e022      	b.n	80055c6 <HAL_TIM_PWM_Start+0x9e>
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b0c      	cmp	r3, #12
 8005584:	d109      	bne.n	800559a <HAL_TIM_PWM_Start+0x72>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b01      	cmp	r3, #1
 8005590:	bf14      	ite	ne
 8005592:	2301      	movne	r3, #1
 8005594:	2300      	moveq	r3, #0
 8005596:	b2db      	uxtb	r3, r3
 8005598:	e015      	b.n	80055c6 <HAL_TIM_PWM_Start+0x9e>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b10      	cmp	r3, #16
 800559e:	d109      	bne.n	80055b4 <HAL_TIM_PWM_Start+0x8c>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	bf14      	ite	ne
 80055ac:	2301      	movne	r3, #1
 80055ae:	2300      	moveq	r3, #0
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	e008      	b.n	80055c6 <HAL_TIM_PWM_Start+0x9e>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b01      	cmp	r3, #1
 80055be:	bf14      	ite	ne
 80055c0:	2301      	movne	r3, #1
 80055c2:	2300      	moveq	r3, #0
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e0a1      	b.n	8005712 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d104      	bne.n	80055de <HAL_TIM_PWM_Start+0xb6>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055dc:	e023      	b.n	8005626 <HAL_TIM_PWM_Start+0xfe>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d104      	bne.n	80055ee <HAL_TIM_PWM_Start+0xc6>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055ec:	e01b      	b.n	8005626 <HAL_TIM_PWM_Start+0xfe>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d104      	bne.n	80055fe <HAL_TIM_PWM_Start+0xd6>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055fc:	e013      	b.n	8005626 <HAL_TIM_PWM_Start+0xfe>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b0c      	cmp	r3, #12
 8005602:	d104      	bne.n	800560e <HAL_TIM_PWM_Start+0xe6>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800560c:	e00b      	b.n	8005626 <HAL_TIM_PWM_Start+0xfe>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b10      	cmp	r3, #16
 8005612:	d104      	bne.n	800561e <HAL_TIM_PWM_Start+0xf6>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800561c:	e003      	b.n	8005626 <HAL_TIM_PWM_Start+0xfe>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2202      	movs	r2, #2
 8005622:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2201      	movs	r2, #1
 800562c:	6839      	ldr	r1, [r7, #0]
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fea2 	bl	8006378 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a38      	ldr	r2, [pc, #224]	; (800571c <HAL_TIM_PWM_Start+0x1f4>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d018      	beq.n	8005670 <HAL_TIM_PWM_Start+0x148>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a37      	ldr	r2, [pc, #220]	; (8005720 <HAL_TIM_PWM_Start+0x1f8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d013      	beq.n	8005670 <HAL_TIM_PWM_Start+0x148>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a35      	ldr	r2, [pc, #212]	; (8005724 <HAL_TIM_PWM_Start+0x1fc>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00e      	beq.n	8005670 <HAL_TIM_PWM_Start+0x148>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a34      	ldr	r2, [pc, #208]	; (8005728 <HAL_TIM_PWM_Start+0x200>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d009      	beq.n	8005670 <HAL_TIM_PWM_Start+0x148>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a32      	ldr	r2, [pc, #200]	; (800572c <HAL_TIM_PWM_Start+0x204>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d004      	beq.n	8005670 <HAL_TIM_PWM_Start+0x148>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a31      	ldr	r2, [pc, #196]	; (8005730 <HAL_TIM_PWM_Start+0x208>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d101      	bne.n	8005674 <HAL_TIM_PWM_Start+0x14c>
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <HAL_TIM_PWM_Start+0x14e>
 8005674:	2300      	movs	r3, #0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d007      	beq.n	800568a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005688:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a23      	ldr	r2, [pc, #140]	; (800571c <HAL_TIM_PWM_Start+0x1f4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d01d      	beq.n	80056d0 <HAL_TIM_PWM_Start+0x1a8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569c:	d018      	beq.n	80056d0 <HAL_TIM_PWM_Start+0x1a8>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a24      	ldr	r2, [pc, #144]	; (8005734 <HAL_TIM_PWM_Start+0x20c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d013      	beq.n	80056d0 <HAL_TIM_PWM_Start+0x1a8>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a22      	ldr	r2, [pc, #136]	; (8005738 <HAL_TIM_PWM_Start+0x210>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00e      	beq.n	80056d0 <HAL_TIM_PWM_Start+0x1a8>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a1a      	ldr	r2, [pc, #104]	; (8005720 <HAL_TIM_PWM_Start+0x1f8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d009      	beq.n	80056d0 <HAL_TIM_PWM_Start+0x1a8>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a18      	ldr	r2, [pc, #96]	; (8005724 <HAL_TIM_PWM_Start+0x1fc>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d004      	beq.n	80056d0 <HAL_TIM_PWM_Start+0x1a8>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a19      	ldr	r2, [pc, #100]	; (8005730 <HAL_TIM_PWM_Start+0x208>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d115      	bne.n	80056fc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	4b19      	ldr	r3, [pc, #100]	; (800573c <HAL_TIM_PWM_Start+0x214>)
 80056d8:	4013      	ands	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b06      	cmp	r3, #6
 80056e0:	d015      	beq.n	800570e <HAL_TIM_PWM_Start+0x1e6>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e8:	d011      	beq.n	800570e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0201 	orr.w	r2, r2, #1
 80056f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056fa:	e008      	b.n	800570e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0201 	orr.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	e000      	b.n	8005710 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	40012c00 	.word	0x40012c00
 8005720:	40013400 	.word	0x40013400
 8005724:	40014000 	.word	0x40014000
 8005728:	40014400 	.word	0x40014400
 800572c:	40014800 	.word	0x40014800
 8005730:	40015000 	.word	0x40015000
 8005734:	40000400 	.word	0x40000400
 8005738:	40000800 	.word	0x40000800
 800573c:	00010007 	.word	0x00010007

08005740 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005756:	2b01      	cmp	r3, #1
 8005758:	d101      	bne.n	800575e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800575a:	2302      	movs	r3, #2
 800575c:	e0ff      	b.n	800595e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b14      	cmp	r3, #20
 800576a:	f200 80f0 	bhi.w	800594e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800576e:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	080057c9 	.word	0x080057c9
 8005778:	0800594f 	.word	0x0800594f
 800577c:	0800594f 	.word	0x0800594f
 8005780:	0800594f 	.word	0x0800594f
 8005784:	08005809 	.word	0x08005809
 8005788:	0800594f 	.word	0x0800594f
 800578c:	0800594f 	.word	0x0800594f
 8005790:	0800594f 	.word	0x0800594f
 8005794:	0800584b 	.word	0x0800584b
 8005798:	0800594f 	.word	0x0800594f
 800579c:	0800594f 	.word	0x0800594f
 80057a0:	0800594f 	.word	0x0800594f
 80057a4:	0800588b 	.word	0x0800588b
 80057a8:	0800594f 	.word	0x0800594f
 80057ac:	0800594f 	.word	0x0800594f
 80057b0:	0800594f 	.word	0x0800594f
 80057b4:	080058cd 	.word	0x080058cd
 80057b8:	0800594f 	.word	0x0800594f
 80057bc:	0800594f 	.word	0x0800594f
 80057c0:	0800594f 	.word	0x0800594f
 80057c4:	0800590d 	.word	0x0800590d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fa32 	bl	8005c38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699a      	ldr	r2, [r3, #24]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0208 	orr.w	r2, r2, #8
 80057e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0204 	bic.w	r2, r2, #4
 80057f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6999      	ldr	r1, [r3, #24]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	619a      	str	r2, [r3, #24]
      break;
 8005806:	e0a5      	b.n	8005954 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 faac 	bl	8005d6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699a      	ldr	r2, [r3, #24]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6999      	ldr	r1, [r3, #24]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	021a      	lsls	r2, r3, #8
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	619a      	str	r2, [r3, #24]
      break;
 8005848:	e084      	b.n	8005954 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68b9      	ldr	r1, [r7, #8]
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fb1f 	bl	8005e94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0208 	orr.w	r2, r2, #8
 8005864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69da      	ldr	r2, [r3, #28]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0204 	bic.w	r2, r2, #4
 8005874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69d9      	ldr	r1, [r3, #28]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	691a      	ldr	r2, [r3, #16]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	61da      	str	r2, [r3, #28]
      break;
 8005888:	e064      	b.n	8005954 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68b9      	ldr	r1, [r7, #8]
 8005890:	4618      	mov	r0, r3
 8005892:	f000 fb91 	bl	8005fb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69da      	ldr	r2, [r3, #28]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69da      	ldr	r2, [r3, #28]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69d9      	ldr	r1, [r3, #28]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	021a      	lsls	r2, r3, #8
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	61da      	str	r2, [r3, #28]
      break;
 80058ca:	e043      	b.n	8005954 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68b9      	ldr	r1, [r7, #8]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fbe0 	bl	8006098 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0208 	orr.w	r2, r2, #8
 80058e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0204 	bic.w	r2, r2, #4
 80058f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800590a:	e023      	b.n	8005954 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fc2a 	bl	800616c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005926:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005936:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	021a      	lsls	r2, r3, #8
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800594c:	e002      	b.n	8005954 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	75fb      	strb	r3, [r7, #23]
      break;
 8005952:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800595c:	7dfb      	ldrb	r3, [r7, #23]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop

08005968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_TIM_ConfigClockSource+0x1c>
 8005980:	2302      	movs	r3, #2
 8005982:	e0b6      	b.n	8005af2 <HAL_TIM_ConfigClockSource+0x18a>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059c0:	d03e      	beq.n	8005a40 <HAL_TIM_ConfigClockSource+0xd8>
 80059c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059c6:	f200 8087 	bhi.w	8005ad8 <HAL_TIM_ConfigClockSource+0x170>
 80059ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ce:	f000 8086 	beq.w	8005ade <HAL_TIM_ConfigClockSource+0x176>
 80059d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d6:	d87f      	bhi.n	8005ad8 <HAL_TIM_ConfigClockSource+0x170>
 80059d8:	2b70      	cmp	r3, #112	; 0x70
 80059da:	d01a      	beq.n	8005a12 <HAL_TIM_ConfigClockSource+0xaa>
 80059dc:	2b70      	cmp	r3, #112	; 0x70
 80059de:	d87b      	bhi.n	8005ad8 <HAL_TIM_ConfigClockSource+0x170>
 80059e0:	2b60      	cmp	r3, #96	; 0x60
 80059e2:	d050      	beq.n	8005a86 <HAL_TIM_ConfigClockSource+0x11e>
 80059e4:	2b60      	cmp	r3, #96	; 0x60
 80059e6:	d877      	bhi.n	8005ad8 <HAL_TIM_ConfigClockSource+0x170>
 80059e8:	2b50      	cmp	r3, #80	; 0x50
 80059ea:	d03c      	beq.n	8005a66 <HAL_TIM_ConfigClockSource+0xfe>
 80059ec:	2b50      	cmp	r3, #80	; 0x50
 80059ee:	d873      	bhi.n	8005ad8 <HAL_TIM_ConfigClockSource+0x170>
 80059f0:	2b40      	cmp	r3, #64	; 0x40
 80059f2:	d058      	beq.n	8005aa6 <HAL_TIM_ConfigClockSource+0x13e>
 80059f4:	2b40      	cmp	r3, #64	; 0x40
 80059f6:	d86f      	bhi.n	8005ad8 <HAL_TIM_ConfigClockSource+0x170>
 80059f8:	2b30      	cmp	r3, #48	; 0x30
 80059fa:	d064      	beq.n	8005ac6 <HAL_TIM_ConfigClockSource+0x15e>
 80059fc:	2b30      	cmp	r3, #48	; 0x30
 80059fe:	d86b      	bhi.n	8005ad8 <HAL_TIM_ConfigClockSource+0x170>
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	d060      	beq.n	8005ac6 <HAL_TIM_ConfigClockSource+0x15e>
 8005a04:	2b20      	cmp	r3, #32
 8005a06:	d867      	bhi.n	8005ad8 <HAL_TIM_ConfigClockSource+0x170>
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d05c      	beq.n	8005ac6 <HAL_TIM_ConfigClockSource+0x15e>
 8005a0c:	2b10      	cmp	r3, #16
 8005a0e:	d05a      	beq.n	8005ac6 <HAL_TIM_ConfigClockSource+0x15e>
 8005a10:	e062      	b.n	8005ad8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6818      	ldr	r0, [r3, #0]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	6899      	ldr	r1, [r3, #8]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f000 fc89 	bl	8006338 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	609a      	str	r2, [r3, #8]
      break;
 8005a3e:	e04f      	b.n	8005ae0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	6899      	ldr	r1, [r3, #8]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f000 fc72 	bl	8006338 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a62:	609a      	str	r2, [r3, #8]
      break;
 8005a64:	e03c      	b.n	8005ae0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6818      	ldr	r0, [r3, #0]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	6859      	ldr	r1, [r3, #4]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	461a      	mov	r2, r3
 8005a74:	f000 fbe6 	bl	8006244 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2150      	movs	r1, #80	; 0x50
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fc3f 	bl	8006302 <TIM_ITRx_SetConfig>
      break;
 8005a84:	e02c      	b.n	8005ae0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6818      	ldr	r0, [r3, #0]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	6859      	ldr	r1, [r3, #4]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	461a      	mov	r2, r3
 8005a94:	f000 fc05 	bl	80062a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2160      	movs	r1, #96	; 0x60
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fc2f 	bl	8006302 <TIM_ITRx_SetConfig>
      break;
 8005aa4:	e01c      	b.n	8005ae0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	6859      	ldr	r1, [r3, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f000 fbc6 	bl	8006244 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2140      	movs	r1, #64	; 0x40
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fc1f 	bl	8006302 <TIM_ITRx_SetConfig>
      break;
 8005ac4:	e00c      	b.n	8005ae0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4619      	mov	r1, r3
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	f000 fc16 	bl	8006302 <TIM_ITRx_SetConfig>
      break;
 8005ad6:	e003      	b.n	8005ae0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	73fb      	strb	r3, [r7, #15]
      break;
 8005adc:	e000      	b.n	8005ae0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005ade:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a42      	ldr	r2, [pc, #264]	; (8005c18 <TIM_Base_SetConfig+0x11c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d013      	beq.n	8005b3c <TIM_Base_SetConfig+0x40>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b1a:	d00f      	beq.n	8005b3c <TIM_Base_SetConfig+0x40>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a3f      	ldr	r2, [pc, #252]	; (8005c1c <TIM_Base_SetConfig+0x120>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00b      	beq.n	8005b3c <TIM_Base_SetConfig+0x40>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a3e      	ldr	r2, [pc, #248]	; (8005c20 <TIM_Base_SetConfig+0x124>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d007      	beq.n	8005b3c <TIM_Base_SetConfig+0x40>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a3d      	ldr	r2, [pc, #244]	; (8005c24 <TIM_Base_SetConfig+0x128>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d003      	beq.n	8005b3c <TIM_Base_SetConfig+0x40>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a3c      	ldr	r2, [pc, #240]	; (8005c28 <TIM_Base_SetConfig+0x12c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d108      	bne.n	8005b4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a31      	ldr	r2, [pc, #196]	; (8005c18 <TIM_Base_SetConfig+0x11c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d01f      	beq.n	8005b96 <TIM_Base_SetConfig+0x9a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b5c:	d01b      	beq.n	8005b96 <TIM_Base_SetConfig+0x9a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a2e      	ldr	r2, [pc, #184]	; (8005c1c <TIM_Base_SetConfig+0x120>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d017      	beq.n	8005b96 <TIM_Base_SetConfig+0x9a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a2d      	ldr	r2, [pc, #180]	; (8005c20 <TIM_Base_SetConfig+0x124>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d013      	beq.n	8005b96 <TIM_Base_SetConfig+0x9a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a2c      	ldr	r2, [pc, #176]	; (8005c24 <TIM_Base_SetConfig+0x128>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00f      	beq.n	8005b96 <TIM_Base_SetConfig+0x9a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a2c      	ldr	r2, [pc, #176]	; (8005c2c <TIM_Base_SetConfig+0x130>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d00b      	beq.n	8005b96 <TIM_Base_SetConfig+0x9a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a2b      	ldr	r2, [pc, #172]	; (8005c30 <TIM_Base_SetConfig+0x134>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d007      	beq.n	8005b96 <TIM_Base_SetConfig+0x9a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a2a      	ldr	r2, [pc, #168]	; (8005c34 <TIM_Base_SetConfig+0x138>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d003      	beq.n	8005b96 <TIM_Base_SetConfig+0x9a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a25      	ldr	r2, [pc, #148]	; (8005c28 <TIM_Base_SetConfig+0x12c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d108      	bne.n	8005ba8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a12      	ldr	r2, [pc, #72]	; (8005c18 <TIM_Base_SetConfig+0x11c>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d013      	beq.n	8005bfc <TIM_Base_SetConfig+0x100>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a13      	ldr	r2, [pc, #76]	; (8005c24 <TIM_Base_SetConfig+0x128>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00f      	beq.n	8005bfc <TIM_Base_SetConfig+0x100>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a13      	ldr	r2, [pc, #76]	; (8005c2c <TIM_Base_SetConfig+0x130>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00b      	beq.n	8005bfc <TIM_Base_SetConfig+0x100>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a12      	ldr	r2, [pc, #72]	; (8005c30 <TIM_Base_SetConfig+0x134>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d007      	beq.n	8005bfc <TIM_Base_SetConfig+0x100>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a11      	ldr	r2, [pc, #68]	; (8005c34 <TIM_Base_SetConfig+0x138>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d003      	beq.n	8005bfc <TIM_Base_SetConfig+0x100>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a0c      	ldr	r2, [pc, #48]	; (8005c28 <TIM_Base_SetConfig+0x12c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d103      	bne.n	8005c04 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	691a      	ldr	r2, [r3, #16]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	615a      	str	r2, [r3, #20]
}
 8005c0a:	bf00      	nop
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40012c00 	.word	0x40012c00
 8005c1c:	40000400 	.word	0x40000400
 8005c20:	40000800 	.word	0x40000800
 8005c24:	40013400 	.word	0x40013400
 8005c28:	40015000 	.word	0x40015000
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	40014400 	.word	0x40014400
 8005c34:	40014800 	.word	0x40014800

08005c38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	f023 0201 	bic.w	r2, r3, #1
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0303 	bic.w	r3, r3, #3
 8005c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f023 0302 	bic.w	r3, r3, #2
 8005c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a30      	ldr	r2, [pc, #192]	; (8005d54 <TIM_OC1_SetConfig+0x11c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d013      	beq.n	8005cc0 <TIM_OC1_SetConfig+0x88>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a2f      	ldr	r2, [pc, #188]	; (8005d58 <TIM_OC1_SetConfig+0x120>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00f      	beq.n	8005cc0 <TIM_OC1_SetConfig+0x88>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a2e      	ldr	r2, [pc, #184]	; (8005d5c <TIM_OC1_SetConfig+0x124>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00b      	beq.n	8005cc0 <TIM_OC1_SetConfig+0x88>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a2d      	ldr	r2, [pc, #180]	; (8005d60 <TIM_OC1_SetConfig+0x128>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d007      	beq.n	8005cc0 <TIM_OC1_SetConfig+0x88>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a2c      	ldr	r2, [pc, #176]	; (8005d64 <TIM_OC1_SetConfig+0x12c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d003      	beq.n	8005cc0 <TIM_OC1_SetConfig+0x88>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a2b      	ldr	r2, [pc, #172]	; (8005d68 <TIM_OC1_SetConfig+0x130>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d10c      	bne.n	8005cda <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f023 0308 	bic.w	r3, r3, #8
 8005cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f023 0304 	bic.w	r3, r3, #4
 8005cd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a1d      	ldr	r2, [pc, #116]	; (8005d54 <TIM_OC1_SetConfig+0x11c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d013      	beq.n	8005d0a <TIM_OC1_SetConfig+0xd2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a1c      	ldr	r2, [pc, #112]	; (8005d58 <TIM_OC1_SetConfig+0x120>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d00f      	beq.n	8005d0a <TIM_OC1_SetConfig+0xd2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a1b      	ldr	r2, [pc, #108]	; (8005d5c <TIM_OC1_SetConfig+0x124>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00b      	beq.n	8005d0a <TIM_OC1_SetConfig+0xd2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a1a      	ldr	r2, [pc, #104]	; (8005d60 <TIM_OC1_SetConfig+0x128>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d007      	beq.n	8005d0a <TIM_OC1_SetConfig+0xd2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a19      	ldr	r2, [pc, #100]	; (8005d64 <TIM_OC1_SetConfig+0x12c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d003      	beq.n	8005d0a <TIM_OC1_SetConfig+0xd2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a18      	ldr	r2, [pc, #96]	; (8005d68 <TIM_OC1_SetConfig+0x130>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d111      	bne.n	8005d2e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	621a      	str	r2, [r3, #32]
}
 8005d48:	bf00      	nop
 8005d4a:	371c      	adds	r7, #28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	40012c00 	.word	0x40012c00
 8005d58:	40013400 	.word	0x40013400
 8005d5c:	40014000 	.word	0x40014000
 8005d60:	40014400 	.word	0x40014400
 8005d64:	40014800 	.word	0x40014800
 8005d68:	40015000 	.word	0x40015000

08005d6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	f023 0210 	bic.w	r2, r3, #16
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	021b      	lsls	r3, r3, #8
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f023 0320 	bic.w	r3, r3, #32
 8005dba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	011b      	lsls	r3, r3, #4
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a2c      	ldr	r2, [pc, #176]	; (8005e7c <TIM_OC2_SetConfig+0x110>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d007      	beq.n	8005de0 <TIM_OC2_SetConfig+0x74>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a2b      	ldr	r2, [pc, #172]	; (8005e80 <TIM_OC2_SetConfig+0x114>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d003      	beq.n	8005de0 <TIM_OC2_SetConfig+0x74>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a2a      	ldr	r2, [pc, #168]	; (8005e84 <TIM_OC2_SetConfig+0x118>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d10d      	bne.n	8005dfc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a1f      	ldr	r2, [pc, #124]	; (8005e7c <TIM_OC2_SetConfig+0x110>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d013      	beq.n	8005e2c <TIM_OC2_SetConfig+0xc0>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a1e      	ldr	r2, [pc, #120]	; (8005e80 <TIM_OC2_SetConfig+0x114>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00f      	beq.n	8005e2c <TIM_OC2_SetConfig+0xc0>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a1e      	ldr	r2, [pc, #120]	; (8005e88 <TIM_OC2_SetConfig+0x11c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00b      	beq.n	8005e2c <TIM_OC2_SetConfig+0xc0>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a1d      	ldr	r2, [pc, #116]	; (8005e8c <TIM_OC2_SetConfig+0x120>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d007      	beq.n	8005e2c <TIM_OC2_SetConfig+0xc0>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a1c      	ldr	r2, [pc, #112]	; (8005e90 <TIM_OC2_SetConfig+0x124>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d003      	beq.n	8005e2c <TIM_OC2_SetConfig+0xc0>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a17      	ldr	r2, [pc, #92]	; (8005e84 <TIM_OC2_SetConfig+0x118>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d113      	bne.n	8005e54 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e32:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e3a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	621a      	str	r2, [r3, #32]
}
 8005e6e:	bf00      	nop
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40012c00 	.word	0x40012c00
 8005e80:	40013400 	.word	0x40013400
 8005e84:	40015000 	.word	0x40015000
 8005e88:	40014000 	.word	0x40014000
 8005e8c:	40014400 	.word	0x40014400
 8005e90:	40014800 	.word	0x40014800

08005e94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 0303 	bic.w	r3, r3, #3
 8005ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	021b      	lsls	r3, r3, #8
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a2b      	ldr	r2, [pc, #172]	; (8005fa0 <TIM_OC3_SetConfig+0x10c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d007      	beq.n	8005f06 <TIM_OC3_SetConfig+0x72>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a2a      	ldr	r2, [pc, #168]	; (8005fa4 <TIM_OC3_SetConfig+0x110>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d003      	beq.n	8005f06 <TIM_OC3_SetConfig+0x72>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a29      	ldr	r2, [pc, #164]	; (8005fa8 <TIM_OC3_SetConfig+0x114>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d10d      	bne.n	8005f22 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f20:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <TIM_OC3_SetConfig+0x10c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d013      	beq.n	8005f52 <TIM_OC3_SetConfig+0xbe>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a1d      	ldr	r2, [pc, #116]	; (8005fa4 <TIM_OC3_SetConfig+0x110>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00f      	beq.n	8005f52 <TIM_OC3_SetConfig+0xbe>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a1d      	ldr	r2, [pc, #116]	; (8005fac <TIM_OC3_SetConfig+0x118>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d00b      	beq.n	8005f52 <TIM_OC3_SetConfig+0xbe>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a1c      	ldr	r2, [pc, #112]	; (8005fb0 <TIM_OC3_SetConfig+0x11c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d007      	beq.n	8005f52 <TIM_OC3_SetConfig+0xbe>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a1b      	ldr	r2, [pc, #108]	; (8005fb4 <TIM_OC3_SetConfig+0x120>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d003      	beq.n	8005f52 <TIM_OC3_SetConfig+0xbe>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a16      	ldr	r2, [pc, #88]	; (8005fa8 <TIM_OC3_SetConfig+0x114>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d113      	bne.n	8005f7a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	011b      	lsls	r3, r3, #4
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	621a      	str	r2, [r3, #32]
}
 8005f94:	bf00      	nop
 8005f96:	371c      	adds	r7, #28
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	40012c00 	.word	0x40012c00
 8005fa4:	40013400 	.word	0x40013400
 8005fa8:	40015000 	.word	0x40015000
 8005fac:	40014000 	.word	0x40014000
 8005fb0:	40014400 	.word	0x40014400
 8005fb4:	40014800 	.word	0x40014800

08005fb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	031b      	lsls	r3, r3, #12
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a1a      	ldr	r2, [pc, #104]	; (8006080 <TIM_OC4_SetConfig+0xc8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d013      	beq.n	8006044 <TIM_OC4_SetConfig+0x8c>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a19      	ldr	r2, [pc, #100]	; (8006084 <TIM_OC4_SetConfig+0xcc>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d00f      	beq.n	8006044 <TIM_OC4_SetConfig+0x8c>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a18      	ldr	r2, [pc, #96]	; (8006088 <TIM_OC4_SetConfig+0xd0>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00b      	beq.n	8006044 <TIM_OC4_SetConfig+0x8c>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a17      	ldr	r2, [pc, #92]	; (800608c <TIM_OC4_SetConfig+0xd4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d007      	beq.n	8006044 <TIM_OC4_SetConfig+0x8c>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a16      	ldr	r2, [pc, #88]	; (8006090 <TIM_OC4_SetConfig+0xd8>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d003      	beq.n	8006044 <TIM_OC4_SetConfig+0x8c>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a15      	ldr	r2, [pc, #84]	; (8006094 <TIM_OC4_SetConfig+0xdc>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d109      	bne.n	8006058 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800604a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	019b      	lsls	r3, r3, #6
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	4313      	orrs	r3, r2
 8006056:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40012c00 	.word	0x40012c00
 8006084:	40013400 	.word	0x40013400
 8006088:	40014000 	.word	0x40014000
 800608c:	40014400 	.word	0x40014400
 8006090:	40014800 	.word	0x40014800
 8006094:	40015000 	.word	0x40015000

08006098 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80060dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	041b      	lsls	r3, r3, #16
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a19      	ldr	r2, [pc, #100]	; (8006154 <TIM_OC5_SetConfig+0xbc>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d013      	beq.n	800611a <TIM_OC5_SetConfig+0x82>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a18      	ldr	r2, [pc, #96]	; (8006158 <TIM_OC5_SetConfig+0xc0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00f      	beq.n	800611a <TIM_OC5_SetConfig+0x82>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a17      	ldr	r2, [pc, #92]	; (800615c <TIM_OC5_SetConfig+0xc4>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00b      	beq.n	800611a <TIM_OC5_SetConfig+0x82>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a16      	ldr	r2, [pc, #88]	; (8006160 <TIM_OC5_SetConfig+0xc8>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d007      	beq.n	800611a <TIM_OC5_SetConfig+0x82>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a15      	ldr	r2, [pc, #84]	; (8006164 <TIM_OC5_SetConfig+0xcc>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d003      	beq.n	800611a <TIM_OC5_SetConfig+0x82>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a14      	ldr	r2, [pc, #80]	; (8006168 <TIM_OC5_SetConfig+0xd0>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d109      	bne.n	800612e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006120:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	021b      	lsls	r3, r3, #8
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	621a      	str	r2, [r3, #32]
}
 8006148:	bf00      	nop
 800614a:	371c      	adds	r7, #28
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	40012c00 	.word	0x40012c00
 8006158:	40013400 	.word	0x40013400
 800615c:	40014000 	.word	0x40014000
 8006160:	40014400 	.word	0x40014400
 8006164:	40014800 	.word	0x40014800
 8006168:	40015000 	.word	0x40015000

0800616c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800619a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800619e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	051b      	lsls	r3, r3, #20
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a1a      	ldr	r2, [pc, #104]	; (800622c <TIM_OC6_SetConfig+0xc0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d013      	beq.n	80061f0 <TIM_OC6_SetConfig+0x84>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a19      	ldr	r2, [pc, #100]	; (8006230 <TIM_OC6_SetConfig+0xc4>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d00f      	beq.n	80061f0 <TIM_OC6_SetConfig+0x84>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a18      	ldr	r2, [pc, #96]	; (8006234 <TIM_OC6_SetConfig+0xc8>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00b      	beq.n	80061f0 <TIM_OC6_SetConfig+0x84>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a17      	ldr	r2, [pc, #92]	; (8006238 <TIM_OC6_SetConfig+0xcc>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d007      	beq.n	80061f0 <TIM_OC6_SetConfig+0x84>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a16      	ldr	r2, [pc, #88]	; (800623c <TIM_OC6_SetConfig+0xd0>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d003      	beq.n	80061f0 <TIM_OC6_SetConfig+0x84>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a15      	ldr	r2, [pc, #84]	; (8006240 <TIM_OC6_SetConfig+0xd4>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d109      	bne.n	8006204 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	029b      	lsls	r3, r3, #10
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	4313      	orrs	r3, r2
 8006202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	621a      	str	r2, [r3, #32]
}
 800621e:	bf00      	nop
 8006220:	371c      	adds	r7, #28
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	40012c00 	.word	0x40012c00
 8006230:	40013400 	.word	0x40013400
 8006234:	40014000 	.word	0x40014000
 8006238:	40014400 	.word	0x40014400
 800623c:	40014800 	.word	0x40014800
 8006240:	40015000 	.word	0x40015000

08006244 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	f023 0201 	bic.w	r2, r3, #1
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800626e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	4313      	orrs	r3, r2
 8006278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f023 030a 	bic.w	r3, r3, #10
 8006280:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4313      	orrs	r3, r2
 8006288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	621a      	str	r2, [r3, #32]
}
 8006296:	bf00      	nop
 8006298:	371c      	adds	r7, #28
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b087      	sub	sp, #28
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	f023 0210 	bic.w	r2, r3, #16
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	031b      	lsls	r3, r3, #12
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	621a      	str	r2, [r3, #32]
}
 80062f6:	bf00      	nop
 80062f8:	371c      	adds	r7, #28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006302:	b480      	push	{r7}
 8006304:	b085      	sub	sp, #20
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006318:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	f043 0307 	orr.w	r3, r3, #7
 8006324:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	609a      	str	r2, [r3, #8]
}
 800632c:	bf00      	nop
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006352:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	021a      	lsls	r2, r3, #8
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	431a      	orrs	r2, r3
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4313      	orrs	r3, r2
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	4313      	orrs	r3, r2
 8006364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	609a      	str	r2, [r3, #8]
}
 800636c:	bf00      	nop
 800636e:	371c      	adds	r7, #28
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f003 031f 	and.w	r3, r3, #31
 800638a:	2201      	movs	r2, #1
 800638c:	fa02 f303 	lsl.w	r3, r2, r3
 8006390:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a1a      	ldr	r2, [r3, #32]
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	43db      	mvns	r3, r3
 800639a:	401a      	ands	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a1a      	ldr	r2, [r3, #32]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	f003 031f 	and.w	r3, r3, #31
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	fa01 f303 	lsl.w	r3, r1, r3
 80063b0:	431a      	orrs	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	621a      	str	r2, [r3, #32]
}
 80063b6:	bf00      	nop
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
	...

080063c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d101      	bne.n	80063dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063d8:	2302      	movs	r3, #2
 80063da:	e06d      	b.n	80064b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a30      	ldr	r2, [pc, #192]	; (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d009      	beq.n	800641a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a2f      	ldr	r2, [pc, #188]	; (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d004      	beq.n	800641a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a2d      	ldr	r2, [pc, #180]	; (80064cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d108      	bne.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006420:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006432:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a1e      	ldr	r2, [pc, #120]	; (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d01d      	beq.n	800648c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006458:	d018      	beq.n	800648c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a1c      	ldr	r2, [pc, #112]	; (80064d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d013      	beq.n	800648c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a1a      	ldr	r2, [pc, #104]	; (80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00e      	beq.n	800648c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a15      	ldr	r2, [pc, #84]	; (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d009      	beq.n	800648c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a16      	ldr	r2, [pc, #88]	; (80064d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d004      	beq.n	800648c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a11      	ldr	r2, [pc, #68]	; (80064cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d10c      	bne.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006492:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	4313      	orrs	r3, r2
 800649c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	40012c00 	.word	0x40012c00
 80064c8:	40013400 	.word	0x40013400
 80064cc:	40015000 	.word	0x40015000
 80064d0:	40000400 	.word	0x40000400
 80064d4:	40000800 	.word	0x40000800
 80064d8:	40014000 	.word	0x40014000

080064dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e040      	b.n	8006570 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d106      	bne.n	8006504 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7fb fb38 	bl	8001b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2224      	movs	r2, #36	; 0x24
 8006508:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 0201 	bic.w	r2, r2, #1
 8006518:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fc5e 	bl	8006ddc <UART_SetConfig>
 8006520:	4603      	mov	r3, r0
 8006522:	2b01      	cmp	r3, #1
 8006524:	d101      	bne.n	800652a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e022      	b.n	8006570 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	2b00      	cmp	r3, #0
 8006530:	d002      	beq.n	8006538 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fe26 	bl	8007184 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006546:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006556:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f042 0201 	orr.w	r2, r2, #1
 8006566:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fead 	bl	80072c8 <UART_CheckIdleState>
 800656e:	4603      	mov	r3, r0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08a      	sub	sp, #40	; 0x28
 800657c:	af02      	add	r7, sp, #8
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	603b      	str	r3, [r7, #0]
 8006584:	4613      	mov	r3, r2
 8006586:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800658c:	2b20      	cmp	r3, #32
 800658e:	d178      	bne.n	8006682 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <HAL_UART_Transmit+0x24>
 8006596:	88fb      	ldrh	r3, [r7, #6]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e071      	b.n	8006684 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2221      	movs	r2, #33	; 0x21
 80065ac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065ae:	f7fb fcd9 	bl	8001f64 <HAL_GetTick>
 80065b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	88fa      	ldrh	r2, [r7, #6]
 80065b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	88fa      	ldrh	r2, [r7, #6]
 80065c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065cc:	d108      	bne.n	80065e0 <HAL_UART_Transmit+0x68>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d104      	bne.n	80065e0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	61bb      	str	r3, [r7, #24]
 80065de:	e003      	b.n	80065e8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065e4:	2300      	movs	r3, #0
 80065e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065e8:	e030      	b.n	800664c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2200      	movs	r2, #0
 80065f2:	2180      	movs	r1, #128	; 0x80
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 ff0f 	bl	8007418 <UART_WaitOnFlagUntilTimeout>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d004      	beq.n	800660a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2220      	movs	r2, #32
 8006604:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e03c      	b.n	8006684 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10b      	bne.n	8006628 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	881a      	ldrh	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800661c:	b292      	uxth	r2, r2
 800661e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	3302      	adds	r3, #2
 8006624:	61bb      	str	r3, [r7, #24]
 8006626:	e008      	b.n	800663a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	781a      	ldrb	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	b292      	uxth	r2, r2
 8006632:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	3301      	adds	r3, #1
 8006638:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006640:	b29b      	uxth	r3, r3
 8006642:	3b01      	subs	r3, #1
 8006644:	b29a      	uxth	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006652:	b29b      	uxth	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1c8      	bne.n	80065ea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	2200      	movs	r2, #0
 8006660:	2140      	movs	r1, #64	; 0x40
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 fed8 	bl	8007418 <UART_WaitOnFlagUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d004      	beq.n	8006678 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2220      	movs	r2, #32
 8006672:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e005      	b.n	8006684 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2220      	movs	r2, #32
 800667c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800667e:	2300      	movs	r3, #0
 8006680:	e000      	b.n	8006684 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006682:	2302      	movs	r3, #2
  }
}
 8006684:	4618      	mov	r0, r3
 8006686:	3720      	adds	r7, #32
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800668c:	b480      	push	{r7}
 800668e:	b08b      	sub	sp, #44	; 0x2c
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	4613      	mov	r3, r2
 8006698:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800669e:	2b20      	cmp	r3, #32
 80066a0:	d147      	bne.n	8006732 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <HAL_UART_Transmit_IT+0x22>
 80066a8:	88fb      	ldrh	r3, [r7, #6]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e040      	b.n	8006734 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	88fa      	ldrh	r2, [r7, #6]
 80066bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	88fa      	ldrh	r2, [r7, #6]
 80066c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2221      	movs	r2, #33	; 0x21
 80066da:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e4:	d107      	bne.n	80066f6 <HAL_UART_Transmit_IT+0x6a>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d103      	bne.n	80066f6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	4a13      	ldr	r2, [pc, #76]	; (8006740 <HAL_UART_Transmit_IT+0xb4>)
 80066f2:	66da      	str	r2, [r3, #108]	; 0x6c
 80066f4:	e002      	b.n	80066fc <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	4a12      	ldr	r2, [pc, #72]	; (8006744 <HAL_UART_Transmit_IT+0xb8>)
 80066fa:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	613b      	str	r3, [r7, #16]
   return(result);
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006710:	627b      	str	r3, [r7, #36]	; 0x24
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	623b      	str	r3, [r7, #32]
 800671c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671e:	69f9      	ldr	r1, [r7, #28]
 8006720:	6a3a      	ldr	r2, [r7, #32]
 8006722:	e841 2300 	strex	r3, r2, [r1]
 8006726:	61bb      	str	r3, [r7, #24]
   return(result);
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e6      	bne.n	80066fc <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	e000      	b.n	8006734 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006732:	2302      	movs	r3, #2
  }
}
 8006734:	4618      	mov	r0, r3
 8006736:	372c      	adds	r7, #44	; 0x2c
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	08007821 	.word	0x08007821
 8006744:	08007769 	.word	0x08007769

08006748 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08a      	sub	sp, #40	; 0x28
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	4613      	mov	r3, r2
 8006754:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800675c:	2b20      	cmp	r3, #32
 800675e:	d132      	bne.n	80067c6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <HAL_UART_Receive_IT+0x24>
 8006766:	88fb      	ldrh	r3, [r7, #6]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e02b      	b.n	80067c8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d018      	beq.n	80067b6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	e853 3f00 	ldrex	r3, [r3]
 8006790:	613b      	str	r3, [r7, #16]
   return(result);
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	623b      	str	r3, [r7, #32]
 80067a4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a6:	69f9      	ldr	r1, [r7, #28]
 80067a8:	6a3a      	ldr	r2, [r7, #32]
 80067aa:	e841 2300 	strex	r3, r2, [r1]
 80067ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1e6      	bne.n	8006784 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80067b6:	88fb      	ldrh	r3, [r7, #6]
 80067b8:	461a      	mov	r2, r3
 80067ba:	68b9      	ldr	r1, [r7, #8]
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 fe93 	bl	80074e8 <UART_Start_Receive_IT>
 80067c2:	4603      	mov	r3, r0
 80067c4:	e000      	b.n	80067c8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80067c6:	2302      	movs	r3, #2
  }
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3728      	adds	r7, #40	; 0x28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b0ba      	sub	sp, #232	; 0xe8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80067fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80067fe:	4013      	ands	r3, r2
 8006800:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006804:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006808:	2b00      	cmp	r3, #0
 800680a:	d115      	bne.n	8006838 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800680c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006810:	f003 0320 	and.w	r3, r3, #32
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00f      	beq.n	8006838 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800681c:	f003 0320 	and.w	r3, r3, #32
 8006820:	2b00      	cmp	r3, #0
 8006822:	d009      	beq.n	8006838 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 82ab 	beq.w	8006d84 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	4798      	blx	r3
      }
      return;
 8006836:	e2a5      	b.n	8006d84 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006838:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 8117 	beq.w	8006a70 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d106      	bne.n	800685c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800684e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006852:	4b85      	ldr	r3, [pc, #532]	; (8006a68 <HAL_UART_IRQHandler+0x298>)
 8006854:	4013      	ands	r3, r2
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 810a 	beq.w	8006a70 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800685c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d011      	beq.n	800688c <HAL_UART_IRQHandler+0xbc>
 8006868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800686c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00b      	beq.n	800688c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2201      	movs	r2, #1
 800687a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006882:	f043 0201 	orr.w	r2, r3, #1
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800688c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d011      	beq.n	80068bc <HAL_UART_IRQHandler+0xec>
 8006898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00b      	beq.n	80068bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2202      	movs	r2, #2
 80068aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068b2:	f043 0204 	orr.w	r2, r3, #4
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d011      	beq.n	80068ec <HAL_UART_IRQHandler+0x11c>
 80068c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00b      	beq.n	80068ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2204      	movs	r2, #4
 80068da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068e2:	f043 0202 	orr.w	r2, r3, #2
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f0:	f003 0308 	and.w	r3, r3, #8
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d017      	beq.n	8006928 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068fc:	f003 0320 	and.w	r3, r3, #32
 8006900:	2b00      	cmp	r3, #0
 8006902:	d105      	bne.n	8006910 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006908:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00b      	beq.n	8006928 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2208      	movs	r2, #8
 8006916:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800691e:	f043 0208 	orr.w	r2, r3, #8
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800692c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006930:	2b00      	cmp	r3, #0
 8006932:	d012      	beq.n	800695a <HAL_UART_IRQHandler+0x18a>
 8006934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006938:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00c      	beq.n	800695a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006948:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006950:	f043 0220 	orr.w	r2, r3, #32
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 8211 	beq.w	8006d88 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00d      	beq.n	800698e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b00      	cmp	r3, #0
 800697c:	d007      	beq.n	800698e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006994:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a2:	2b40      	cmp	r3, #64	; 0x40
 80069a4:	d005      	beq.n	80069b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d04f      	beq.n	8006a52 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fe5e 	bl	8007674 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c2:	2b40      	cmp	r3, #64	; 0x40
 80069c4:	d141      	bne.n	8006a4a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3308      	adds	r3, #8
 80069cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3308      	adds	r3, #8
 80069ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1d9      	bne.n	80069c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d013      	beq.n	8006a42 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a1e:	4a13      	ldr	r2, [pc, #76]	; (8006a6c <HAL_UART_IRQHandler+0x29c>)
 8006a20:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fc fcf4 	bl	8003414 <HAL_DMA_Abort_IT>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d017      	beq.n	8006a62 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a40:	e00f      	b.n	8006a62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f9b4 	bl	8006db0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a48:	e00b      	b.n	8006a62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f9b0 	bl	8006db0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a50:	e007      	b.n	8006a62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f9ac 	bl	8006db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006a60:	e192      	b.n	8006d88 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a62:	bf00      	nop
    return;
 8006a64:	e190      	b.n	8006d88 <HAL_UART_IRQHandler+0x5b8>
 8006a66:	bf00      	nop
 8006a68:	04000120 	.word	0x04000120
 8006a6c:	0800773d 	.word	0x0800773d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	f040 814b 	bne.w	8006d10 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7e:	f003 0310 	and.w	r3, r3, #16
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 8144 	beq.w	8006d10 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a8c:	f003 0310 	and.w	r3, r3, #16
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 813d 	beq.w	8006d10 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2210      	movs	r2, #16
 8006a9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa8:	2b40      	cmp	r3, #64	; 0x40
 8006aaa:	f040 80b5 	bne.w	8006c18 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006aba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 8164 	beq.w	8006d8c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	f080 815c 	bcs.w	8006d8c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ada:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	f000 8086 	beq.w	8006bf6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006af6:	e853 3f00 	ldrex	r3, [r3]
 8006afa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006afe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b18:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b20:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1da      	bne.n	8006aea <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3308      	adds	r3, #8
 8006b3a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b3e:	e853 3f00 	ldrex	r3, [r3]
 8006b42:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b46:	f023 0301 	bic.w	r3, r3, #1
 8006b4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3308      	adds	r3, #8
 8006b54:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b58:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b5c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b60:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b64:	e841 2300 	strex	r3, r2, [r1]
 8006b68:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1e1      	bne.n	8006b34 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3308      	adds	r3, #8
 8006b76:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b7a:	e853 3f00 	ldrex	r3, [r3]
 8006b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3308      	adds	r3, #8
 8006b90:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b94:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b9c:	e841 2300 	strex	r3, r2, [r1]
 8006ba0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ba2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e3      	bne.n	8006b70 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bbe:	e853 3f00 	ldrex	r3, [r3]
 8006bc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bc6:	f023 0310 	bic.w	r3, r3, #16
 8006bca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bda:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006bde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006be0:	e841 2300 	strex	r3, r2, [r1]
 8006be4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e4      	bne.n	8006bb6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fc fbd6 	bl	80033a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f8d7 	bl	8006dc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c16:	e0b9      	b.n	8006d8c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 80ab 	beq.w	8006d90 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006c3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 80a6 	beq.w	8006d90 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c66:	647b      	str	r3, [r7, #68]	; 0x44
 8006c68:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e4      	bne.n	8006c44 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3308      	adds	r3, #8
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	e853 3f00 	ldrex	r3, [r3]
 8006c88:	623b      	str	r3, [r7, #32]
   return(result);
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	f023 0301 	bic.w	r3, r3, #1
 8006c90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3308      	adds	r3, #8
 8006c9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c9e:	633a      	str	r2, [r7, #48]	; 0x30
 8006ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e3      	bne.n	8006c7a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	e853 3f00 	ldrex	r3, [r3]
 8006cd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0310 	bic.w	r3, r3, #16
 8006cda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ce8:	61fb      	str	r3, [r7, #28]
 8006cea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	69b9      	ldr	r1, [r7, #24]
 8006cee:	69fa      	ldr	r2, [r7, #28]
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	617b      	str	r3, [r7, #20]
   return(result);
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e4      	bne.n	8006cc6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f85b 	bl	8006dc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d0e:	e03f      	b.n	8006d90 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00e      	beq.n	8006d3a <HAL_UART_IRQHandler+0x56a>
 8006d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d008      	beq.n	8006d3a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006d30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 ffa6 	bl	8007c84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d38:	e02d      	b.n	8006d96 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00e      	beq.n	8006d64 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d008      	beq.n	8006d64 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d01c      	beq.n	8006d94 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	4798      	blx	r3
    }
    return;
 8006d62:	e017      	b.n	8006d94 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d012      	beq.n	8006d96 <HAL_UART_IRQHandler+0x5c6>
 8006d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00c      	beq.n	8006d96 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fdaf 	bl	80078e0 <UART_EndTransmit_IT>
    return;
 8006d82:	e008      	b.n	8006d96 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006d84:	bf00      	nop
 8006d86:	e006      	b.n	8006d96 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006d88:	bf00      	nop
 8006d8a:	e004      	b.n	8006d96 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006d8c:	bf00      	nop
 8006d8e:	e002      	b.n	8006d96 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006d90:	bf00      	nop
 8006d92:	e000      	b.n	8006d96 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006d94:	bf00      	nop
  }

}
 8006d96:	37e8      	adds	r7, #232	; 0xe8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b088      	sub	sp, #32
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	431a      	orrs	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	431a      	orrs	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	4b92      	ldr	r3, [pc, #584]	; (8007050 <UART_SetConfig+0x274>)
 8006e08:	4013      	ands	r3, r2
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	6812      	ldr	r2, [r2, #0]
 8006e0e:	6979      	ldr	r1, [r7, #20]
 8006e10:	430b      	orrs	r3, r1
 8006e12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68da      	ldr	r2, [r3, #12]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a80      	ldr	r2, [pc, #512]	; (8007054 <UART_SetConfig+0x278>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d120      	bne.n	8006e9a <UART_SetConfig+0xbe>
 8006e58:	4b7f      	ldr	r3, [pc, #508]	; (8007058 <UART_SetConfig+0x27c>)
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5c:	f003 0303 	and.w	r3, r3, #3
 8006e60:	2b03      	cmp	r3, #3
 8006e62:	d817      	bhi.n	8006e94 <UART_SetConfig+0xb8>
 8006e64:	a201      	add	r2, pc, #4	; (adr r2, 8006e6c <UART_SetConfig+0x90>)
 8006e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6a:	bf00      	nop
 8006e6c:	08006e7d 	.word	0x08006e7d
 8006e70:	08006e89 	.word	0x08006e89
 8006e74:	08006e8f 	.word	0x08006e8f
 8006e78:	08006e83 	.word	0x08006e83
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	77fb      	strb	r3, [r7, #31]
 8006e80:	e0b5      	b.n	8006fee <UART_SetConfig+0x212>
 8006e82:	2302      	movs	r3, #2
 8006e84:	77fb      	strb	r3, [r7, #31]
 8006e86:	e0b2      	b.n	8006fee <UART_SetConfig+0x212>
 8006e88:	2304      	movs	r3, #4
 8006e8a:	77fb      	strb	r3, [r7, #31]
 8006e8c:	e0af      	b.n	8006fee <UART_SetConfig+0x212>
 8006e8e:	2308      	movs	r3, #8
 8006e90:	77fb      	strb	r3, [r7, #31]
 8006e92:	e0ac      	b.n	8006fee <UART_SetConfig+0x212>
 8006e94:	2310      	movs	r3, #16
 8006e96:	77fb      	strb	r3, [r7, #31]
 8006e98:	e0a9      	b.n	8006fee <UART_SetConfig+0x212>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a6f      	ldr	r2, [pc, #444]	; (800705c <UART_SetConfig+0x280>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d124      	bne.n	8006eee <UART_SetConfig+0x112>
 8006ea4:	4b6c      	ldr	r3, [pc, #432]	; (8007058 <UART_SetConfig+0x27c>)
 8006ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006eac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006eb0:	d011      	beq.n	8006ed6 <UART_SetConfig+0xfa>
 8006eb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006eb6:	d817      	bhi.n	8006ee8 <UART_SetConfig+0x10c>
 8006eb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ebc:	d011      	beq.n	8006ee2 <UART_SetConfig+0x106>
 8006ebe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ec2:	d811      	bhi.n	8006ee8 <UART_SetConfig+0x10c>
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <UART_SetConfig+0xf4>
 8006ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ecc:	d006      	beq.n	8006edc <UART_SetConfig+0x100>
 8006ece:	e00b      	b.n	8006ee8 <UART_SetConfig+0x10c>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	77fb      	strb	r3, [r7, #31]
 8006ed4:	e08b      	b.n	8006fee <UART_SetConfig+0x212>
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	77fb      	strb	r3, [r7, #31]
 8006eda:	e088      	b.n	8006fee <UART_SetConfig+0x212>
 8006edc:	2304      	movs	r3, #4
 8006ede:	77fb      	strb	r3, [r7, #31]
 8006ee0:	e085      	b.n	8006fee <UART_SetConfig+0x212>
 8006ee2:	2308      	movs	r3, #8
 8006ee4:	77fb      	strb	r3, [r7, #31]
 8006ee6:	e082      	b.n	8006fee <UART_SetConfig+0x212>
 8006ee8:	2310      	movs	r3, #16
 8006eea:	77fb      	strb	r3, [r7, #31]
 8006eec:	e07f      	b.n	8006fee <UART_SetConfig+0x212>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a5b      	ldr	r2, [pc, #364]	; (8007060 <UART_SetConfig+0x284>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d124      	bne.n	8006f42 <UART_SetConfig+0x166>
 8006ef8:	4b57      	ldr	r3, [pc, #348]	; (8007058 <UART_SetConfig+0x27c>)
 8006efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006f00:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006f04:	d011      	beq.n	8006f2a <UART_SetConfig+0x14e>
 8006f06:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006f0a:	d817      	bhi.n	8006f3c <UART_SetConfig+0x160>
 8006f0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f10:	d011      	beq.n	8006f36 <UART_SetConfig+0x15a>
 8006f12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f16:	d811      	bhi.n	8006f3c <UART_SetConfig+0x160>
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <UART_SetConfig+0x148>
 8006f1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f20:	d006      	beq.n	8006f30 <UART_SetConfig+0x154>
 8006f22:	e00b      	b.n	8006f3c <UART_SetConfig+0x160>
 8006f24:	2300      	movs	r3, #0
 8006f26:	77fb      	strb	r3, [r7, #31]
 8006f28:	e061      	b.n	8006fee <UART_SetConfig+0x212>
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	77fb      	strb	r3, [r7, #31]
 8006f2e:	e05e      	b.n	8006fee <UART_SetConfig+0x212>
 8006f30:	2304      	movs	r3, #4
 8006f32:	77fb      	strb	r3, [r7, #31]
 8006f34:	e05b      	b.n	8006fee <UART_SetConfig+0x212>
 8006f36:	2308      	movs	r3, #8
 8006f38:	77fb      	strb	r3, [r7, #31]
 8006f3a:	e058      	b.n	8006fee <UART_SetConfig+0x212>
 8006f3c:	2310      	movs	r3, #16
 8006f3e:	77fb      	strb	r3, [r7, #31]
 8006f40:	e055      	b.n	8006fee <UART_SetConfig+0x212>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a47      	ldr	r2, [pc, #284]	; (8007064 <UART_SetConfig+0x288>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d124      	bne.n	8006f96 <UART_SetConfig+0x1ba>
 8006f4c:	4b42      	ldr	r3, [pc, #264]	; (8007058 <UART_SetConfig+0x27c>)
 8006f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f50:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006f54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f58:	d011      	beq.n	8006f7e <UART_SetConfig+0x1a2>
 8006f5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f5e:	d817      	bhi.n	8006f90 <UART_SetConfig+0x1b4>
 8006f60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f64:	d011      	beq.n	8006f8a <UART_SetConfig+0x1ae>
 8006f66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f6a:	d811      	bhi.n	8006f90 <UART_SetConfig+0x1b4>
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d003      	beq.n	8006f78 <UART_SetConfig+0x19c>
 8006f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f74:	d006      	beq.n	8006f84 <UART_SetConfig+0x1a8>
 8006f76:	e00b      	b.n	8006f90 <UART_SetConfig+0x1b4>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	77fb      	strb	r3, [r7, #31]
 8006f7c:	e037      	b.n	8006fee <UART_SetConfig+0x212>
 8006f7e:	2302      	movs	r3, #2
 8006f80:	77fb      	strb	r3, [r7, #31]
 8006f82:	e034      	b.n	8006fee <UART_SetConfig+0x212>
 8006f84:	2304      	movs	r3, #4
 8006f86:	77fb      	strb	r3, [r7, #31]
 8006f88:	e031      	b.n	8006fee <UART_SetConfig+0x212>
 8006f8a:	2308      	movs	r3, #8
 8006f8c:	77fb      	strb	r3, [r7, #31]
 8006f8e:	e02e      	b.n	8006fee <UART_SetConfig+0x212>
 8006f90:	2310      	movs	r3, #16
 8006f92:	77fb      	strb	r3, [r7, #31]
 8006f94:	e02b      	b.n	8006fee <UART_SetConfig+0x212>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a33      	ldr	r2, [pc, #204]	; (8007068 <UART_SetConfig+0x28c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d124      	bne.n	8006fea <UART_SetConfig+0x20e>
 8006fa0:	4b2d      	ldr	r3, [pc, #180]	; (8007058 <UART_SetConfig+0x27c>)
 8006fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006fa8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006fac:	d011      	beq.n	8006fd2 <UART_SetConfig+0x1f6>
 8006fae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006fb2:	d817      	bhi.n	8006fe4 <UART_SetConfig+0x208>
 8006fb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fb8:	d011      	beq.n	8006fde <UART_SetConfig+0x202>
 8006fba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fbe:	d811      	bhi.n	8006fe4 <UART_SetConfig+0x208>
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d003      	beq.n	8006fcc <UART_SetConfig+0x1f0>
 8006fc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fc8:	d006      	beq.n	8006fd8 <UART_SetConfig+0x1fc>
 8006fca:	e00b      	b.n	8006fe4 <UART_SetConfig+0x208>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	77fb      	strb	r3, [r7, #31]
 8006fd0:	e00d      	b.n	8006fee <UART_SetConfig+0x212>
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	77fb      	strb	r3, [r7, #31]
 8006fd6:	e00a      	b.n	8006fee <UART_SetConfig+0x212>
 8006fd8:	2304      	movs	r3, #4
 8006fda:	77fb      	strb	r3, [r7, #31]
 8006fdc:	e007      	b.n	8006fee <UART_SetConfig+0x212>
 8006fde:	2308      	movs	r3, #8
 8006fe0:	77fb      	strb	r3, [r7, #31]
 8006fe2:	e004      	b.n	8006fee <UART_SetConfig+0x212>
 8006fe4:	2310      	movs	r3, #16
 8006fe6:	77fb      	strb	r3, [r7, #31]
 8006fe8:	e001      	b.n	8006fee <UART_SetConfig+0x212>
 8006fea:	2310      	movs	r3, #16
 8006fec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff6:	d16b      	bne.n	80070d0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8006ff8:	7ffb      	ldrb	r3, [r7, #31]
 8006ffa:	2b08      	cmp	r3, #8
 8006ffc:	d838      	bhi.n	8007070 <UART_SetConfig+0x294>
 8006ffe:	a201      	add	r2, pc, #4	; (adr r2, 8007004 <UART_SetConfig+0x228>)
 8007000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007004:	08007029 	.word	0x08007029
 8007008:	08007031 	.word	0x08007031
 800700c:	08007039 	.word	0x08007039
 8007010:	08007071 	.word	0x08007071
 8007014:	0800703f 	.word	0x0800703f
 8007018:	08007071 	.word	0x08007071
 800701c:	08007071 	.word	0x08007071
 8007020:	08007071 	.word	0x08007071
 8007024:	08007047 	.word	0x08007047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007028:	f7fd ff64 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 800702c:	61b8      	str	r0, [r7, #24]
        break;
 800702e:	e024      	b.n	800707a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007030:	f7fd ff82 	bl	8004f38 <HAL_RCC_GetPCLK2Freq>
 8007034:	61b8      	str	r0, [r7, #24]
        break;
 8007036:	e020      	b.n	800707a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007038:	4b0c      	ldr	r3, [pc, #48]	; (800706c <UART_SetConfig+0x290>)
 800703a:	61bb      	str	r3, [r7, #24]
        break;
 800703c:	e01d      	b.n	800707a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800703e:	f7fd fee3 	bl	8004e08 <HAL_RCC_GetSysClockFreq>
 8007042:	61b8      	str	r0, [r7, #24]
        break;
 8007044:	e019      	b.n	800707a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800704a:	61bb      	str	r3, [r7, #24]
        break;
 800704c:	e015      	b.n	800707a <UART_SetConfig+0x29e>
 800704e:	bf00      	nop
 8007050:	efff69f3 	.word	0xefff69f3
 8007054:	40013800 	.word	0x40013800
 8007058:	40021000 	.word	0x40021000
 800705c:	40004400 	.word	0x40004400
 8007060:	40004800 	.word	0x40004800
 8007064:	40004c00 	.word	0x40004c00
 8007068:	40005000 	.word	0x40005000
 800706c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	77bb      	strb	r3, [r7, #30]
        break;
 8007078:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d073      	beq.n	8007168 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	005a      	lsls	r2, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	085b      	lsrs	r3, r3, #1
 800708a:	441a      	add	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	fbb2 f3f3 	udiv	r3, r2, r3
 8007094:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	2b0f      	cmp	r3, #15
 800709a:	d916      	bls.n	80070ca <UART_SetConfig+0x2ee>
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a2:	d212      	bcs.n	80070ca <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	f023 030f 	bic.w	r3, r3, #15
 80070ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	085b      	lsrs	r3, r3, #1
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	f003 0307 	and.w	r3, r3, #7
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	89fb      	ldrh	r3, [r7, #14]
 80070bc:	4313      	orrs	r3, r2
 80070be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	89fa      	ldrh	r2, [r7, #14]
 80070c6:	60da      	str	r2, [r3, #12]
 80070c8:	e04e      	b.n	8007168 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	77bb      	strb	r3, [r7, #30]
 80070ce:	e04b      	b.n	8007168 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070d0:	7ffb      	ldrb	r3, [r7, #31]
 80070d2:	2b08      	cmp	r3, #8
 80070d4:	d827      	bhi.n	8007126 <UART_SetConfig+0x34a>
 80070d6:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <UART_SetConfig+0x300>)
 80070d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070dc:	08007101 	.word	0x08007101
 80070e0:	08007109 	.word	0x08007109
 80070e4:	08007111 	.word	0x08007111
 80070e8:	08007127 	.word	0x08007127
 80070ec:	08007117 	.word	0x08007117
 80070f0:	08007127 	.word	0x08007127
 80070f4:	08007127 	.word	0x08007127
 80070f8:	08007127 	.word	0x08007127
 80070fc:	0800711f 	.word	0x0800711f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007100:	f7fd fef8 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 8007104:	61b8      	str	r0, [r7, #24]
        break;
 8007106:	e013      	b.n	8007130 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007108:	f7fd ff16 	bl	8004f38 <HAL_RCC_GetPCLK2Freq>
 800710c:	61b8      	str	r0, [r7, #24]
        break;
 800710e:	e00f      	b.n	8007130 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007110:	4b1b      	ldr	r3, [pc, #108]	; (8007180 <UART_SetConfig+0x3a4>)
 8007112:	61bb      	str	r3, [r7, #24]
        break;
 8007114:	e00c      	b.n	8007130 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007116:	f7fd fe77 	bl	8004e08 <HAL_RCC_GetSysClockFreq>
 800711a:	61b8      	str	r0, [r7, #24]
        break;
 800711c:	e008      	b.n	8007130 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800711e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007122:	61bb      	str	r3, [r7, #24]
        break;
 8007124:	e004      	b.n	8007130 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007126:	2300      	movs	r3, #0
 8007128:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	77bb      	strb	r3, [r7, #30]
        break;
 800712e:	bf00      	nop
    }

    if (pclk != 0U)
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d018      	beq.n	8007168 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	085a      	lsrs	r2, r3, #1
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	441a      	add	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	fbb2 f3f3 	udiv	r3, r2, r3
 8007148:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	2b0f      	cmp	r3, #15
 800714e:	d909      	bls.n	8007164 <UART_SetConfig+0x388>
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007156:	d205      	bcs.n	8007164 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	b29a      	uxth	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	60da      	str	r2, [r3, #12]
 8007162:	e001      	b.n	8007168 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007174:	7fbb      	ldrb	r3, [r7, #30]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3720      	adds	r7, #32
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	007a1200 	.word	0x007a1200

08007184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00a      	beq.n	80071ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00a      	beq.n	80071f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	f003 0308 	and.w	r3, r3, #8
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00a      	beq.n	8007214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	430a      	orrs	r2, r1
 8007212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007218:	f003 0310 	and.w	r3, r3, #16
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00a      	beq.n	8007236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723a:	f003 0320 	and.w	r3, r3, #32
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00a      	beq.n	8007258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	430a      	orrs	r2, r1
 8007256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007260:	2b00      	cmp	r3, #0
 8007262:	d01a      	beq.n	800729a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007282:	d10a      	bne.n	800729a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00a      	beq.n	80072bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	430a      	orrs	r2, r1
 80072ba:	605a      	str	r2, [r3, #4]
  }
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b098      	sub	sp, #96	; 0x60
 80072cc:	af02      	add	r7, sp, #8
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072d8:	f7fa fe44 	bl	8001f64 <HAL_GetTick>
 80072dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0308 	and.w	r3, r3, #8
 80072e8:	2b08      	cmp	r3, #8
 80072ea:	d12e      	bne.n	800734a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072f4:	2200      	movs	r2, #0
 80072f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f88c 	bl	8007418 <UART_WaitOnFlagUntilTimeout>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d021      	beq.n	800734a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730e:	e853 3f00 	ldrex	r3, [r3]
 8007312:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800731a:	653b      	str	r3, [r7, #80]	; 0x50
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	461a      	mov	r2, r3
 8007322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007324:	647b      	str	r3, [r7, #68]	; 0x44
 8007326:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007328:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800732a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800732c:	e841 2300 	strex	r3, r2, [r1]
 8007330:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1e6      	bne.n	8007306 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2220      	movs	r2, #32
 800733c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e062      	b.n	8007410 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0304 	and.w	r3, r3, #4
 8007354:	2b04      	cmp	r3, #4
 8007356:	d149      	bne.n	80073ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007358:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007360:	2200      	movs	r2, #0
 8007362:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f856 	bl	8007418 <UART_WaitOnFlagUntilTimeout>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d03c      	beq.n	80073ec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737a:	e853 3f00 	ldrex	r3, [r3]
 800737e:	623b      	str	r3, [r7, #32]
   return(result);
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	461a      	mov	r2, r3
 800738e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007390:	633b      	str	r3, [r7, #48]	; 0x30
 8007392:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007394:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007398:	e841 2300 	strex	r3, r2, [r1]
 800739c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1e6      	bne.n	8007372 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3308      	adds	r3, #8
 80073aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	e853 3f00 	ldrex	r3, [r3]
 80073b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f023 0301 	bic.w	r3, r3, #1
 80073ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3308      	adds	r3, #8
 80073c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073c4:	61fa      	str	r2, [r7, #28]
 80073c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c8:	69b9      	ldr	r1, [r7, #24]
 80073ca:	69fa      	ldr	r2, [r7, #28]
 80073cc:	e841 2300 	strex	r3, r2, [r1]
 80073d0:	617b      	str	r3, [r7, #20]
   return(result);
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1e5      	bne.n	80073a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2220      	movs	r2, #32
 80073dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e011      	b.n	8007410 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2220      	movs	r2, #32
 80073f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2220      	movs	r2, #32
 80073f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3758      	adds	r7, #88	; 0x58
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	603b      	str	r3, [r7, #0]
 8007424:	4613      	mov	r3, r2
 8007426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007428:	e049      	b.n	80074be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007430:	d045      	beq.n	80074be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007432:	f7fa fd97 	bl	8001f64 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	429a      	cmp	r2, r3
 8007440:	d302      	bcc.n	8007448 <UART_WaitOnFlagUntilTimeout+0x30>
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d101      	bne.n	800744c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e048      	b.n	80074de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0304 	and.w	r3, r3, #4
 8007456:	2b00      	cmp	r3, #0
 8007458:	d031      	beq.n	80074be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69db      	ldr	r3, [r3, #28]
 8007460:	f003 0308 	and.w	r3, r3, #8
 8007464:	2b08      	cmp	r3, #8
 8007466:	d110      	bne.n	800748a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2208      	movs	r2, #8
 800746e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 f8ff 	bl	8007674 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2208      	movs	r2, #8
 800747a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e029      	b.n	80074de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	69db      	ldr	r3, [r3, #28]
 8007490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007498:	d111      	bne.n	80074be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f000 f8e5 	bl	8007674 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e00f      	b.n	80074de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69da      	ldr	r2, [r3, #28]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	4013      	ands	r3, r2
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	bf0c      	ite	eq
 80074ce:	2301      	moveq	r3, #1
 80074d0:	2300      	movne	r3, #0
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d0a6      	beq.n	800742a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
	...

080074e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b097      	sub	sp, #92	; 0x5c
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	4613      	mov	r3, r2
 80074f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	88fa      	ldrh	r2, [r7, #6]
 8007500:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	88fa      	ldrh	r2, [r7, #6]
 8007508:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800751a:	d10e      	bne.n	800753a <UART_Start_Receive_IT+0x52>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d105      	bne.n	8007530 <UART_Start_Receive_IT+0x48>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f240 12ff 	movw	r2, #511	; 0x1ff
 800752a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800752e:	e02d      	b.n	800758c <UART_Start_Receive_IT+0xa4>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	22ff      	movs	r2, #255	; 0xff
 8007534:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007538:	e028      	b.n	800758c <UART_Start_Receive_IT+0xa4>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10d      	bne.n	800755e <UART_Start_Receive_IT+0x76>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d104      	bne.n	8007554 <UART_Start_Receive_IT+0x6c>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	22ff      	movs	r2, #255	; 0xff
 800754e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007552:	e01b      	b.n	800758c <UART_Start_Receive_IT+0xa4>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	227f      	movs	r2, #127	; 0x7f
 8007558:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800755c:	e016      	b.n	800758c <UART_Start_Receive_IT+0xa4>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007566:	d10d      	bne.n	8007584 <UART_Start_Receive_IT+0x9c>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d104      	bne.n	800757a <UART_Start_Receive_IT+0x92>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	227f      	movs	r2, #127	; 0x7f
 8007574:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007578:	e008      	b.n	800758c <UART_Start_Receive_IT+0xa4>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	223f      	movs	r2, #63	; 0x3f
 800757e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007582:	e003      	b.n	800758c <UART_Start_Receive_IT+0xa4>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2222      	movs	r2, #34	; 0x22
 8007598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3308      	adds	r3, #8
 80075a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a6:	e853 3f00 	ldrex	r3, [r3]
 80075aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ae:	f043 0301 	orr.w	r3, r3, #1
 80075b2:	657b      	str	r3, [r7, #84]	; 0x54
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3308      	adds	r3, #8
 80075ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075bc:	64ba      	str	r2, [r7, #72]	; 0x48
 80075be:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075c4:	e841 2300 	strex	r3, r2, [r1]
 80075c8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80075ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e5      	bne.n	800759c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075d8:	d107      	bne.n	80075ea <UART_Start_Receive_IT+0x102>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d103      	bne.n	80075ea <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4a21      	ldr	r2, [pc, #132]	; (800766c <UART_Start_Receive_IT+0x184>)
 80075e6:	669a      	str	r2, [r3, #104]	; 0x68
 80075e8:	e002      	b.n	80075f0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4a20      	ldr	r2, [pc, #128]	; (8007670 <UART_Start_Receive_IT+0x188>)
 80075ee:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d019      	beq.n	800762c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007608:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800760c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	461a      	mov	r2, r3
 8007614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007616:	637b      	str	r3, [r7, #52]	; 0x34
 8007618:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800761c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e6      	bne.n	80075f8 <UART_Start_Receive_IT+0x110>
 800762a:	e018      	b.n	800765e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	613b      	str	r3, [r7, #16]
   return(result);
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f043 0320 	orr.w	r3, r3, #32
 8007640:	653b      	str	r3, [r7, #80]	; 0x50
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800764a:	623b      	str	r3, [r7, #32]
 800764c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	69f9      	ldr	r1, [r7, #28]
 8007650:	6a3a      	ldr	r2, [r7, #32]
 8007652:	e841 2300 	strex	r3, r2, [r1]
 8007656:	61bb      	str	r3, [r7, #24]
   return(result);
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1e6      	bne.n	800762c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	375c      	adds	r7, #92	; 0x5c
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	08007add 	.word	0x08007add
 8007670:	08007935 	.word	0x08007935

08007674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007674:	b480      	push	{r7}
 8007676:	b095      	sub	sp, #84	; 0x54
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007684:	e853 3f00 	ldrex	r3, [r3]
 8007688:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007690:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800769a:	643b      	str	r3, [r7, #64]	; 0x40
 800769c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076a2:	e841 2300 	strex	r3, r2, [r1]
 80076a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1e6      	bne.n	800767c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3308      	adds	r3, #8
 80076b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	f023 0301 	bic.w	r3, r3, #1
 80076c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3308      	adds	r3, #8
 80076cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1e5      	bne.n	80076ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d118      	bne.n	800771c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	e853 3f00 	ldrex	r3, [r3]
 80076f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	f023 0310 	bic.w	r3, r3, #16
 80076fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007708:	61bb      	str	r3, [r7, #24]
 800770a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770c:	6979      	ldr	r1, [r7, #20]
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	e841 2300 	strex	r3, r2, [r1]
 8007714:	613b      	str	r3, [r7, #16]
   return(result);
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e6      	bne.n	80076ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2220      	movs	r2, #32
 8007720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007730:	bf00      	nop
 8007732:	3754      	adds	r7, #84	; 0x54
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f7ff fb28 	bl	8006db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007760:	bf00      	nop
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007768:	b480      	push	{r7}
 800776a:	b08f      	sub	sp, #60	; 0x3c
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007774:	2b21      	cmp	r3, #33	; 0x21
 8007776:	d14d      	bne.n	8007814 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800777e:	b29b      	uxth	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	d132      	bne.n	80077ea <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	e853 3f00 	ldrex	r3, [r3]
 8007790:	61fb      	str	r3, [r7, #28]
   return(result);
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007798:	637b      	str	r3, [r7, #52]	; 0x34
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	461a      	mov	r2, r3
 80077a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077a4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077aa:	e841 2300 	strex	r3, r2, [r1]
 80077ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1e6      	bne.n	8007784 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	e853 3f00 	ldrex	r3, [r3]
 80077c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ca:	633b      	str	r3, [r7, #48]	; 0x30
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	461a      	mov	r2, r3
 80077d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d4:	61bb      	str	r3, [r7, #24]
 80077d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d8:	6979      	ldr	r1, [r7, #20]
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	e841 2300 	strex	r3, r2, [r1]
 80077e0:	613b      	str	r3, [r7, #16]
   return(result);
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1e6      	bne.n	80077b6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80077e8:	e014      	b.n	8007814 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ee:	781a      	ldrb	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	b292      	uxth	r2, r2
 80077f6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007808:	b29b      	uxth	r3, r3
 800780a:	3b01      	subs	r3, #1
 800780c:	b29a      	uxth	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007814:	bf00      	nop
 8007816:	373c      	adds	r7, #60	; 0x3c
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007820:	b480      	push	{r7}
 8007822:	b091      	sub	sp, #68	; 0x44
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800782c:	2b21      	cmp	r3, #33	; 0x21
 800782e:	d151      	bne.n	80078d4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007836:	b29b      	uxth	r3, r3
 8007838:	2b00      	cmp	r3, #0
 800783a:	d132      	bne.n	80078a2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	623b      	str	r3, [r7, #32]
   return(result);
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007850:	63bb      	str	r3, [r7, #56]	; 0x38
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785a:	633b      	str	r3, [r7, #48]	; 0x30
 800785c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1e6      	bne.n	800783c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	e853 3f00 	ldrex	r3, [r3]
 800787a:	60fb      	str	r3, [r7, #12]
   return(result);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007882:	637b      	str	r3, [r7, #52]	; 0x34
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	461a      	mov	r2, r3
 800788a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800788c:	61fb      	str	r3, [r7, #28]
 800788e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007890:	69b9      	ldr	r1, [r7, #24]
 8007892:	69fa      	ldr	r2, [r7, #28]
 8007894:	e841 2300 	strex	r3, r2, [r1]
 8007898:	617b      	str	r3, [r7, #20]
   return(result);
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1e6      	bne.n	800786e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80078a0:	e018      	b.n	80078d4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80078a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078aa:	881a      	ldrh	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078b4:	b292      	uxth	r2, r2
 80078b6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078bc:	1c9a      	adds	r2, r3, #2
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	3b01      	subs	r3, #1
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80078d4:	bf00      	nop
 80078d6:	3744      	adds	r7, #68	; 0x44
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b088      	sub	sp, #32
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	e853 3f00 	ldrex	r3, [r3]
 80078f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078fc:	61fb      	str	r3, [r7, #28]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	61bb      	str	r3, [r7, #24]
 8007908:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790a:	6979      	ldr	r1, [r7, #20]
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	e841 2300 	strex	r3, r2, [r1]
 8007912:	613b      	str	r3, [r7, #16]
   return(result);
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1e6      	bne.n	80078e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2220      	movs	r2, #32
 800791e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7ff fa38 	bl	8006d9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800792c:	bf00      	nop
 800792e:	3720      	adds	r7, #32
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b09c      	sub	sp, #112	; 0x70
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007942:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800794c:	2b22      	cmp	r3, #34	; 0x22
 800794e:	f040 80b9 	bne.w	8007ac4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007958:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800795c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007960:	b2d9      	uxtb	r1, r3
 8007962:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007966:	b2da      	uxtb	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796c:	400a      	ands	r2, r1
 800796e:	b2d2      	uxtb	r2, r2
 8007970:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007976:	1c5a      	adds	r2, r3, #1
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007982:	b29b      	uxth	r3, r3
 8007984:	3b01      	subs	r3, #1
 8007986:	b29a      	uxth	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007994:	b29b      	uxth	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	f040 809c 	bne.w	8007ad4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80079bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079c2:	e841 2300 	strex	r3, r2, [r1]
 80079c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1e6      	bne.n	800799c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3308      	adds	r3, #8
 80079d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d8:	e853 3f00 	ldrex	r3, [r3]
 80079dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e0:	f023 0301 	bic.w	r3, r3, #1
 80079e4:	667b      	str	r3, [r7, #100]	; 0x64
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3308      	adds	r3, #8
 80079ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80079ee:	647a      	str	r2, [r7, #68]	; 0x44
 80079f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079f6:	e841 2300 	strex	r3, r2, [r1]
 80079fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1e5      	bne.n	80079ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2220      	movs	r2, #32
 8007a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d018      	beq.n	8007a56 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	e853 3f00 	ldrex	r3, [r3]
 8007a30:	623b      	str	r3, [r7, #32]
   return(result);
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a38:	663b      	str	r3, [r7, #96]	; 0x60
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a42:	633b      	str	r3, [r7, #48]	; 0x30
 8007a44:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a4a:	e841 2300 	strex	r3, r2, [r1]
 8007a4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1e6      	bne.n	8007a24 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d12e      	bne.n	8007abc <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f023 0310 	bic.w	r3, r3, #16
 8007a78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a82:	61fb      	str	r3, [r7, #28]
 8007a84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	69b9      	ldr	r1, [r7, #24]
 8007a88:	69fa      	ldr	r2, [r7, #28]
 8007a8a:	e841 2300 	strex	r3, r2, [r1]
 8007a8e:	617b      	str	r3, [r7, #20]
   return(result);
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1e6      	bne.n	8007a64 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	69db      	ldr	r3, [r3, #28]
 8007a9c:	f003 0310 	and.w	r3, r3, #16
 8007aa0:	2b10      	cmp	r3, #16
 8007aa2:	d103      	bne.n	8007aac <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2210      	movs	r2, #16
 8007aaa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f7ff f985 	bl	8006dc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007aba:	e00b      	b.n	8007ad4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7f8 fe91 	bl	80007e4 <HAL_UART_RxCpltCallback>
}
 8007ac2:	e007      	b.n	8007ad4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699a      	ldr	r2, [r3, #24]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f042 0208 	orr.w	r2, r2, #8
 8007ad2:	619a      	str	r2, [r3, #24]
}
 8007ad4:	bf00      	nop
 8007ad6:	3770      	adds	r7, #112	; 0x70
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b09c      	sub	sp, #112	; 0x70
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007aea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007af4:	2b22      	cmp	r3, #34	; 0x22
 8007af6:	f040 80b9 	bne.w	8007c6c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007b00:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b08:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b0a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007b0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007b12:	4013      	ands	r3, r2
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b18:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1e:	1c9a      	adds	r2, r3, #2
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f040 809c 	bne.w	8007c7c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b4c:	e853 3f00 	ldrex	r3, [r3]
 8007b50:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b58:	667b      	str	r3, [r7, #100]	; 0x64
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b62:	657b      	str	r3, [r7, #84]	; 0x54
 8007b64:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1e6      	bne.n	8007b44 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b80:	e853 3f00 	ldrex	r3, [r3]
 8007b84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	f023 0301 	bic.w	r3, r3, #1
 8007b8c:	663b      	str	r3, [r7, #96]	; 0x60
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3308      	adds	r3, #8
 8007b94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b96:	643a      	str	r2, [r7, #64]	; 0x40
 8007b98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b9e:	e841 2300 	strex	r3, r2, [r1]
 8007ba2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1e5      	bne.n	8007b76 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2220      	movs	r2, #32
 8007bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d018      	beq.n	8007bfe <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	e853 3f00 	ldrex	r3, [r3]
 8007bd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007be0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bec:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bf2:	e841 2300 	strex	r3, r2, [r1]
 8007bf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1e6      	bne.n	8007bcc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d12e      	bne.n	8007c64 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	e853 3f00 	ldrex	r3, [r3]
 8007c18:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	f023 0310 	bic.w	r3, r3, #16
 8007c20:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	461a      	mov	r2, r3
 8007c28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c2a:	61bb      	str	r3, [r7, #24]
 8007c2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2e:	6979      	ldr	r1, [r7, #20]
 8007c30:	69ba      	ldr	r2, [r7, #24]
 8007c32:	e841 2300 	strex	r3, r2, [r1]
 8007c36:	613b      	str	r3, [r7, #16]
   return(result);
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1e6      	bne.n	8007c0c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	69db      	ldr	r3, [r3, #28]
 8007c44:	f003 0310 	and.w	r3, r3, #16
 8007c48:	2b10      	cmp	r3, #16
 8007c4a:	d103      	bne.n	8007c54 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2210      	movs	r2, #16
 8007c52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff f8b1 	bl	8006dc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c62:	e00b      	b.n	8007c7c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7f8 fdbd 	bl	80007e4 <HAL_UART_RxCpltCallback>
}
 8007c6a:	e007      	b.n	8007c7c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	699a      	ldr	r2, [r3, #24]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f042 0208 	orr.w	r2, r2, #8
 8007c7a:	619a      	str	r2, [r3, #24]
}
 8007c7c:	bf00      	nop
 8007c7e:	3770      	adds	r7, #112	; 0x70
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <atoi>:
 8007c98:	220a      	movs	r2, #10
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	f000 b8b4 	b.w	8007e08 <strtol>

08007ca0 <__errno>:
 8007ca0:	4b01      	ldr	r3, [pc, #4]	; (8007ca8 <__errno+0x8>)
 8007ca2:	6818      	ldr	r0, [r3, #0]
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	20000068 	.word	0x20000068

08007cac <__libc_init_array>:
 8007cac:	b570      	push	{r4, r5, r6, lr}
 8007cae:	4d0d      	ldr	r5, [pc, #52]	; (8007ce4 <__libc_init_array+0x38>)
 8007cb0:	4c0d      	ldr	r4, [pc, #52]	; (8007ce8 <__libc_init_array+0x3c>)
 8007cb2:	1b64      	subs	r4, r4, r5
 8007cb4:	10a4      	asrs	r4, r4, #2
 8007cb6:	2600      	movs	r6, #0
 8007cb8:	42a6      	cmp	r6, r4
 8007cba:	d109      	bne.n	8007cd0 <__libc_init_array+0x24>
 8007cbc:	4d0b      	ldr	r5, [pc, #44]	; (8007cec <__libc_init_array+0x40>)
 8007cbe:	4c0c      	ldr	r4, [pc, #48]	; (8007cf0 <__libc_init_array+0x44>)
 8007cc0:	f000 f8ac 	bl	8007e1c <_init>
 8007cc4:	1b64      	subs	r4, r4, r5
 8007cc6:	10a4      	asrs	r4, r4, #2
 8007cc8:	2600      	movs	r6, #0
 8007cca:	42a6      	cmp	r6, r4
 8007ccc:	d105      	bne.n	8007cda <__libc_init_array+0x2e>
 8007cce:	bd70      	pop	{r4, r5, r6, pc}
 8007cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cd4:	4798      	blx	r3
 8007cd6:	3601      	adds	r6, #1
 8007cd8:	e7ee      	b.n	8007cb8 <__libc_init_array+0xc>
 8007cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cde:	4798      	blx	r3
 8007ce0:	3601      	adds	r6, #1
 8007ce2:	e7f2      	b.n	8007cca <__libc_init_array+0x1e>
 8007ce4:	080080dc 	.word	0x080080dc
 8007ce8:	080080dc 	.word	0x080080dc
 8007cec:	080080dc 	.word	0x080080dc
 8007cf0:	080080e0 	.word	0x080080e0

08007cf4 <memset>:
 8007cf4:	4402      	add	r2, r0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d100      	bne.n	8007cfe <memset+0xa>
 8007cfc:	4770      	bx	lr
 8007cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8007d02:	e7f9      	b.n	8007cf8 <memset+0x4>

08007d04 <_strtol_l.constprop.0>:
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d0a:	d001      	beq.n	8007d10 <_strtol_l.constprop.0+0xc>
 8007d0c:	2b24      	cmp	r3, #36	; 0x24
 8007d0e:	d906      	bls.n	8007d1e <_strtol_l.constprop.0+0x1a>
 8007d10:	f7ff ffc6 	bl	8007ca0 <__errno>
 8007d14:	2316      	movs	r3, #22
 8007d16:	6003      	str	r3, [r0, #0]
 8007d18:	2000      	movs	r0, #0
 8007d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d1e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007e04 <_strtol_l.constprop.0+0x100>
 8007d22:	460d      	mov	r5, r1
 8007d24:	462e      	mov	r6, r5
 8007d26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d2a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007d2e:	f017 0708 	ands.w	r7, r7, #8
 8007d32:	d1f7      	bne.n	8007d24 <_strtol_l.constprop.0+0x20>
 8007d34:	2c2d      	cmp	r4, #45	; 0x2d
 8007d36:	d132      	bne.n	8007d9e <_strtol_l.constprop.0+0x9a>
 8007d38:	782c      	ldrb	r4, [r5, #0]
 8007d3a:	2701      	movs	r7, #1
 8007d3c:	1cb5      	adds	r5, r6, #2
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d05b      	beq.n	8007dfa <_strtol_l.constprop.0+0xf6>
 8007d42:	2b10      	cmp	r3, #16
 8007d44:	d109      	bne.n	8007d5a <_strtol_l.constprop.0+0x56>
 8007d46:	2c30      	cmp	r4, #48	; 0x30
 8007d48:	d107      	bne.n	8007d5a <_strtol_l.constprop.0+0x56>
 8007d4a:	782c      	ldrb	r4, [r5, #0]
 8007d4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007d50:	2c58      	cmp	r4, #88	; 0x58
 8007d52:	d14d      	bne.n	8007df0 <_strtol_l.constprop.0+0xec>
 8007d54:	786c      	ldrb	r4, [r5, #1]
 8007d56:	2310      	movs	r3, #16
 8007d58:	3502      	adds	r5, #2
 8007d5a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007d5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d62:	f04f 0c00 	mov.w	ip, #0
 8007d66:	fbb8 f9f3 	udiv	r9, r8, r3
 8007d6a:	4666      	mov	r6, ip
 8007d6c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007d70:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007d74:	f1be 0f09 	cmp.w	lr, #9
 8007d78:	d816      	bhi.n	8007da8 <_strtol_l.constprop.0+0xa4>
 8007d7a:	4674      	mov	r4, lr
 8007d7c:	42a3      	cmp	r3, r4
 8007d7e:	dd24      	ble.n	8007dca <_strtol_l.constprop.0+0xc6>
 8007d80:	f1bc 0f00 	cmp.w	ip, #0
 8007d84:	db1e      	blt.n	8007dc4 <_strtol_l.constprop.0+0xc0>
 8007d86:	45b1      	cmp	r9, r6
 8007d88:	d31c      	bcc.n	8007dc4 <_strtol_l.constprop.0+0xc0>
 8007d8a:	d101      	bne.n	8007d90 <_strtol_l.constprop.0+0x8c>
 8007d8c:	45a2      	cmp	sl, r4
 8007d8e:	db19      	blt.n	8007dc4 <_strtol_l.constprop.0+0xc0>
 8007d90:	fb06 4603 	mla	r6, r6, r3, r4
 8007d94:	f04f 0c01 	mov.w	ip, #1
 8007d98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d9c:	e7e8      	b.n	8007d70 <_strtol_l.constprop.0+0x6c>
 8007d9e:	2c2b      	cmp	r4, #43	; 0x2b
 8007da0:	bf04      	itt	eq
 8007da2:	782c      	ldrbeq	r4, [r5, #0]
 8007da4:	1cb5      	addeq	r5, r6, #2
 8007da6:	e7ca      	b.n	8007d3e <_strtol_l.constprop.0+0x3a>
 8007da8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007dac:	f1be 0f19 	cmp.w	lr, #25
 8007db0:	d801      	bhi.n	8007db6 <_strtol_l.constprop.0+0xb2>
 8007db2:	3c37      	subs	r4, #55	; 0x37
 8007db4:	e7e2      	b.n	8007d7c <_strtol_l.constprop.0+0x78>
 8007db6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007dba:	f1be 0f19 	cmp.w	lr, #25
 8007dbe:	d804      	bhi.n	8007dca <_strtol_l.constprop.0+0xc6>
 8007dc0:	3c57      	subs	r4, #87	; 0x57
 8007dc2:	e7db      	b.n	8007d7c <_strtol_l.constprop.0+0x78>
 8007dc4:	f04f 3cff 	mov.w	ip, #4294967295
 8007dc8:	e7e6      	b.n	8007d98 <_strtol_l.constprop.0+0x94>
 8007dca:	f1bc 0f00 	cmp.w	ip, #0
 8007dce:	da05      	bge.n	8007ddc <_strtol_l.constprop.0+0xd8>
 8007dd0:	2322      	movs	r3, #34	; 0x22
 8007dd2:	6003      	str	r3, [r0, #0]
 8007dd4:	4646      	mov	r6, r8
 8007dd6:	b942      	cbnz	r2, 8007dea <_strtol_l.constprop.0+0xe6>
 8007dd8:	4630      	mov	r0, r6
 8007dda:	e79e      	b.n	8007d1a <_strtol_l.constprop.0+0x16>
 8007ddc:	b107      	cbz	r7, 8007de0 <_strtol_l.constprop.0+0xdc>
 8007dde:	4276      	negs	r6, r6
 8007de0:	2a00      	cmp	r2, #0
 8007de2:	d0f9      	beq.n	8007dd8 <_strtol_l.constprop.0+0xd4>
 8007de4:	f1bc 0f00 	cmp.w	ip, #0
 8007de8:	d000      	beq.n	8007dec <_strtol_l.constprop.0+0xe8>
 8007dea:	1e69      	subs	r1, r5, #1
 8007dec:	6011      	str	r1, [r2, #0]
 8007dee:	e7f3      	b.n	8007dd8 <_strtol_l.constprop.0+0xd4>
 8007df0:	2430      	movs	r4, #48	; 0x30
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1b1      	bne.n	8007d5a <_strtol_l.constprop.0+0x56>
 8007df6:	2308      	movs	r3, #8
 8007df8:	e7af      	b.n	8007d5a <_strtol_l.constprop.0+0x56>
 8007dfa:	2c30      	cmp	r4, #48	; 0x30
 8007dfc:	d0a5      	beq.n	8007d4a <_strtol_l.constprop.0+0x46>
 8007dfe:	230a      	movs	r3, #10
 8007e00:	e7ab      	b.n	8007d5a <_strtol_l.constprop.0+0x56>
 8007e02:	bf00      	nop
 8007e04:	08007fd9 	.word	0x08007fd9

08007e08 <strtol>:
 8007e08:	4613      	mov	r3, r2
 8007e0a:	460a      	mov	r2, r1
 8007e0c:	4601      	mov	r1, r0
 8007e0e:	4802      	ldr	r0, [pc, #8]	; (8007e18 <strtol+0x10>)
 8007e10:	6800      	ldr	r0, [r0, #0]
 8007e12:	f7ff bf77 	b.w	8007d04 <_strtol_l.constprop.0>
 8007e16:	bf00      	nop
 8007e18:	20000068 	.word	0x20000068

08007e1c <_init>:
 8007e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1e:	bf00      	nop
 8007e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e22:	bc08      	pop	{r3}
 8007e24:	469e      	mov	lr, r3
 8007e26:	4770      	bx	lr

08007e28 <_fini>:
 8007e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2a:	bf00      	nop
 8007e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e2e:	bc08      	pop	{r3}
 8007e30:	469e      	mov	lr, r3
 8007e32:	4770      	bx	lr

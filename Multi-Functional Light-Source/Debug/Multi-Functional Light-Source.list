
Multi-Functional Light-Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004864  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004a04  08004a04  00014a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a74  08004a74  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004a74  08004a74  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a74  08004a74  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a78  08004a78  00014a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000000c8  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000148  20000148  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b5d1  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b64  00000000  00000000  0002b681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000788  00000000  00000000  0002d1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006e0  00000000  00000000  0002d970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002008b  00000000  00000000  0002e050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b121  00000000  00000000  0004e0db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c08f6  00000000  00000000  000591fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00119af2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002114  00000000  00000000  00119b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080049ec 	.word	0x080049ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080049ec 	.word	0x080049ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t studentNum[13]="#:23765518:$\n" ;
uint8_t recvd_char[1];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

	//transmit recvd characer
	HAL_UART_Transmit(&huart2, recvd_char, 1, 50) ;
 8000298:	2332      	movs	r3, #50	; 0x32
 800029a:	2201      	movs	r2, #1
 800029c:	4906      	ldr	r1, [pc, #24]	; (80002b8 <HAL_UART_RxCpltCallback+0x28>)
 800029e:	4807      	ldr	r0, [pc, #28]	; (80002bc <HAL_UART_RxCpltCallback+0x2c>)
 80002a0:	f002 fc8e 	bl	8002bc0 <HAL_UART_Transmit>

	// recieve character
	HAL_UART_Receive_IT(&huart2, recvd_char, 1);
 80002a4:	2201      	movs	r2, #1
 80002a6:	4904      	ldr	r1, [pc, #16]	; (80002b8 <HAL_UART_RxCpltCallback+0x28>)
 80002a8:	4804      	ldr	r0, [pc, #16]	; (80002bc <HAL_UART_RxCpltCallback+0x2c>)
 80002aa:	f002 fd13 	bl	8002cd4 <HAL_UART_Receive_IT>
}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	20000124 	.word	0x20000124
 80002bc:	2000009c 	.word	0x2000009c

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int button_count= 0 ;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
	char button_press[10] = {' '} ;
 80002ca:	2320      	movs	r3, #32
 80002cc:	603b      	str	r3, [r7, #0]
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	809a      	strh	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d6:	f000 fb73 	bl	80009c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002da:	f000 f861 	bl	80003a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002de:	f000 f8ef 	bl	80004c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002e2:	f000 f8bb 	bl	800045c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(200);
 80002e6:	20c8      	movs	r0, #200	; 0xc8
 80002e8:	f000 fbd0 	bl	8000a8c <HAL_Delay>
  HAL_UART_Transmit(&huart2, studentNum, 13, 150); //transmit student number
 80002ec:	2396      	movs	r3, #150	; 0x96
 80002ee:	220d      	movs	r2, #13
 80002f0:	4924      	ldr	r1, [pc, #144]	; (8000384 <main+0xc4>)
 80002f2:	4825      	ldr	r0, [pc, #148]	; (8000388 <main+0xc8>)
 80002f4:	f002 fc64 	bl	8002bc0 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2, recvd_char, 1); //recv character input
 80002f8:	2201      	movs	r2, #1
 80002fa:	4924      	ldr	r1, [pc, #144]	; (800038c <main+0xcc>)
 80002fc:	4822      	ldr	r0, [pc, #136]	; (8000388 <main+0xc8>)
 80002fe:	f002 fce9 	bl	8002cd4 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 //10 ms delay
	  if(middle_button_pressed == 1){
 8000302:	4b23      	ldr	r3, [pc, #140]	; (8000390 <main+0xd0>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d122      	bne.n	8000350 <main+0x90>
		  middle_button_pressed = 0;
 800030a:	4b21      	ldr	r3, [pc, #132]	; (8000390 <main+0xd0>)
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]

		  button_count++;
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	3301      	adds	r3, #1
 8000314:	60fb      	str	r3, [r7, #12]

		  if(button_count > 999){
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800031c:	db01      	blt.n	8000322 <main+0x62>
			  button_count = 1 ;
 800031e:	2301      	movs	r3, #1
 8000320:	60fb      	str	r3, [r7, #12]
		  }

		  sprintf(button_press,"%d\n", button_count) ;
 8000322:	463b      	mov	r3, r7
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	491b      	ldr	r1, [pc, #108]	; (8000394 <main+0xd4>)
 8000328:	4618      	mov	r0, r3
 800032a:	f003 fef1 	bl	8004110 <siprintf>

		  // TRANSMIT BUTTON COUNT
		  HAL_UART_Transmit(&huart2, (uint8_t*)button_press, strlen(button_press), 50) ;
 800032e:	463b      	mov	r3, r7
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ff55 	bl	80001e0 <strlen>
 8000336:	4603      	mov	r3, r0
 8000338:	b29a      	uxth	r2, r3
 800033a:	4639      	mov	r1, r7
 800033c:	2332      	movs	r3, #50	; 0x32
 800033e:	4812      	ldr	r0, [pc, #72]	; (8000388 <main+0xc8>)
 8000340:	f002 fc3e 	bl	8002bc0 <HAL_UART_Transmit>

		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5)  ;
 8000344:	2120      	movs	r1, #32
 8000346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034a:	f000 ff05 	bl	8001158 <HAL_GPIO_TogglePin>
 800034e:	e7d8      	b.n	8000302 <main+0x42>

	  }
	  else if(right_button_pressed==1){
 8000350:	4b11      	ldr	r3, [pc, #68]	; (8000398 <main+0xd8>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d108      	bne.n	800036a <main+0xaa>
		  right_button_pressed = 0 ;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <main+0xd8>)
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5)  ;
 800035e:	2120      	movs	r1, #32
 8000360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000364:	f000 fef8 	bl	8001158 <HAL_GPIO_TogglePin>
 8000368:	e7cb      	b.n	8000302 <main+0x42>

	  }
	  else{
		  if(left_button_pressed ==1){
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <main+0xdc>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b01      	cmp	r3, #1
 8000370:	d1c7      	bne.n	8000302 <main+0x42>
			  left_button_pressed = 0 ;
 8000372:	4b0a      	ldr	r3, [pc, #40]	; (800039c <main+0xdc>)
 8000374:	2200      	movs	r2, #0
 8000376:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5)  ;
 8000378:	2120      	movs	r1, #32
 800037a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037e:	f000 feeb 	bl	8001158 <HAL_GPIO_TogglePin>
	  if(middle_button_pressed == 1){
 8000382:	e7be      	b.n	8000302 <main+0x42>
 8000384:	20000000 	.word	0x20000000
 8000388:	2000009c 	.word	0x2000009c
 800038c:	20000124 	.word	0x20000124
 8000390:	2000012c 	.word	0x2000012c
 8000394:	08004a04 	.word	0x08004a04
 8000398:	2000012d 	.word	0x2000012d
 800039c:	2000012e 	.word	0x2000012e

080003a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b0a6      	sub	sp, #152	; 0x98
 80003a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003aa:	2228      	movs	r2, #40	; 0x28
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f003 fea6 	bl	8004100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
 80003c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	2258      	movs	r2, #88	; 0x58
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f003 fe98 	bl	8004100 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d0:	2302      	movs	r3, #2
 80003d2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d4:	2301      	movs	r3, #1
 80003d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d8:	2310      	movs	r3, #16
 80003da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003de:	2302      	movs	r3, #2
 80003e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003f4:	2300      	movs	r3, #0
 80003f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003fe:	4618      	mov	r0, r3
 8000400:	f000 fee8 	bl	80011d4 <HAL_RCC_OscConfig>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800040a:	f000 f8e5 	bl	80005d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040e:	230f      	movs	r3, #15
 8000410:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000412:	2302      	movs	r3, #2
 8000414:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800041a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800041e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000424:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000428:	2102      	movs	r1, #2
 800042a:	4618      	mov	r0, r3
 800042c:	f001 ff26 	bl	800227c <HAL_RCC_ClockConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000436:	f000 f8cf 	bl	80005d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800043a:	2302      	movs	r3, #2
 800043c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800043e:	2300      	movs	r3, #0
 8000440:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	4618      	mov	r0, r3
 8000446:	f002 f94f 	bl	80026e8 <HAL_RCCEx_PeriphCLKConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000450:	f000 f8c2 	bl	80005d8 <Error_Handler>
  }
}
 8000454:	bf00      	nop
 8000456:	3798      	adds	r7, #152	; 0x98
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <MX_USART2_UART_Init+0x5c>)
 8000462:	4a16      	ldr	r2, [pc, #88]	; (80004bc <MX_USART2_UART_Init+0x60>)
 8000464:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <MX_USART2_UART_Init+0x5c>)
 8000468:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800046c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <MX_USART2_UART_Init+0x5c>)
 8000470:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000474:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000476:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <MX_USART2_UART_Init+0x5c>)
 8000478:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800047c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <MX_USART2_UART_Init+0x5c>)
 8000480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000484:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <MX_USART2_UART_Init+0x5c>)
 8000488:	220c      	movs	r2, #12
 800048a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800048c:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <MX_USART2_UART_Init+0x5c>)
 800048e:	2200      	movs	r2, #0
 8000490:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000492:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <MX_USART2_UART_Init+0x5c>)
 8000494:	2200      	movs	r2, #0
 8000496:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000498:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <MX_USART2_UART_Init+0x5c>)
 800049a:	2200      	movs	r2, #0
 800049c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <MX_USART2_UART_Init+0x5c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004a4:	4804      	ldr	r0, [pc, #16]	; (80004b8 <MX_USART2_UART_Init+0x5c>)
 80004a6:	f002 fb3d 	bl	8002b24 <HAL_UART_Init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80004b0:	f000 f892 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	2000009c 	.word	0x2000009c
 80004bc:	40004400 	.word	0x40004400

080004c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d6:	4b3d      	ldr	r3, [pc, #244]	; (80005cc <MX_GPIO_Init+0x10c>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a3c      	ldr	r2, [pc, #240]	; (80005cc <MX_GPIO_Init+0x10c>)
 80004dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b3a      	ldr	r3, [pc, #232]	; (80005cc <MX_GPIO_Init+0x10c>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ee:	4b37      	ldr	r3, [pc, #220]	; (80005cc <MX_GPIO_Init+0x10c>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a36      	ldr	r2, [pc, #216]	; (80005cc <MX_GPIO_Init+0x10c>)
 80004f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b34      	ldr	r3, [pc, #208]	; (80005cc <MX_GPIO_Init+0x10c>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b31      	ldr	r3, [pc, #196]	; (80005cc <MX_GPIO_Init+0x10c>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a30      	ldr	r2, [pc, #192]	; (80005cc <MX_GPIO_Init+0x10c>)
 800050c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b2e      	ldr	r3, [pc, #184]	; (80005cc <MX_GPIO_Init+0x10c>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b2b      	ldr	r3, [pc, #172]	; (80005cc <MX_GPIO_Init+0x10c>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a2a      	ldr	r2, [pc, #168]	; (80005cc <MX_GPIO_Init+0x10c>)
 8000524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b28      	ldr	r3, [pc, #160]	; (80005cc <MX_GPIO_Init+0x10c>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2120      	movs	r1, #32
 800053a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053e:	f000 fdf3 	bl	8001128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000548:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800054c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4619      	mov	r1, r3
 8000558:	481d      	ldr	r0, [pc, #116]	; (80005d0 <MX_GPIO_Init+0x110>)
 800055a:	f000 fc43 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800055e:	2320      	movs	r3, #32
 8000560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000562:	2301      	movs	r3, #1
 8000564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056a:	2300      	movs	r3, #0
 800056c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	4619      	mov	r1, r3
 8000574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000578:	f000 fc34 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800057c:	23c0      	movs	r3, #192	; 0xc0
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000580:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000586:	2301      	movs	r3, #1
 8000588:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	4619      	mov	r1, r3
 8000590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000594:	f000 fc26 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800059e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80005a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4619      	mov	r1, r3
 80005ae:	4809      	ldr	r0, [pc, #36]	; (80005d4 <MX_GPIO_Init+0x114>)
 80005b0:	f000 fc18 	bl	8000de4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2100      	movs	r1, #0
 80005b8:	2017      	movs	r0, #23
 80005ba:	f000 fb66 	bl	8000c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005be:	2017      	movs	r0, #23
 80005c0:	f000 fb7f 	bl	8000cc2 <HAL_NVIC_EnableIRQ>

}
 80005c4:	bf00      	nop
 80005c6:	3728      	adds	r7, #40	; 0x28
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021000 	.word	0x40021000
 80005d0:	48000800 	.word	0x48000800
 80005d4:	48000400 	.word	0x48000400

080005d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005dc:	b672      	cpsid	i
}
 80005de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <Error_Handler+0x8>
	...

080005e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_MspInit+0x44>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <HAL_MspInit+0x44>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6193      	str	r3, [r2, #24]
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <HAL_MspInit+0x44>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_MspInit+0x44>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	4a08      	ldr	r2, [pc, #32]	; (8000628 <HAL_MspInit+0x44>)
 8000608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060c:	61d3      	str	r3, [r2, #28]
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_MspInit+0x44>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800061a:	2007      	movs	r0, #7
 800061c:	f000 fb2a 	bl	8000c74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40021000 	.word	0x40021000

0800062c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a1b      	ldr	r2, [pc, #108]	; (80006b8 <HAL_UART_MspInit+0x8c>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d130      	bne.n	80006b0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <HAL_UART_MspInit+0x90>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a1a      	ldr	r2, [pc, #104]	; (80006bc <HAL_UART_MspInit+0x90>)
 8000654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000658:	61d3      	str	r3, [r2, #28]
 800065a:	4b18      	ldr	r3, [pc, #96]	; (80006bc <HAL_UART_MspInit+0x90>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <HAL_UART_MspInit+0x90>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a14      	ldr	r2, [pc, #80]	; (80006bc <HAL_UART_MspInit+0x90>)
 800066c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <HAL_UART_MspInit+0x90>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800067e:	230c      	movs	r3, #12
 8000680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800068e:	2307      	movs	r3, #7
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069c:	f000 fba2 	bl	8000de4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	2026      	movs	r0, #38	; 0x26
 80006a6:	f000 faf0 	bl	8000c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006aa:	2026      	movs	r0, #38	; 0x26
 80006ac:	f000 fb09 	bl	8000cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	; 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40004400 	.word	0x40004400
 80006bc:	40021000 	.word	0x40021000

080006c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <NMI_Handler+0x4>

080006c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <HardFault_Handler+0x4>

080006cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <MemManage_Handler+0x4>

080006d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <BusFault_Handler+0x4>

080006d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <UsageFault_Handler+0x4>

080006de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800070c:	f000 f99e 	bl	8000a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 8000718:	4b64      	ldr	r3, [pc, #400]	; (80008ac <EXTI9_5_IRQHandler+0x198>)
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000720:	2b00      	cmp	r3, #0
 8000722:	d038      	beq.n	8000796 <EXTI9_5_IRQHandler+0x82>

		if(HAL_GetTick() - ticks_pressed >= 20){
 8000724:	f000 f9a6 	bl	8000a74 <HAL_GetTick>
 8000728:	4602      	mov	r2, r0
 800072a:	4b61      	ldr	r3, [pc, #388]	; (80008b0 <EXTI9_5_IRQHandler+0x19c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	2b13      	cmp	r3, #19
 8000732:	d92c      	bls.n	800078e <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 8000734:	4b5f      	ldr	r3, [pc, #380]	; (80008b4 <EXTI9_5_IRQHandler+0x1a0>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b01      	cmp	r3, #1
 800073c:	d112      	bne.n	8000764 <EXTI9_5_IRQHandler+0x50>
 800073e:	2140      	movs	r1, #64	; 0x40
 8000740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000744:	f000 fcd8 	bl	80010f8 <HAL_GPIO_ReadPin>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d10a      	bne.n	8000764 <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 800074e:	4b59      	ldr	r3, [pc, #356]	; (80008b4 <EXTI9_5_IRQHandler+0x1a0>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8000754:	f000 f98e 	bl	8000a74 <HAL_GetTick>
 8000758:	4603      	mov	r3, r0
 800075a:	4a55      	ldr	r2, [pc, #340]	; (80008b0 <EXTI9_5_IRQHandler+0x19c>)
 800075c:	6013      	str	r3, [r2, #0]

				middle_button_pressed = 1;
 800075e:	4b56      	ldr	r3, [pc, #344]	; (80008b8 <EXTI9_5_IRQHandler+0x1a4>)
 8000760:	2201      	movs	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 8000764:	4b53      	ldr	r3, [pc, #332]	; (80008b4 <EXTI9_5_IRQHandler+0x1a0>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	d10f      	bne.n	800078e <EXTI9_5_IRQHandler+0x7a>
 800076e:	2140      	movs	r1, #64	; 0x40
 8000770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000774:	f000 fcc0 	bl	80010f8 <HAL_GPIO_ReadPin>
 8000778:	4603      	mov	r3, r0
 800077a:	2b01      	cmp	r3, #1
 800077c:	d107      	bne.n	800078e <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 800077e:	f000 f979 	bl	8000a74 <HAL_GetTick>
 8000782:	4603      	mov	r3, r0
 8000784:	4a4a      	ldr	r2, [pc, #296]	; (80008b0 <EXTI9_5_IRQHandler+0x19c>)
 8000786:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8000788:	4b4a      	ldr	r3, [pc, #296]	; (80008b4 <EXTI9_5_IRQHandler+0x1a0>)
 800078a:	2201      	movs	r2, #1
 800078c:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 800078e:	4b47      	ldr	r3, [pc, #284]	; (80008ac <EXTI9_5_IRQHandler+0x198>)
 8000790:	2240      	movs	r2, #64	; 0x40
 8000792:	615a      	str	r2, [r3, #20]
 8000794:	e07d      	b.n	8000892 <EXTI9_5_IRQHandler+0x17e>
	}
	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8000796:	4b45      	ldr	r3, [pc, #276]	; (80008ac <EXTI9_5_IRQHandler+0x198>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d038      	beq.n	8000814 <EXTI9_5_IRQHandler+0x100>

			if(HAL_GetTick() - ticks_pressed >= 20){
 80007a2:	f000 f967 	bl	8000a74 <HAL_GetTick>
 80007a6:	4602      	mov	r2, r0
 80007a8:	4b41      	ldr	r3, [pc, #260]	; (80008b0 <EXTI9_5_IRQHandler+0x19c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	2b13      	cmp	r3, #19
 80007b0:	d92c      	bls.n	800080c <EXTI9_5_IRQHandler+0xf8>
				// stable low state
				if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 80007b2:	4b40      	ldr	r3, [pc, #256]	; (80008b4 <EXTI9_5_IRQHandler+0x1a0>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d112      	bne.n	80007e2 <EXTI9_5_IRQHandler+0xce>
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c2:	f000 fc99 	bl	80010f8 <HAL_GPIO_ReadPin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d10a      	bne.n	80007e2 <EXTI9_5_IRQHandler+0xce>
					button_state =0 ; // stable low reached
 80007cc:	4b39      	ldr	r3, [pc, #228]	; (80008b4 <EXTI9_5_IRQHandler+0x1a0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
					ticks_pressed = HAL_GetTick() ;
 80007d2:	f000 f94f 	bl	8000a74 <HAL_GetTick>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4a35      	ldr	r2, [pc, #212]	; (80008b0 <EXTI9_5_IRQHandler+0x19c>)
 80007da:	6013      	str	r3, [r2, #0]

					right_button_pressed = 1;
 80007dc:	4b37      	ldr	r3, [pc, #220]	; (80008bc <EXTI9_5_IRQHandler+0x1a8>)
 80007de:	2201      	movs	r2, #1
 80007e0:	701a      	strb	r2, [r3, #0]
				}

				// stable high state
				if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 80007e2:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <EXTI9_5_IRQHandler+0x1a0>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d10f      	bne.n	800080c <EXTI9_5_IRQHandler+0xf8>
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f2:	f000 fc81 	bl	80010f8 <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d107      	bne.n	800080c <EXTI9_5_IRQHandler+0xf8>
					ticks_pressed = HAL_GetTick() ;
 80007fc:	f000 f93a 	bl	8000a74 <HAL_GetTick>
 8000800:	4603      	mov	r3, r0
 8000802:	4a2b      	ldr	r2, [pc, #172]	; (80008b0 <EXTI9_5_IRQHandler+0x19c>)
 8000804:	6013      	str	r3, [r2, #0]
					button_state =1 ; // stable high state
 8000806:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <EXTI9_5_IRQHandler+0x1a0>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]

				}
			}


			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 800080c:	4b27      	ldr	r3, [pc, #156]	; (80008ac <EXTI9_5_IRQHandler+0x198>)
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	615a      	str	r2, [r3, #20]
 8000812:	e03e      	b.n	8000892 <EXTI9_5_IRQHandler+0x17e>
	}
	else{
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 8000814:	4b25      	ldr	r3, [pc, #148]	; (80008ac <EXTI9_5_IRQHandler+0x198>)
 8000816:	695b      	ldr	r3, [r3, #20]
 8000818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800081c:	2b00      	cmp	r3, #0
 800081e:	d038      	beq.n	8000892 <EXTI9_5_IRQHandler+0x17e>

				if(HAL_GetTick() - ticks_pressed >= 20){
 8000820:	f000 f928 	bl	8000a74 <HAL_GetTick>
 8000824:	4602      	mov	r2, r0
 8000826:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <EXTI9_5_IRQHandler+0x19c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	2b13      	cmp	r3, #19
 800082e:	d92c      	bls.n	800088a <EXTI9_5_IRQHandler+0x176>
					// stable low state
					if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 8000830:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <EXTI9_5_IRQHandler+0x1a0>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b01      	cmp	r3, #1
 8000838:	d112      	bne.n	8000860 <EXTI9_5_IRQHandler+0x14c>
 800083a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800083e:	4820      	ldr	r0, [pc, #128]	; (80008c0 <EXTI9_5_IRQHandler+0x1ac>)
 8000840:	f000 fc5a 	bl	80010f8 <HAL_GPIO_ReadPin>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d10a      	bne.n	8000860 <EXTI9_5_IRQHandler+0x14c>
						button_state =0 ; // stable low reached
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <EXTI9_5_IRQHandler+0x1a0>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
						ticks_pressed = HAL_GetTick() ;
 8000850:	f000 f910 	bl	8000a74 <HAL_GetTick>
 8000854:	4603      	mov	r3, r0
 8000856:	4a16      	ldr	r2, [pc, #88]	; (80008b0 <EXTI9_5_IRQHandler+0x19c>)
 8000858:	6013      	str	r3, [r2, #0]

						left_button_pressed = 1;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <EXTI9_5_IRQHandler+0x1b0>)
 800085c:	2201      	movs	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
					}

					// stable high state
					if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <EXTI9_5_IRQHandler+0x1a0>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10f      	bne.n	800088a <EXTI9_5_IRQHandler+0x176>
 800086a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086e:	4814      	ldr	r0, [pc, #80]	; (80008c0 <EXTI9_5_IRQHandler+0x1ac>)
 8000870:	f000 fc42 	bl	80010f8 <HAL_GPIO_ReadPin>
 8000874:	4603      	mov	r3, r0
 8000876:	2b01      	cmp	r3, #1
 8000878:	d107      	bne.n	800088a <EXTI9_5_IRQHandler+0x176>
						ticks_pressed = HAL_GetTick() ;
 800087a:	f000 f8fb 	bl	8000a74 <HAL_GetTick>
 800087e:	4603      	mov	r3, r0
 8000880:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <EXTI9_5_IRQHandler+0x19c>)
 8000882:	6013      	str	r3, [r2, #0]
						button_state =1 ; // stable high state
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <EXTI9_5_IRQHandler+0x1a0>)
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]

					}
				}
				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <EXTI9_5_IRQHandler+0x198>)
 800088c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000890:	615a      	str	r2, [r3, #20]
			}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000892:	2040      	movs	r0, #64	; 0x40
 8000894:	f000 fc7a 	bl	800118c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000898:	2080      	movs	r0, #128	; 0x80
 800089a:	f000 fc77 	bl	800118c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800089e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80008a2:	f000 fc73 	bl	800118c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40010400 	.word	0x40010400
 80008b0:	20000128 	.word	0x20000128
 80008b4:	2000000d 	.word	0x2000000d
 80008b8:	2000012c 	.word	0x2000012c
 80008bc:	2000012d 	.word	0x2000012d
 80008c0:	48000400 	.word	0x48000400
 80008c4:	2000012e 	.word	0x2000012e

080008c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <USART2_IRQHandler+0x10>)
 80008ce:	f002 fa45 	bl	8002d5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2000009c 	.word	0x2000009c

080008dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e4:	4a14      	ldr	r2, [pc, #80]	; (8000938 <_sbrk+0x5c>)
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <_sbrk+0x60>)
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <_sbrk+0x64>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d102      	bne.n	80008fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <_sbrk+0x64>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <_sbrk+0x68>)
 80008fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <_sbrk+0x64>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	429a      	cmp	r2, r3
 800090a:	d207      	bcs.n	800091c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800090c:	f003 fbce 	bl	80040ac <__errno>
 8000910:	4603      	mov	r3, r0
 8000912:	220c      	movs	r2, #12
 8000914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	e009      	b.n	8000930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <_sbrk+0x64>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	4a05      	ldr	r2, [pc, #20]	; (8000940 <_sbrk+0x64>)
 800092c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800092e:	68fb      	ldr	r3, [r7, #12]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20010000 	.word	0x20010000
 800093c:	00000400 	.word	0x00000400
 8000940:	20000130 	.word	0x20000130
 8000944:	20000148 	.word	0x20000148

08000948 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <SystemInit+0x20>)
 800094e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <SystemInit+0x20>)
 8000954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800096c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000970:	f7ff ffea 	bl	8000948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000974:	480c      	ldr	r0, [pc, #48]	; (80009a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000976:	490d      	ldr	r1, [pc, #52]	; (80009ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000978:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <LoopForever+0xe>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800097c:	e002      	b.n	8000984 <LoopCopyDataInit>

0800097e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000982:	3304      	adds	r3, #4

08000984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000988:	d3f9      	bcc.n	800097e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800098c:	4c0a      	ldr	r4, [pc, #40]	; (80009b8 <LoopForever+0x16>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000990:	e001      	b.n	8000996 <LoopFillZerobss>

08000992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000994:	3204      	adds	r2, #4

08000996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000998:	d3fb      	bcc.n	8000992 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800099a:	f003 fb8d 	bl	80040b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800099e:	f7ff fc8f 	bl	80002c0 <main>

080009a2 <LoopForever>:

LoopForever:
    b LoopForever
 80009a2:	e7fe      	b.n	80009a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ac:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80009b0:	08004a7c 	.word	0x08004a7c
  ldr r2, =_sbss
 80009b4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80009b8:	20000148 	.word	0x20000148

080009bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009bc:	e7fe      	b.n	80009bc <ADC1_2_IRQHandler>
	...

080009c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <HAL_Init+0x28>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <HAL_Init+0x28>)
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d0:	2003      	movs	r0, #3
 80009d2:	f000 f94f 	bl	8000c74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d6:	2000      	movs	r0, #0
 80009d8:	f000 f808 	bl	80009ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009dc:	f7ff fe02 	bl	80005e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40022000 	.word	0x40022000

080009ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <HAL_InitTick+0x54>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_InitTick+0x58>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4619      	mov	r1, r3
 80009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f967 	bl	8000cde <HAL_SYSTICK_Config>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00e      	b.n	8000a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	d80a      	bhi.n	8000a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a20:	2200      	movs	r2, #0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f000 f92f 	bl	8000c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a2c:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <HAL_InitTick+0x5c>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e000      	b.n	8000a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000010 	.word	0x20000010
 8000a44:	20000018 	.word	0x20000018
 8000a48:	20000014 	.word	0x20000014

08000a4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_IncTick+0x20>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_IncTick+0x24>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <HAL_IncTick+0x24>)
 8000a5e:	6013      	str	r3, [r2, #0]
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20000018 	.word	0x20000018
 8000a70:	20000134 	.word	0x20000134

08000a74 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <HAL_GetTick+0x14>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	20000134 	.word	0x20000134

08000a8c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a94:	f7ff ffee 	bl	8000a74 <HAL_GetTick>
 8000a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa4:	d005      	beq.n	8000ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <HAL_Delay+0x44>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4413      	add	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ab2:	bf00      	nop
 8000ab4:	f7ff ffde 	bl	8000a74 <HAL_GetTick>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8f7      	bhi.n	8000ab4 <HAL_Delay+0x28>
  {
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000018 	.word	0x20000018

08000ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <__NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	db0b      	blt.n	8000b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 021f 	and.w	r2, r3, #31
 8000b50:	4907      	ldr	r1, [pc, #28]	; (8000b70 <__NVIC_EnableIRQ+0x38>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	095b      	lsrs	r3, r3, #5
 8000b58:	2001      	movs	r0, #1
 8000b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000e100 	.word	0xe000e100

08000b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db0a      	blt.n	8000b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	490c      	ldr	r1, [pc, #48]	; (8000bc0 <__NVIC_SetPriority+0x4c>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	440b      	add	r3, r1
 8000b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b9c:	e00a      	b.n	8000bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4908      	ldr	r1, [pc, #32]	; (8000bc4 <__NVIC_SetPriority+0x50>)
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	3b04      	subs	r3, #4
 8000bac:	0112      	lsls	r2, r2, #4
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	761a      	strb	r2, [r3, #24]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f1c3 0307 	rsb	r3, r3, #7
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	bf28      	it	cs
 8000be6:	2304      	movcs	r3, #4
 8000be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3304      	adds	r3, #4
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	d902      	bls.n	8000bf8 <NVIC_EncodePriority+0x30>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	e000      	b.n	8000bfa <NVIC_EncodePriority+0x32>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43da      	mvns	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	4313      	orrs	r3, r2
         );
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	; 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c40:	d301      	bcc.n	8000c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00f      	b.n	8000c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <SysTick_Config+0x40>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4e:	210f      	movs	r1, #15
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f7ff ff8e 	bl	8000b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <SysTick_Config+0x40>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <SysTick_Config+0x40>)
 8000c60:	2207      	movs	r2, #7
 8000c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	e000e010 	.word	0xe000e010

08000c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ff29 	bl	8000ad4 <__NVIC_SetPriorityGrouping>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c9c:	f7ff ff3e 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	68b9      	ldr	r1, [r7, #8]
 8000ca6:	6978      	ldr	r0, [r7, #20]
 8000ca8:	f7ff ff8e 	bl	8000bc8 <NVIC_EncodePriority>
 8000cac:	4602      	mov	r2, r0
 8000cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff5d 	bl	8000b74 <__NVIC_SetPriority>
}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff31 	bl	8000b38 <__NVIC_EnableIRQ>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ffa2 	bl	8000c30 <SysTick_Config>
 8000cec:	4603      	mov	r3, r0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d008      	beq.n	8000d1a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e020      	b.n	8000d5c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f022 020e 	bic.w	r2, r2, #14
 8000d28:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f022 0201 	bic.w	r2, r2, #1
 8000d38:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d42:	2101      	movs	r1, #1
 8000d44:	fa01 f202 	lsl.w	r2, r1, r2
 8000d48:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d005      	beq.n	8000d8a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2204      	movs	r2, #4
 8000d82:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	73fb      	strb	r3, [r7, #15]
 8000d88:	e027      	b.n	8000dda <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f022 020e 	bic.w	r2, r2, #14
 8000d98:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 0201 	bic.w	r2, r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000db2:	2101      	movs	r1, #1
 8000db4:	fa01 f202 	lsl.w	r2, r1, r2
 8000db8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	4798      	blx	r3
    } 
  }
  return status;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df2:	e160      	b.n	80010b6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 8152 	beq.w	80010b0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d005      	beq.n	8000e24 <HAL_GPIO_Init+0x40>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d130      	bne.n	8000e86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	f003 0201 	and.w	r2, r3, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d017      	beq.n	8000ec2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d123      	bne.n	8000f16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	08da      	lsrs	r2, r3, #3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3208      	adds	r2, #8
 8000ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	691a      	ldr	r2, [r3, #16]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	08da      	lsrs	r2, r3, #3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3208      	adds	r2, #8
 8000f10:	6939      	ldr	r1, [r7, #16]
 8000f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0203 	and.w	r2, r3, #3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 80ac 	beq.w	80010b0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f58:	4b5e      	ldr	r3, [pc, #376]	; (80010d4 <HAL_GPIO_Init+0x2f0>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a5d      	ldr	r2, [pc, #372]	; (80010d4 <HAL_GPIO_Init+0x2f0>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b5b      	ldr	r3, [pc, #364]	; (80010d4 <HAL_GPIO_Init+0x2f0>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f70:	4a59      	ldr	r2, [pc, #356]	; (80010d8 <HAL_GPIO_Init+0x2f4>)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	3302      	adds	r3, #2
 8000f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	220f      	movs	r2, #15
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f9a:	d025      	beq.n	8000fe8 <HAL_GPIO_Init+0x204>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a4f      	ldr	r2, [pc, #316]	; (80010dc <HAL_GPIO_Init+0x2f8>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d01f      	beq.n	8000fe4 <HAL_GPIO_Init+0x200>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a4e      	ldr	r2, [pc, #312]	; (80010e0 <HAL_GPIO_Init+0x2fc>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d019      	beq.n	8000fe0 <HAL_GPIO_Init+0x1fc>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a4d      	ldr	r2, [pc, #308]	; (80010e4 <HAL_GPIO_Init+0x300>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d013      	beq.n	8000fdc <HAL_GPIO_Init+0x1f8>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a4c      	ldr	r2, [pc, #304]	; (80010e8 <HAL_GPIO_Init+0x304>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d00d      	beq.n	8000fd8 <HAL_GPIO_Init+0x1f4>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a4b      	ldr	r2, [pc, #300]	; (80010ec <HAL_GPIO_Init+0x308>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d007      	beq.n	8000fd4 <HAL_GPIO_Init+0x1f0>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a4a      	ldr	r2, [pc, #296]	; (80010f0 <HAL_GPIO_Init+0x30c>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d101      	bne.n	8000fd0 <HAL_GPIO_Init+0x1ec>
 8000fcc:	2306      	movs	r3, #6
 8000fce:	e00c      	b.n	8000fea <HAL_GPIO_Init+0x206>
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	e00a      	b.n	8000fea <HAL_GPIO_Init+0x206>
 8000fd4:	2305      	movs	r3, #5
 8000fd6:	e008      	b.n	8000fea <HAL_GPIO_Init+0x206>
 8000fd8:	2304      	movs	r3, #4
 8000fda:	e006      	b.n	8000fea <HAL_GPIO_Init+0x206>
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e004      	b.n	8000fea <HAL_GPIO_Init+0x206>
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	e002      	b.n	8000fea <HAL_GPIO_Init+0x206>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e000      	b.n	8000fea <HAL_GPIO_Init+0x206>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	f002 0203 	and.w	r2, r2, #3
 8000ff0:	0092      	lsls	r2, r2, #2
 8000ff2:	4093      	lsls	r3, r2
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ffa:	4937      	ldr	r1, [pc, #220]	; (80010d8 <HAL_GPIO_Init+0x2f4>)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3302      	adds	r3, #2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001008:	4b3a      	ldr	r3, [pc, #232]	; (80010f4 <HAL_GPIO_Init+0x310>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800102c:	4a31      	ldr	r2, [pc, #196]	; (80010f4 <HAL_GPIO_Init+0x310>)
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001032:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <HAL_GPIO_Init+0x310>)
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001056:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <HAL_GPIO_Init+0x310>)
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <HAL_GPIO_Init+0x310>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001080:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <HAL_GPIO_Init+0x310>)
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <HAL_GPIO_Init+0x310>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	43db      	mvns	r3, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <HAL_GPIO_Init+0x310>)
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3301      	adds	r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	fa22 f303 	lsr.w	r3, r2, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f47f ae97 	bne.w	8000df4 <HAL_GPIO_Init+0x10>
  }
}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	371c      	adds	r7, #28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010000 	.word	0x40010000
 80010dc:	48000400 	.word	0x48000400
 80010e0:	48000800 	.word	0x48000800
 80010e4:	48000c00 	.word	0x48000c00
 80010e8:	48001000 	.word	0x48001000
 80010ec:	48001400 	.word	0x48001400
 80010f0:	48001800 	.word	0x48001800
 80010f4:	40010400 	.word	0x40010400

080010f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	887b      	ldrh	r3, [r7, #2]
 800110a:	4013      	ands	r3, r2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d002      	beq.n	8001116 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001110:	2301      	movs	r3, #1
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	e001      	b.n	800111a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001116:	2300      	movs	r3, #0
 8001118:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	807b      	strh	r3, [r7, #2]
 8001134:	4613      	mov	r3, r2
 8001136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001138:	787b      	ldrb	r3, [r7, #1]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800113e:	887a      	ldrh	r2, [r7, #2]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001144:	e002      	b.n	800114c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4013      	ands	r3, r2
 8001170:	041a      	lsls	r2, r3, #16
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	43d9      	mvns	r1, r3
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	400b      	ands	r3, r1
 800117a:	431a      	orrs	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	619a      	str	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001198:	695a      	ldr	r2, [r3, #20]
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d006      	beq.n	80011b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f806 	bl	80011bc <HAL_GPIO_EXTI_Callback>
  }
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40010400 	.word	0x40010400

080011bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80011da:	af00      	add	r7, sp, #0
 80011dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011e4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d102      	bne.n	80011fa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	f001 b83a 	b.w	800226e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 816f 	beq.w	80014ee <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001210:	4bb5      	ldr	r3, [pc, #724]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	2b04      	cmp	r3, #4
 800121a:	d00c      	beq.n	8001236 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800121c:	4bb2      	ldr	r3, [pc, #712]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b08      	cmp	r3, #8
 8001226:	d15c      	bne.n	80012e2 <HAL_RCC_OscConfig+0x10e>
 8001228:	4baf      	ldr	r3, [pc, #700]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001234:	d155      	bne.n	80012e2 <HAL_RCC_OscConfig+0x10e>
 8001236:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800123a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001242:	fa93 f3a3 	rbit	r3, r3
 8001246:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800124a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124e:	fab3 f383 	clz	r3, r3
 8001252:	b2db      	uxtb	r3, r3
 8001254:	095b      	lsrs	r3, r3, #5
 8001256:	b2db      	uxtb	r3, r3
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b01      	cmp	r3, #1
 8001260:	d102      	bne.n	8001268 <HAL_RCC_OscConfig+0x94>
 8001262:	4ba1      	ldr	r3, [pc, #644]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	e015      	b.n	8001294 <HAL_RCC_OscConfig+0xc0>
 8001268:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800126c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001270:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001274:	fa93 f3a3 	rbit	r3, r3
 8001278:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800127c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001280:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001284:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001288:	fa93 f3a3 	rbit	r3, r3
 800128c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001290:	4b95      	ldr	r3, [pc, #596]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001298:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800129c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80012a0:	fa92 f2a2 	rbit	r2, r2
 80012a4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80012a8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80012ac:	fab2 f282 	clz	r2, r2
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	f042 0220 	orr.w	r2, r2, #32
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	f002 021f 	and.w	r2, r2, #31
 80012bc:	2101      	movs	r1, #1
 80012be:	fa01 f202 	lsl.w	r2, r1, r2
 80012c2:	4013      	ands	r3, r2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 8111 	beq.w	80014ec <HAL_RCC_OscConfig+0x318>
 80012ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f040 8108 	bne.w	80014ec <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	f000 bfc6 	b.w	800226e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f2:	d106      	bne.n	8001302 <HAL_RCC_OscConfig+0x12e>
 80012f4:	4b7c      	ldr	r3, [pc, #496]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a7b      	ldr	r2, [pc, #492]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 80012fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	e036      	b.n	8001370 <HAL_RCC_OscConfig+0x19c>
 8001302:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001306:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10c      	bne.n	800132c <HAL_RCC_OscConfig+0x158>
 8001312:	4b75      	ldr	r3, [pc, #468]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a74      	ldr	r2, [pc, #464]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 8001318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	4b72      	ldr	r3, [pc, #456]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a71      	ldr	r2, [pc, #452]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 8001324:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e021      	b.n	8001370 <HAL_RCC_OscConfig+0x19c>
 800132c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001330:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800133c:	d10c      	bne.n	8001358 <HAL_RCC_OscConfig+0x184>
 800133e:	4b6a      	ldr	r3, [pc, #424]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a69      	ldr	r2, [pc, #420]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 8001344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b67      	ldr	r3, [pc, #412]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a66      	ldr	r2, [pc, #408]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 8001350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e00b      	b.n	8001370 <HAL_RCC_OscConfig+0x19c>
 8001358:	4b63      	ldr	r3, [pc, #396]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a62      	ldr	r2, [pc, #392]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 800135e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b60      	ldr	r3, [pc, #384]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a5f      	ldr	r2, [pc, #380]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 800136a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001374:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d059      	beq.n	8001434 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fb78 	bl	8000a74 <HAL_GetTick>
 8001384:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001388:	e00a      	b.n	80013a0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800138a:	f7ff fb73 	bl	8000a74 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	; 0x64
 8001398:	d902      	bls.n	80013a0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	f000 bf67 	b.w	800226e <HAL_RCC_OscConfig+0x109a>
 80013a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80013ac:	fa93 f3a3 	rbit	r3, r3
 80013b0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80013b4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b8:	fab3 f383 	clz	r3, r3
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d102      	bne.n	80013d2 <HAL_RCC_OscConfig+0x1fe>
 80013cc:	4b46      	ldr	r3, [pc, #280]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	e015      	b.n	80013fe <HAL_RCC_OscConfig+0x22a>
 80013d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013da:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80013de:	fa93 f3a3 	rbit	r3, r3
 80013e2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80013e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80013ee:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80013f2:	fa93 f3a3 	rbit	r3, r3
 80013f6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80013fa:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001402:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001406:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800140a:	fa92 f2a2 	rbit	r2, r2
 800140e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001412:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001416:	fab2 f282 	clz	r2, r2
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	f042 0220 	orr.w	r2, r2, #32
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	f002 021f 	and.w	r2, r2, #31
 8001426:	2101      	movs	r1, #1
 8001428:	fa01 f202 	lsl.w	r2, r1, r2
 800142c:	4013      	ands	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0ab      	beq.n	800138a <HAL_RCC_OscConfig+0x1b6>
 8001432:	e05c      	b.n	80014ee <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fb1e 	bl	8000a74 <HAL_GetTick>
 8001438:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143c:	e00a      	b.n	8001454 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800143e:	f7ff fb19 	bl	8000a74 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d902      	bls.n	8001454 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	f000 bf0d 	b.w	800226e <HAL_RCC_OscConfig+0x109a>
 8001454:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001458:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001460:	fa93 f3a3 	rbit	r3, r3
 8001464:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001468:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146c:	fab3 f383 	clz	r3, r3
 8001470:	b2db      	uxtb	r3, r3
 8001472:	095b      	lsrs	r3, r3, #5
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b01      	cmp	r3, #1
 800147e:	d102      	bne.n	8001486 <HAL_RCC_OscConfig+0x2b2>
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	e015      	b.n	80014b2 <HAL_RCC_OscConfig+0x2de>
 8001486:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800148a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001492:	fa93 f3a3 	rbit	r3, r3
 8001496:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800149a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800149e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80014a2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80014a6:	fa93 f3a3 	rbit	r3, r3
 80014aa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <HAL_RCC_OscConfig+0x314>)
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014b6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80014ba:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80014be:	fa92 f2a2 	rbit	r2, r2
 80014c2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80014c6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80014ca:	fab2 f282 	clz	r2, r2
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	f042 0220 	orr.w	r2, r2, #32
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	f002 021f 	and.w	r2, r2, #31
 80014da:	2101      	movs	r1, #1
 80014dc:	fa01 f202 	lsl.w	r2, r1, r2
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1ab      	bne.n	800143e <HAL_RCC_OscConfig+0x26a>
 80014e6:	e002      	b.n	80014ee <HAL_RCC_OscConfig+0x31a>
 80014e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 817f 	beq.w	8001802 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001504:	4ba7      	ldr	r3, [pc, #668]	; (80017a4 <HAL_RCC_OscConfig+0x5d0>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 030c 	and.w	r3, r3, #12
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00c      	beq.n	800152a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001510:	4ba4      	ldr	r3, [pc, #656]	; (80017a4 <HAL_RCC_OscConfig+0x5d0>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b08      	cmp	r3, #8
 800151a:	d173      	bne.n	8001604 <HAL_RCC_OscConfig+0x430>
 800151c:	4ba1      	ldr	r3, [pc, #644]	; (80017a4 <HAL_RCC_OscConfig+0x5d0>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001528:	d16c      	bne.n	8001604 <HAL_RCC_OscConfig+0x430>
 800152a:	2302      	movs	r3, #2
 800152c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001530:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001534:	fa93 f3a3 	rbit	r3, r3
 8001538:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800153c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b01      	cmp	r3, #1
 8001552:	d102      	bne.n	800155a <HAL_RCC_OscConfig+0x386>
 8001554:	4b93      	ldr	r3, [pc, #588]	; (80017a4 <HAL_RCC_OscConfig+0x5d0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	e013      	b.n	8001582 <HAL_RCC_OscConfig+0x3ae>
 800155a:	2302      	movs	r3, #2
 800155c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001560:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001564:	fa93 f3a3 	rbit	r3, r3
 8001568:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800156c:	2302      	movs	r3, #2
 800156e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001572:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001576:	fa93 f3a3 	rbit	r3, r3
 800157a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800157e:	4b89      	ldr	r3, [pc, #548]	; (80017a4 <HAL_RCC_OscConfig+0x5d0>)
 8001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001582:	2202      	movs	r2, #2
 8001584:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001588:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800158c:	fa92 f2a2 	rbit	r2, r2
 8001590:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001594:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001598:	fab2 f282 	clz	r2, r2
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	f042 0220 	orr.w	r2, r2, #32
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	f002 021f 	and.w	r2, r2, #31
 80015a8:	2101      	movs	r1, #1
 80015aa:	fa01 f202 	lsl.w	r2, r1, r2
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00a      	beq.n	80015ca <HAL_RCC_OscConfig+0x3f6>
 80015b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d002      	beq.n	80015ca <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	f000 be52 	b.w	800226e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ca:	4b76      	ldr	r3, [pc, #472]	; (80017a4 <HAL_RCC_OscConfig+0x5d0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	21f8      	movs	r1, #248	; 0xf8
 80015e0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80015e8:	fa91 f1a1 	rbit	r1, r1
 80015ec:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80015f0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80015f4:	fab1 f181 	clz	r1, r1
 80015f8:	b2c9      	uxtb	r1, r1
 80015fa:	408b      	lsls	r3, r1
 80015fc:	4969      	ldr	r1, [pc, #420]	; (80017a4 <HAL_RCC_OscConfig+0x5d0>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001602:	e0fe      	b.n	8001802 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001608:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 8088 	beq.w	8001726 <HAL_RCC_OscConfig+0x552>
 8001616:	2301      	movs	r3, #1
 8001618:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001620:	fa93 f3a3 	rbit	r3, r3
 8001624:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001628:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800162c:	fab3 f383 	clz	r3, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001636:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	461a      	mov	r2, r3
 800163e:	2301      	movs	r3, #1
 8001640:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fa17 	bl	8000a74 <HAL_GetTick>
 8001646:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164a:	e00a      	b.n	8001662 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800164c:	f7ff fa12 	bl	8000a74 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d902      	bls.n	8001662 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	f000 be06 	b.w	800226e <HAL_RCC_OscConfig+0x109a>
 8001662:	2302      	movs	r3, #2
 8001664:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800166c:	fa93 f3a3 	rbit	r3, r3
 8001670:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001674:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001678:	fab3 f383 	clz	r3, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	b2db      	uxtb	r3, r3
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b01      	cmp	r3, #1
 800168a:	d102      	bne.n	8001692 <HAL_RCC_OscConfig+0x4be>
 800168c:	4b45      	ldr	r3, [pc, #276]	; (80017a4 <HAL_RCC_OscConfig+0x5d0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	e013      	b.n	80016ba <HAL_RCC_OscConfig+0x4e6>
 8001692:	2302      	movs	r3, #2
 8001694:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001698:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800169c:	fa93 f3a3 	rbit	r3, r3
 80016a0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80016a4:	2302      	movs	r3, #2
 80016a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80016aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80016ae:	fa93 f3a3 	rbit	r3, r3
 80016b2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80016b6:	4b3b      	ldr	r3, [pc, #236]	; (80017a4 <HAL_RCC_OscConfig+0x5d0>)
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	2202      	movs	r2, #2
 80016bc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80016c0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80016c4:	fa92 f2a2 	rbit	r2, r2
 80016c8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80016cc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80016d0:	fab2 f282 	clz	r2, r2
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	f042 0220 	orr.w	r2, r2, #32
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	f002 021f 	and.w	r2, r2, #31
 80016e0:	2101      	movs	r1, #1
 80016e2:	fa01 f202 	lsl.w	r2, r1, r2
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0af      	beq.n	800164c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ec:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <HAL_RCC_OscConfig+0x5d0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	21f8      	movs	r1, #248	; 0xf8
 8001702:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001706:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800170a:	fa91 f1a1 	rbit	r1, r1
 800170e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001712:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001716:	fab1 f181 	clz	r1, r1
 800171a:	b2c9      	uxtb	r1, r1
 800171c:	408b      	lsls	r3, r1
 800171e:	4921      	ldr	r1, [pc, #132]	; (80017a4 <HAL_RCC_OscConfig+0x5d0>)
 8001720:	4313      	orrs	r3, r2
 8001722:	600b      	str	r3, [r1, #0]
 8001724:	e06d      	b.n	8001802 <HAL_RCC_OscConfig+0x62e>
 8001726:	2301      	movs	r3, #1
 8001728:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001730:	fa93 f3a3 	rbit	r3, r3
 8001734:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001738:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173c:	fab3 f383 	clz	r3, r3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001746:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	461a      	mov	r2, r3
 800174e:	2300      	movs	r3, #0
 8001750:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001752:	f7ff f98f 	bl	8000a74 <HAL_GetTick>
 8001756:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175a:	e00a      	b.n	8001772 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800175c:	f7ff f98a 	bl	8000a74 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d902      	bls.n	8001772 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	f000 bd7e 	b.w	800226e <HAL_RCC_OscConfig+0x109a>
 8001772:	2302      	movs	r3, #2
 8001774:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800177c:	fa93 f3a3 	rbit	r3, r3
 8001780:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001784:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001788:	fab3 f383 	clz	r3, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	b2db      	uxtb	r3, r3
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b01      	cmp	r3, #1
 800179a:	d105      	bne.n	80017a8 <HAL_RCC_OscConfig+0x5d4>
 800179c:	4b01      	ldr	r3, [pc, #4]	; (80017a4 <HAL_RCC_OscConfig+0x5d0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	e016      	b.n	80017d0 <HAL_RCC_OscConfig+0x5fc>
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000
 80017a8:	2302      	movs	r3, #2
 80017aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017b2:	fa93 f3a3 	rbit	r3, r3
 80017b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80017ba:	2302      	movs	r3, #2
 80017bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80017c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80017c4:	fa93 f3a3 	rbit	r3, r3
 80017c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80017cc:	4bbf      	ldr	r3, [pc, #764]	; (8001acc <HAL_RCC_OscConfig+0x8f8>)
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	2202      	movs	r2, #2
 80017d2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80017d6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80017da:	fa92 f2a2 	rbit	r2, r2
 80017de:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80017e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80017e6:	fab2 f282 	clz	r2, r2
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	f042 0220 	orr.w	r2, r2, #32
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	f002 021f 	and.w	r2, r2, #31
 80017f6:	2101      	movs	r1, #1
 80017f8:	fa01 f202 	lsl.w	r2, r1, r2
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1ac      	bne.n	800175c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001802:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001806:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 8113 	beq.w	8001a3e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001818:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800181c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d07c      	beq.n	8001922 <HAL_RCC_OscConfig+0x74e>
 8001828:	2301      	movs	r3, #1
 800182a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001832:	fa93 f3a3 	rbit	r3, r3
 8001836:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800183a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800183e:	fab3 f383 	clz	r3, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	4ba2      	ldr	r3, [pc, #648]	; (8001ad0 <HAL_RCC_OscConfig+0x8fc>)
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	461a      	mov	r2, r3
 800184e:	2301      	movs	r3, #1
 8001850:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001852:	f7ff f90f 	bl	8000a74 <HAL_GetTick>
 8001856:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185a:	e00a      	b.n	8001872 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800185c:	f7ff f90a 	bl	8000a74 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d902      	bls.n	8001872 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	f000 bcfe 	b.w	800226e <HAL_RCC_OscConfig+0x109a>
 8001872:	2302      	movs	r3, #2
 8001874:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800187c:	fa93 f2a3 	rbit	r2, r3
 8001880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001884:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001892:	2202      	movs	r2, #2
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800189a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	fa93 f2a3 	rbit	r2, r3
 80018a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018b6:	2202      	movs	r2, #2
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	fa93 f2a3 	rbit	r2, r3
 80018c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80018d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d2:	4b7e      	ldr	r3, [pc, #504]	; (8001acc <HAL_RCC_OscConfig+0x8f8>)
 80018d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80018de:	2102      	movs	r1, #2
 80018e0:	6019      	str	r1, [r3, #0]
 80018e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	fa93 f1a3 	rbit	r1, r3
 80018f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80018f8:	6019      	str	r1, [r3, #0]
  return result;
 80018fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018fe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	fab3 f383 	clz	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f003 031f 	and.w	r3, r3, #31
 8001914:	2101      	movs	r1, #1
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d09d      	beq.n	800185c <HAL_RCC_OscConfig+0x688>
 8001920:	e08d      	b.n	8001a3e <HAL_RCC_OscConfig+0x86a>
 8001922:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001926:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800192a:	2201      	movs	r2, #1
 800192c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001932:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	fa93 f2a3 	rbit	r2, r3
 800193c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001940:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001944:	601a      	str	r2, [r3, #0]
  return result;
 8001946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800194a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800194e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001950:	fab3 f383 	clz	r3, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	461a      	mov	r2, r3
 8001958:	4b5d      	ldr	r3, [pc, #372]	; (8001ad0 <HAL_RCC_OscConfig+0x8fc>)
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	461a      	mov	r2, r3
 8001960:	2300      	movs	r3, #0
 8001962:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001964:	f7ff f886 	bl	8000a74 <HAL_GetTick>
 8001968:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196c:	e00a      	b.n	8001984 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800196e:	f7ff f881 	bl	8000a74 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d902      	bls.n	8001984 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	f000 bc75 	b.w	800226e <HAL_RCC_OscConfig+0x109a>
 8001984:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001988:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800198c:	2202      	movs	r2, #2
 800198e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001990:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001994:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	fa93 f2a3 	rbit	r2, r3
 800199e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80019b0:	2202      	movs	r2, #2
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	fa93 f2a3 	rbit	r2, r3
 80019c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019d4:	2202      	movs	r2, #2
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	fa93 f2a3 	rbit	r2, r3
 80019e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80019ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f0:	4b36      	ldr	r3, [pc, #216]	; (8001acc <HAL_RCC_OscConfig+0x8f8>)
 80019f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80019fc:	2102      	movs	r1, #2
 80019fe:	6019      	str	r1, [r3, #0]
 8001a00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a04:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	fa93 f1a3 	rbit	r1, r3
 8001a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a12:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a16:	6019      	str	r1, [r3, #0]
  return result;
 8001a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	fab3 f383 	clz	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f003 031f 	and.w	r3, r3, #31
 8001a32:	2101      	movs	r1, #1
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d197      	bne.n	800196e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 81a5 	beq.w	8001d9e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <HAL_RCC_OscConfig+0x8f8>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d116      	bne.n	8001a94 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_RCC_OscConfig+0x8f8>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a18      	ldr	r2, [pc, #96]	; (8001acc <HAL_RCC_OscConfig+0x8f8>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	61d3      	str	r3, [r2, #28]
 8001a72:	4b16      	ldr	r3, [pc, #88]	; (8001acc <HAL_RCC_OscConfig+0x8f8>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a8c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_RCC_OscConfig+0x900>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d121      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_RCC_OscConfig+0x900>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <HAL_RCC_OscConfig+0x900>)
 8001aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aaa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aac:	f7fe ffe2 	bl	8000a74 <HAL_GetTick>
 8001ab0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab4:	e010      	b.n	8001ad8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab6:	f7fe ffdd 	bl	8000a74 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	; 0x64
 8001ac4:	d908      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e3d1      	b.n	800226e <HAL_RCC_OscConfig+0x109a>
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	10908120 	.word	0x10908120
 8001ad4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad8:	4b8d      	ldr	r3, [pc, #564]	; (8001d10 <HAL_RCC_OscConfig+0xb3c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0e8      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_OscConfig+0x92e>
 8001af4:	4b87      	ldr	r3, [pc, #540]	; (8001d14 <HAL_RCC_OscConfig+0xb40>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	4a86      	ldr	r2, [pc, #536]	; (8001d14 <HAL_RCC_OscConfig+0xb40>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6213      	str	r3, [r2, #32]
 8001b00:	e035      	b.n	8001b6e <HAL_RCC_OscConfig+0x99a>
 8001b02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x958>
 8001b12:	4b80      	ldr	r3, [pc, #512]	; (8001d14 <HAL_RCC_OscConfig+0xb40>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	4a7f      	ldr	r2, [pc, #508]	; (8001d14 <HAL_RCC_OscConfig+0xb40>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	6213      	str	r3, [r2, #32]
 8001b1e:	4b7d      	ldr	r3, [pc, #500]	; (8001d14 <HAL_RCC_OscConfig+0xb40>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4a7c      	ldr	r2, [pc, #496]	; (8001d14 <HAL_RCC_OscConfig+0xb40>)
 8001b24:	f023 0304 	bic.w	r3, r3, #4
 8001b28:	6213      	str	r3, [r2, #32]
 8001b2a:	e020      	b.n	8001b6e <HAL_RCC_OscConfig+0x99a>
 8001b2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b05      	cmp	r3, #5
 8001b3a:	d10c      	bne.n	8001b56 <HAL_RCC_OscConfig+0x982>
 8001b3c:	4b75      	ldr	r3, [pc, #468]	; (8001d14 <HAL_RCC_OscConfig+0xb40>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	4a74      	ldr	r2, [pc, #464]	; (8001d14 <HAL_RCC_OscConfig+0xb40>)
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	6213      	str	r3, [r2, #32]
 8001b48:	4b72      	ldr	r3, [pc, #456]	; (8001d14 <HAL_RCC_OscConfig+0xb40>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	4a71      	ldr	r2, [pc, #452]	; (8001d14 <HAL_RCC_OscConfig+0xb40>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6213      	str	r3, [r2, #32]
 8001b54:	e00b      	b.n	8001b6e <HAL_RCC_OscConfig+0x99a>
 8001b56:	4b6f      	ldr	r3, [pc, #444]	; (8001d14 <HAL_RCC_OscConfig+0xb40>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	4a6e      	ldr	r2, [pc, #440]	; (8001d14 <HAL_RCC_OscConfig+0xb40>)
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	6213      	str	r3, [r2, #32]
 8001b62:	4b6c      	ldr	r3, [pc, #432]	; (8001d14 <HAL_RCC_OscConfig+0xb40>)
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	4a6b      	ldr	r2, [pc, #428]	; (8001d14 <HAL_RCC_OscConfig+0xb40>)
 8001b68:	f023 0304 	bic.w	r3, r3, #4
 8001b6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8081 	beq.w	8001c82 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b80:	f7fe ff78 	bl	8000a74 <HAL_GetTick>
 8001b84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b88:	e00b      	b.n	8001ba2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8a:	f7fe ff73 	bl	8000a74 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e365      	b.n	800226e <HAL_RCC_OscConfig+0x109a>
 8001ba2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001baa:	2202      	movs	r2, #2
 8001bac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	fa93 f2a3 	rbit	r2, r3
 8001bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001bce:	2202      	movs	r2, #2
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	fa93 f2a3 	rbit	r2, r3
 8001be0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001be8:	601a      	str	r2, [r3, #0]
  return result;
 8001bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bee:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001bf2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf4:	fab3 f383 	clz	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	095b      	lsrs	r3, r3, #5
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	f043 0302 	orr.w	r3, r3, #2
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d102      	bne.n	8001c0e <HAL_RCC_OscConfig+0xa3a>
 8001c08:	4b42      	ldr	r3, [pc, #264]	; (8001d14 <HAL_RCC_OscConfig+0xb40>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	e013      	b.n	8001c36 <HAL_RCC_OscConfig+0xa62>
 8001c0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c12:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001c16:	2202      	movs	r2, #2
 8001c18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	fa93 f2a3 	rbit	r2, r3
 8001c28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c2c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <HAL_RCC_OscConfig+0xb40>)
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c3a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001c3e:	2102      	movs	r1, #2
 8001c40:	6011      	str	r1, [r2, #0]
 8001c42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c46:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	fa92 f1a2 	rbit	r1, r2
 8001c50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c54:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001c58:	6011      	str	r1, [r2, #0]
  return result;
 8001c5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c5e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	fab2 f282 	clz	r2, r2
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	f002 021f 	and.w	r2, r2, #31
 8001c74:	2101      	movs	r1, #1
 8001c76:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d084      	beq.n	8001b8a <HAL_RCC_OscConfig+0x9b6>
 8001c80:	e083      	b.n	8001d8a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c82:	f7fe fef7 	bl	8000a74 <HAL_GetTick>
 8001c86:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c8c:	f7fe fef2 	bl	8000a74 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e2e4      	b.n	800226e <HAL_RCC_OscConfig+0x109a>
 8001ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001cac:	2202      	movs	r2, #2
 8001cae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	fa93 f2a3 	rbit	r2, r3
 8001cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ccc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	fa93 f2a3 	rbit	r2, r3
 8001ce2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001cea:	601a      	str	r2, [r3, #0]
  return result;
 8001cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001cf4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	095b      	lsrs	r3, r3, #5
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d106      	bne.n	8001d18 <HAL_RCC_OscConfig+0xb44>
 8001d0a:	4b02      	ldr	r3, [pc, #8]	; (8001d14 <HAL_RCC_OscConfig+0xb40>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	e017      	b.n	8001d40 <HAL_RCC_OscConfig+0xb6c>
 8001d10:	40007000 	.word	0x40007000
 8001d14:	40021000 	.word	0x40021000
 8001d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001d20:	2202      	movs	r2, #2
 8001d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d28:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	fa93 f2a3 	rbit	r2, r3
 8001d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d36:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	4bb3      	ldr	r3, [pc, #716]	; (800200c <HAL_RCC_OscConfig+0xe38>)
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d44:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d48:	2102      	movs	r1, #2
 8001d4a:	6011      	str	r1, [r2, #0]
 8001d4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d50:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	fa92 f1a2 	rbit	r1, r2
 8001d5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d5e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001d62:	6011      	str	r1, [r2, #0]
  return result;
 8001d64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d68:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	fab2 f282 	clz	r2, r2
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	f002 021f 	and.w	r2, r2, #31
 8001d7e:	2101      	movs	r1, #1
 8001d80:	fa01 f202 	lsl.w	r2, r1, r2
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d180      	bne.n	8001c8c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d8a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d105      	bne.n	8001d9e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d92:	4b9e      	ldr	r3, [pc, #632]	; (800200c <HAL_RCC_OscConfig+0xe38>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	4a9d      	ldr	r2, [pc, #628]	; (800200c <HAL_RCC_OscConfig+0xe38>)
 8001d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 825e 	beq.w	800226c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db0:	4b96      	ldr	r3, [pc, #600]	; (800200c <HAL_RCC_OscConfig+0xe38>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 030c 	and.w	r3, r3, #12
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	f000 821f 	beq.w	80021fc <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	f040 8170 	bne.w	80020b0 <HAL_RCC_OscConfig+0xedc>
 8001dd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001dd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ddc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	fa93 f2a3 	rbit	r2, r3
 8001dec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001df4:	601a      	str	r2, [r3, #0]
  return result;
 8001df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001dfe:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e00:	fab3 f383 	clz	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	461a      	mov	r2, r3
 8001e12:	2300      	movs	r3, #0
 8001e14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7fe fe2d 	bl	8000a74 <HAL_GetTick>
 8001e1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1e:	e009      	b.n	8001e34 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e20:	f7fe fe28 	bl	8000a74 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e21c      	b.n	800226e <HAL_RCC_OscConfig+0x109a>
 8001e34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e38:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e46:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	fa93 f2a3 	rbit	r2, r3
 8001e50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e54:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e58:	601a      	str	r2, [r3, #0]
  return result;
 8001e5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e64:	fab3 f383 	clz	r3, r3
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d102      	bne.n	8001e7e <HAL_RCC_OscConfig+0xcaa>
 8001e78:	4b64      	ldr	r3, [pc, #400]	; (800200c <HAL_RCC_OscConfig+0xe38>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	e027      	b.n	8001ece <HAL_RCC_OscConfig+0xcfa>
 8001e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e82:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e90:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	fa93 f2a3 	rbit	r2, r3
 8001e9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e9e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001eac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	fa93 f2a3 	rbit	r2, r3
 8001ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	4b50      	ldr	r3, [pc, #320]	; (800200c <HAL_RCC_OscConfig+0xe38>)
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ed2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ed6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001eda:	6011      	str	r1, [r2, #0]
 8001edc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ee0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ee4:	6812      	ldr	r2, [r2, #0]
 8001ee6:	fa92 f1a2 	rbit	r1, r2
 8001eea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eee:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001ef2:	6011      	str	r1, [r2, #0]
  return result;
 8001ef4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ef8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	fab2 f282 	clz	r2, r2
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	f042 0220 	orr.w	r2, r2, #32
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	f002 021f 	and.w	r2, r2, #31
 8001f0e:	2101      	movs	r1, #1
 8001f10:	fa01 f202 	lsl.w	r2, r1, r2
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d182      	bne.n	8001e20 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f1a:	4b3c      	ldr	r3, [pc, #240]	; (800200c <HAL_RCC_OscConfig+0xe38>)
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	f023 020f 	bic.w	r2, r3, #15
 8001f22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	4937      	ldr	r1, [pc, #220]	; (800200c <HAL_RCC_OscConfig+0xe38>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001f34:	4b35      	ldr	r3, [pc, #212]	; (800200c <HAL_RCC_OscConfig+0xe38>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001f3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6a19      	ldr	r1, [r3, #32]
 8001f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	492d      	ldr	r1, [pc, #180]	; (800200c <HAL_RCC_OscConfig+0xe38>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
 8001f5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f60:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	fa93 f2a3 	rbit	r2, r3
 8001f78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f7c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f80:	601a      	str	r2, [r3, #0]
  return result;
 8001f82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f86:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f8a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f8c:	fab3 f383 	clz	r3, r3
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7fe fd67 	bl	8000a74 <HAL_GetTick>
 8001fa6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001faa:	e009      	b.n	8001fc0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fac:	f7fe fd62 	bl	8000a74 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e156      	b.n	800226e <HAL_RCC_OscConfig+0x109a>
 8001fc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001fc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	fa93 f2a3 	rbit	r2, r3
 8001fdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001fe4:	601a      	str	r2, [r3, #0]
  return result;
 8001fe6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fea:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001fee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b01      	cmp	r3, #1
 8002002:	d105      	bne.n	8002010 <HAL_RCC_OscConfig+0xe3c>
 8002004:	4b01      	ldr	r3, [pc, #4]	; (800200c <HAL_RCC_OscConfig+0xe38>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	e02a      	b.n	8002060 <HAL_RCC_OscConfig+0xe8c>
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000
 8002010:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002014:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002018:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800201c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002022:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	fa93 f2a3 	rbit	r2, r3
 800202c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002030:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800203e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002048:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	fa93 f2a3 	rbit	r2, r3
 8002052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002056:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	4b86      	ldr	r3, [pc, #536]	; (8002278 <HAL_RCC_OscConfig+0x10a4>)
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002064:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002068:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800206c:	6011      	str	r1, [r2, #0]
 800206e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002072:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	fa92 f1a2 	rbit	r1, r2
 800207c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002080:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002084:	6011      	str	r1, [r2, #0]
  return result;
 8002086:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800208a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	fab2 f282 	clz	r2, r2
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f042 0220 	orr.w	r2, r2, #32
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f002 021f 	and.w	r2, r2, #31
 80020a0:	2101      	movs	r1, #1
 80020a2:	fa01 f202 	lsl.w	r2, r1, r2
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f43f af7f 	beq.w	8001fac <HAL_RCC_OscConfig+0xdd8>
 80020ae:	e0dd      	b.n	800226c <HAL_RCC_OscConfig+0x1098>
 80020b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80020b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	fa93 f2a3 	rbit	r2, r3
 80020cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80020d4:	601a      	str	r2, [r3, #0]
  return result;
 80020d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020da:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80020de:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	461a      	mov	r2, r3
 80020f2:	2300      	movs	r3, #0
 80020f4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f6:	f7fe fcbd 	bl	8000a74 <HAL_GetTick>
 80020fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fe:	e009      	b.n	8002114 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002100:	f7fe fcb8 	bl	8000a74 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e0ac      	b.n	800226e <HAL_RCC_OscConfig+0x109a>
 8002114:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002118:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800211c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002120:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002126:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	fa93 f2a3 	rbit	r2, r3
 8002130:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002134:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002138:	601a      	str	r2, [r3, #0]
  return result;
 800213a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800213e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002142:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002144:	fab3 f383 	clz	r3, r3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	b2db      	uxtb	r3, r3
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b01      	cmp	r3, #1
 8002156:	d102      	bne.n	800215e <HAL_RCC_OscConfig+0xf8a>
 8002158:	4b47      	ldr	r3, [pc, #284]	; (8002278 <HAL_RCC_OscConfig+0x10a4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	e027      	b.n	80021ae <HAL_RCC_OscConfig+0xfda>
 800215e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002162:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002166:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800216a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002170:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	fa93 f2a3 	rbit	r2, r3
 800217a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800217e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002188:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800218c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002196:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	fa93 f2a3 	rbit	r2, r3
 80021a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	4b33      	ldr	r3, [pc, #204]	; (8002278 <HAL_RCC_OscConfig+0x10a4>)
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021b2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80021b6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021ba:	6011      	str	r1, [r2, #0]
 80021bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021c0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	fa92 f1a2 	rbit	r1, r2
 80021ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021ce:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80021d2:	6011      	str	r1, [r2, #0]
  return result;
 80021d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021d8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	fab2 f282 	clz	r2, r2
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	f042 0220 	orr.w	r2, r2, #32
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	f002 021f 	and.w	r2, r2, #31
 80021ee:	2101      	movs	r1, #1
 80021f0:	fa01 f202 	lsl.w	r2, r1, r2
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d182      	bne.n	8002100 <HAL_RCC_OscConfig+0xf2c>
 80021fa:	e037      	b.n	800226c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002200:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e02e      	b.n	800226e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002210:	4b19      	ldr	r3, [pc, #100]	; (8002278 <HAL_RCC_OscConfig+0x10a4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002218:	4b17      	ldr	r3, [pc, #92]	; (8002278 <HAL_RCC_OscConfig+0x10a4>)
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002220:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002224:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800222c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	429a      	cmp	r2, r3
 8002236:	d117      	bne.n	8002268 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002238:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800223c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002240:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002244:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800224c:	429a      	cmp	r2, r3
 800224e:	d10b      	bne.n	8002268 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002250:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002254:	f003 020f 	and.w	r2, r3, #15
 8002258:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800225c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000

0800227c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b09e      	sub	sp, #120	; 0x78
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e162      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002294:	4b90      	ldr	r3, [pc, #576]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d910      	bls.n	80022c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b8d      	ldr	r3, [pc, #564]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 0207 	bic.w	r2, r3, #7
 80022aa:	498b      	ldr	r1, [pc, #556]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b2:	4b89      	ldr	r3, [pc, #548]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e14a      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d0:	4b82      	ldr	r3, [pc, #520]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	497f      	ldr	r1, [pc, #508]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 80dc 	beq.w	80024a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d13c      	bne.n	8002372 <HAL_RCC_ClockConfig+0xf6>
 80022f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d102      	bne.n	8002322 <HAL_RCC_ClockConfig+0xa6>
 800231c:	4b6f      	ldr	r3, [pc, #444]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	e00f      	b.n	8002342 <HAL_RCC_ClockConfig+0xc6>
 8002322:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002326:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	667b      	str	r3, [r7, #100]	; 0x64
 8002330:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002334:	663b      	str	r3, [r7, #96]	; 0x60
 8002336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800233e:	4b67      	ldr	r3, [pc, #412]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002346:	65ba      	str	r2, [r7, #88]	; 0x58
 8002348:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800234a:	fa92 f2a2 	rbit	r2, r2
 800234e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002350:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002352:	fab2 f282 	clz	r2, r2
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	f042 0220 	orr.w	r2, r2, #32
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	f002 021f 	and.w	r2, r2, #31
 8002362:	2101      	movs	r1, #1
 8002364:	fa01 f202 	lsl.w	r2, r1, r2
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d17b      	bne.n	8002466 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0f3      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d13c      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x178>
 800237a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800237e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d102      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x128>
 800239e:	4b4f      	ldr	r3, [pc, #316]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	e00f      	b.n	80023c4 <HAL_RCC_ClockConfig+0x148>
 80023a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	647b      	str	r3, [r7, #68]	; 0x44
 80023b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b6:	643b      	str	r3, [r7, #64]	; 0x40
 80023b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023c0:	4b46      	ldr	r3, [pc, #280]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80023ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023cc:	fa92 f2a2 	rbit	r2, r2
 80023d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80023d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023d4:	fab2 f282 	clz	r2, r2
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	f042 0220 	orr.w	r2, r2, #32
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	f002 021f 	and.w	r2, r2, #31
 80023e4:	2101      	movs	r1, #1
 80023e6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d13a      	bne.n	8002466 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0b2      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
 80023f4:	2302      	movs	r3, #2
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d102      	bne.n	800241c <HAL_RCC_ClockConfig+0x1a0>
 8002416:	4b31      	ldr	r3, [pc, #196]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	e00d      	b.n	8002438 <HAL_RCC_ClockConfig+0x1bc>
 800241c:	2302      	movs	r3, #2
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
 8002428:	2302      	movs	r3, #2
 800242a:	623b      	str	r3, [r7, #32]
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	4b29      	ldr	r3, [pc, #164]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	2202      	movs	r2, #2
 800243a:	61ba      	str	r2, [r7, #24]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	fa92 f2a2 	rbit	r2, r2
 8002442:	617a      	str	r2, [r7, #20]
  return result;
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	fab2 f282 	clz	r2, r2
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	f042 0220 	orr.w	r2, r2, #32
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	f002 021f 	and.w	r2, r2, #31
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f202 	lsl.w	r2, r1, r2
 800245c:	4013      	ands	r3, r2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e079      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002466:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	491a      	ldr	r1, [pc, #104]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002478:	f7fe fafc 	bl	8000a74 <HAL_GetTick>
 800247c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	e00a      	b.n	8002496 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002480:	f7fe faf8 	bl	8000a74 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e061      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 020c 	and.w	r2, r3, #12
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1eb      	bne.n	8002480 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d214      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 0207 	bic.w	r2, r3, #7
 80024be:	4906      	ldr	r1, [pc, #24]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e040      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
 80024d8:	40022000 	.word	0x40022000
 80024dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ec:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <HAL_RCC_ClockConfig+0x2e8>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	491a      	ldr	r1, [pc, #104]	; (8002564 <HAL_RCC_ClockConfig+0x2e8>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800250a:	4b16      	ldr	r3, [pc, #88]	; (8002564 <HAL_RCC_ClockConfig+0x2e8>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4912      	ldr	r1, [pc, #72]	; (8002564 <HAL_RCC_ClockConfig+0x2e8>)
 800251a:	4313      	orrs	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800251e:	f000 f829 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8002522:	4601      	mov	r1, r0
 8002524:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <HAL_RCC_ClockConfig+0x2e8>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800252c:	22f0      	movs	r2, #240	; 0xf0
 800252e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	fa92 f2a2 	rbit	r2, r2
 8002536:	60fa      	str	r2, [r7, #12]
  return result;
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	fab2 f282 	clz	r2, r2
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	40d3      	lsrs	r3, r2
 8002542:	4a09      	ldr	r2, [pc, #36]	; (8002568 <HAL_RCC_ClockConfig+0x2ec>)
 8002544:	5cd3      	ldrb	r3, [r2, r3]
 8002546:	fa21 f303 	lsr.w	r3, r1, r3
 800254a:	4a08      	ldr	r2, [pc, #32]	; (800256c <HAL_RCC_ClockConfig+0x2f0>)
 800254c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <HAL_RCC_ClockConfig+0x2f4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fa4a 	bl	80009ec <HAL_InitTick>
  
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3778      	adds	r7, #120	; 0x78
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	08004a08 	.word	0x08004a08
 800256c:	20000010 	.word	0x20000010
 8002570:	20000014 	.word	0x20000014

08002574 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002574:	b480      	push	{r7}
 8002576:	b08b      	sub	sp, #44	; 0x2c
 8002578:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800258e:	4b2a      	ldr	r3, [pc, #168]	; (8002638 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b04      	cmp	r3, #4
 800259c:	d002      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0x30>
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d003      	beq.n	80025aa <HAL_RCC_GetSysClockFreq+0x36>
 80025a2:	e03f      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025a4:	4b25      	ldr	r3, [pc, #148]	; (800263c <HAL_RCC_GetSysClockFreq+0xc8>)
 80025a6:	623b      	str	r3, [r7, #32]
      break;
 80025a8:	e03f      	b.n	800262a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80025b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80025b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	fa92 f2a2 	rbit	r2, r2
 80025bc:	607a      	str	r2, [r7, #4]
  return result;
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	fab2 f282 	clz	r2, r2
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	40d3      	lsrs	r3, r2
 80025c8:	4a1d      	ldr	r2, [pc, #116]	; (8002640 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025ca:	5cd3      	ldrb	r3, [r2, r3]
 80025cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025ce:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	220f      	movs	r2, #15
 80025d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	fa92 f2a2 	rbit	r2, r2
 80025e0:	60fa      	str	r2, [r7, #12]
  return result;
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	fab2 f282 	clz	r2, r2
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	40d3      	lsrs	r3, r2
 80025ec:	4a15      	ldr	r2, [pc, #84]	; (8002644 <HAL_RCC_GetSysClockFreq+0xd0>)
 80025ee:	5cd3      	ldrb	r3, [r2, r3]
 80025f0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025fc:	4a0f      	ldr	r2, [pc, #60]	; (800263c <HAL_RCC_GetSysClockFreq+0xc8>)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	fbb2 f2f3 	udiv	r2, r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
 800260c:	e007      	b.n	800261e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800260e:	4a0b      	ldr	r2, [pc, #44]	; (800263c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	fbb2 f2f3 	udiv	r2, r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	fb02 f303 	mul.w	r3, r2, r3
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	623b      	str	r3, [r7, #32]
      break;
 8002622:	e002      	b.n	800262a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002626:	623b      	str	r3, [r7, #32]
      break;
 8002628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800262a:	6a3b      	ldr	r3, [r7, #32]
}
 800262c:	4618      	mov	r0, r3
 800262e:	372c      	adds	r7, #44	; 0x2c
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	40021000 	.word	0x40021000
 800263c:	007a1200 	.word	0x007a1200
 8002640:	08004a20 	.word	0x08004a20
 8002644:	08004a30 	.word	0x08004a30

08002648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_RCC_GetHCLKFreq+0x14>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000010 	.word	0x20000010

08002660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002666:	f7ff ffef 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 800266a:	4601      	mov	r1, r0
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002674:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002678:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	fa92 f2a2 	rbit	r2, r2
 8002680:	603a      	str	r2, [r7, #0]
  return result;
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	fab2 f282 	clz	r2, r2
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	40d3      	lsrs	r3, r2
 800268c:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800268e:	5cd3      	ldrb	r3, [r2, r3]
 8002690:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000
 80026a0:	08004a18 	.word	0x08004a18

080026a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80026aa:	f7ff ffcd 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 80026ae:	4601      	mov	r1, r0
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80026b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80026bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	fa92 f2a2 	rbit	r2, r2
 80026c4:	603a      	str	r2, [r7, #0]
  return result;
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	fab2 f282 	clz	r2, r2
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	40d3      	lsrs	r3, r2
 80026d0:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80026d2:	5cd3      	ldrb	r3, [r2, r3]
 80026d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021000 	.word	0x40021000
 80026e4:	08004a18 	.word	0x08004a18

080026e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b092      	sub	sp, #72	; 0x48
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 80d4 	beq.w	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270c:	4b4e      	ldr	r3, [pc, #312]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10e      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002718:	4b4b      	ldr	r3, [pc, #300]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	4a4a      	ldr	r2, [pc, #296]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800271e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002722:	61d3      	str	r3, [r2, #28]
 8002724:	4b48      	ldr	r3, [pc, #288]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002730:	2301      	movs	r3, #1
 8002732:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002736:	4b45      	ldr	r3, [pc, #276]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273e:	2b00      	cmp	r3, #0
 8002740:	d118      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002742:	4b42      	ldr	r3, [pc, #264]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a41      	ldr	r2, [pc, #260]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274e:	f7fe f991 	bl	8000a74 <HAL_GetTick>
 8002752:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002754:	e008      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002756:	f7fe f98d 	bl	8000a74 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b64      	cmp	r3, #100	; 0x64
 8002762:	d901      	bls.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e1d6      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	4b38      	ldr	r3, [pc, #224]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002774:	4b34      	ldr	r3, [pc, #208]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800277c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800277e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 8084 	beq.w	800288e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002790:	429a      	cmp	r2, r3
 8002792:	d07c      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002794:	4b2c      	ldr	r3, [pc, #176]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800279c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800279e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ae:	fab3 f383 	clz	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b26      	ldr	r3, [pc, #152]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	461a      	mov	r2, r3
 80027be:	2301      	movs	r3, #1
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	461a      	mov	r2, r3
 80027e2:	2300      	movs	r3, #0
 80027e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027e6:	4a18      	ldr	r2, [pc, #96]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d04b      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7fe f93d 	bl	8000a74 <HAL_GetTick>
 80027fa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fc:	e00a      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7fe f939 	bl	8000a74 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f241 3288 	movw	r2, #5000	; 0x1388
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e180      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002814:	2302      	movs	r3, #2
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
 8002820:	2302      	movs	r3, #2
 8002822:	623b      	str	r3, [r7, #32]
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	61fb      	str	r3, [r7, #28]
  return result;
 800282c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f043 0302 	orr.w	r3, r3, #2
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d108      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002842:	4b01      	ldr	r3, [pc, #4]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	e00d      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002848:	40021000 	.word	0x40021000
 800284c:	40007000 	.word	0x40007000
 8002850:	10908100 	.word	0x10908100
 8002854:	2302      	movs	r3, #2
 8002856:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	4b9a      	ldr	r3, [pc, #616]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	2202      	movs	r2, #2
 8002866:	613a      	str	r2, [r7, #16]
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	fa92 f2a2 	rbit	r2, r2
 800286e:	60fa      	str	r2, [r7, #12]
  return result;
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	fab2 f282 	clz	r2, r2
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	f002 021f 	and.w	r2, r2, #31
 8002882:	2101      	movs	r1, #1
 8002884:	fa01 f202 	lsl.w	r2, r1, r2
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0b7      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800288e:	4b8f      	ldr	r3, [pc, #572]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	498c      	ldr	r1, [pc, #560]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800289c:	4313      	orrs	r3, r2
 800289e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d105      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a8:	4b88      	ldr	r3, [pc, #544]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	4a87      	ldr	r2, [pc, #540]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028c0:	4b82      	ldr	r3, [pc, #520]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	f023 0203 	bic.w	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	497f      	ldr	r1, [pc, #508]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028de:	4b7b      	ldr	r3, [pc, #492]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	4978      	ldr	r1, [pc, #480]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028fc:	4b73      	ldr	r3, [pc, #460]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	4970      	ldr	r1, [pc, #448]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800290a:	4313      	orrs	r3, r2
 800290c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800291a:	4b6c      	ldr	r3, [pc, #432]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f023 0210 	bic.w	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	4969      	ldr	r1, [pc, #420]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002928:	4313      	orrs	r3, r2
 800292a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002938:	4b64      	ldr	r3, [pc, #400]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002944:	4961      	ldr	r1, [pc, #388]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d008      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002956:	4b5d      	ldr	r3, [pc, #372]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f023 0220 	bic.w	r2, r3, #32
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	495a      	ldr	r1, [pc, #360]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002964:	4313      	orrs	r3, r2
 8002966:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002974:	4b55      	ldr	r3, [pc, #340]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	4952      	ldr	r1, [pc, #328]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002982:	4313      	orrs	r3, r2
 8002984:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d008      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002992:	4b4e      	ldr	r3, [pc, #312]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	494b      	ldr	r1, [pc, #300]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029b0:	4b46      	ldr	r3, [pc, #280]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	4943      	ldr	r1, [pc, #268]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029ce:	4b3f      	ldr	r3, [pc, #252]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	493c      	ldr	r1, [pc, #240]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029ec:	4b37      	ldr	r3, [pc, #220]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	4934      	ldr	r1, [pc, #208]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d008      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002a0a:	4b30      	ldr	r3, [pc, #192]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	492d      	ldr	r1, [pc, #180]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a28:	4b28      	ldr	r3, [pc, #160]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a34:	4925      	ldr	r1, [pc, #148]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002a46:	4b21      	ldr	r3, [pc, #132]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	491e      	ldr	r1, [pc, #120]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	4916      	ldr	r1, [pc, #88]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002a82:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8e:	490f      	ldr	r1, [pc, #60]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	4907      	ldr	r1, [pc, #28]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00c      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002abe:	4b03      	ldr	r3, [pc, #12]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	e002      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002aca:	bf00      	nop
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad2:	4913      	ldr	r1, [pc, #76]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af0:	490b      	ldr	r1, [pc, #44]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d008      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002b02:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0e:	4904      	ldr	r1, [pc, #16]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3748      	adds	r7, #72	; 0x48
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000

08002b24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e040      	b.n	8002bb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fd fd70 	bl	800062c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2224      	movs	r2, #36	; 0x24
 8002b50:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0201 	bic.w	r2, r2, #1
 8002b60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fc00 	bl	8003368 <UART_SetConfig>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e022      	b.n	8002bb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d002      	beq.n	8002b80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fdc8 	bl	8003710 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fe4f 	bl	8003854 <UART_CheckIdleState>
 8002bb6:	4603      	mov	r3, r0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	; 0x28
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d178      	bne.n	8002cca <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_UART_Transmit+0x24>
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e071      	b.n	8002ccc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2221      	movs	r2, #33	; 0x21
 8002bf4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bf6:	f7fd ff3d 	bl	8000a74 <HAL_GetTick>
 8002bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	88fa      	ldrh	r2, [r7, #6]
 8002c00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	88fa      	ldrh	r2, [r7, #6]
 8002c08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c14:	d108      	bne.n	8002c28 <HAL_UART_Transmit+0x68>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d104      	bne.n	8002c28 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	e003      	b.n	8002c30 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c30:	e030      	b.n	8002c94 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2180      	movs	r1, #128	; 0x80
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 feb1 	bl	80039a4 <UART_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d004      	beq.n	8002c52 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e03c      	b.n	8002ccc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10b      	bne.n	8002c70 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	881a      	ldrh	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c64:	b292      	uxth	r2, r2
 8002c66:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	e008      	b.n	8002c82 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	781a      	ldrb	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	b292      	uxth	r2, r2
 8002c7a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1c8      	bne.n	8002c32 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2140      	movs	r1, #64	; 0x40
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 fe7a 	bl	80039a4 <UART_WaitOnFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d004      	beq.n	8002cc0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e005      	b.n	8002ccc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e000      	b.n	8002ccc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002cca:	2302      	movs	r3, #2
  }
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3720      	adds	r7, #32
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	; 0x28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	d132      	bne.n	8002d52 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_UART_Receive_IT+0x24>
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e02b      	b.n	8002d54 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d018      	beq.n	8002d42 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	e853 3f00 	ldrex	r3, [r3]
 8002d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	623b      	str	r3, [r7, #32]
 8002d30:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d32:	69f9      	ldr	r1, [r7, #28]
 8002d34:	6a3a      	ldr	r2, [r7, #32]
 8002d36:	e841 2300 	strex	r3, r2, [r1]
 8002d3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1e6      	bne.n	8002d10 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	461a      	mov	r2, r3
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 fe93 	bl	8003a74 <UART_Start_Receive_IT>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	e000      	b.n	8002d54 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002d52:	2302      	movs	r3, #2
  }
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3728      	adds	r7, #40	; 0x28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b0ba      	sub	sp, #232	; 0xe8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d86:	f640 030f 	movw	r3, #2063	; 0x80f
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002d90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d115      	bne.n	8002dc4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00f      	beq.n	8002dc4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d009      	beq.n	8002dc4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 82ab 	beq.w	8003310 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	4798      	blx	r3
      }
      return;
 8002dc2:	e2a5      	b.n	8003310 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002dc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8117 	beq.w	8002ffc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002dda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002dde:	4b85      	ldr	r3, [pc, #532]	; (8002ff4 <HAL_UART_IRQHandler+0x298>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 810a 	beq.w	8002ffc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d011      	beq.n	8002e18 <HAL_UART_IRQHandler+0xbc>
 8002df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00b      	beq.n	8002e18 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2201      	movs	r2, #1
 8002e06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e0e:	f043 0201 	orr.w	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d011      	beq.n	8002e48 <HAL_UART_IRQHandler+0xec>
 8002e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00b      	beq.n	8002e48 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2202      	movs	r2, #2
 8002e36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e3e:	f043 0204 	orr.w	r2, r3, #4
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d011      	beq.n	8002e78 <HAL_UART_IRQHandler+0x11c>
 8002e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00b      	beq.n	8002e78 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2204      	movs	r2, #4
 8002e66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e6e:	f043 0202 	orr.w	r2, r3, #2
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d017      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d105      	bne.n	8002e9c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e94:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00b      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eaa:	f043 0208 	orr.w	r2, r3, #8
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d012      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x18a>
 8002ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00c      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ed4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002edc:	f043 0220 	orr.w	r2, r3, #32
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 8211 	beq.w	8003314 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00d      	beq.n	8002f1a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2e:	2b40      	cmp	r3, #64	; 0x40
 8002f30:	d005      	beq.n	8002f3e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d04f      	beq.n	8002fde <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fe5e 	bl	8003c00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	2b40      	cmp	r3, #64	; 0x40
 8002f50:	d141      	bne.n	8002fd6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	3308      	adds	r3, #8
 8002f58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f60:	e853 3f00 	ldrex	r3, [r3]
 8002f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3308      	adds	r3, #8
 8002f7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1d9      	bne.n	8002f52 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d013      	beq.n	8002fce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002faa:	4a13      	ldr	r2, [pc, #76]	; (8002ff8 <HAL_UART_IRQHandler+0x29c>)
 8002fac:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd fed8 	bl	8000d68 <HAL_DMA_Abort_IT>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d017      	beq.n	8002fee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fcc:	e00f      	b.n	8002fee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f9b4 	bl	800333c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd4:	e00b      	b.n	8002fee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f9b0 	bl	800333c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fdc:	e007      	b.n	8002fee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f9ac 	bl	800333c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002fec:	e192      	b.n	8003314 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fee:	bf00      	nop
    return;
 8002ff0:	e190      	b.n	8003314 <HAL_UART_IRQHandler+0x5b8>
 8002ff2:	bf00      	nop
 8002ff4:	04000120 	.word	0x04000120
 8002ff8:	08003cc9 	.word	0x08003cc9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003000:	2b01      	cmp	r3, #1
 8003002:	f040 814b 	bne.w	800329c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800300a:	f003 0310 	and.w	r3, r3, #16
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 8144 	beq.w	800329c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 813d 	beq.w	800329c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2210      	movs	r2, #16
 8003028:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	f040 80b5 	bne.w	80031a4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003046:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 8164 	beq.w	8003318 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003056:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800305a:	429a      	cmp	r2, r3
 800305c:	f080 815c 	bcs.w	8003318 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003066:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2b20      	cmp	r3, #32
 8003072:	f000 8086 	beq.w	8003182 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003082:	e853 3f00 	ldrex	r3, [r3]
 8003086:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800308a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800308e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003092:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030a4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030b0:	e841 2300 	strex	r3, r2, [r1]
 80030b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1da      	bne.n	8003076 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3308      	adds	r3, #8
 80030c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ca:	e853 3f00 	ldrex	r3, [r3]
 80030ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030d2:	f023 0301 	bic.w	r3, r3, #1
 80030d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3308      	adds	r3, #8
 80030e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030f0:	e841 2300 	strex	r3, r2, [r1]
 80030f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e1      	bne.n	80030c0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3308      	adds	r3, #8
 8003102:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003104:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003106:	e853 3f00 	ldrex	r3, [r3]
 800310a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800310c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800310e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003112:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3308      	adds	r3, #8
 800311c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003120:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003122:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003124:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003126:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003128:	e841 2300 	strex	r3, r2, [r1]
 800312c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800312e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1e3      	bne.n	80030fc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2220      	movs	r2, #32
 8003138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800314a:	e853 3f00 	ldrex	r3, [r3]
 800314e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003152:	f023 0310 	bic.w	r3, r3, #16
 8003156:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003164:	65bb      	str	r3, [r7, #88]	; 0x58
 8003166:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003168:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800316a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800316c:	e841 2300 	strex	r3, r2, [r1]
 8003170:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1e4      	bne.n	8003142 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd fdba 	bl	8000cf6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2202      	movs	r2, #2
 8003186:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003194:	b29b      	uxth	r3, r3
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	b29b      	uxth	r3, r3
 800319a:	4619      	mov	r1, r3
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f8d7 	bl	8003350 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031a2:	e0b9      	b.n	8003318 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80ab 	beq.w	800331c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80031c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 80a6 	beq.w	800331c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d8:	e853 3f00 	ldrex	r3, [r3]
 80031dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031f2:	647b      	str	r3, [r7, #68]	; 0x44
 80031f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031fa:	e841 2300 	strex	r3, r2, [r1]
 80031fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1e4      	bne.n	80031d0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	3308      	adds	r3, #8
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	e853 3f00 	ldrex	r3, [r3]
 8003214:	623b      	str	r3, [r7, #32]
   return(result);
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3308      	adds	r3, #8
 8003226:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800322a:	633a      	str	r2, [r7, #48]	; 0x30
 800322c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003232:	e841 2300 	strex	r3, r2, [r1]
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1e3      	bne.n	8003206 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2220      	movs	r2, #32
 8003242:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	e853 3f00 	ldrex	r3, [r3]
 800325e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0310 	bic.w	r3, r3, #16
 8003266:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003274:	61fb      	str	r3, [r7, #28]
 8003276:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003278:	69b9      	ldr	r1, [r7, #24]
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	e841 2300 	strex	r3, r2, [r1]
 8003280:	617b      	str	r3, [r7, #20]
   return(result);
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e4      	bne.n	8003252 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800328e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003292:	4619      	mov	r1, r3
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f85b 	bl	8003350 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800329a:	e03f      	b.n	800331c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800329c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00e      	beq.n	80032c6 <HAL_UART_IRQHandler+0x56a>
 80032a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 feea 	bl	8004098 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032c4:	e02d      	b.n	8003322 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00e      	beq.n	80032f0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d008      	beq.n	80032f0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d01c      	beq.n	8003320 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	4798      	blx	r3
    }
    return;
 80032ee:	e017      	b.n	8003320 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d012      	beq.n	8003322 <HAL_UART_IRQHandler+0x5c6>
 80032fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00c      	beq.n	8003322 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fcf3 	bl	8003cf4 <UART_EndTransmit_IT>
    return;
 800330e:	e008      	b.n	8003322 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003310:	bf00      	nop
 8003312:	e006      	b.n	8003322 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003314:	bf00      	nop
 8003316:	e004      	b.n	8003322 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003318:	bf00      	nop
 800331a:	e002      	b.n	8003322 <HAL_UART_IRQHandler+0x5c6>
      return;
 800331c:	bf00      	nop
 800331e:	e000      	b.n	8003322 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003320:	bf00      	nop
  }

}
 8003322:	37e8      	adds	r7, #232	; 0xe8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4b92      	ldr	r3, [pc, #584]	; (80035dc <UART_SetConfig+0x274>)
 8003394:	4013      	ands	r3, r2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	6979      	ldr	r1, [r7, #20]
 800339c:	430b      	orrs	r3, r1
 800339e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a80      	ldr	r2, [pc, #512]	; (80035e0 <UART_SetConfig+0x278>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d120      	bne.n	8003426 <UART_SetConfig+0xbe>
 80033e4:	4b7f      	ldr	r3, [pc, #508]	; (80035e4 <UART_SetConfig+0x27c>)
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d817      	bhi.n	8003420 <UART_SetConfig+0xb8>
 80033f0:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <UART_SetConfig+0x90>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	08003409 	.word	0x08003409
 80033fc:	08003415 	.word	0x08003415
 8003400:	0800341b 	.word	0x0800341b
 8003404:	0800340f 	.word	0x0800340f
 8003408:	2301      	movs	r3, #1
 800340a:	77fb      	strb	r3, [r7, #31]
 800340c:	e0b5      	b.n	800357a <UART_SetConfig+0x212>
 800340e:	2302      	movs	r3, #2
 8003410:	77fb      	strb	r3, [r7, #31]
 8003412:	e0b2      	b.n	800357a <UART_SetConfig+0x212>
 8003414:	2304      	movs	r3, #4
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	e0af      	b.n	800357a <UART_SetConfig+0x212>
 800341a:	2308      	movs	r3, #8
 800341c:	77fb      	strb	r3, [r7, #31]
 800341e:	e0ac      	b.n	800357a <UART_SetConfig+0x212>
 8003420:	2310      	movs	r3, #16
 8003422:	77fb      	strb	r3, [r7, #31]
 8003424:	e0a9      	b.n	800357a <UART_SetConfig+0x212>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a6f      	ldr	r2, [pc, #444]	; (80035e8 <UART_SetConfig+0x280>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d124      	bne.n	800347a <UART_SetConfig+0x112>
 8003430:	4b6c      	ldr	r3, [pc, #432]	; (80035e4 <UART_SetConfig+0x27c>)
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003438:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800343c:	d011      	beq.n	8003462 <UART_SetConfig+0xfa>
 800343e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003442:	d817      	bhi.n	8003474 <UART_SetConfig+0x10c>
 8003444:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003448:	d011      	beq.n	800346e <UART_SetConfig+0x106>
 800344a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800344e:	d811      	bhi.n	8003474 <UART_SetConfig+0x10c>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <UART_SetConfig+0xf4>
 8003454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003458:	d006      	beq.n	8003468 <UART_SetConfig+0x100>
 800345a:	e00b      	b.n	8003474 <UART_SetConfig+0x10c>
 800345c:	2300      	movs	r3, #0
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	e08b      	b.n	800357a <UART_SetConfig+0x212>
 8003462:	2302      	movs	r3, #2
 8003464:	77fb      	strb	r3, [r7, #31]
 8003466:	e088      	b.n	800357a <UART_SetConfig+0x212>
 8003468:	2304      	movs	r3, #4
 800346a:	77fb      	strb	r3, [r7, #31]
 800346c:	e085      	b.n	800357a <UART_SetConfig+0x212>
 800346e:	2308      	movs	r3, #8
 8003470:	77fb      	strb	r3, [r7, #31]
 8003472:	e082      	b.n	800357a <UART_SetConfig+0x212>
 8003474:	2310      	movs	r3, #16
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e07f      	b.n	800357a <UART_SetConfig+0x212>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a5b      	ldr	r2, [pc, #364]	; (80035ec <UART_SetConfig+0x284>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d124      	bne.n	80034ce <UART_SetConfig+0x166>
 8003484:	4b57      	ldr	r3, [pc, #348]	; (80035e4 <UART_SetConfig+0x27c>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800348c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003490:	d011      	beq.n	80034b6 <UART_SetConfig+0x14e>
 8003492:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003496:	d817      	bhi.n	80034c8 <UART_SetConfig+0x160>
 8003498:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800349c:	d011      	beq.n	80034c2 <UART_SetConfig+0x15a>
 800349e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034a2:	d811      	bhi.n	80034c8 <UART_SetConfig+0x160>
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <UART_SetConfig+0x148>
 80034a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034ac:	d006      	beq.n	80034bc <UART_SetConfig+0x154>
 80034ae:	e00b      	b.n	80034c8 <UART_SetConfig+0x160>
 80034b0:	2300      	movs	r3, #0
 80034b2:	77fb      	strb	r3, [r7, #31]
 80034b4:	e061      	b.n	800357a <UART_SetConfig+0x212>
 80034b6:	2302      	movs	r3, #2
 80034b8:	77fb      	strb	r3, [r7, #31]
 80034ba:	e05e      	b.n	800357a <UART_SetConfig+0x212>
 80034bc:	2304      	movs	r3, #4
 80034be:	77fb      	strb	r3, [r7, #31]
 80034c0:	e05b      	b.n	800357a <UART_SetConfig+0x212>
 80034c2:	2308      	movs	r3, #8
 80034c4:	77fb      	strb	r3, [r7, #31]
 80034c6:	e058      	b.n	800357a <UART_SetConfig+0x212>
 80034c8:	2310      	movs	r3, #16
 80034ca:	77fb      	strb	r3, [r7, #31]
 80034cc:	e055      	b.n	800357a <UART_SetConfig+0x212>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a47      	ldr	r2, [pc, #284]	; (80035f0 <UART_SetConfig+0x288>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d124      	bne.n	8003522 <UART_SetConfig+0x1ba>
 80034d8:	4b42      	ldr	r3, [pc, #264]	; (80035e4 <UART_SetConfig+0x27c>)
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80034e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034e4:	d011      	beq.n	800350a <UART_SetConfig+0x1a2>
 80034e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034ea:	d817      	bhi.n	800351c <UART_SetConfig+0x1b4>
 80034ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034f0:	d011      	beq.n	8003516 <UART_SetConfig+0x1ae>
 80034f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034f6:	d811      	bhi.n	800351c <UART_SetConfig+0x1b4>
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <UART_SetConfig+0x19c>
 80034fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003500:	d006      	beq.n	8003510 <UART_SetConfig+0x1a8>
 8003502:	e00b      	b.n	800351c <UART_SetConfig+0x1b4>
 8003504:	2300      	movs	r3, #0
 8003506:	77fb      	strb	r3, [r7, #31]
 8003508:	e037      	b.n	800357a <UART_SetConfig+0x212>
 800350a:	2302      	movs	r3, #2
 800350c:	77fb      	strb	r3, [r7, #31]
 800350e:	e034      	b.n	800357a <UART_SetConfig+0x212>
 8003510:	2304      	movs	r3, #4
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	e031      	b.n	800357a <UART_SetConfig+0x212>
 8003516:	2308      	movs	r3, #8
 8003518:	77fb      	strb	r3, [r7, #31]
 800351a:	e02e      	b.n	800357a <UART_SetConfig+0x212>
 800351c:	2310      	movs	r3, #16
 800351e:	77fb      	strb	r3, [r7, #31]
 8003520:	e02b      	b.n	800357a <UART_SetConfig+0x212>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a33      	ldr	r2, [pc, #204]	; (80035f4 <UART_SetConfig+0x28c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d124      	bne.n	8003576 <UART_SetConfig+0x20e>
 800352c:	4b2d      	ldr	r3, [pc, #180]	; (80035e4 <UART_SetConfig+0x27c>)
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003534:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003538:	d011      	beq.n	800355e <UART_SetConfig+0x1f6>
 800353a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800353e:	d817      	bhi.n	8003570 <UART_SetConfig+0x208>
 8003540:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003544:	d011      	beq.n	800356a <UART_SetConfig+0x202>
 8003546:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800354a:	d811      	bhi.n	8003570 <UART_SetConfig+0x208>
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <UART_SetConfig+0x1f0>
 8003550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003554:	d006      	beq.n	8003564 <UART_SetConfig+0x1fc>
 8003556:	e00b      	b.n	8003570 <UART_SetConfig+0x208>
 8003558:	2300      	movs	r3, #0
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e00d      	b.n	800357a <UART_SetConfig+0x212>
 800355e:	2302      	movs	r3, #2
 8003560:	77fb      	strb	r3, [r7, #31]
 8003562:	e00a      	b.n	800357a <UART_SetConfig+0x212>
 8003564:	2304      	movs	r3, #4
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	e007      	b.n	800357a <UART_SetConfig+0x212>
 800356a:	2308      	movs	r3, #8
 800356c:	77fb      	strb	r3, [r7, #31]
 800356e:	e004      	b.n	800357a <UART_SetConfig+0x212>
 8003570:	2310      	movs	r3, #16
 8003572:	77fb      	strb	r3, [r7, #31]
 8003574:	e001      	b.n	800357a <UART_SetConfig+0x212>
 8003576:	2310      	movs	r3, #16
 8003578:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003582:	d16b      	bne.n	800365c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003584:	7ffb      	ldrb	r3, [r7, #31]
 8003586:	2b08      	cmp	r3, #8
 8003588:	d838      	bhi.n	80035fc <UART_SetConfig+0x294>
 800358a:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <UART_SetConfig+0x228>)
 800358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003590:	080035b5 	.word	0x080035b5
 8003594:	080035bd 	.word	0x080035bd
 8003598:	080035c5 	.word	0x080035c5
 800359c:	080035fd 	.word	0x080035fd
 80035a0:	080035cb 	.word	0x080035cb
 80035a4:	080035fd 	.word	0x080035fd
 80035a8:	080035fd 	.word	0x080035fd
 80035ac:	080035fd 	.word	0x080035fd
 80035b0:	080035d3 	.word	0x080035d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b4:	f7ff f854 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 80035b8:	61b8      	str	r0, [r7, #24]
        break;
 80035ba:	e024      	b.n	8003606 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035bc:	f7ff f872 	bl	80026a4 <HAL_RCC_GetPCLK2Freq>
 80035c0:	61b8      	str	r0, [r7, #24]
        break;
 80035c2:	e020      	b.n	8003606 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035c4:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <UART_SetConfig+0x290>)
 80035c6:	61bb      	str	r3, [r7, #24]
        break;
 80035c8:	e01d      	b.n	8003606 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ca:	f7fe ffd3 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 80035ce:	61b8      	str	r0, [r7, #24]
        break;
 80035d0:	e019      	b.n	8003606 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035d6:	61bb      	str	r3, [r7, #24]
        break;
 80035d8:	e015      	b.n	8003606 <UART_SetConfig+0x29e>
 80035da:	bf00      	nop
 80035dc:	efff69f3 	.word	0xefff69f3
 80035e0:	40013800 	.word	0x40013800
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40004400 	.word	0x40004400
 80035ec:	40004800 	.word	0x40004800
 80035f0:	40004c00 	.word	0x40004c00
 80035f4:	40005000 	.word	0x40005000
 80035f8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	77bb      	strb	r3, [r7, #30]
        break;
 8003604:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d073      	beq.n	80036f4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	005a      	lsls	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	085b      	lsrs	r3, r3, #1
 8003616:	441a      	add	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003620:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	2b0f      	cmp	r3, #15
 8003626:	d916      	bls.n	8003656 <UART_SetConfig+0x2ee>
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362e:	d212      	bcs.n	8003656 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	b29b      	uxth	r3, r3
 8003634:	f023 030f 	bic.w	r3, r3, #15
 8003638:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	085b      	lsrs	r3, r3, #1
 800363e:	b29b      	uxth	r3, r3
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	b29a      	uxth	r2, r3
 8003646:	89fb      	ldrh	r3, [r7, #14]
 8003648:	4313      	orrs	r3, r2
 800364a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	89fa      	ldrh	r2, [r7, #14]
 8003652:	60da      	str	r2, [r3, #12]
 8003654:	e04e      	b.n	80036f4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	77bb      	strb	r3, [r7, #30]
 800365a:	e04b      	b.n	80036f4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800365c:	7ffb      	ldrb	r3, [r7, #31]
 800365e:	2b08      	cmp	r3, #8
 8003660:	d827      	bhi.n	80036b2 <UART_SetConfig+0x34a>
 8003662:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <UART_SetConfig+0x300>)
 8003664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003668:	0800368d 	.word	0x0800368d
 800366c:	08003695 	.word	0x08003695
 8003670:	0800369d 	.word	0x0800369d
 8003674:	080036b3 	.word	0x080036b3
 8003678:	080036a3 	.word	0x080036a3
 800367c:	080036b3 	.word	0x080036b3
 8003680:	080036b3 	.word	0x080036b3
 8003684:	080036b3 	.word	0x080036b3
 8003688:	080036ab 	.word	0x080036ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800368c:	f7fe ffe8 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 8003690:	61b8      	str	r0, [r7, #24]
        break;
 8003692:	e013      	b.n	80036bc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003694:	f7ff f806 	bl	80026a4 <HAL_RCC_GetPCLK2Freq>
 8003698:	61b8      	str	r0, [r7, #24]
        break;
 800369a:	e00f      	b.n	80036bc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800369c:	4b1b      	ldr	r3, [pc, #108]	; (800370c <UART_SetConfig+0x3a4>)
 800369e:	61bb      	str	r3, [r7, #24]
        break;
 80036a0:	e00c      	b.n	80036bc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036a2:	f7fe ff67 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 80036a6:	61b8      	str	r0, [r7, #24]
        break;
 80036a8:	e008      	b.n	80036bc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ae:	61bb      	str	r3, [r7, #24]
        break;
 80036b0:	e004      	b.n	80036bc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	77bb      	strb	r3, [r7, #30]
        break;
 80036ba:	bf00      	nop
    }

    if (pclk != 0U)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d018      	beq.n	80036f4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	085a      	lsrs	r2, r3, #1
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	441a      	add	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b0f      	cmp	r3, #15
 80036da:	d909      	bls.n	80036f0 <UART_SetConfig+0x388>
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e2:	d205      	bcs.n	80036f0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	e001      	b.n	80036f4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003700:	7fbb      	ldrb	r3, [r7, #30]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	007a1200 	.word	0x007a1200

08003710 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01a      	beq.n	8003826 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800380e:	d10a      	bne.n	8003826 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  }
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b098      	sub	sp, #96	; 0x60
 8003858:	af02      	add	r7, sp, #8
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003864:	f7fd f906 	bl	8000a74 <HAL_GetTick>
 8003868:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b08      	cmp	r3, #8
 8003876:	d12e      	bne.n	80038d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003878:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003880:	2200      	movs	r2, #0
 8003882:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f88c 	bl	80039a4 <UART_WaitOnFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d021      	beq.n	80038d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389a:	e853 3f00 	ldrex	r3, [r3]
 800389e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038a6:	653b      	str	r3, [r7, #80]	; 0x50
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038b0:	647b      	str	r3, [r7, #68]	; 0x44
 80038b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038b8:	e841 2300 	strex	r3, r2, [r1]
 80038bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e6      	bne.n	8003892 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e062      	b.n	800399c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d149      	bne.n	8003978 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ec:	2200      	movs	r2, #0
 80038ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f856 	bl	80039a4 <UART_WaitOnFlagUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d03c      	beq.n	8003978 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	e853 3f00 	ldrex	r3, [r3]
 800390a:	623b      	str	r3, [r7, #32]
   return(result);
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800391c:	633b      	str	r3, [r7, #48]	; 0x30
 800391e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003920:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003924:	e841 2300 	strex	r3, r2, [r1]
 8003928:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1e6      	bne.n	80038fe <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3308      	adds	r3, #8
 8003936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	e853 3f00 	ldrex	r3, [r3]
 800393e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0301 	bic.w	r3, r3, #1
 8003946:	64bb      	str	r3, [r7, #72]	; 0x48
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3308      	adds	r3, #8
 800394e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003950:	61fa      	str	r2, [r7, #28]
 8003952:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003954:	69b9      	ldr	r1, [r7, #24]
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	e841 2300 	strex	r3, r2, [r1]
 800395c:	617b      	str	r3, [r7, #20]
   return(result);
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1e5      	bne.n	8003930 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e011      	b.n	800399c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3758      	adds	r7, #88	; 0x58
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	4613      	mov	r3, r2
 80039b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b4:	e049      	b.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039bc:	d045      	beq.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039be:	f7fd f859 	bl	8000a74 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d302      	bcc.n	80039d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e048      	b.n	8003a6a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d031      	beq.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d110      	bne.n	8003a16 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2208      	movs	r2, #8
 80039fa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f8ff 	bl	8003c00 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2208      	movs	r2, #8
 8003a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e029      	b.n	8003a6a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a24:	d111      	bne.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f8e5 	bl	8003c00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e00f      	b.n	8003a6a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	4013      	ands	r3, r2
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	bf0c      	ite	eq
 8003a5a:	2301      	moveq	r3, #1
 8003a5c:	2300      	movne	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	461a      	mov	r2, r3
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d0a6      	beq.n	80039b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b097      	sub	sp, #92	; 0x5c
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	88fa      	ldrh	r2, [r7, #6]
 8003a8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	88fa      	ldrh	r2, [r7, #6]
 8003a94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa6:	d10e      	bne.n	8003ac6 <UART_Start_Receive_IT+0x52>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d105      	bne.n	8003abc <UART_Start_Receive_IT+0x48>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003ab6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003aba:	e02d      	b.n	8003b18 <UART_Start_Receive_IT+0xa4>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	22ff      	movs	r2, #255	; 0xff
 8003ac0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ac4:	e028      	b.n	8003b18 <UART_Start_Receive_IT+0xa4>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10d      	bne.n	8003aea <UART_Start_Receive_IT+0x76>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d104      	bne.n	8003ae0 <UART_Start_Receive_IT+0x6c>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	22ff      	movs	r2, #255	; 0xff
 8003ada:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ade:	e01b      	b.n	8003b18 <UART_Start_Receive_IT+0xa4>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	227f      	movs	r2, #127	; 0x7f
 8003ae4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ae8:	e016      	b.n	8003b18 <UART_Start_Receive_IT+0xa4>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003af2:	d10d      	bne.n	8003b10 <UART_Start_Receive_IT+0x9c>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d104      	bne.n	8003b06 <UART_Start_Receive_IT+0x92>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	227f      	movs	r2, #127	; 0x7f
 8003b00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b04:	e008      	b.n	8003b18 <UART_Start_Receive_IT+0xa4>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	223f      	movs	r2, #63	; 0x3f
 8003b0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b0e:	e003      	b.n	8003b18 <UART_Start_Receive_IT+0xa4>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2222      	movs	r2, #34	; 0x22
 8003b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3308      	adds	r3, #8
 8003b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	657b      	str	r3, [r7, #84]	; 0x54
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3308      	adds	r3, #8
 8003b46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b48:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b4a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e5      	bne.n	8003b28 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b64:	d107      	bne.n	8003b76 <UART_Start_Receive_IT+0x102>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d103      	bne.n	8003b76 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a21      	ldr	r2, [pc, #132]	; (8003bf8 <UART_Start_Receive_IT+0x184>)
 8003b72:	669a      	str	r2, [r3, #104]	; 0x68
 8003b74:	e002      	b.n	8003b7c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4a20      	ldr	r2, [pc, #128]	; (8003bfc <UART_Start_Receive_IT+0x188>)
 8003b7a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d019      	beq.n	8003bb8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003b98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003baa:	e841 2300 	strex	r3, r2, [r1]
 8003bae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1e6      	bne.n	8003b84 <UART_Start_Receive_IT+0x110>
 8003bb6:	e018      	b.n	8003bea <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f043 0320 	orr.w	r3, r3, #32
 8003bcc:	653b      	str	r3, [r7, #80]	; 0x50
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd6:	623b      	str	r3, [r7, #32]
 8003bd8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	69f9      	ldr	r1, [r7, #28]
 8003bdc:	6a3a      	ldr	r2, [r7, #32]
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e6      	bne.n	8003bb8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	375c      	adds	r7, #92	; 0x5c
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	08003ef1 	.word	0x08003ef1
 8003bfc:	08003d49 	.word	0x08003d49

08003c00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b095      	sub	sp, #84	; 0x54
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c26:	643b      	str	r3, [r7, #64]	; 0x40
 8003c28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e6      	bne.n	8003c08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3308      	adds	r3, #8
 8003c40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3308      	adds	r3, #8
 8003c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e5      	bne.n	8003c3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d118      	bne.n	8003ca8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f023 0310 	bic.w	r3, r3, #16
 8003c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c98:	6979      	ldr	r1, [r7, #20]
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	e841 2300 	strex	r3, r2, [r1]
 8003ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e6      	bne.n	8003c76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003cbc:	bf00      	nop
 8003cbe:	3754      	adds	r7, #84	; 0x54
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7ff fb28 	bl	800333c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6979      	ldr	r1, [r7, #20]
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	613b      	str	r3, [r7, #16]
   return(result);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e6      	bne.n	8003cfc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff faf4 	bl	8003328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d40:	bf00      	nop
 8003d42:	3720      	adds	r7, #32
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b09c      	sub	sp, #112	; 0x70
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d56:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d60:	2b22      	cmp	r3, #34	; 0x22
 8003d62:	f040 80b9 	bne.w	8003ed8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d6c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003d74:	b2d9      	uxtb	r1, r3
 8003d76:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d80:	400a      	ands	r2, r1
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f040 809c 	bne.w	8003ee8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dce:	65bb      	str	r3, [r7, #88]	; 0x58
 8003dd0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e6      	bne.n	8003db0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3308      	adds	r3, #8
 8003de8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	667b      	str	r3, [r7, #100]	; 0x64
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3308      	adds	r3, #8
 8003e00:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003e02:	647a      	str	r2, [r7, #68]	; 0x44
 8003e04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e5      	bne.n	8003de2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d018      	beq.n	8003e6a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	623b      	str	r3, [r7, #32]
   return(result);
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e4c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e56:	633b      	str	r3, [r7, #48]	; 0x30
 8003e58:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e6      	bne.n	8003e38 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d12e      	bne.n	8003ed0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f023 0310 	bic.w	r3, r3, #16
 8003e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e96:	61fb      	str	r3, [r7, #28]
 8003e98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	69b9      	ldr	r1, [r7, #24]
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	617b      	str	r3, [r7, #20]
   return(result);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e6      	bne.n	8003e78 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	2b10      	cmp	r3, #16
 8003eb6:	d103      	bne.n	8003ec0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2210      	movs	r2, #16
 8003ebe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff fa41 	bl	8003350 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ece:	e00b      	b.n	8003ee8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7fc f9dd 	bl	8000290 <HAL_UART_RxCpltCallback>
}
 8003ed6:	e007      	b.n	8003ee8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699a      	ldr	r2, [r3, #24]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0208 	orr.w	r2, r2, #8
 8003ee6:	619a      	str	r2, [r3, #24]
}
 8003ee8:	bf00      	nop
 8003eea:	3770      	adds	r7, #112	; 0x70
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b09c      	sub	sp, #112	; 0x70
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003efe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f08:	2b22      	cmp	r3, #34	; 0x22
 8003f0a:	f040 80b9 	bne.w	8004080 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f14:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f1e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003f22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003f26:	4013      	ands	r3, r2
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f2c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f32:	1c9a      	adds	r2, r3, #2
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f040 809c 	bne.w	8004090 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f60:	e853 3f00 	ldrex	r3, [r3]
 8003f64:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f6c:	667b      	str	r3, [r7, #100]	; 0x64
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f76:	657b      	str	r3, [r7, #84]	; 0x54
 8003f78:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003f7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f7e:	e841 2300 	strex	r3, r2, [r1]
 8003f82:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e6      	bne.n	8003f58 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3308      	adds	r3, #8
 8003f90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f94:	e853 3f00 	ldrex	r3, [r3]
 8003f98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	663b      	str	r3, [r7, #96]	; 0x60
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3308      	adds	r3, #8
 8003fa8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003faa:	643a      	str	r2, [r7, #64]	; 0x40
 8003fac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e5      	bne.n	8003f8a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d018      	beq.n	8004012 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004000:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004002:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004006:	e841 2300 	strex	r3, r2, [r1]
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1e6      	bne.n	8003fe0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004016:	2b01      	cmp	r3, #1
 8004018:	d12e      	bne.n	8004078 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	60bb      	str	r3, [r7, #8]
   return(result);
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f023 0310 	bic.w	r3, r3, #16
 8004034:	65bb      	str	r3, [r7, #88]	; 0x58
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800403e:	61bb      	str	r3, [r7, #24]
 8004040:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	6979      	ldr	r1, [r7, #20]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	613b      	str	r3, [r7, #16]
   return(result);
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e6      	bne.n	8004020 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b10      	cmp	r3, #16
 800405e:	d103      	bne.n	8004068 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2210      	movs	r2, #16
 8004066:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800406e:	4619      	mov	r1, r3
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff f96d 	bl	8003350 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004076:	e00b      	b.n	8004090 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7fc f909 	bl	8000290 <HAL_UART_RxCpltCallback>
}
 800407e:	e007      	b.n	8004090 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0208 	orr.w	r2, r2, #8
 800408e:	619a      	str	r2, [r3, #24]
}
 8004090:	bf00      	nop
 8004092:	3770      	adds	r7, #112	; 0x70
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <__errno>:
 80040ac:	4b01      	ldr	r3, [pc, #4]	; (80040b4 <__errno+0x8>)
 80040ae:	6818      	ldr	r0, [r3, #0]
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	2000001c 	.word	0x2000001c

080040b8 <__libc_init_array>:
 80040b8:	b570      	push	{r4, r5, r6, lr}
 80040ba:	4d0d      	ldr	r5, [pc, #52]	; (80040f0 <__libc_init_array+0x38>)
 80040bc:	4c0d      	ldr	r4, [pc, #52]	; (80040f4 <__libc_init_array+0x3c>)
 80040be:	1b64      	subs	r4, r4, r5
 80040c0:	10a4      	asrs	r4, r4, #2
 80040c2:	2600      	movs	r6, #0
 80040c4:	42a6      	cmp	r6, r4
 80040c6:	d109      	bne.n	80040dc <__libc_init_array+0x24>
 80040c8:	4d0b      	ldr	r5, [pc, #44]	; (80040f8 <__libc_init_array+0x40>)
 80040ca:	4c0c      	ldr	r4, [pc, #48]	; (80040fc <__libc_init_array+0x44>)
 80040cc:	f000 fc8e 	bl	80049ec <_init>
 80040d0:	1b64      	subs	r4, r4, r5
 80040d2:	10a4      	asrs	r4, r4, #2
 80040d4:	2600      	movs	r6, #0
 80040d6:	42a6      	cmp	r6, r4
 80040d8:	d105      	bne.n	80040e6 <__libc_init_array+0x2e>
 80040da:	bd70      	pop	{r4, r5, r6, pc}
 80040dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e0:	4798      	blx	r3
 80040e2:	3601      	adds	r6, #1
 80040e4:	e7ee      	b.n	80040c4 <__libc_init_array+0xc>
 80040e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ea:	4798      	blx	r3
 80040ec:	3601      	adds	r6, #1
 80040ee:	e7f2      	b.n	80040d6 <__libc_init_array+0x1e>
 80040f0:	08004a74 	.word	0x08004a74
 80040f4:	08004a74 	.word	0x08004a74
 80040f8:	08004a74 	.word	0x08004a74
 80040fc:	08004a78 	.word	0x08004a78

08004100 <memset>:
 8004100:	4402      	add	r2, r0
 8004102:	4603      	mov	r3, r0
 8004104:	4293      	cmp	r3, r2
 8004106:	d100      	bne.n	800410a <memset+0xa>
 8004108:	4770      	bx	lr
 800410a:	f803 1b01 	strb.w	r1, [r3], #1
 800410e:	e7f9      	b.n	8004104 <memset+0x4>

08004110 <siprintf>:
 8004110:	b40e      	push	{r1, r2, r3}
 8004112:	b500      	push	{lr}
 8004114:	b09c      	sub	sp, #112	; 0x70
 8004116:	ab1d      	add	r3, sp, #116	; 0x74
 8004118:	9002      	str	r0, [sp, #8]
 800411a:	9006      	str	r0, [sp, #24]
 800411c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004120:	4809      	ldr	r0, [pc, #36]	; (8004148 <siprintf+0x38>)
 8004122:	9107      	str	r1, [sp, #28]
 8004124:	9104      	str	r1, [sp, #16]
 8004126:	4909      	ldr	r1, [pc, #36]	; (800414c <siprintf+0x3c>)
 8004128:	f853 2b04 	ldr.w	r2, [r3], #4
 800412c:	9105      	str	r1, [sp, #20]
 800412e:	6800      	ldr	r0, [r0, #0]
 8004130:	9301      	str	r3, [sp, #4]
 8004132:	a902      	add	r1, sp, #8
 8004134:	f000 f868 	bl	8004208 <_svfiprintf_r>
 8004138:	9b02      	ldr	r3, [sp, #8]
 800413a:	2200      	movs	r2, #0
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	b01c      	add	sp, #112	; 0x70
 8004140:	f85d eb04 	ldr.w	lr, [sp], #4
 8004144:	b003      	add	sp, #12
 8004146:	4770      	bx	lr
 8004148:	2000001c 	.word	0x2000001c
 800414c:	ffff0208 	.word	0xffff0208

08004150 <__ssputs_r>:
 8004150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004154:	688e      	ldr	r6, [r1, #8]
 8004156:	429e      	cmp	r6, r3
 8004158:	4682      	mov	sl, r0
 800415a:	460c      	mov	r4, r1
 800415c:	4690      	mov	r8, r2
 800415e:	461f      	mov	r7, r3
 8004160:	d838      	bhi.n	80041d4 <__ssputs_r+0x84>
 8004162:	898a      	ldrh	r2, [r1, #12]
 8004164:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004168:	d032      	beq.n	80041d0 <__ssputs_r+0x80>
 800416a:	6825      	ldr	r5, [r4, #0]
 800416c:	6909      	ldr	r1, [r1, #16]
 800416e:	eba5 0901 	sub.w	r9, r5, r1
 8004172:	6965      	ldr	r5, [r4, #20]
 8004174:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004178:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800417c:	3301      	adds	r3, #1
 800417e:	444b      	add	r3, r9
 8004180:	106d      	asrs	r5, r5, #1
 8004182:	429d      	cmp	r5, r3
 8004184:	bf38      	it	cc
 8004186:	461d      	movcc	r5, r3
 8004188:	0553      	lsls	r3, r2, #21
 800418a:	d531      	bpl.n	80041f0 <__ssputs_r+0xa0>
 800418c:	4629      	mov	r1, r5
 800418e:	f000 fb63 	bl	8004858 <_malloc_r>
 8004192:	4606      	mov	r6, r0
 8004194:	b950      	cbnz	r0, 80041ac <__ssputs_r+0x5c>
 8004196:	230c      	movs	r3, #12
 8004198:	f8ca 3000 	str.w	r3, [sl]
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041a2:	81a3      	strh	r3, [r4, #12]
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295
 80041a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ac:	6921      	ldr	r1, [r4, #16]
 80041ae:	464a      	mov	r2, r9
 80041b0:	f000 fabe 	bl	8004730 <memcpy>
 80041b4:	89a3      	ldrh	r3, [r4, #12]
 80041b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041be:	81a3      	strh	r3, [r4, #12]
 80041c0:	6126      	str	r6, [r4, #16]
 80041c2:	6165      	str	r5, [r4, #20]
 80041c4:	444e      	add	r6, r9
 80041c6:	eba5 0509 	sub.w	r5, r5, r9
 80041ca:	6026      	str	r6, [r4, #0]
 80041cc:	60a5      	str	r5, [r4, #8]
 80041ce:	463e      	mov	r6, r7
 80041d0:	42be      	cmp	r6, r7
 80041d2:	d900      	bls.n	80041d6 <__ssputs_r+0x86>
 80041d4:	463e      	mov	r6, r7
 80041d6:	6820      	ldr	r0, [r4, #0]
 80041d8:	4632      	mov	r2, r6
 80041da:	4641      	mov	r1, r8
 80041dc:	f000 fab6 	bl	800474c <memmove>
 80041e0:	68a3      	ldr	r3, [r4, #8]
 80041e2:	1b9b      	subs	r3, r3, r6
 80041e4:	60a3      	str	r3, [r4, #8]
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	4433      	add	r3, r6
 80041ea:	6023      	str	r3, [r4, #0]
 80041ec:	2000      	movs	r0, #0
 80041ee:	e7db      	b.n	80041a8 <__ssputs_r+0x58>
 80041f0:	462a      	mov	r2, r5
 80041f2:	f000 fba5 	bl	8004940 <_realloc_r>
 80041f6:	4606      	mov	r6, r0
 80041f8:	2800      	cmp	r0, #0
 80041fa:	d1e1      	bne.n	80041c0 <__ssputs_r+0x70>
 80041fc:	6921      	ldr	r1, [r4, #16]
 80041fe:	4650      	mov	r0, sl
 8004200:	f000 fabe 	bl	8004780 <_free_r>
 8004204:	e7c7      	b.n	8004196 <__ssputs_r+0x46>
	...

08004208 <_svfiprintf_r>:
 8004208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420c:	4698      	mov	r8, r3
 800420e:	898b      	ldrh	r3, [r1, #12]
 8004210:	061b      	lsls	r3, r3, #24
 8004212:	b09d      	sub	sp, #116	; 0x74
 8004214:	4607      	mov	r7, r0
 8004216:	460d      	mov	r5, r1
 8004218:	4614      	mov	r4, r2
 800421a:	d50e      	bpl.n	800423a <_svfiprintf_r+0x32>
 800421c:	690b      	ldr	r3, [r1, #16]
 800421e:	b963      	cbnz	r3, 800423a <_svfiprintf_r+0x32>
 8004220:	2140      	movs	r1, #64	; 0x40
 8004222:	f000 fb19 	bl	8004858 <_malloc_r>
 8004226:	6028      	str	r0, [r5, #0]
 8004228:	6128      	str	r0, [r5, #16]
 800422a:	b920      	cbnz	r0, 8004236 <_svfiprintf_r+0x2e>
 800422c:	230c      	movs	r3, #12
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	f04f 30ff 	mov.w	r0, #4294967295
 8004234:	e0d1      	b.n	80043da <_svfiprintf_r+0x1d2>
 8004236:	2340      	movs	r3, #64	; 0x40
 8004238:	616b      	str	r3, [r5, #20]
 800423a:	2300      	movs	r3, #0
 800423c:	9309      	str	r3, [sp, #36]	; 0x24
 800423e:	2320      	movs	r3, #32
 8004240:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004244:	f8cd 800c 	str.w	r8, [sp, #12]
 8004248:	2330      	movs	r3, #48	; 0x30
 800424a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80043f4 <_svfiprintf_r+0x1ec>
 800424e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004252:	f04f 0901 	mov.w	r9, #1
 8004256:	4623      	mov	r3, r4
 8004258:	469a      	mov	sl, r3
 800425a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800425e:	b10a      	cbz	r2, 8004264 <_svfiprintf_r+0x5c>
 8004260:	2a25      	cmp	r2, #37	; 0x25
 8004262:	d1f9      	bne.n	8004258 <_svfiprintf_r+0x50>
 8004264:	ebba 0b04 	subs.w	fp, sl, r4
 8004268:	d00b      	beq.n	8004282 <_svfiprintf_r+0x7a>
 800426a:	465b      	mov	r3, fp
 800426c:	4622      	mov	r2, r4
 800426e:	4629      	mov	r1, r5
 8004270:	4638      	mov	r0, r7
 8004272:	f7ff ff6d 	bl	8004150 <__ssputs_r>
 8004276:	3001      	adds	r0, #1
 8004278:	f000 80aa 	beq.w	80043d0 <_svfiprintf_r+0x1c8>
 800427c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800427e:	445a      	add	r2, fp
 8004280:	9209      	str	r2, [sp, #36]	; 0x24
 8004282:	f89a 3000 	ldrb.w	r3, [sl]
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 80a2 	beq.w	80043d0 <_svfiprintf_r+0x1c8>
 800428c:	2300      	movs	r3, #0
 800428e:	f04f 32ff 	mov.w	r2, #4294967295
 8004292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004296:	f10a 0a01 	add.w	sl, sl, #1
 800429a:	9304      	str	r3, [sp, #16]
 800429c:	9307      	str	r3, [sp, #28]
 800429e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042a2:	931a      	str	r3, [sp, #104]	; 0x68
 80042a4:	4654      	mov	r4, sl
 80042a6:	2205      	movs	r2, #5
 80042a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042ac:	4851      	ldr	r0, [pc, #324]	; (80043f4 <_svfiprintf_r+0x1ec>)
 80042ae:	f7fb ff9f 	bl	80001f0 <memchr>
 80042b2:	9a04      	ldr	r2, [sp, #16]
 80042b4:	b9d8      	cbnz	r0, 80042ee <_svfiprintf_r+0xe6>
 80042b6:	06d0      	lsls	r0, r2, #27
 80042b8:	bf44      	itt	mi
 80042ba:	2320      	movmi	r3, #32
 80042bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042c0:	0711      	lsls	r1, r2, #28
 80042c2:	bf44      	itt	mi
 80042c4:	232b      	movmi	r3, #43	; 0x2b
 80042c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042ca:	f89a 3000 	ldrb.w	r3, [sl]
 80042ce:	2b2a      	cmp	r3, #42	; 0x2a
 80042d0:	d015      	beq.n	80042fe <_svfiprintf_r+0xf6>
 80042d2:	9a07      	ldr	r2, [sp, #28]
 80042d4:	4654      	mov	r4, sl
 80042d6:	2000      	movs	r0, #0
 80042d8:	f04f 0c0a 	mov.w	ip, #10
 80042dc:	4621      	mov	r1, r4
 80042de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042e2:	3b30      	subs	r3, #48	; 0x30
 80042e4:	2b09      	cmp	r3, #9
 80042e6:	d94e      	bls.n	8004386 <_svfiprintf_r+0x17e>
 80042e8:	b1b0      	cbz	r0, 8004318 <_svfiprintf_r+0x110>
 80042ea:	9207      	str	r2, [sp, #28]
 80042ec:	e014      	b.n	8004318 <_svfiprintf_r+0x110>
 80042ee:	eba0 0308 	sub.w	r3, r0, r8
 80042f2:	fa09 f303 	lsl.w	r3, r9, r3
 80042f6:	4313      	orrs	r3, r2
 80042f8:	9304      	str	r3, [sp, #16]
 80042fa:	46a2      	mov	sl, r4
 80042fc:	e7d2      	b.n	80042a4 <_svfiprintf_r+0x9c>
 80042fe:	9b03      	ldr	r3, [sp, #12]
 8004300:	1d19      	adds	r1, r3, #4
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	9103      	str	r1, [sp, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	bfbb      	ittet	lt
 800430a:	425b      	neglt	r3, r3
 800430c:	f042 0202 	orrlt.w	r2, r2, #2
 8004310:	9307      	strge	r3, [sp, #28]
 8004312:	9307      	strlt	r3, [sp, #28]
 8004314:	bfb8      	it	lt
 8004316:	9204      	strlt	r2, [sp, #16]
 8004318:	7823      	ldrb	r3, [r4, #0]
 800431a:	2b2e      	cmp	r3, #46	; 0x2e
 800431c:	d10c      	bne.n	8004338 <_svfiprintf_r+0x130>
 800431e:	7863      	ldrb	r3, [r4, #1]
 8004320:	2b2a      	cmp	r3, #42	; 0x2a
 8004322:	d135      	bne.n	8004390 <_svfiprintf_r+0x188>
 8004324:	9b03      	ldr	r3, [sp, #12]
 8004326:	1d1a      	adds	r2, r3, #4
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	9203      	str	r2, [sp, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	bfb8      	it	lt
 8004330:	f04f 33ff 	movlt.w	r3, #4294967295
 8004334:	3402      	adds	r4, #2
 8004336:	9305      	str	r3, [sp, #20]
 8004338:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004404 <_svfiprintf_r+0x1fc>
 800433c:	7821      	ldrb	r1, [r4, #0]
 800433e:	2203      	movs	r2, #3
 8004340:	4650      	mov	r0, sl
 8004342:	f7fb ff55 	bl	80001f0 <memchr>
 8004346:	b140      	cbz	r0, 800435a <_svfiprintf_r+0x152>
 8004348:	2340      	movs	r3, #64	; 0x40
 800434a:	eba0 000a 	sub.w	r0, r0, sl
 800434e:	fa03 f000 	lsl.w	r0, r3, r0
 8004352:	9b04      	ldr	r3, [sp, #16]
 8004354:	4303      	orrs	r3, r0
 8004356:	3401      	adds	r4, #1
 8004358:	9304      	str	r3, [sp, #16]
 800435a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800435e:	4826      	ldr	r0, [pc, #152]	; (80043f8 <_svfiprintf_r+0x1f0>)
 8004360:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004364:	2206      	movs	r2, #6
 8004366:	f7fb ff43 	bl	80001f0 <memchr>
 800436a:	2800      	cmp	r0, #0
 800436c:	d038      	beq.n	80043e0 <_svfiprintf_r+0x1d8>
 800436e:	4b23      	ldr	r3, [pc, #140]	; (80043fc <_svfiprintf_r+0x1f4>)
 8004370:	bb1b      	cbnz	r3, 80043ba <_svfiprintf_r+0x1b2>
 8004372:	9b03      	ldr	r3, [sp, #12]
 8004374:	3307      	adds	r3, #7
 8004376:	f023 0307 	bic.w	r3, r3, #7
 800437a:	3308      	adds	r3, #8
 800437c:	9303      	str	r3, [sp, #12]
 800437e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004380:	4433      	add	r3, r6
 8004382:	9309      	str	r3, [sp, #36]	; 0x24
 8004384:	e767      	b.n	8004256 <_svfiprintf_r+0x4e>
 8004386:	fb0c 3202 	mla	r2, ip, r2, r3
 800438a:	460c      	mov	r4, r1
 800438c:	2001      	movs	r0, #1
 800438e:	e7a5      	b.n	80042dc <_svfiprintf_r+0xd4>
 8004390:	2300      	movs	r3, #0
 8004392:	3401      	adds	r4, #1
 8004394:	9305      	str	r3, [sp, #20]
 8004396:	4619      	mov	r1, r3
 8004398:	f04f 0c0a 	mov.w	ip, #10
 800439c:	4620      	mov	r0, r4
 800439e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043a2:	3a30      	subs	r2, #48	; 0x30
 80043a4:	2a09      	cmp	r2, #9
 80043a6:	d903      	bls.n	80043b0 <_svfiprintf_r+0x1a8>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0c5      	beq.n	8004338 <_svfiprintf_r+0x130>
 80043ac:	9105      	str	r1, [sp, #20]
 80043ae:	e7c3      	b.n	8004338 <_svfiprintf_r+0x130>
 80043b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80043b4:	4604      	mov	r4, r0
 80043b6:	2301      	movs	r3, #1
 80043b8:	e7f0      	b.n	800439c <_svfiprintf_r+0x194>
 80043ba:	ab03      	add	r3, sp, #12
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	462a      	mov	r2, r5
 80043c0:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <_svfiprintf_r+0x1f8>)
 80043c2:	a904      	add	r1, sp, #16
 80043c4:	4638      	mov	r0, r7
 80043c6:	f3af 8000 	nop.w
 80043ca:	1c42      	adds	r2, r0, #1
 80043cc:	4606      	mov	r6, r0
 80043ce:	d1d6      	bne.n	800437e <_svfiprintf_r+0x176>
 80043d0:	89ab      	ldrh	r3, [r5, #12]
 80043d2:	065b      	lsls	r3, r3, #25
 80043d4:	f53f af2c 	bmi.w	8004230 <_svfiprintf_r+0x28>
 80043d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043da:	b01d      	add	sp, #116	; 0x74
 80043dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043e0:	ab03      	add	r3, sp, #12
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	462a      	mov	r2, r5
 80043e6:	4b06      	ldr	r3, [pc, #24]	; (8004400 <_svfiprintf_r+0x1f8>)
 80043e8:	a904      	add	r1, sp, #16
 80043ea:	4638      	mov	r0, r7
 80043ec:	f000 f87a 	bl	80044e4 <_printf_i>
 80043f0:	e7eb      	b.n	80043ca <_svfiprintf_r+0x1c2>
 80043f2:	bf00      	nop
 80043f4:	08004a40 	.word	0x08004a40
 80043f8:	08004a4a 	.word	0x08004a4a
 80043fc:	00000000 	.word	0x00000000
 8004400:	08004151 	.word	0x08004151
 8004404:	08004a46 	.word	0x08004a46

08004408 <_printf_common>:
 8004408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800440c:	4616      	mov	r6, r2
 800440e:	4699      	mov	r9, r3
 8004410:	688a      	ldr	r2, [r1, #8]
 8004412:	690b      	ldr	r3, [r1, #16]
 8004414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004418:	4293      	cmp	r3, r2
 800441a:	bfb8      	it	lt
 800441c:	4613      	movlt	r3, r2
 800441e:	6033      	str	r3, [r6, #0]
 8004420:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004424:	4607      	mov	r7, r0
 8004426:	460c      	mov	r4, r1
 8004428:	b10a      	cbz	r2, 800442e <_printf_common+0x26>
 800442a:	3301      	adds	r3, #1
 800442c:	6033      	str	r3, [r6, #0]
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	0699      	lsls	r1, r3, #26
 8004432:	bf42      	ittt	mi
 8004434:	6833      	ldrmi	r3, [r6, #0]
 8004436:	3302      	addmi	r3, #2
 8004438:	6033      	strmi	r3, [r6, #0]
 800443a:	6825      	ldr	r5, [r4, #0]
 800443c:	f015 0506 	ands.w	r5, r5, #6
 8004440:	d106      	bne.n	8004450 <_printf_common+0x48>
 8004442:	f104 0a19 	add.w	sl, r4, #25
 8004446:	68e3      	ldr	r3, [r4, #12]
 8004448:	6832      	ldr	r2, [r6, #0]
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	42ab      	cmp	r3, r5
 800444e:	dc26      	bgt.n	800449e <_printf_common+0x96>
 8004450:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004454:	1e13      	subs	r3, r2, #0
 8004456:	6822      	ldr	r2, [r4, #0]
 8004458:	bf18      	it	ne
 800445a:	2301      	movne	r3, #1
 800445c:	0692      	lsls	r2, r2, #26
 800445e:	d42b      	bmi.n	80044b8 <_printf_common+0xb0>
 8004460:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004464:	4649      	mov	r1, r9
 8004466:	4638      	mov	r0, r7
 8004468:	47c0      	blx	r8
 800446a:	3001      	adds	r0, #1
 800446c:	d01e      	beq.n	80044ac <_printf_common+0xa4>
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	68e5      	ldr	r5, [r4, #12]
 8004472:	6832      	ldr	r2, [r6, #0]
 8004474:	f003 0306 	and.w	r3, r3, #6
 8004478:	2b04      	cmp	r3, #4
 800447a:	bf08      	it	eq
 800447c:	1aad      	subeq	r5, r5, r2
 800447e:	68a3      	ldr	r3, [r4, #8]
 8004480:	6922      	ldr	r2, [r4, #16]
 8004482:	bf0c      	ite	eq
 8004484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004488:	2500      	movne	r5, #0
 800448a:	4293      	cmp	r3, r2
 800448c:	bfc4      	itt	gt
 800448e:	1a9b      	subgt	r3, r3, r2
 8004490:	18ed      	addgt	r5, r5, r3
 8004492:	2600      	movs	r6, #0
 8004494:	341a      	adds	r4, #26
 8004496:	42b5      	cmp	r5, r6
 8004498:	d11a      	bne.n	80044d0 <_printf_common+0xc8>
 800449a:	2000      	movs	r0, #0
 800449c:	e008      	b.n	80044b0 <_printf_common+0xa8>
 800449e:	2301      	movs	r3, #1
 80044a0:	4652      	mov	r2, sl
 80044a2:	4649      	mov	r1, r9
 80044a4:	4638      	mov	r0, r7
 80044a6:	47c0      	blx	r8
 80044a8:	3001      	adds	r0, #1
 80044aa:	d103      	bne.n	80044b4 <_printf_common+0xac>
 80044ac:	f04f 30ff 	mov.w	r0, #4294967295
 80044b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b4:	3501      	adds	r5, #1
 80044b6:	e7c6      	b.n	8004446 <_printf_common+0x3e>
 80044b8:	18e1      	adds	r1, r4, r3
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	2030      	movs	r0, #48	; 0x30
 80044be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044c2:	4422      	add	r2, r4
 80044c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044cc:	3302      	adds	r3, #2
 80044ce:	e7c7      	b.n	8004460 <_printf_common+0x58>
 80044d0:	2301      	movs	r3, #1
 80044d2:	4622      	mov	r2, r4
 80044d4:	4649      	mov	r1, r9
 80044d6:	4638      	mov	r0, r7
 80044d8:	47c0      	blx	r8
 80044da:	3001      	adds	r0, #1
 80044dc:	d0e6      	beq.n	80044ac <_printf_common+0xa4>
 80044de:	3601      	adds	r6, #1
 80044e0:	e7d9      	b.n	8004496 <_printf_common+0x8e>
	...

080044e4 <_printf_i>:
 80044e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044e8:	7e0f      	ldrb	r7, [r1, #24]
 80044ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044ec:	2f78      	cmp	r7, #120	; 0x78
 80044ee:	4691      	mov	r9, r2
 80044f0:	4680      	mov	r8, r0
 80044f2:	460c      	mov	r4, r1
 80044f4:	469a      	mov	sl, r3
 80044f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044fa:	d807      	bhi.n	800450c <_printf_i+0x28>
 80044fc:	2f62      	cmp	r7, #98	; 0x62
 80044fe:	d80a      	bhi.n	8004516 <_printf_i+0x32>
 8004500:	2f00      	cmp	r7, #0
 8004502:	f000 80d8 	beq.w	80046b6 <_printf_i+0x1d2>
 8004506:	2f58      	cmp	r7, #88	; 0x58
 8004508:	f000 80a3 	beq.w	8004652 <_printf_i+0x16e>
 800450c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004510:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004514:	e03a      	b.n	800458c <_printf_i+0xa8>
 8004516:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800451a:	2b15      	cmp	r3, #21
 800451c:	d8f6      	bhi.n	800450c <_printf_i+0x28>
 800451e:	a101      	add	r1, pc, #4	; (adr r1, 8004524 <_printf_i+0x40>)
 8004520:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004524:	0800457d 	.word	0x0800457d
 8004528:	08004591 	.word	0x08004591
 800452c:	0800450d 	.word	0x0800450d
 8004530:	0800450d 	.word	0x0800450d
 8004534:	0800450d 	.word	0x0800450d
 8004538:	0800450d 	.word	0x0800450d
 800453c:	08004591 	.word	0x08004591
 8004540:	0800450d 	.word	0x0800450d
 8004544:	0800450d 	.word	0x0800450d
 8004548:	0800450d 	.word	0x0800450d
 800454c:	0800450d 	.word	0x0800450d
 8004550:	0800469d 	.word	0x0800469d
 8004554:	080045c1 	.word	0x080045c1
 8004558:	0800467f 	.word	0x0800467f
 800455c:	0800450d 	.word	0x0800450d
 8004560:	0800450d 	.word	0x0800450d
 8004564:	080046bf 	.word	0x080046bf
 8004568:	0800450d 	.word	0x0800450d
 800456c:	080045c1 	.word	0x080045c1
 8004570:	0800450d 	.word	0x0800450d
 8004574:	0800450d 	.word	0x0800450d
 8004578:	08004687 	.word	0x08004687
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	1d1a      	adds	r2, r3, #4
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	602a      	str	r2, [r5, #0]
 8004584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800458c:	2301      	movs	r3, #1
 800458e:	e0a3      	b.n	80046d8 <_printf_i+0x1f4>
 8004590:	6820      	ldr	r0, [r4, #0]
 8004592:	6829      	ldr	r1, [r5, #0]
 8004594:	0606      	lsls	r6, r0, #24
 8004596:	f101 0304 	add.w	r3, r1, #4
 800459a:	d50a      	bpl.n	80045b2 <_printf_i+0xce>
 800459c:	680e      	ldr	r6, [r1, #0]
 800459e:	602b      	str	r3, [r5, #0]
 80045a0:	2e00      	cmp	r6, #0
 80045a2:	da03      	bge.n	80045ac <_printf_i+0xc8>
 80045a4:	232d      	movs	r3, #45	; 0x2d
 80045a6:	4276      	negs	r6, r6
 80045a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ac:	485e      	ldr	r0, [pc, #376]	; (8004728 <_printf_i+0x244>)
 80045ae:	230a      	movs	r3, #10
 80045b0:	e019      	b.n	80045e6 <_printf_i+0x102>
 80045b2:	680e      	ldr	r6, [r1, #0]
 80045b4:	602b      	str	r3, [r5, #0]
 80045b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045ba:	bf18      	it	ne
 80045bc:	b236      	sxthne	r6, r6
 80045be:	e7ef      	b.n	80045a0 <_printf_i+0xbc>
 80045c0:	682b      	ldr	r3, [r5, #0]
 80045c2:	6820      	ldr	r0, [r4, #0]
 80045c4:	1d19      	adds	r1, r3, #4
 80045c6:	6029      	str	r1, [r5, #0]
 80045c8:	0601      	lsls	r1, r0, #24
 80045ca:	d501      	bpl.n	80045d0 <_printf_i+0xec>
 80045cc:	681e      	ldr	r6, [r3, #0]
 80045ce:	e002      	b.n	80045d6 <_printf_i+0xf2>
 80045d0:	0646      	lsls	r6, r0, #25
 80045d2:	d5fb      	bpl.n	80045cc <_printf_i+0xe8>
 80045d4:	881e      	ldrh	r6, [r3, #0]
 80045d6:	4854      	ldr	r0, [pc, #336]	; (8004728 <_printf_i+0x244>)
 80045d8:	2f6f      	cmp	r7, #111	; 0x6f
 80045da:	bf0c      	ite	eq
 80045dc:	2308      	moveq	r3, #8
 80045de:	230a      	movne	r3, #10
 80045e0:	2100      	movs	r1, #0
 80045e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045e6:	6865      	ldr	r5, [r4, #4]
 80045e8:	60a5      	str	r5, [r4, #8]
 80045ea:	2d00      	cmp	r5, #0
 80045ec:	bfa2      	ittt	ge
 80045ee:	6821      	ldrge	r1, [r4, #0]
 80045f0:	f021 0104 	bicge.w	r1, r1, #4
 80045f4:	6021      	strge	r1, [r4, #0]
 80045f6:	b90e      	cbnz	r6, 80045fc <_printf_i+0x118>
 80045f8:	2d00      	cmp	r5, #0
 80045fa:	d04d      	beq.n	8004698 <_printf_i+0x1b4>
 80045fc:	4615      	mov	r5, r2
 80045fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004602:	fb03 6711 	mls	r7, r3, r1, r6
 8004606:	5dc7      	ldrb	r7, [r0, r7]
 8004608:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800460c:	4637      	mov	r7, r6
 800460e:	42bb      	cmp	r3, r7
 8004610:	460e      	mov	r6, r1
 8004612:	d9f4      	bls.n	80045fe <_printf_i+0x11a>
 8004614:	2b08      	cmp	r3, #8
 8004616:	d10b      	bne.n	8004630 <_printf_i+0x14c>
 8004618:	6823      	ldr	r3, [r4, #0]
 800461a:	07de      	lsls	r6, r3, #31
 800461c:	d508      	bpl.n	8004630 <_printf_i+0x14c>
 800461e:	6923      	ldr	r3, [r4, #16]
 8004620:	6861      	ldr	r1, [r4, #4]
 8004622:	4299      	cmp	r1, r3
 8004624:	bfde      	ittt	le
 8004626:	2330      	movle	r3, #48	; 0x30
 8004628:	f805 3c01 	strble.w	r3, [r5, #-1]
 800462c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004630:	1b52      	subs	r2, r2, r5
 8004632:	6122      	str	r2, [r4, #16]
 8004634:	f8cd a000 	str.w	sl, [sp]
 8004638:	464b      	mov	r3, r9
 800463a:	aa03      	add	r2, sp, #12
 800463c:	4621      	mov	r1, r4
 800463e:	4640      	mov	r0, r8
 8004640:	f7ff fee2 	bl	8004408 <_printf_common>
 8004644:	3001      	adds	r0, #1
 8004646:	d14c      	bne.n	80046e2 <_printf_i+0x1fe>
 8004648:	f04f 30ff 	mov.w	r0, #4294967295
 800464c:	b004      	add	sp, #16
 800464e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004652:	4835      	ldr	r0, [pc, #212]	; (8004728 <_printf_i+0x244>)
 8004654:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004658:	6829      	ldr	r1, [r5, #0]
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004660:	6029      	str	r1, [r5, #0]
 8004662:	061d      	lsls	r5, r3, #24
 8004664:	d514      	bpl.n	8004690 <_printf_i+0x1ac>
 8004666:	07df      	lsls	r7, r3, #31
 8004668:	bf44      	itt	mi
 800466a:	f043 0320 	orrmi.w	r3, r3, #32
 800466e:	6023      	strmi	r3, [r4, #0]
 8004670:	b91e      	cbnz	r6, 800467a <_printf_i+0x196>
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	f023 0320 	bic.w	r3, r3, #32
 8004678:	6023      	str	r3, [r4, #0]
 800467a:	2310      	movs	r3, #16
 800467c:	e7b0      	b.n	80045e0 <_printf_i+0xfc>
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	f043 0320 	orr.w	r3, r3, #32
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	2378      	movs	r3, #120	; 0x78
 8004688:	4828      	ldr	r0, [pc, #160]	; (800472c <_printf_i+0x248>)
 800468a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800468e:	e7e3      	b.n	8004658 <_printf_i+0x174>
 8004690:	0659      	lsls	r1, r3, #25
 8004692:	bf48      	it	mi
 8004694:	b2b6      	uxthmi	r6, r6
 8004696:	e7e6      	b.n	8004666 <_printf_i+0x182>
 8004698:	4615      	mov	r5, r2
 800469a:	e7bb      	b.n	8004614 <_printf_i+0x130>
 800469c:	682b      	ldr	r3, [r5, #0]
 800469e:	6826      	ldr	r6, [r4, #0]
 80046a0:	6961      	ldr	r1, [r4, #20]
 80046a2:	1d18      	adds	r0, r3, #4
 80046a4:	6028      	str	r0, [r5, #0]
 80046a6:	0635      	lsls	r5, r6, #24
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	d501      	bpl.n	80046b0 <_printf_i+0x1cc>
 80046ac:	6019      	str	r1, [r3, #0]
 80046ae:	e002      	b.n	80046b6 <_printf_i+0x1d2>
 80046b0:	0670      	lsls	r0, r6, #25
 80046b2:	d5fb      	bpl.n	80046ac <_printf_i+0x1c8>
 80046b4:	8019      	strh	r1, [r3, #0]
 80046b6:	2300      	movs	r3, #0
 80046b8:	6123      	str	r3, [r4, #16]
 80046ba:	4615      	mov	r5, r2
 80046bc:	e7ba      	b.n	8004634 <_printf_i+0x150>
 80046be:	682b      	ldr	r3, [r5, #0]
 80046c0:	1d1a      	adds	r2, r3, #4
 80046c2:	602a      	str	r2, [r5, #0]
 80046c4:	681d      	ldr	r5, [r3, #0]
 80046c6:	6862      	ldr	r2, [r4, #4]
 80046c8:	2100      	movs	r1, #0
 80046ca:	4628      	mov	r0, r5
 80046cc:	f7fb fd90 	bl	80001f0 <memchr>
 80046d0:	b108      	cbz	r0, 80046d6 <_printf_i+0x1f2>
 80046d2:	1b40      	subs	r0, r0, r5
 80046d4:	6060      	str	r0, [r4, #4]
 80046d6:	6863      	ldr	r3, [r4, #4]
 80046d8:	6123      	str	r3, [r4, #16]
 80046da:	2300      	movs	r3, #0
 80046dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046e0:	e7a8      	b.n	8004634 <_printf_i+0x150>
 80046e2:	6923      	ldr	r3, [r4, #16]
 80046e4:	462a      	mov	r2, r5
 80046e6:	4649      	mov	r1, r9
 80046e8:	4640      	mov	r0, r8
 80046ea:	47d0      	blx	sl
 80046ec:	3001      	adds	r0, #1
 80046ee:	d0ab      	beq.n	8004648 <_printf_i+0x164>
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	079b      	lsls	r3, r3, #30
 80046f4:	d413      	bmi.n	800471e <_printf_i+0x23a>
 80046f6:	68e0      	ldr	r0, [r4, #12]
 80046f8:	9b03      	ldr	r3, [sp, #12]
 80046fa:	4298      	cmp	r0, r3
 80046fc:	bfb8      	it	lt
 80046fe:	4618      	movlt	r0, r3
 8004700:	e7a4      	b.n	800464c <_printf_i+0x168>
 8004702:	2301      	movs	r3, #1
 8004704:	4632      	mov	r2, r6
 8004706:	4649      	mov	r1, r9
 8004708:	4640      	mov	r0, r8
 800470a:	47d0      	blx	sl
 800470c:	3001      	adds	r0, #1
 800470e:	d09b      	beq.n	8004648 <_printf_i+0x164>
 8004710:	3501      	adds	r5, #1
 8004712:	68e3      	ldr	r3, [r4, #12]
 8004714:	9903      	ldr	r1, [sp, #12]
 8004716:	1a5b      	subs	r3, r3, r1
 8004718:	42ab      	cmp	r3, r5
 800471a:	dcf2      	bgt.n	8004702 <_printf_i+0x21e>
 800471c:	e7eb      	b.n	80046f6 <_printf_i+0x212>
 800471e:	2500      	movs	r5, #0
 8004720:	f104 0619 	add.w	r6, r4, #25
 8004724:	e7f5      	b.n	8004712 <_printf_i+0x22e>
 8004726:	bf00      	nop
 8004728:	08004a51 	.word	0x08004a51
 800472c:	08004a62 	.word	0x08004a62

08004730 <memcpy>:
 8004730:	440a      	add	r2, r1
 8004732:	4291      	cmp	r1, r2
 8004734:	f100 33ff 	add.w	r3, r0, #4294967295
 8004738:	d100      	bne.n	800473c <memcpy+0xc>
 800473a:	4770      	bx	lr
 800473c:	b510      	push	{r4, lr}
 800473e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004742:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004746:	4291      	cmp	r1, r2
 8004748:	d1f9      	bne.n	800473e <memcpy+0xe>
 800474a:	bd10      	pop	{r4, pc}

0800474c <memmove>:
 800474c:	4288      	cmp	r0, r1
 800474e:	b510      	push	{r4, lr}
 8004750:	eb01 0402 	add.w	r4, r1, r2
 8004754:	d902      	bls.n	800475c <memmove+0x10>
 8004756:	4284      	cmp	r4, r0
 8004758:	4623      	mov	r3, r4
 800475a:	d807      	bhi.n	800476c <memmove+0x20>
 800475c:	1e43      	subs	r3, r0, #1
 800475e:	42a1      	cmp	r1, r4
 8004760:	d008      	beq.n	8004774 <memmove+0x28>
 8004762:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004766:	f803 2f01 	strb.w	r2, [r3, #1]!
 800476a:	e7f8      	b.n	800475e <memmove+0x12>
 800476c:	4402      	add	r2, r0
 800476e:	4601      	mov	r1, r0
 8004770:	428a      	cmp	r2, r1
 8004772:	d100      	bne.n	8004776 <memmove+0x2a>
 8004774:	bd10      	pop	{r4, pc}
 8004776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800477a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800477e:	e7f7      	b.n	8004770 <memmove+0x24>

08004780 <_free_r>:
 8004780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004782:	2900      	cmp	r1, #0
 8004784:	d044      	beq.n	8004810 <_free_r+0x90>
 8004786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800478a:	9001      	str	r0, [sp, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	f1a1 0404 	sub.w	r4, r1, #4
 8004792:	bfb8      	it	lt
 8004794:	18e4      	addlt	r4, r4, r3
 8004796:	f000 f913 	bl	80049c0 <__malloc_lock>
 800479a:	4a1e      	ldr	r2, [pc, #120]	; (8004814 <_free_r+0x94>)
 800479c:	9801      	ldr	r0, [sp, #4]
 800479e:	6813      	ldr	r3, [r2, #0]
 80047a0:	b933      	cbnz	r3, 80047b0 <_free_r+0x30>
 80047a2:	6063      	str	r3, [r4, #4]
 80047a4:	6014      	str	r4, [r2, #0]
 80047a6:	b003      	add	sp, #12
 80047a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047ac:	f000 b90e 	b.w	80049cc <__malloc_unlock>
 80047b0:	42a3      	cmp	r3, r4
 80047b2:	d908      	bls.n	80047c6 <_free_r+0x46>
 80047b4:	6825      	ldr	r5, [r4, #0]
 80047b6:	1961      	adds	r1, r4, r5
 80047b8:	428b      	cmp	r3, r1
 80047ba:	bf01      	itttt	eq
 80047bc:	6819      	ldreq	r1, [r3, #0]
 80047be:	685b      	ldreq	r3, [r3, #4]
 80047c0:	1949      	addeq	r1, r1, r5
 80047c2:	6021      	streq	r1, [r4, #0]
 80047c4:	e7ed      	b.n	80047a2 <_free_r+0x22>
 80047c6:	461a      	mov	r2, r3
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	b10b      	cbz	r3, 80047d0 <_free_r+0x50>
 80047cc:	42a3      	cmp	r3, r4
 80047ce:	d9fa      	bls.n	80047c6 <_free_r+0x46>
 80047d0:	6811      	ldr	r1, [r2, #0]
 80047d2:	1855      	adds	r5, r2, r1
 80047d4:	42a5      	cmp	r5, r4
 80047d6:	d10b      	bne.n	80047f0 <_free_r+0x70>
 80047d8:	6824      	ldr	r4, [r4, #0]
 80047da:	4421      	add	r1, r4
 80047dc:	1854      	adds	r4, r2, r1
 80047de:	42a3      	cmp	r3, r4
 80047e0:	6011      	str	r1, [r2, #0]
 80047e2:	d1e0      	bne.n	80047a6 <_free_r+0x26>
 80047e4:	681c      	ldr	r4, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	6053      	str	r3, [r2, #4]
 80047ea:	4421      	add	r1, r4
 80047ec:	6011      	str	r1, [r2, #0]
 80047ee:	e7da      	b.n	80047a6 <_free_r+0x26>
 80047f0:	d902      	bls.n	80047f8 <_free_r+0x78>
 80047f2:	230c      	movs	r3, #12
 80047f4:	6003      	str	r3, [r0, #0]
 80047f6:	e7d6      	b.n	80047a6 <_free_r+0x26>
 80047f8:	6825      	ldr	r5, [r4, #0]
 80047fa:	1961      	adds	r1, r4, r5
 80047fc:	428b      	cmp	r3, r1
 80047fe:	bf04      	itt	eq
 8004800:	6819      	ldreq	r1, [r3, #0]
 8004802:	685b      	ldreq	r3, [r3, #4]
 8004804:	6063      	str	r3, [r4, #4]
 8004806:	bf04      	itt	eq
 8004808:	1949      	addeq	r1, r1, r5
 800480a:	6021      	streq	r1, [r4, #0]
 800480c:	6054      	str	r4, [r2, #4]
 800480e:	e7ca      	b.n	80047a6 <_free_r+0x26>
 8004810:	b003      	add	sp, #12
 8004812:	bd30      	pop	{r4, r5, pc}
 8004814:	20000138 	.word	0x20000138

08004818 <sbrk_aligned>:
 8004818:	b570      	push	{r4, r5, r6, lr}
 800481a:	4e0e      	ldr	r6, [pc, #56]	; (8004854 <sbrk_aligned+0x3c>)
 800481c:	460c      	mov	r4, r1
 800481e:	6831      	ldr	r1, [r6, #0]
 8004820:	4605      	mov	r5, r0
 8004822:	b911      	cbnz	r1, 800482a <sbrk_aligned+0x12>
 8004824:	f000 f8bc 	bl	80049a0 <_sbrk_r>
 8004828:	6030      	str	r0, [r6, #0]
 800482a:	4621      	mov	r1, r4
 800482c:	4628      	mov	r0, r5
 800482e:	f000 f8b7 	bl	80049a0 <_sbrk_r>
 8004832:	1c43      	adds	r3, r0, #1
 8004834:	d00a      	beq.n	800484c <sbrk_aligned+0x34>
 8004836:	1cc4      	adds	r4, r0, #3
 8004838:	f024 0403 	bic.w	r4, r4, #3
 800483c:	42a0      	cmp	r0, r4
 800483e:	d007      	beq.n	8004850 <sbrk_aligned+0x38>
 8004840:	1a21      	subs	r1, r4, r0
 8004842:	4628      	mov	r0, r5
 8004844:	f000 f8ac 	bl	80049a0 <_sbrk_r>
 8004848:	3001      	adds	r0, #1
 800484a:	d101      	bne.n	8004850 <sbrk_aligned+0x38>
 800484c:	f04f 34ff 	mov.w	r4, #4294967295
 8004850:	4620      	mov	r0, r4
 8004852:	bd70      	pop	{r4, r5, r6, pc}
 8004854:	2000013c 	.word	0x2000013c

08004858 <_malloc_r>:
 8004858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800485c:	1ccd      	adds	r5, r1, #3
 800485e:	f025 0503 	bic.w	r5, r5, #3
 8004862:	3508      	adds	r5, #8
 8004864:	2d0c      	cmp	r5, #12
 8004866:	bf38      	it	cc
 8004868:	250c      	movcc	r5, #12
 800486a:	2d00      	cmp	r5, #0
 800486c:	4607      	mov	r7, r0
 800486e:	db01      	blt.n	8004874 <_malloc_r+0x1c>
 8004870:	42a9      	cmp	r1, r5
 8004872:	d905      	bls.n	8004880 <_malloc_r+0x28>
 8004874:	230c      	movs	r3, #12
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	2600      	movs	r6, #0
 800487a:	4630      	mov	r0, r6
 800487c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004880:	4e2e      	ldr	r6, [pc, #184]	; (800493c <_malloc_r+0xe4>)
 8004882:	f000 f89d 	bl	80049c0 <__malloc_lock>
 8004886:	6833      	ldr	r3, [r6, #0]
 8004888:	461c      	mov	r4, r3
 800488a:	bb34      	cbnz	r4, 80048da <_malloc_r+0x82>
 800488c:	4629      	mov	r1, r5
 800488e:	4638      	mov	r0, r7
 8004890:	f7ff ffc2 	bl	8004818 <sbrk_aligned>
 8004894:	1c43      	adds	r3, r0, #1
 8004896:	4604      	mov	r4, r0
 8004898:	d14d      	bne.n	8004936 <_malloc_r+0xde>
 800489a:	6834      	ldr	r4, [r6, #0]
 800489c:	4626      	mov	r6, r4
 800489e:	2e00      	cmp	r6, #0
 80048a0:	d140      	bne.n	8004924 <_malloc_r+0xcc>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	4631      	mov	r1, r6
 80048a6:	4638      	mov	r0, r7
 80048a8:	eb04 0803 	add.w	r8, r4, r3
 80048ac:	f000 f878 	bl	80049a0 <_sbrk_r>
 80048b0:	4580      	cmp	r8, r0
 80048b2:	d13a      	bne.n	800492a <_malloc_r+0xd2>
 80048b4:	6821      	ldr	r1, [r4, #0]
 80048b6:	3503      	adds	r5, #3
 80048b8:	1a6d      	subs	r5, r5, r1
 80048ba:	f025 0503 	bic.w	r5, r5, #3
 80048be:	3508      	adds	r5, #8
 80048c0:	2d0c      	cmp	r5, #12
 80048c2:	bf38      	it	cc
 80048c4:	250c      	movcc	r5, #12
 80048c6:	4629      	mov	r1, r5
 80048c8:	4638      	mov	r0, r7
 80048ca:	f7ff ffa5 	bl	8004818 <sbrk_aligned>
 80048ce:	3001      	adds	r0, #1
 80048d0:	d02b      	beq.n	800492a <_malloc_r+0xd2>
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	442b      	add	r3, r5
 80048d6:	6023      	str	r3, [r4, #0]
 80048d8:	e00e      	b.n	80048f8 <_malloc_r+0xa0>
 80048da:	6822      	ldr	r2, [r4, #0]
 80048dc:	1b52      	subs	r2, r2, r5
 80048de:	d41e      	bmi.n	800491e <_malloc_r+0xc6>
 80048e0:	2a0b      	cmp	r2, #11
 80048e2:	d916      	bls.n	8004912 <_malloc_r+0xba>
 80048e4:	1961      	adds	r1, r4, r5
 80048e6:	42a3      	cmp	r3, r4
 80048e8:	6025      	str	r5, [r4, #0]
 80048ea:	bf18      	it	ne
 80048ec:	6059      	strne	r1, [r3, #4]
 80048ee:	6863      	ldr	r3, [r4, #4]
 80048f0:	bf08      	it	eq
 80048f2:	6031      	streq	r1, [r6, #0]
 80048f4:	5162      	str	r2, [r4, r5]
 80048f6:	604b      	str	r3, [r1, #4]
 80048f8:	4638      	mov	r0, r7
 80048fa:	f104 060b 	add.w	r6, r4, #11
 80048fe:	f000 f865 	bl	80049cc <__malloc_unlock>
 8004902:	f026 0607 	bic.w	r6, r6, #7
 8004906:	1d23      	adds	r3, r4, #4
 8004908:	1af2      	subs	r2, r6, r3
 800490a:	d0b6      	beq.n	800487a <_malloc_r+0x22>
 800490c:	1b9b      	subs	r3, r3, r6
 800490e:	50a3      	str	r3, [r4, r2]
 8004910:	e7b3      	b.n	800487a <_malloc_r+0x22>
 8004912:	6862      	ldr	r2, [r4, #4]
 8004914:	42a3      	cmp	r3, r4
 8004916:	bf0c      	ite	eq
 8004918:	6032      	streq	r2, [r6, #0]
 800491a:	605a      	strne	r2, [r3, #4]
 800491c:	e7ec      	b.n	80048f8 <_malloc_r+0xa0>
 800491e:	4623      	mov	r3, r4
 8004920:	6864      	ldr	r4, [r4, #4]
 8004922:	e7b2      	b.n	800488a <_malloc_r+0x32>
 8004924:	4634      	mov	r4, r6
 8004926:	6876      	ldr	r6, [r6, #4]
 8004928:	e7b9      	b.n	800489e <_malloc_r+0x46>
 800492a:	230c      	movs	r3, #12
 800492c:	603b      	str	r3, [r7, #0]
 800492e:	4638      	mov	r0, r7
 8004930:	f000 f84c 	bl	80049cc <__malloc_unlock>
 8004934:	e7a1      	b.n	800487a <_malloc_r+0x22>
 8004936:	6025      	str	r5, [r4, #0]
 8004938:	e7de      	b.n	80048f8 <_malloc_r+0xa0>
 800493a:	bf00      	nop
 800493c:	20000138 	.word	0x20000138

08004940 <_realloc_r>:
 8004940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004944:	4680      	mov	r8, r0
 8004946:	4614      	mov	r4, r2
 8004948:	460e      	mov	r6, r1
 800494a:	b921      	cbnz	r1, 8004956 <_realloc_r+0x16>
 800494c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004950:	4611      	mov	r1, r2
 8004952:	f7ff bf81 	b.w	8004858 <_malloc_r>
 8004956:	b92a      	cbnz	r2, 8004964 <_realloc_r+0x24>
 8004958:	f7ff ff12 	bl	8004780 <_free_r>
 800495c:	4625      	mov	r5, r4
 800495e:	4628      	mov	r0, r5
 8004960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004964:	f000 f838 	bl	80049d8 <_malloc_usable_size_r>
 8004968:	4284      	cmp	r4, r0
 800496a:	4607      	mov	r7, r0
 800496c:	d802      	bhi.n	8004974 <_realloc_r+0x34>
 800496e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004972:	d812      	bhi.n	800499a <_realloc_r+0x5a>
 8004974:	4621      	mov	r1, r4
 8004976:	4640      	mov	r0, r8
 8004978:	f7ff ff6e 	bl	8004858 <_malloc_r>
 800497c:	4605      	mov	r5, r0
 800497e:	2800      	cmp	r0, #0
 8004980:	d0ed      	beq.n	800495e <_realloc_r+0x1e>
 8004982:	42bc      	cmp	r4, r7
 8004984:	4622      	mov	r2, r4
 8004986:	4631      	mov	r1, r6
 8004988:	bf28      	it	cs
 800498a:	463a      	movcs	r2, r7
 800498c:	f7ff fed0 	bl	8004730 <memcpy>
 8004990:	4631      	mov	r1, r6
 8004992:	4640      	mov	r0, r8
 8004994:	f7ff fef4 	bl	8004780 <_free_r>
 8004998:	e7e1      	b.n	800495e <_realloc_r+0x1e>
 800499a:	4635      	mov	r5, r6
 800499c:	e7df      	b.n	800495e <_realloc_r+0x1e>
	...

080049a0 <_sbrk_r>:
 80049a0:	b538      	push	{r3, r4, r5, lr}
 80049a2:	4d06      	ldr	r5, [pc, #24]	; (80049bc <_sbrk_r+0x1c>)
 80049a4:	2300      	movs	r3, #0
 80049a6:	4604      	mov	r4, r0
 80049a8:	4608      	mov	r0, r1
 80049aa:	602b      	str	r3, [r5, #0]
 80049ac:	f7fb ff96 	bl	80008dc <_sbrk>
 80049b0:	1c43      	adds	r3, r0, #1
 80049b2:	d102      	bne.n	80049ba <_sbrk_r+0x1a>
 80049b4:	682b      	ldr	r3, [r5, #0]
 80049b6:	b103      	cbz	r3, 80049ba <_sbrk_r+0x1a>
 80049b8:	6023      	str	r3, [r4, #0]
 80049ba:	bd38      	pop	{r3, r4, r5, pc}
 80049bc:	20000140 	.word	0x20000140

080049c0 <__malloc_lock>:
 80049c0:	4801      	ldr	r0, [pc, #4]	; (80049c8 <__malloc_lock+0x8>)
 80049c2:	f000 b811 	b.w	80049e8 <__retarget_lock_acquire_recursive>
 80049c6:	bf00      	nop
 80049c8:	20000144 	.word	0x20000144

080049cc <__malloc_unlock>:
 80049cc:	4801      	ldr	r0, [pc, #4]	; (80049d4 <__malloc_unlock+0x8>)
 80049ce:	f000 b80c 	b.w	80049ea <__retarget_lock_release_recursive>
 80049d2:	bf00      	nop
 80049d4:	20000144 	.word	0x20000144

080049d8 <_malloc_usable_size_r>:
 80049d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049dc:	1f18      	subs	r0, r3, #4
 80049de:	2b00      	cmp	r3, #0
 80049e0:	bfbc      	itt	lt
 80049e2:	580b      	ldrlt	r3, [r1, r0]
 80049e4:	18c0      	addlt	r0, r0, r3
 80049e6:	4770      	bx	lr

080049e8 <__retarget_lock_acquire_recursive>:
 80049e8:	4770      	bx	lr

080049ea <__retarget_lock_release_recursive>:
 80049ea:	4770      	bx	lr

080049ec <_init>:
 80049ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ee:	bf00      	nop
 80049f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f2:	bc08      	pop	{r3}
 80049f4:	469e      	mov	lr, r3
 80049f6:	4770      	bx	lr

080049f8 <_fini>:
 80049f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fa:	bf00      	nop
 80049fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fe:	bc08      	pop	{r3}
 8004a00:	469e      	mov	lr, r3
 8004a02:	4770      	bx	lr

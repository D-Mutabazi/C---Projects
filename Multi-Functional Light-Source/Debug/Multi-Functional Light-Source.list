
Multi-Functional Light-Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ea8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08008040  08008040  00018040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008308  08008308  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  08008308  08008308  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008308  08008308  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008308  08008308  00018308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800830c  0800830c  0001830c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08008310  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d8  2**0
                  CONTENTS
 10 .bss          00002260  200000d8  200000d8  000200d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002338  20002338  000200d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013556  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002550  00000000  00000000  0003365e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  00035bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ed0  00000000  00000000  00036b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d17  00000000  00000000  00037a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014483  00000000  00000000  0005973f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3b52  00000000  00000000  0006dbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141714  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004418  00000000  00000000  00141764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000d8 	.word	0x200000d8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008028 	.word	0x08008028

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000dc 	.word	0x200000dc
 80001d4:	08008028 	.word	0x08008028

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_dmul>:
 80001ec:	b570      	push	{r4, r5, r6, lr}
 80001ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fa:	bf1d      	ittte	ne
 80001fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000200:	ea94 0f0c 	teqne	r4, ip
 8000204:	ea95 0f0c 	teqne	r5, ip
 8000208:	f000 f8de 	bleq	80003c8 <__aeabi_dmul+0x1dc>
 800020c:	442c      	add	r4, r5
 800020e:	ea81 0603 	eor.w	r6, r1, r3
 8000212:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000216:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021e:	bf18      	it	ne
 8000220:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800022c:	d038      	beq.n	80002a0 <__aeabi_dmul+0xb4>
 800022e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000232:	f04f 0500 	mov.w	r5, #0
 8000236:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000242:	f04f 0600 	mov.w	r6, #0
 8000246:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024a:	f09c 0f00 	teq	ip, #0
 800024e:	bf18      	it	ne
 8000250:	f04e 0e01 	orrne.w	lr, lr, #1
 8000254:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000258:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800025c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000260:	d204      	bcs.n	800026c <__aeabi_dmul+0x80>
 8000262:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000266:	416d      	adcs	r5, r5
 8000268:	eb46 0606 	adc.w	r6, r6, r6
 800026c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000270:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000274:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000278:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800027c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000280:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000284:	bf88      	it	hi
 8000286:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800028a:	d81e      	bhi.n	80002ca <__aeabi_dmul+0xde>
 800028c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	bd70      	pop	{r4, r5, r6, pc}
 80002a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a4:	ea46 0101 	orr.w	r1, r6, r1
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	ea81 0103 	eor.w	r1, r1, r3
 80002b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b4:	bfc2      	ittt	gt
 80002b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002be:	bd70      	popgt	{r4, r5, r6, pc}
 80002c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c4:	f04f 0e00 	mov.w	lr, #0
 80002c8:	3c01      	subs	r4, #1
 80002ca:	f300 80ab 	bgt.w	8000424 <__aeabi_dmul+0x238>
 80002ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002d2:	bfde      	ittt	le
 80002d4:	2000      	movle	r0, #0
 80002d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002da:	bd70      	pople	{r4, r5, r6, pc}
 80002dc:	f1c4 0400 	rsb	r4, r4, #0
 80002e0:	3c20      	subs	r4, #32
 80002e2:	da35      	bge.n	8000350 <__aeabi_dmul+0x164>
 80002e4:	340c      	adds	r4, #12
 80002e6:	dc1b      	bgt.n	8000320 <__aeabi_dmul+0x134>
 80002e8:	f104 0414 	add.w	r4, r4, #20
 80002ec:	f1c4 0520 	rsb	r5, r4, #32
 80002f0:	fa00 f305 	lsl.w	r3, r0, r5
 80002f4:	fa20 f004 	lsr.w	r0, r0, r4
 80002f8:	fa01 f205 	lsl.w	r2, r1, r5
 80002fc:	ea40 0002 	orr.w	r0, r0, r2
 8000300:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000304:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000308:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800030c:	fa21 f604 	lsr.w	r6, r1, r4
 8000310:	eb42 0106 	adc.w	r1, r2, r6
 8000314:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000318:	bf08      	it	eq
 800031a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f1c4 040c 	rsb	r4, r4, #12
 8000324:	f1c4 0520 	rsb	r5, r4, #32
 8000328:	fa00 f304 	lsl.w	r3, r0, r4
 800032c:	fa20 f005 	lsr.w	r0, r0, r5
 8000330:	fa01 f204 	lsl.w	r2, r1, r4
 8000334:	ea40 0002 	orr.w	r0, r0, r2
 8000338:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800033c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000348:	bf08      	it	eq
 800034a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f205 	lsl.w	r2, r0, r5
 8000358:	ea4e 0e02 	orr.w	lr, lr, r2
 800035c:	fa20 f304 	lsr.w	r3, r0, r4
 8000360:	fa01 f205 	lsl.w	r2, r1, r5
 8000364:	ea43 0302 	orr.w	r3, r3, r2
 8000368:	fa21 f004 	lsr.w	r0, r1, r4
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000370:	fa21 f204 	lsr.w	r2, r1, r4
 8000374:	ea20 0002 	bic.w	r0, r0, r2
 8000378:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800037c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000380:	bf08      	it	eq
 8000382:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f094 0f00 	teq	r4, #0
 800038c:	d10f      	bne.n	80003ae <__aeabi_dmul+0x1c2>
 800038e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000392:	0040      	lsls	r0, r0, #1
 8000394:	eb41 0101 	adc.w	r1, r1, r1
 8000398:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800039c:	bf08      	it	eq
 800039e:	3c01      	subeq	r4, #1
 80003a0:	d0f7      	beq.n	8000392 <__aeabi_dmul+0x1a6>
 80003a2:	ea41 0106 	orr.w	r1, r1, r6
 80003a6:	f095 0f00 	teq	r5, #0
 80003aa:	bf18      	it	ne
 80003ac:	4770      	bxne	lr
 80003ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	eb43 0303 	adc.w	r3, r3, r3
 80003b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003bc:	bf08      	it	eq
 80003be:	3d01      	subeq	r5, #1
 80003c0:	d0f7      	beq.n	80003b2 <__aeabi_dmul+0x1c6>
 80003c2:	ea43 0306 	orr.w	r3, r3, r6
 80003c6:	4770      	bx	lr
 80003c8:	ea94 0f0c 	teq	r4, ip
 80003cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d0:	bf18      	it	ne
 80003d2:	ea95 0f0c 	teqne	r5, ip
 80003d6:	d00c      	beq.n	80003f2 <__aeabi_dmul+0x206>
 80003d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003dc:	bf18      	it	ne
 80003de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e2:	d1d1      	bne.n	8000388 <__aeabi_dmul+0x19c>
 80003e4:	ea81 0103 	eor.w	r1, r1, r3
 80003e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ec:	f04f 0000 	mov.w	r0, #0
 80003f0:	bd70      	pop	{r4, r5, r6, pc}
 80003f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f6:	bf06      	itte	eq
 80003f8:	4610      	moveq	r0, r2
 80003fa:	4619      	moveq	r1, r3
 80003fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000400:	d019      	beq.n	8000436 <__aeabi_dmul+0x24a>
 8000402:	ea94 0f0c 	teq	r4, ip
 8000406:	d102      	bne.n	800040e <__aeabi_dmul+0x222>
 8000408:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800040c:	d113      	bne.n	8000436 <__aeabi_dmul+0x24a>
 800040e:	ea95 0f0c 	teq	r5, ip
 8000412:	d105      	bne.n	8000420 <__aeabi_dmul+0x234>
 8000414:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000418:	bf1c      	itt	ne
 800041a:	4610      	movne	r0, r2
 800041c:	4619      	movne	r1, r3
 800041e:	d10a      	bne.n	8000436 <__aeabi_dmul+0x24a>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800043a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043e:	bd70      	pop	{r4, r5, r6, pc}

08000440 <__aeabi_drsub>:
 8000440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000444:	e002      	b.n	800044c <__adddf3>
 8000446:	bf00      	nop

08000448 <__aeabi_dsub>:
 8000448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800044c <__adddf3>:
 800044c:	b530      	push	{r4, r5, lr}
 800044e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000452:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	bf1f      	itttt	ne
 8000462:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000466:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000472:	f000 80e2 	beq.w	800063a <__adddf3+0x1ee>
 8000476:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047e:	bfb8      	it	lt
 8000480:	426d      	neglt	r5, r5
 8000482:	dd0c      	ble.n	800049e <__adddf3+0x52>
 8000484:	442c      	add	r4, r5
 8000486:	ea80 0202 	eor.w	r2, r0, r2
 800048a:	ea81 0303 	eor.w	r3, r1, r3
 800048e:	ea82 0000 	eor.w	r0, r2, r0
 8000492:	ea83 0101 	eor.w	r1, r3, r1
 8000496:	ea80 0202 	eor.w	r2, r0, r2
 800049a:	ea81 0303 	eor.w	r3, r1, r3
 800049e:	2d36      	cmp	r5, #54	; 0x36
 80004a0:	bf88      	it	hi
 80004a2:	bd30      	pophi	{r4, r5, pc}
 80004a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x70>
 80004b6:	4240      	negs	r0, r0
 80004b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x84>
 80004ca:	4252      	negs	r2, r2
 80004cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d0:	ea94 0f05 	teq	r4, r5
 80004d4:	f000 80a7 	beq.w	8000626 <__adddf3+0x1da>
 80004d8:	f1a4 0401 	sub.w	r4, r4, #1
 80004dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e0:	db0d      	blt.n	80004fe <__adddf3+0xb2>
 80004e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e6:	fa22 f205 	lsr.w	r2, r2, r5
 80004ea:	1880      	adds	r0, r0, r2
 80004ec:	f141 0100 	adc.w	r1, r1, #0
 80004f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f4:	1880      	adds	r0, r0, r2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	4159      	adcs	r1, r3
 80004fc:	e00e      	b.n	800051c <__adddf3+0xd0>
 80004fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000502:	f10e 0e20 	add.w	lr, lr, #32
 8000506:	2a01      	cmp	r2, #1
 8000508:	fa03 fc0e 	lsl.w	ip, r3, lr
 800050c:	bf28      	it	cs
 800050e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	18c0      	adds	r0, r0, r3
 8000518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	d507      	bpl.n	8000532 <__adddf3+0xe6>
 8000522:	f04f 0e00 	mov.w	lr, #0
 8000526:	f1dc 0c00 	rsbs	ip, ip, #0
 800052a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000536:	d31b      	bcc.n	8000570 <__adddf3+0x124>
 8000538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800053c:	d30c      	bcc.n	8000558 <__adddf3+0x10c>
 800053e:	0849      	lsrs	r1, r1, #1
 8000540:	ea5f 0030 	movs.w	r0, r0, rrx
 8000544:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000548:	f104 0401 	add.w	r4, r4, #1
 800054c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000554:	f080 809a 	bcs.w	800068c <__adddf3+0x240>
 8000558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800055c:	bf08      	it	eq
 800055e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000562:	f150 0000 	adcs.w	r0, r0, #0
 8000566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056a:	ea41 0105 	orr.w	r1, r1, r5
 800056e:	bd30      	pop	{r4, r5, pc}
 8000570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000574:	4140      	adcs	r0, r0
 8000576:	eb41 0101 	adc.w	r1, r1, r1
 800057a:	3c01      	subs	r4, #1
 800057c:	bf28      	it	cs
 800057e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000582:	d2e9      	bcs.n	8000558 <__adddf3+0x10c>
 8000584:	f091 0f00 	teq	r1, #0
 8000588:	bf04      	itt	eq
 800058a:	4601      	moveq	r1, r0
 800058c:	2000      	moveq	r0, #0
 800058e:	fab1 f381 	clz	r3, r1
 8000592:	bf08      	it	eq
 8000594:	3320      	addeq	r3, #32
 8000596:	f1a3 030b 	sub.w	r3, r3, #11
 800059a:	f1b3 0220 	subs.w	r2, r3, #32
 800059e:	da0c      	bge.n	80005ba <__adddf3+0x16e>
 80005a0:	320c      	adds	r2, #12
 80005a2:	dd08      	ble.n	80005b6 <__adddf3+0x16a>
 80005a4:	f102 0c14 	add.w	ip, r2, #20
 80005a8:	f1c2 020c 	rsb	r2, r2, #12
 80005ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b0:	fa21 f102 	lsr.w	r1, r1, r2
 80005b4:	e00c      	b.n	80005d0 <__adddf3+0x184>
 80005b6:	f102 0214 	add.w	r2, r2, #20
 80005ba:	bfd8      	it	le
 80005bc:	f1c2 0c20 	rsble	ip, r2, #32
 80005c0:	fa01 f102 	lsl.w	r1, r1, r2
 80005c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c8:	bfdc      	itt	le
 80005ca:	ea41 010c 	orrle.w	r1, r1, ip
 80005ce:	4090      	lslle	r0, r2
 80005d0:	1ae4      	subs	r4, r4, r3
 80005d2:	bfa2      	ittt	ge
 80005d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d8:	4329      	orrge	r1, r5
 80005da:	bd30      	popge	{r4, r5, pc}
 80005dc:	ea6f 0404 	mvn.w	r4, r4
 80005e0:	3c1f      	subs	r4, #31
 80005e2:	da1c      	bge.n	800061e <__adddf3+0x1d2>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc0e      	bgt.n	8000606 <__adddf3+0x1ba>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0220 	rsb	r2, r4, #32
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f302 	lsl.w	r3, r1, r2
 80005f8:	ea40 0003 	orr.w	r0, r0, r3
 80005fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000600:	ea45 0103 	orr.w	r1, r5, r3
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	f1c4 040c 	rsb	r4, r4, #12
 800060a:	f1c4 0220 	rsb	r2, r4, #32
 800060e:	fa20 f002 	lsr.w	r0, r0, r2
 8000612:	fa01 f304 	lsl.w	r3, r1, r4
 8000616:	ea40 0003 	orr.w	r0, r0, r3
 800061a:	4629      	mov	r1, r5
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	fa21 f004 	lsr.w	r0, r1, r4
 8000622:	4629      	mov	r1, r5
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	f094 0f00 	teq	r4, #0
 800062a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062e:	bf06      	itte	eq
 8000630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000634:	3401      	addeq	r4, #1
 8000636:	3d01      	subne	r5, #1
 8000638:	e74e      	b.n	80004d8 <__adddf3+0x8c>
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf18      	it	ne
 8000640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000644:	d029      	beq.n	800069a <__adddf3+0x24e>
 8000646:	ea94 0f05 	teq	r4, r5
 800064a:	bf08      	it	eq
 800064c:	ea90 0f02 	teqeq	r0, r2
 8000650:	d005      	beq.n	800065e <__adddf3+0x212>
 8000652:	ea54 0c00 	orrs.w	ip, r4, r0
 8000656:	bf04      	itt	eq
 8000658:	4619      	moveq	r1, r3
 800065a:	4610      	moveq	r0, r2
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	ea91 0f03 	teq	r1, r3
 8000662:	bf1e      	ittt	ne
 8000664:	2100      	movne	r1, #0
 8000666:	2000      	movne	r0, #0
 8000668:	bd30      	popne	{r4, r5, pc}
 800066a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066e:	d105      	bne.n	800067c <__adddf3+0x230>
 8000670:	0040      	lsls	r0, r0, #1
 8000672:	4149      	adcs	r1, r1
 8000674:	bf28      	it	cs
 8000676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800067a:	bd30      	pop	{r4, r5, pc}
 800067c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000680:	bf3c      	itt	cc
 8000682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000686:	bd30      	popcc	{r4, r5, pc}
 8000688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800068c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000694:	f04f 0000 	mov.w	r0, #0
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069e:	bf1a      	itte	ne
 80006a0:	4619      	movne	r1, r3
 80006a2:	4610      	movne	r0, r2
 80006a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a8:	bf1c      	itt	ne
 80006aa:	460b      	movne	r3, r1
 80006ac:	4602      	movne	r2, r0
 80006ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b2:	bf06      	itte	eq
 80006b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b8:	ea91 0f03 	teqeq	r1, r3
 80006bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop

080006c4 <__aeabi_ui2d>:
 80006c4:	f090 0f00 	teq	r0, #0
 80006c8:	bf04      	itt	eq
 80006ca:	2100      	moveq	r1, #0
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d8:	f04f 0500 	mov.w	r5, #0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e750      	b.n	8000584 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_i2d>:
 80006e4:	f090 0f00 	teq	r0, #0
 80006e8:	bf04      	itt	eq
 80006ea:	2100      	moveq	r1, #0
 80006ec:	4770      	bxeq	lr
 80006ee:	b530      	push	{r4, r5, lr}
 80006f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006fc:	bf48      	it	mi
 80006fe:	4240      	negmi	r0, r0
 8000700:	f04f 0100 	mov.w	r1, #0
 8000704:	e73e      	b.n	8000584 <__adddf3+0x138>
 8000706:	bf00      	nop

08000708 <__aeabi_f2d>:
 8000708:	0042      	lsls	r2, r0, #1
 800070a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000712:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000716:	bf1f      	itttt	ne
 8000718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800071c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000724:	4770      	bxne	lr
 8000726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800072a:	bf08      	it	eq
 800072c:	4770      	bxeq	lr
 800072e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000732:	bf04      	itt	eq
 8000734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	e71c      	b.n	8000584 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_ul2d>:
 800074c:	ea50 0201 	orrs.w	r2, r0, r1
 8000750:	bf08      	it	eq
 8000752:	4770      	bxeq	lr
 8000754:	b530      	push	{r4, r5, lr}
 8000756:	f04f 0500 	mov.w	r5, #0
 800075a:	e00a      	b.n	8000772 <__aeabi_l2d+0x16>

0800075c <__aeabi_l2d>:
 800075c:	ea50 0201 	orrs.w	r2, r0, r1
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	b530      	push	{r4, r5, lr}
 8000766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800076a:	d502      	bpl.n	8000772 <__aeabi_l2d+0x16>
 800076c:	4240      	negs	r0, r0
 800076e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000772:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000776:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077e:	f43f aed8 	beq.w	8000532 <__adddf3+0xe6>
 8000782:	f04f 0203 	mov.w	r2, #3
 8000786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078a:	bf18      	it	ne
 800078c:	3203      	addne	r2, #3
 800078e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000792:	bf18      	it	ne
 8000794:	3203      	addne	r2, #3
 8000796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079a:	f1c2 0320 	rsb	r3, r2, #32
 800079e:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a2:	fa20 f002 	lsr.w	r0, r0, r2
 80007a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007aa:	ea40 000e 	orr.w	r0, r0, lr
 80007ae:	fa21 f102 	lsr.w	r1, r1, r2
 80007b2:	4414      	add	r4, r2
 80007b4:	e6bd      	b.n	8000532 <__adddf3+0xe6>
 80007b6:	bf00      	nop

080007b8 <__aeabi_d2uiz>:
 80007b8:	004a      	lsls	r2, r1, #1
 80007ba:	d211      	bcs.n	80007e0 <__aeabi_d2uiz+0x28>
 80007bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007c0:	d211      	bcs.n	80007e6 <__aeabi_d2uiz+0x2e>
 80007c2:	d50d      	bpl.n	80007e0 <__aeabi_d2uiz+0x28>
 80007c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007cc:	d40e      	bmi.n	80007ec <__aeabi_d2uiz+0x34>
 80007ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007da:	fa23 f002 	lsr.w	r0, r3, r2
 80007de:	4770      	bx	lr
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	4770      	bx	lr
 80007e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ea:	d102      	bne.n	80007f2 <__aeabi_d2uiz+0x3a>
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	4770      	bx	lr
 80007f2:	f04f 0000 	mov.w	r0, #0
 80007f6:	4770      	bx	lr

080007f8 <HAL_UART_RxCpltCallback>:
char STATE[3] = {' '} ;
char PARAM1[3] = {' '} ;
char PARAM2[3] ={' '};
char Custom_Morse_Msg[3] = {' '};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]

	// store recieved characters one at at time
	set_or_ret_sys_state[num_characters] = recvd_char[0] ;
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <HAL_UART_RxCpltCallback+0x80>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b1d      	ldr	r3, [pc, #116]	; (800087c <HAL_UART_RxCpltCallback+0x84>)
 8000808:	7819      	ldrb	r1, [r3, #0]
 800080a:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <HAL_UART_RxCpltCallback+0x88>)
 800080c:	5499      	strb	r1, [r3, r2]

	num_characters++ ;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <HAL_UART_RxCpltCallback+0x80>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <HAL_UART_RxCpltCallback+0x80>)
 8000818:	701a      	strb	r2, [r3, #0]

	if(recvd_char[0] == '\n'){
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <HAL_UART_RxCpltCallback+0x84>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b0a      	cmp	r3, #10
 8000820:	d121      	bne.n	8000866 <HAL_UART_RxCpltCallback+0x6e>
		if(num_characters == 19){
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <HAL_UART_RxCpltCallback+0x80>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b13      	cmp	r3, #19
 8000828:	d108      	bne.n	800083c <HAL_UART_RxCpltCallback+0x44>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"set mode\n",9 ) ;
 800082a:	2209      	movs	r2, #9
 800082c:	4915      	ldr	r1, [pc, #84]	; (8000884 <HAL_UART_RxCpltCallback+0x8c>)
 800082e:	4816      	ldr	r0, [pc, #88]	; (8000888 <HAL_UART_RxCpltCallback+0x90>)
 8000830:	f006 f832 	bl	8006898 <HAL_UART_Transmit_IT>
			UART_set_syst_state = 1 ;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_UART_RxCpltCallback+0x94>)
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]
 800083a:	e011      	b.n	8000860 <HAL_UART_RxCpltCallback+0x68>
		}else if( num_characters == 7){
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <HAL_UART_RxCpltCallback+0x80>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b07      	cmp	r3, #7
 8000842:	d108      	bne.n	8000856 <HAL_UART_RxCpltCallback+0x5e>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"request mode\n", 13) ;
 8000844:	220d      	movs	r2, #13
 8000846:	4912      	ldr	r1, [pc, #72]	; (8000890 <HAL_UART_RxCpltCallback+0x98>)
 8000848:	480f      	ldr	r0, [pc, #60]	; (8000888 <HAL_UART_RxCpltCallback+0x90>)
 800084a:	f006 f825 	bl	8006898 <HAL_UART_Transmit_IT>
			UART_ret_sys_state = 1 ;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_UART_RxCpltCallback+0x9c>)
 8000850:	2201      	movs	r2, #1
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	e004      	b.n	8000860 <HAL_UART_RxCpltCallback+0x68>
		}else{
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Incorrect status request size\n", 30) ;
 8000856:	221e      	movs	r2, #30
 8000858:	490f      	ldr	r1, [pc, #60]	; (8000898 <HAL_UART_RxCpltCallback+0xa0>)
 800085a:	480b      	ldr	r0, [pc, #44]	; (8000888 <HAL_UART_RxCpltCallback+0x90>)
 800085c:	f006 f81c 	bl	8006898 <HAL_UART_Transmit_IT>
		}

		num_characters =  0;
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HAL_UART_RxCpltCallback+0x80>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]

	}


	// recieve character - re-prime receiver to receive single characters at a time
	HAL_UART_Receive_IT(&huart2, (uint8_t*)recvd_char, 1);
 8000866:	2201      	movs	r2, #1
 8000868:	4904      	ldr	r1, [pc, #16]	; (800087c <HAL_UART_RxCpltCallback+0x84>)
 800086a:	4807      	ldr	r0, [pc, #28]	; (8000888 <HAL_UART_RxCpltCallback+0x90>)
 800086c:	f006 f872 	bl	8006954 <HAL_UART_Receive_IT>


}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20002321 	.word	0x20002321
 800087c:	20002320 	.word	0x20002320
 8000880:	20000044 	.word	0x20000044
 8000884:	08008170 	.word	0x08008170
 8000888:	2000026c 	.word	0x2000026c
 800088c:	20002322 	.word	0x20002322
 8000890:	0800817c 	.word	0x0800817c
 8000894:	20002323 	.word	0x20002323
 8000898:	0800818c 	.word	0x0800818c
 800089c:	00000000 	.word	0x00000000

080008a0 <adc_dma_val_processing>:

/**
 * scale up transmit ADC values
 */

void adc_dma_val_processing(){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

	if(adc_conv_complete == 1){
 80008a6:	4b3c      	ldr	r3, [pc, #240]	; (8000998 <adc_dma_val_processing+0xf8>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d142      	bne.n	8000934 <adc_dma_val_processing+0x94>

		adc_conv_complete =0  ;
 80008ae:	4b3a      	ldr	r3, [pc, #232]	; (8000998 <adc_dma_val_processing+0xf8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
		sum = 0 ;
 80008b4:	4b39      	ldr	r3, [pc, #228]	; (800099c <adc_dma_val_processing+0xfc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
		for(int i = 0 ; i < adc_buf_len ; i++){
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	e00c      	b.n	80008da <adc_dma_val_processing+0x3a>
			sum += adc_buf[i] ;
 80008c0:	4a37      	ldr	r2, [pc, #220]	; (80009a0 <adc_dma_val_processing+0x100>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b34      	ldr	r3, [pc, #208]	; (800099c <adc_dma_val_processing+0xfc>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	4a32      	ldr	r2, [pc, #200]	; (800099c <adc_dma_val_processing+0xfc>)
 80008d2:	6013      	str	r3, [r2, #0]
		for(int i = 0 ; i < adc_buf_len ; i++){
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3301      	adds	r3, #1
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008e0:	dbee      	blt.n	80008c0 <adc_dma_val_processing+0x20>
		}
		raw_adc_dma_val =(uint16_t)(sum/adc_buf_len) ;
 80008e2:	4b2e      	ldr	r3, [pc, #184]	; (800099c <adc_dma_val_processing+0xfc>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	da01      	bge.n	80008ee <adc_dma_val_processing+0x4e>
 80008ea:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80008ee:	131b      	asrs	r3, r3, #12
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <adc_dma_val_processing+0x104>)
 80008f4:	801a      	strh	r2, [r3, #0]

		scaled_adc_val = (uint16_t)raw_adc_dma_val*adc_scale_up ; //adc scaled to max =4095
 80008f6:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <adc_dma_val_processing+0x104>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fef2 	bl	80006e4 <__aeabi_i2d>
 8000900:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <adc_dma_val_processing+0x108>)
 8000902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000906:	f7ff fc71 	bl	80001ec <__aeabi_dmul>
 800090a:	4602      	mov	r2, r0
 800090c:	460b      	mov	r3, r1
 800090e:	4610      	mov	r0, r2
 8000910:	4619      	mov	r1, r3
 8000912:	f7ff ff51 	bl	80007b8 <__aeabi_d2uiz>
 8000916:	4603      	mov	r3, r0
 8000918:	b29a      	uxth	r2, r3
 800091a:	4b24      	ldr	r3, [pc, #144]	; (80009ac <adc_dma_val_processing+0x10c>)
 800091c:	801a      	strh	r2, [r3, #0]

		//capture previous adc cal
		if(adc_val_capture == 1){
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <adc_dma_val_processing+0x110>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d106      	bne.n	8000934 <adc_dma_val_processing+0x94>
			adc_val_snapshot = scaled_adc_val ;
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <adc_dma_val_processing+0x10c>)
 8000928:	881a      	ldrh	r2, [r3, #0]
 800092a:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <adc_dma_val_processing+0x114>)
 800092c:	801a      	strh	r2, [r3, #0]
			adc_val_capture = 0 ;
 800092e:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <adc_dma_val_processing+0x110>)
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
		}
	}

	// if ADC movement significant update LED intensity
	if(abs(scaled_adc_val - adc_val_snapshot) >15){
 8000934:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <adc_dma_val_processing+0x10c>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <adc_dma_val_processing+0x114>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	bfb8      	it	lt
 8000944:	425b      	neglt	r3, r3
 8000946:	2b0f      	cmp	r3, #15
 8000948:	dd02      	ble.n	8000950 <adc_dma_val_processing+0xb0>
	  update_led_via_ADC = 1 ;
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <adc_dma_val_processing+0x118>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
	}

//	 WHITE LED intensity
	LED_intensity =(float)(scaled_adc_val)*(512.0/4095.0)  ;
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <adc_dma_val_processing+0x10c>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	ee07 3a90 	vmov	s15, r3
 8000958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800095c:	ee17 0a90 	vmov	r0, s15
 8000960:	f7ff fed2 	bl	8000708 <__aeabi_f2d>
 8000964:	a30a      	add	r3, pc, #40	; (adr r3, 8000990 <adc_dma_val_processing+0xf0>)
 8000966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800096a:	f7ff fc3f 	bl	80001ec <__aeabi_dmul>
 800096e:	4602      	mov	r2, r0
 8000970:	460b      	mov	r3, r1
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	f7ff ff1f 	bl	80007b8 <__aeabi_d2uiz>
 800097a:	4603      	mov	r3, r0
 800097c:	b29a      	uxth	r2, r3
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <adc_dma_val_processing+0x11c>)
 8000980:	801a      	strh	r2, [r3, #0]


}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	f3af 8000 	nop.w
 8000990:	10010010 	.word	0x10010010
 8000994:	3fc00100 	.word	0x3fc00100
 8000998:	20002306 	.word	0x20002306
 800099c:	20002300 	.word	0x20002300
 80009a0:	200002fc 	.word	0x200002fc
 80009a4:	200022fc 	.word	0x200022fc
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20002308 	.word	0x20002308
 80009b0:	20000002 	.word	0x20000002
 80009b4:	20002304 	.word	0x20002304
 80009b8:	2000230a 	.word	0x2000230a
 80009bc:	20000010 	.word	0x20000010

080009c0 <system_state_update>:

void system_state_update(){
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
	 if(left_button_pressed ==1 && UART_set_syst_state == 0 ){
 80009c4:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <system_state_update+0xb4>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d129      	bne.n	8000a20 <system_state_update+0x60>
 80009cc:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <system_state_update+0xb8>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d125      	bne.n	8000a20 <system_state_update+0x60>

		 button_count++ ;
 80009d4:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <system_state_update+0xbc>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	4a28      	ldr	r2, [pc, #160]	; (8000a7c <system_state_update+0xbc>)
 80009dc:	6013      	str	r3, [r2, #0]
		 if(button_count > 2){
 80009de:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <system_state_update+0xbc>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	dd02      	ble.n	80009ec <system_state_update+0x2c>
			 button_count = 0 ;
 80009e6:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <system_state_update+0xbc>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
		 }
		 update_led_via_ADC =  0 ; // don't read ADC by default in next state
 80009ec:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <system_state_update+0xc0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
		 // snapshot of ADC taken in next state
		 if(adc_conv_complete == 1){
 80009f2:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <system_state_update+0xc4>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d102      	bne.n	8000a00 <system_state_update+0x40>
			 adc_val_capture =1  ; // capture ADC value
 80009fa:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <system_state_update+0xc8>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	701a      	strb	r2, [r3, #0]
		 }

		 // Emergency MODE DEFAULT
		 if(button_count != 1){
 8000a00:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <system_state_update+0xbc>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d007      	beq.n	8000a18 <system_state_update+0x58>
			 strobe_led_Intensity = 256 ;
 8000a08:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <system_state_update+0xcc>)
 8000a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a0e:	801a      	strh	r2, [r3, #0]
			 strobe_delay = 512;
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <system_state_update+0xd0>)
 8000a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a16:	801a      	strh	r2, [r3, #0]
		 }


		 left_button_pressed = 0 ;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <system_state_update+0xb4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
				 button_count =2 ;

			 }
		 }
	 }
}
 8000a1e:	e024      	b.n	8000a6a <system_state_update+0xaa>
	 }else if( UART_set_syst_state == 1 && left_button_pressed == 0){ // System state update to come from only one source
 8000a20:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <system_state_update+0xb8>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d120      	bne.n	8000a6a <system_state_update+0xaa>
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <system_state_update+0xb4>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d11c      	bne.n	8000a6a <system_state_update+0xaa>
		 UART_set_syst_state = 0;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <system_state_update+0xb8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
		 UART_state_update =1;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <system_state_update+0xd4>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
		 if(set_or_ret_sys_state[3] == 'F'){
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <system_state_update+0xd8>)
 8000a3e:	78db      	ldrb	r3, [r3, #3]
 8000a40:	2b46      	cmp	r3, #70	; 0x46
 8000a42:	d103      	bne.n	8000a4c <system_state_update+0x8c>
			 button_count =0 ;
 8000a44:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <system_state_update+0xbc>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
}
 8000a4a:	e00e      	b.n	8000a6a <system_state_update+0xaa>
		 else if(set_or_ret_sys_state[3] =='E'){
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <system_state_update+0xd8>)
 8000a4e:	78db      	ldrb	r3, [r3, #3]
 8000a50:	2b45      	cmp	r3, #69	; 0x45
 8000a52:	d103      	bne.n	8000a5c <system_state_update+0x9c>
			 button_count =1;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <system_state_update+0xbc>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	601a      	str	r2, [r3, #0]
}
 8000a5a:	e006      	b.n	8000a6a <system_state_update+0xaa>
			 if(set_or_ret_sys_state[3] == 'M'){
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <system_state_update+0xd8>)
 8000a5e:	78db      	ldrb	r3, [r3, #3]
 8000a60:	2b4d      	cmp	r3, #77	; 0x4d
 8000a62:	d102      	bne.n	8000a6a <system_state_update+0xaa>
				 button_count =2 ;
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <system_state_update+0xbc>)
 8000a66:	2202      	movs	r2, #2
 8000a68:	601a      	str	r2, [r3, #0]
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	20002332 	.word	0x20002332
 8000a78:	20002322 	.word	0x20002322
 8000a7c:	200002f4 	.word	0x200002f4
 8000a80:	2000230a 	.word	0x2000230a
 8000a84:	20002306 	.word	0x20002306
 8000a88:	20000002 	.word	0x20000002
 8000a8c:	20000014 	.word	0x20000014
 8000a90:	20000012 	.word	0x20000012
 8000a94:	20002324 	.word	0x20002324
 8000a98:	20000044 	.word	0x20000044

08000a9c <right_button_state_update>:

/**
 * Updates system state after right button pressed in emergency mode
 */
void right_button_state_update(){
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
	if(button_count == 1){
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <right_button_state_update+0x5c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d117      	bne.n	8000ad8 <right_button_state_update+0x3c>
		if(right_button_pressed){
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <right_button_state_update+0x60>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d01e      	beq.n	8000aee <right_button_state_update+0x52>
			right_button_pressed = 0 ;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <right_button_state_update+0x60>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]

			update_led_via_ADC = 0 ; // dont read adc by default in next state
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <right_button_state_update+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]

			 em_count++ ;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <right_button_state_update+0x68>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <right_button_state_update+0x68>)
 8000ac6:	701a      	strb	r2, [r3, #0]

			 if(em_count>2){
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <right_button_state_update+0x68>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d90e      	bls.n	8000aee <right_button_state_update+0x52>
				 em_count = 0;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <right_button_state_update+0x68>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
		}
	}else if( button_count != 1 && right_button_pressed){
		right_button_pressed = 0; //do not read right button presses triggered
								  // in other states except emergency mode
	}
}
 8000ad6:	e00a      	b.n	8000aee <right_button_state_update+0x52>
	}else if( button_count != 1 && right_button_pressed){
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <right_button_state_update+0x5c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d006      	beq.n	8000aee <right_button_state_update+0x52>
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <right_button_state_update+0x60>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d002      	beq.n	8000aee <right_button_state_update+0x52>
		right_button_pressed = 0; //do not read right button presses triggered
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <right_button_state_update+0x60>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	200002f4 	.word	0x200002f4
 8000afc:	20002331 	.word	0x20002331
 8000b00:	2000230a 	.word	0x2000230a
 8000b04:	200002f8 	.word	0x200002f8

08000b08 <TURN_LED_ON_OFF>:

/**
 * Middle button press turns LED ON/OFF
 */
void TURN_LED_ON_OFF(){
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
	if(middle_button_pressed == 1){
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <TURN_LED_ON_OFF+0x54>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d11d      	bne.n	8000b50 <TURN_LED_ON_OFF+0x48>
		 LED_ON = !LED_ON ;  // turns the LED on OR off
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <TURN_LED_ON_OFF+0x58>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	bf0c      	ite	eq
 8000b1c:	2301      	moveq	r3, #1
 8000b1e:	2300      	movne	r3, #0
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	461a      	mov	r2, r3
 8000b24:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <TURN_LED_ON_OFF+0x58>)
 8000b26:	701a      	strb	r2, [r3, #0]

		 // Middle button press -> LED ON / OFF
		 if(LED_ON == 1){
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <TURN_LED_ON_OFF+0x58>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d104      	bne.n	8000b3a <TURN_LED_ON_OFF+0x32>
			 htim2.Instance->CCR1 = 1 ; // LED ON
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <TURN_LED_ON_OFF+0x5c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2201      	movs	r2, #1
 8000b36:	635a      	str	r2, [r3, #52]	; 0x34
 8000b38:	e007      	b.n	8000b4a <TURN_LED_ON_OFF+0x42>
		 }else if(LED_ON ==0){
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <TURN_LED_ON_OFF+0x58>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d103      	bne.n	8000b4a <TURN_LED_ON_OFF+0x42>
			 htim2.Instance->CCR1 = 0 ; //LED OFFS
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <TURN_LED_ON_OFF+0x5c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2200      	movs	r2, #0
 8000b48:	635a      	str	r2, [r3, #52]	; 0x34
		 }

		 middle_button_pressed = 0 ;
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <TURN_LED_ON_OFF+0x54>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
	 }
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20002330 	.word	0x20002330
 8000b60:	2000230b 	.word	0x2000230b
 8000b64:	20000188 	.word	0x20000188

08000b68 <EM_mode_Strobe>:

/**
 * LED strobed with provided number of ms
 */
void EM_mode_Strobe(uint16_t strobe_delay){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80fb      	strh	r3, [r7, #6]

	 // default delay 512ms
	 timePassed =HAL_GetTick() - strobe_ticks ;
 8000b72:	f001 fafd 	bl	8002170 <HAL_GetTick>
 8000b76:	4602      	mov	r2, r0
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <EM_mode_Strobe+0x84>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	4a1c      	ldr	r2, [pc, #112]	; (8000bf0 <EM_mode_Strobe+0x88>)
 8000b80:	6013      	str	r3, [r2, #0]
	 // time passed >512
	 if( timePassed >= strobe_delay && led_strobe_on == 0){
 8000b82:	88fa      	ldrh	r2, [r7, #6]
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <EM_mode_Strobe+0x88>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d80a      	bhi.n	8000ba2 <EM_mode_Strobe+0x3a>
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <EM_mode_Strobe+0x8c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d106      	bne.n	8000ba2 <EM_mode_Strobe+0x3a>
		 led_strobe_on =1 ;
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <EM_mode_Strobe+0x8c>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	701a      	strb	r2, [r3, #0]
		 htim2.Instance->CCR1 = 0 ;
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <EM_mode_Strobe+0x90>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	635a      	str	r2, [r3, #52]	; 0x34
	 }
	 // time Passed > 1024
	 if(timePassed >= 1024 && led_strobe_on == 1){
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <EM_mode_Strobe+0x88>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000baa:	d31a      	bcc.n	8000be2 <EM_mode_Strobe+0x7a>
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <EM_mode_Strobe+0x8c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d116      	bne.n	8000be2 <EM_mode_Strobe+0x7a>
		 strobe_ticks =  HAL_GetTick() ; // update current time
 8000bb4:	f001 fadc 	bl	8002170 <HAL_GetTick>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	4a0c      	ldr	r2, [pc, #48]	; (8000bec <EM_mode_Strobe+0x84>)
 8000bbc:	6013      	str	r3, [r2, #0]
		 led_strobe_on = 0 ;
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <EM_mode_Strobe+0x8c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]


		 if(update_led_via_ADC ==1){ // update LED intensity if the slider moved
 8000bc4:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <EM_mode_Strobe+0x94>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d105      	bne.n	8000bd8 <EM_mode_Strobe+0x70>
			 htim2.Instance->CCR1 = LED_intensity ;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <EM_mode_Strobe+0x98>)
 8000bce:	881a      	ldrh	r2, [r3, #0]
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <EM_mode_Strobe+0x90>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	635a      	str	r2, [r3, #52]	; 0x34
		 }
	 }

	 // restore

}
 8000bd6:	e004      	b.n	8000be2 <EM_mode_Strobe+0x7a>
			 htim2.Instance->CCR1 = strobe_led_Intensity;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <EM_mode_Strobe+0x9c>)
 8000bda:	881a      	ldrh	r2, [r3, #0]
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <EM_mode_Strobe+0x90>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	2000230c 	.word	0x2000230c
 8000bf0:	20002314 	.word	0x20002314
 8000bf4:	20002310 	.word	0x20002310
 8000bf8:	20000188 	.word	0x20000188
 8000bfc:	2000230a 	.word	0x2000230a
 8000c00:	20000010 	.word	0x20000010
 8000c04:	20000014 	.word	0x20000014

08000c08 <convert_UART_state_params_to_Int>:
int klm = 1 ;
void convert_UART_state_params_to_Int(){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
	if(UART_set_syst_state) {
 8000c0e:	4b59      	ldr	r3, [pc, #356]	; (8000d74 <convert_UART_state_params_to_Int+0x16c>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f000 80aa 	beq.w	8000d6c <convert_UART_state_params_to_Int+0x164>
		for(int i = 0; i < 19 ; i++){
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	e05f      	b.n	8000cde <convert_UART_state_params_to_Int+0xd6>
			switch(i){
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3b05      	subs	r3, #5
 8000c22:	2b0a      	cmp	r3, #10
 8000c24:	d857      	bhi.n	8000cd6 <convert_UART_state_params_to_Int+0xce>
 8000c26:	a201      	add	r2, pc, #4	; (adr r2, 8000c2c <convert_UART_state_params_to_Int+0x24>)
 8000c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2c:	08000c59 	.word	0x08000c59
 8000c30:	08000c67 	.word	0x08000c67
 8000c34:	08000c75 	.word	0x08000c75
 8000c38:	08000cd7 	.word	0x08000cd7
 8000c3c:	08000c83 	.word	0x08000c83
 8000c40:	08000c91 	.word	0x08000c91
 8000c44:	08000c9f 	.word	0x08000c9f
 8000c48:	08000cd7 	.word	0x08000cd7
 8000c4c:	08000cad 	.word	0x08000cad
 8000c50:	08000cbb 	.word	0x08000cbb
 8000c54:	08000cc9 	.word	0x08000cc9
			case 5:
				STATE[0]= set_or_ret_sys_state[i] ;
 8000c58:	4a47      	ldr	r2, [pc, #284]	; (8000d78 <convert_UART_state_params_to_Int+0x170>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	781a      	ldrb	r2, [r3, #0]
 8000c60:	4b46      	ldr	r3, [pc, #280]	; (8000d7c <convert_UART_state_params_to_Int+0x174>)
 8000c62:	701a      	strb	r2, [r3, #0]
				break;
 8000c64:	e038      	b.n	8000cd8 <convert_UART_state_params_to_Int+0xd0>
			case 6:
				STATE[1]= set_or_ret_sys_state[i] ;
 8000c66:	4a44      	ldr	r2, [pc, #272]	; (8000d78 <convert_UART_state_params_to_Int+0x170>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	781a      	ldrb	r2, [r3, #0]
 8000c6e:	4b43      	ldr	r3, [pc, #268]	; (8000d7c <convert_UART_state_params_to_Int+0x174>)
 8000c70:	705a      	strb	r2, [r3, #1]
				break;
 8000c72:	e031      	b.n	8000cd8 <convert_UART_state_params_to_Int+0xd0>
			case 7:
				STATE[2] = set_or_ret_sys_state[i] ;
 8000c74:	4a40      	ldr	r2, [pc, #256]	; (8000d78 <convert_UART_state_params_to_Int+0x170>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	781a      	ldrb	r2, [r3, #0]
 8000c7c:	4b3f      	ldr	r3, [pc, #252]	; (8000d7c <convert_UART_state_params_to_Int+0x174>)
 8000c7e:	709a      	strb	r2, [r3, #2]
				break;
 8000c80:	e02a      	b.n	8000cd8 <convert_UART_state_params_to_Int+0xd0>

			case 9:
				PARAM1[0] = set_or_ret_sys_state[i];
 8000c82:	4a3d      	ldr	r2, [pc, #244]	; (8000d78 <convert_UART_state_params_to_Int+0x170>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4413      	add	r3, r2
 8000c88:	781a      	ldrb	r2, [r3, #0]
 8000c8a:	4b3d      	ldr	r3, [pc, #244]	; (8000d80 <convert_UART_state_params_to_Int+0x178>)
 8000c8c:	701a      	strb	r2, [r3, #0]
				break;
 8000c8e:	e023      	b.n	8000cd8 <convert_UART_state_params_to_Int+0xd0>
			case 10:
				PARAM1[1] = set_or_ret_sys_state[i] ;
 8000c90:	4a39      	ldr	r2, [pc, #228]	; (8000d78 <convert_UART_state_params_to_Int+0x170>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	781a      	ldrb	r2, [r3, #0]
 8000c98:	4b39      	ldr	r3, [pc, #228]	; (8000d80 <convert_UART_state_params_to_Int+0x178>)
 8000c9a:	705a      	strb	r2, [r3, #1]
				break;
 8000c9c:	e01c      	b.n	8000cd8 <convert_UART_state_params_to_Int+0xd0>
			case 11:
				PARAM1[2] = set_or_ret_sys_state[i] ;
 8000c9e:	4a36      	ldr	r2, [pc, #216]	; (8000d78 <convert_UART_state_params_to_Int+0x170>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	781a      	ldrb	r2, [r3, #0]
 8000ca6:	4b36      	ldr	r3, [pc, #216]	; (8000d80 <convert_UART_state_params_to_Int+0x178>)
 8000ca8:	709a      	strb	r2, [r3, #2]
				break ;
 8000caa:	e015      	b.n	8000cd8 <convert_UART_state_params_to_Int+0xd0>
			case 13:
				PARAM2[0] = set_or_ret_sys_state[i] ;
 8000cac:	4a32      	ldr	r2, [pc, #200]	; (8000d78 <convert_UART_state_params_to_Int+0x170>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <convert_UART_state_params_to_Int+0x17c>)
 8000cb6:	701a      	strb	r2, [r3, #0]
				break;
 8000cb8:	e00e      	b.n	8000cd8 <convert_UART_state_params_to_Int+0xd0>
			case 14:
				PARAM2[1] = set_or_ret_sys_state[i] ;
 8000cba:	4a2f      	ldr	r2, [pc, #188]	; (8000d78 <convert_UART_state_params_to_Int+0x170>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781a      	ldrb	r2, [r3, #0]
 8000cc2:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <convert_UART_state_params_to_Int+0x17c>)
 8000cc4:	705a      	strb	r2, [r3, #1]
				break;
 8000cc6:	e007      	b.n	8000cd8 <convert_UART_state_params_to_Int+0xd0>
			case 15:
				PARAM2[2] = set_or_ret_sys_state[i ];
 8000cc8:	4a2b      	ldr	r2, [pc, #172]	; (8000d78 <convert_UART_state_params_to_Int+0x170>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	781a      	ldrb	r2, [r3, #0]
 8000cd0:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <convert_UART_state_params_to_Int+0x17c>)
 8000cd2:	709a      	strb	r2, [r3, #2]
				break;
 8000cd4:	e000      	b.n	8000cd8 <convert_UART_state_params_to_Int+0xd0>

			default:
				break ;
 8000cd6:	bf00      	nop
		for(int i = 0; i < 19 ; i++){
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b12      	cmp	r3, #18
 8000ce2:	dd9c      	ble.n	8000c1e <convert_UART_state_params_to_Int+0x16>
			}

		}

		state = atoi(STATE) ;
 8000ce4:	4825      	ldr	r0, [pc, #148]	; (8000d7c <convert_UART_state_params_to_Int+0x174>)
 8000ce6:	f007 f8dd 	bl	8007ea4 <atoi>
 8000cea:	4603      	mov	r3, r0
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <convert_UART_state_params_to_Int+0x180>)
 8000cf0:	801a      	strh	r2, [r3, #0]
		param1 = atoi(PARAM1);
 8000cf2:	4823      	ldr	r0, [pc, #140]	; (8000d80 <convert_UART_state_params_to_Int+0x178>)
 8000cf4:	f007 f8d6 	bl	8007ea4 <atoi>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <convert_UART_state_params_to_Int+0x184>)
 8000cfe:	801a      	strh	r2, [r3, #0]
		// problem - perform check for if non integer characters are passed!
		if(strcmp(PARAM2, "000") == 0 && set_or_ret_sys_state[3] == 'E'){
 8000d00:	4923      	ldr	r1, [pc, #140]	; (8000d90 <convert_UART_state_params_to_Int+0x188>)
 8000d02:	4820      	ldr	r0, [pc, #128]	; (8000d84 <convert_UART_state_params_to_Int+0x17c>)
 8000d04:	f7ff fa68 	bl	80001d8 <strcmp>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d10b      	bne.n	8000d26 <convert_UART_state_params_to_Int+0x11e>
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <convert_UART_state_params_to_Int+0x170>)
 8000d10:	78db      	ldrb	r3, [r3, #3]
 8000d12:	2b45      	cmp	r3, #69	; 0x45
 8000d14:	d107      	bne.n	8000d26 <convert_UART_state_params_to_Int+0x11e>

			param2 = atoi(PARAM2) ;  // SOS MORSE OUTPUT
 8000d16:	481b      	ldr	r0, [pc, #108]	; (8000d84 <convert_UART_state_params_to_Int+0x17c>)
 8000d18:	f007 f8c4 	bl	8007ea4 <atoi>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <convert_UART_state_params_to_Int+0x18c>)
 8000d22:	801a      	strh	r2, [r3, #0]
 8000d24:	e022      	b.n	8000d6c <convert_UART_state_params_to_Int+0x164>
		}
		else if( strcmp(PARAM2, "000") != 0 && set_or_ret_sys_state[3] == 'E' ){
 8000d26:	491a      	ldr	r1, [pc, #104]	; (8000d90 <convert_UART_state_params_to_Int+0x188>)
 8000d28:	4816      	ldr	r0, [pc, #88]	; (8000d84 <convert_UART_state_params_to_Int+0x17c>)
 8000d2a:	f7ff fa55 	bl	80001d8 <strcmp>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d013      	beq.n	8000d5c <convert_UART_state_params_to_Int+0x154>
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <convert_UART_state_params_to_Int+0x170>)
 8000d36:	78db      	ldrb	r3, [r3, #3]
 8000d38:	2b45      	cmp	r3, #69	; 0x45
 8000d3a:	d10f      	bne.n	8000d5c <convert_UART_state_params_to_Int+0x154>

			Custom_Morse_Msg[0] = PARAM2[0] ; // CUSTOM MORSE output - declare variable to store the output
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <convert_UART_state_params_to_Int+0x17c>)
 8000d3e:	781a      	ldrb	r2, [r3, #0]
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <convert_UART_state_params_to_Int+0x190>)
 8000d42:	701a      	strb	r2, [r3, #0]
			Custom_Morse_Msg[1] = PARAM2[1] ;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <convert_UART_state_params_to_Int+0x17c>)
 8000d46:	785a      	ldrb	r2, [r3, #1]
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <convert_UART_state_params_to_Int+0x190>)
 8000d4a:	705a      	strb	r2, [r3, #1]
			Custom_Morse_Msg[2] = PARAM2[2] ;
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <convert_UART_state_params_to_Int+0x17c>)
 8000d4e:	789a      	ldrb	r2, [r3, #2]
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <convert_UART_state_params_to_Int+0x190>)
 8000d52:	709a      	strb	r2, [r3, #2]

			custom_morse_msg_rcvd = 1;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <convert_UART_state_params_to_Int+0x194>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
 8000d5a:	e007      	b.n	8000d6c <convert_UART_state_params_to_Int+0x164>
		}
		else{
			param2 = atoi(PARAM2) ;
 8000d5c:	4809      	ldr	r0, [pc, #36]	; (8000d84 <convert_UART_state_params_to_Int+0x17c>)
 8000d5e:	f007 f8a1 	bl	8007ea4 <atoi>
 8000d62:	4603      	mov	r3, r0
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <convert_UART_state_params_to_Int+0x18c>)
 8000d68:	801a      	strh	r2, [r3, #0]
		}

	}
}
 8000d6a:	e7ff      	b.n	8000d6c <convert_UART_state_params_to_Int+0x164>
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20002322 	.word	0x20002322
 8000d78:	20000044 	.word	0x20000044
 8000d7c:	20000058 	.word	0x20000058
 8000d80:	2000005c 	.word	0x2000005c
 8000d84:	20000060 	.word	0x20000060
 8000d88:	20002326 	.word	0x20002326
 8000d8c:	20002328 	.word	0x20002328
 8000d90:	080081ac 	.word	0x080081ac
 8000d94:	2000232a 	.word	0x2000232a
 8000d98:	20000064 	.word	0x20000064
 8000d9c:	20002325 	.word	0x20002325

08000da0 <Emergency_Mode_State_Update>:

/**
 * Function updates the necessary states/ values when UART command reached to
 * update the system state
 */
void Emergency_Mode_State_Update(){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0

	if(UART_state_update == 1 && state > 0 && set_or_ret_sys_state[3] =='E'){
 8000da4:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <Emergency_Mode_State_Update+0xac>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d14c      	bne.n	8000e46 <Emergency_Mode_State_Update+0xa6>
 8000dac:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <Emergency_Mode_State_Update+0xb0>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d048      	beq.n	8000e46 <Emergency_Mode_State_Update+0xa6>
 8000db4:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <Emergency_Mode_State_Update+0xb4>)
 8000db6:	78db      	ldrb	r3, [r3, #3]
 8000db8:	2b45      	cmp	r3, #69	; 0x45
 8000dba:	d144      	bne.n	8000e46 <Emergency_Mode_State_Update+0xa6>
		// Dont read ADC
		if(adc_conv_complete == 1){
 8000dbc:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <Emergency_Mode_State_Update+0xb8>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d105      	bne.n	8000dd0 <Emergency_Mode_State_Update+0x30>
			adc_val_capture = 1 ; // capture slider value
 8000dc4:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <Emergency_Mode_State_Update+0xbc>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	701a      	strb	r2, [r3, #0]
			update_led_via_ADC = 0 ; // dont read until slider moved
 8000dca:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <Emergency_Mode_State_Update+0xc0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
		}

		//update LED intensity
		strobe_led_Intensity = state;
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <Emergency_Mode_State_Update+0xb0>)
 8000dd2:	881a      	ldrh	r2, [r3, #0]
 8000dd4:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <Emergency_Mode_State_Update+0xc4>)
 8000dd6:	801a      	strh	r2, [r3, #0]

		// strobe
		if(param1 > 0 ){
 8000dd8:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <Emergency_Mode_State_Update+0xc8>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d007      	beq.n	8000df0 <Emergency_Mode_State_Update+0x50>
			em_count = 0 ;
 8000de0:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <Emergency_Mode_State_Update+0xcc>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
			strobe_delay = param1 ;  // update the ON/off time of strobe
 8000de6:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <Emergency_Mode_State_Update+0xc8>)
 8000de8:	881a      	ldrh	r2, [r3, #0]
 8000dea:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <Emergency_Mode_State_Update+0xd0>)
 8000dec:	801a      	strh	r2, [r3, #0]
 8000dee:	e027      	b.n	8000e40 <Emergency_Mode_State_Update+0xa0>

		}
		// SOS output
		else if(param1 == 0 && param2 == 0 && custom_morse_msg_rcvd == 0 ){
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <Emergency_Mode_State_Update+0xc8>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d110      	bne.n	8000e1a <Emergency_Mode_State_Update+0x7a>
 8000df8:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <Emergency_Mode_State_Update+0xd4>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10c      	bne.n	8000e1a <Emergency_Mode_State_Update+0x7a>
 8000e00:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <Emergency_Mode_State_Update+0xd8>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d108      	bne.n	8000e1a <Emergency_Mode_State_Update+0x7a>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"SOS MORSE\n", 10) ;
 8000e08:	220a      	movs	r2, #10
 8000e0a:	491c      	ldr	r1, [pc, #112]	; (8000e7c <Emergency_Mode_State_Update+0xdc>)
 8000e0c:	481c      	ldr	r0, [pc, #112]	; (8000e80 <Emergency_Mode_State_Update+0xe0>)
 8000e0e:	f005 fd43 	bl	8006898 <HAL_UART_Transmit_IT>
			em_count =1 ; // SOS mode
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <Emergency_Mode_State_Update+0xcc>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	701a      	strb	r2, [r3, #0]
 8000e18:	e012      	b.n	8000e40 <Emergency_Mode_State_Update+0xa0>
		}
		// CUSTOM morse msg received
		else{
			if(param1 == 0 && custom_morse_msg_rcvd ==1 ){
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <Emergency_Mode_State_Update+0xc8>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10e      	bne.n	8000e40 <Emergency_Mode_State_Update+0xa0>
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <Emergency_Mode_State_Update+0xd8>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d10a      	bne.n	8000e40 <Emergency_Mode_State_Update+0xa0>
				custom_morse_msg_rcvd = 0;
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <Emergency_Mode_State_Update+0xd8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart2, (uint8_t*)"CUSTOM MORSE\n", 13) ;
 8000e30:	220d      	movs	r2, #13
 8000e32:	4914      	ldr	r1, [pc, #80]	; (8000e84 <Emergency_Mode_State_Update+0xe4>)
 8000e34:	4812      	ldr	r0, [pc, #72]	; (8000e80 <Emergency_Mode_State_Update+0xe0>)
 8000e36:	f005 fd2f 	bl	8006898 <HAL_UART_Transmit_IT>
				em_count = 2 ; // CUSTOM MORSE
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <Emergency_Mode_State_Update+0xcc>)
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	701a      	strb	r2, [r3, #0]

			}
		}

		UART_state_update = 0;
 8000e40:	4b02      	ldr	r3, [pc, #8]	; (8000e4c <Emergency_Mode_State_Update+0xac>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
	}

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20002324 	.word	0x20002324
 8000e50:	20002326 	.word	0x20002326
 8000e54:	20000044 	.word	0x20000044
 8000e58:	20002306 	.word	0x20002306
 8000e5c:	20000002 	.word	0x20000002
 8000e60:	2000230a 	.word	0x2000230a
 8000e64:	20000014 	.word	0x20000014
 8000e68:	20002328 	.word	0x20002328
 8000e6c:	200002f8 	.word	0x200002f8
 8000e70:	20000012 	.word	0x20000012
 8000e74:	2000232a 	.word	0x2000232a
 8000e78:	20002325 	.word	0x20002325
 8000e7c:	080081b0 	.word	0x080081b0
 8000e80:	2000026c 	.word	0x2000026c
 8000e84:	080081bc 	.word	0x080081bc

08000e88 <Mood_Mode_State_Update>:

void Mood_Mode_State_Update(){
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
	if(UART_state_update ==1  && set_or_ret_sys_state[3] == 'M'){
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <Mood_Mode_State_Update+0x3c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d112      	bne.n	8000eba <Mood_Mode_State_Update+0x32>
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <Mood_Mode_State_Update+0x40>)
 8000e96:	78db      	ldrb	r3, [r3, #3]
 8000e98:	2b4d      	cmp	r3, #77	; 0x4d
 8000e9a:	d10e      	bne.n	8000eba <Mood_Mode_State_Update+0x32>

		// set R channel intensity
		R_channel_Intensity = state ;
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <Mood_Mode_State_Update+0x44>)
 8000e9e:	881a      	ldrh	r2, [r3, #0]
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <Mood_Mode_State_Update+0x48>)
 8000ea2:	801a      	strh	r2, [r3, #0]
		// set G channel intensity
		G_channel_Intensity = param1 ;
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <Mood_Mode_State_Update+0x4c>)
 8000ea6:	881a      	ldrh	r2, [r3, #0]
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <Mood_Mode_State_Update+0x50>)
 8000eaa:	801a      	strh	r2, [r3, #0]
		// set B channel intensity
		B_channel_Intensity = param2 ;
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <Mood_Mode_State_Update+0x54>)
 8000eae:	881a      	ldrh	r2, [r3, #0]
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <Mood_Mode_State_Update+0x58>)
 8000eb2:	801a      	strh	r2, [r3, #0]


		UART_state_update = 0;
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <Mood_Mode_State_Update+0x3c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
	}
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	20002324 	.word	0x20002324
 8000ec8:	20000044 	.word	0x20000044
 8000ecc:	20002326 	.word	0x20002326
 8000ed0:	2000002e 	.word	0x2000002e
 8000ed4:	20002328 	.word	0x20002328
 8000ed8:	20000030 	.word	0x20000030
 8000edc:	2000232a 	.word	0x2000232a
 8000ee0:	20000032 	.word	0x20000032

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f001 f8e7 	bl	80020bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 fa2f 	bl	8001350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 fcc7 	bl	8001884 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef6:	f000 fca7 	bl	8001848 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000efa:	f000 fc73 	bl	80017e4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000efe:	f000 fa8f 	bl	8001420 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f02:	f000 fafd 	bl	8001500 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f06:	f000 fb7d 	bl	8001604 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f0a:	f000 fbf3 	bl	80016f4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(200);
 8000f0e:	20c8      	movs	r0, #200	; 0xc8
 8000f10:	f001 f93a 	bl	8002188 <HAL_Delay>
  HAL_UART_Transmit(&huart2, studentNum, 13, 150); //transmit student number
 8000f14:	2396      	movs	r3, #150	; 0x96
 8000f16:	220d      	movs	r2, #13
 8000f18:	499a      	ldr	r1, [pc, #616]	; (8001184 <main+0x2a0>)
 8000f1a:	489b      	ldr	r0, [pc, #620]	; (8001188 <main+0x2a4>)
 8000f1c:	f005 fc32 	bl	8006784 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)recvd_char, 1);
 8000f20:	2201      	movs	r2, #1
 8000f22:	499a      	ldr	r1, [pc, #616]	; (800118c <main+0x2a8>)
 8000f24:	4898      	ldr	r0, [pc, #608]	; (8001188 <main+0x2a4>)
 8000f26:	f005 fd15 	bl	8006954 <HAL_UART_Receive_IT>

  //Startup ADC
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, adc_buf_len) ;
 8000f2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f2e:	4998      	ldr	r1, [pc, #608]	; (8001190 <main+0x2ac>)
 8000f30:	4898      	ldr	r0, [pc, #608]	; (8001194 <main+0x2b0>)
 8000f32:	f001 fb5b 	bl	80025ec <HAL_ADC_Start_DMA>

  // TIM2_CH1 start PWM
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1) ;
 8000f36:	2100      	movs	r1, #0
 8000f38:	4897      	ldr	r0, [pc, #604]	; (8001198 <main+0x2b4>)
 8000f3a:	f004 fbfb 	bl	8005734 <HAL_TIM_PWM_Start>
  // TIM2_CH4 start PWM - red LED
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) ;
 8000f3e:	210c      	movs	r1, #12
 8000f40:	4895      	ldr	r0, [pc, #596]	; (8001198 <main+0x2b4>)
 8000f42:	f004 fbf7 	bl	8005734 <HAL_TIM_PWM_Start>
  // TIM3_CH4 start PWM - GREEN LED
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000f46:	210c      	movs	r1, #12
 8000f48:	4894      	ldr	r0, [pc, #592]	; (800119c <main+0x2b8>)
 8000f4a:	f004 fbf3 	bl	8005734 <HAL_TIM_PWM_Start>
  // TIM4_CH1 start PWM - BLUE LED
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) ;
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4893      	ldr	r0, [pc, #588]	; (80011a0 <main+0x2bc>)
 8000f52:	f004 fbef 	bl	8005734 <HAL_TIM_PWM_Start>

  strobe_ticks  = HAL_GetTick() ;
 8000f56:	f001 f90b 	bl	8002170 <HAL_GetTick>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a91      	ldr	r2, [pc, #580]	; (80011a4 <main+0x2c0>)
 8000f5e:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // left button press to update system state (MF -> ME -> MM)
	  system_state_update() ;
 8000f60:	f7ff fd2e 	bl	80009c0 <system_state_update>
	  //run adc and capture previous snapshot of ADC value and adc movement processing
	  adc_dma_val_processing();
 8000f64:	f7ff fc9c 	bl	80008a0 <adc_dma_val_processing>
	  // Turn LED ON/OFF
	  TURN_LED_ON_OFF() ;
 8000f68:	f7ff fdce 	bl	8000b08 <TURN_LED_ON_OFF>
	  // read UART params
	  convert_UART_state_params_to_Int() ;
 8000f6c:	f7ff fe4c 	bl	8000c08 <convert_UART_state_params_to_Int>

	 // system state
	 if(button_count == 0 || start_up == 1 ){
 8000f70:	4b8d      	ldr	r3, [pc, #564]	; (80011a8 <main+0x2c4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <main+0x9c>
 8000f78:	4b8c      	ldr	r3, [pc, #560]	; (80011ac <main+0x2c8>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d13b      	bne.n	8000ff8 <main+0x114>

		 start_up = 0 ; //for default MF state
 8000f80:	4b8a      	ldr	r3, [pc, #552]	; (80011ac <main+0x2c8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]

		 MF_mode_LED() ; // sets the corresponding mode LED
 8000f86:	f000 fd21 	bl	80019cc <MF_mode_LED>
		 em_count=0;     // reset the emergency mode count
 8000f8a:	4b89      	ldr	r3, [pc, #548]	; (80011b0 <main+0x2cc>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
		 em_default = 1; // to re-enter the EM state
 8000f90:	4b88      	ldr	r3, [pc, #544]	; (80011b4 <main+0x2d0>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]

		if(LED_ON == 1){
 8000f96:	4b88      	ldr	r3, [pc, #544]	; (80011b8 <main+0x2d4>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d164      	bne.n	8001068 <main+0x184>
			 // if LED_ON and SLIDER MOVED -> updated LED intensity
			if(update_led_via_ADC == 1 && UART_state_update == 0){
 8000f9e:	4b87      	ldr	r3, [pc, #540]	; (80011bc <main+0x2d8>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d109      	bne.n	8000fba <main+0xd6>
 8000fa6:	4b86      	ldr	r3, [pc, #536]	; (80011c0 <main+0x2dc>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d105      	bne.n	8000fba <main+0xd6>

			  htim2.Instance->CCR1 =  LED_intensity ; // vary the duty cycle of the LED [1:512]
 8000fae:	4b85      	ldr	r3, [pc, #532]	; (80011c4 <main+0x2e0>)
 8000fb0:	881a      	ldrh	r2, [r3, #0]
 8000fb2:	4b79      	ldr	r3, [pc, #484]	; (8001198 <main+0x2b4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	635a      	str	r2, [r3, #52]	; 0x34
		if(LED_ON == 1){
 8000fb8:	e056      	b.n	8001068 <main+0x184>
			}
			else{

				if(UART_state_update == 1 && state > 0 && set_or_ret_sys_state[3] =='F' ){
 8000fba:	4b81      	ldr	r3, [pc, #516]	; (80011c0 <main+0x2dc>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d152      	bne.n	8001068 <main+0x184>
 8000fc2:	4b81      	ldr	r3, [pc, #516]	; (80011c8 <main+0x2e4>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d04e      	beq.n	8001068 <main+0x184>
 8000fca:	4b80      	ldr	r3, [pc, #512]	; (80011cc <main+0x2e8>)
 8000fcc:	78db      	ldrb	r3, [r3, #3]
 8000fce:	2b46      	cmp	r3, #70	; 0x46
 8000fd0:	d14a      	bne.n	8001068 <main+0x184>

					if(adc_conv_complete == 1){
 8000fd2:	4b7f      	ldr	r3, [pc, #508]	; (80011d0 <main+0x2ec>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d105      	bne.n	8000fe6 <main+0x102>
						adc_val_capture = 1 ; // capture slider value
 8000fda:	4b7e      	ldr	r3, [pc, #504]	; (80011d4 <main+0x2f0>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
						update_led_via_ADC = 0 ; // dont read until slider moved
 8000fe0:	4b76      	ldr	r3, [pc, #472]	; (80011bc <main+0x2d8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
					}
					htim2.Instance->CCR1 = state ;
 8000fe6:	4b78      	ldr	r3, [pc, #480]	; (80011c8 <main+0x2e4>)
 8000fe8:	881a      	ldrh	r2, [r3, #0]
 8000fea:	4b6b      	ldr	r3, [pc, #428]	; (8001198 <main+0x2b4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	635a      	str	r2, [r3, #52]	; 0x34
//					UART_set_syst_state = 0;
					UART_state_update = 0;
 8000ff0:	4b73      	ldr	r3, [pc, #460]	; (80011c0 <main+0x2dc>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
		if(LED_ON == 1){
 8000ff6:	e037      	b.n	8001068 <main+0x184>
				}

			}
		}

	 }else if(button_count == 1 ){// right button system state updated
 8000ff8:	4b6b      	ldr	r3, [pc, #428]	; (80011a8 <main+0x2c4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d104      	bne.n	800100a <main+0x126>
		 ME_mode_LED() ; // sets the corresponding modes LED
 8001000:	f000 fd02 	bl	8001a08 <ME_mode_LED>

		 Emergency_Mode_State_Update() ;
 8001004:	f7ff fecc 	bl	8000da0 <Emergency_Mode_State_Update>
 8001008:	e02f      	b.n	800106a <main+0x186>

	 }else{
		 if(button_count == 2){ // Mood Mode
 800100a:	4b67      	ldr	r3, [pc, #412]	; (80011a8 <main+0x2c4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b02      	cmp	r3, #2
 8001010:	d12b      	bne.n	800106a <main+0x186>
			 // SET THE NECESSARY STATES
			 em_count=0; // reset the emergency mode state
 8001012:	4b67      	ldr	r3, [pc, #412]	; (80011b0 <main+0x2cc>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
			 em_default = 1; // to re-enter EM state
 8001018:	4b66      	ldr	r3, [pc, #408]	; (80011b4 <main+0x2d0>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]

			 MM_mode_LED() ; //sets the corresponding modes LED
 800101e:	f000 fd0b 	bl	8001a38 <MM_mode_LED>

			 Mood_Mode_State_Update() ; // update the necessary MM states
 8001022:	f7ff ff31 	bl	8000e88 <Mood_Mode_State_Update>
			 if(LED_ON == 1){
 8001026:	4b64      	ldr	r3, [pc, #400]	; (80011b8 <main+0x2d4>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d10f      	bne.n	800104e <main+0x16a>
				 // set to channel intensities to default values
				 // no longer default mode - reset back to default in other states?
				 //red channel
				 htim2.Instance->CCR4 = R_channel_Intensity ;
 800102e:	4b6a      	ldr	r3, [pc, #424]	; (80011d8 <main+0x2f4>)
 8001030:	881a      	ldrh	r2, [r3, #0]
 8001032:	4b59      	ldr	r3, [pc, #356]	; (8001198 <main+0x2b4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	641a      	str	r2, [r3, #64]	; 0x40
				 // GREEN channel
				 htim3.Instance->CCR4 = G_channel_Intensity ;
 8001038:	4b68      	ldr	r3, [pc, #416]	; (80011dc <main+0x2f8>)
 800103a:	881a      	ldrh	r2, [r3, #0]
 800103c:	4b57      	ldr	r3, [pc, #348]	; (800119c <main+0x2b8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	641a      	str	r2, [r3, #64]	; 0x40
				 // BLUE channel
				 htim4.Instance->CCR1 = B_channel_Intensity ;
 8001042:	4b67      	ldr	r3, [pc, #412]	; (80011e0 <main+0x2fc>)
 8001044:	881a      	ldrh	r2, [r3, #0]
 8001046:	4b56      	ldr	r3, [pc, #344]	; (80011a0 <main+0x2bc>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	635a      	str	r2, [r3, #52]	; 0x34
 800104c:	e00d      	b.n	800106a <main+0x186>


			 }else{
				 // put all channels off
				 //red channel
				 htim2.Instance->CCR4 =  0;
 800104e:	4b52      	ldr	r3, [pc, #328]	; (8001198 <main+0x2b4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2200      	movs	r2, #0
 8001054:	641a      	str	r2, [r3, #64]	; 0x40
				 // GREEN channel
				 htim3.Instance->CCR4 = 0 ;
 8001056:	4b51      	ldr	r3, [pc, #324]	; (800119c <main+0x2b8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2200      	movs	r2, #0
 800105c:	641a      	str	r2, [r3, #64]	; 0x40
				 // BLUE channel
				 htim4.Instance->CCR1 = 0 ;
 800105e:	4b50      	ldr	r3, [pc, #320]	; (80011a0 <main+0x2bc>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2200      	movs	r2, #0
 8001064:	635a      	str	r2, [r3, #52]	; 0x34
 8001066:	e000      	b.n	800106a <main+0x186>
		if(LED_ON == 1){
 8001068:	bf00      	nop

		 }
	 }

	 // right button state update
	 right_button_state_update() ;
 800106a:	f7ff fd17 	bl	8000a9c <right_button_state_update>
	 //EMERGENCY MODES
	  if(button_count ==1 ){
 800106e:	4b4e      	ldr	r3, [pc, #312]	; (80011a8 <main+0x2c4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b01      	cmp	r3, #1
 8001074:	f47f af74 	bne.w	8000f60 <main+0x7c>

		 if(em_count == 0 || em_default ==1){ //strobe wit default intensity
 8001078:	4b4d      	ldr	r3, [pc, #308]	; (80011b0 <main+0x2cc>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <main+0x1a4>
 8001080:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <main+0x2d0>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d112      	bne.n	80010ae <main+0x1ca>
			 em_default = 0 ; //default state reached
 8001088:	4b4a      	ldr	r3, [pc, #296]	; (80011b4 <main+0x2d0>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2120      	movs	r1, #32
 8001092:	4854      	ldr	r0, [pc, #336]	; (80011e4 <main+0x300>)
 8001094:	f002 fdb2 	bl	8003bfc <HAL_GPIO_WritePin>


			 if(LED_ON){ //LED_on =?
 8001098:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <main+0x2d4>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 813d 	beq.w	800131c <main+0x438>
				 // strobe LED with provided on time
				 EM_mode_Strobe(strobe_delay) ;
 80010a2:	4b51      	ldr	r3, [pc, #324]	; (80011e8 <main+0x304>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fd5e 	bl	8000b68 <EM_mode_Strobe>
			 if(LED_ON){ //LED_on =?
 80010ac:	e136      	b.n	800131c <main+0x438>
			 }
		 }
		 else if(em_count ==1){ // SOS MOSRE
 80010ae:	4b40      	ldr	r3, [pc, #256]	; (80011b0 <main+0x2cc>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	f040 8128 	bne.w	8001308 <main+0x424>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2120      	movs	r1, #32
 80010bc:	4849      	ldr	r0, [pc, #292]	; (80011e4 <main+0x300>)
 80010be:	f002 fd9d 	bl	8003bfc <HAL_GPIO_WritePin>

			 for(int i = 0; SOS[i] !='\0' ; i++){
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	e117      	b.n	80012f8 <main+0x414>

				 if(SOS[i] == '.' && DOT == 1){
 80010c8:	4a48      	ldr	r2, [pc, #288]	; (80011ec <main+0x308>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b2e      	cmp	r3, #46	; 0x2e
 80010d2:	d12a      	bne.n	800112a <main+0x246>
 80010d4:	4b46      	ldr	r3, [pc, #280]	; (80011f0 <main+0x30c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d126      	bne.n	800112a <main+0x246>

					 htim2.Instance->CCR1 = 512 ;
 80010dc:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <main+0x2b4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
					 timePassed = HAL_GetTick() - morse_current_time ;
 80010e6:	f001 f843 	bl	8002170 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <main+0x310>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	4a41      	ldr	r2, [pc, #260]	; (80011f8 <main+0x314>)
 80010f4:	6013      	str	r3, [r2, #0]
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 80010f6:	f001 f83b 	bl	8002170 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	4b3d      	ldr	r3, [pc, #244]	; (80011f4 <main+0x310>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	4a3e      	ldr	r2, [pc, #248]	; (80011fc <main+0x318>)
 8001104:	8812      	ldrh	r2, [r2, #0]
 8001106:	4293      	cmp	r3, r2
 8001108:	f0c0 80e5 	bcc.w	80012d6 <main+0x3f2>
						 morse_current_time = HAL_GetTick() ;
 800110c:	f001 f830 	bl	8002170 <HAL_GetTick>
 8001110:	4603      	mov	r3, r0
 8001112:	4a38      	ldr	r2, [pc, #224]	; (80011f4 <main+0x310>)
 8001114:	6013      	str	r3, [r2, #0]

						 DOT=0;
 8001116:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <main+0x30c>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
						 DASH =0 ;
 800111c:	4b38      	ldr	r3, [pc, #224]	; (8001200 <main+0x31c>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
						 space_in_letter = 1 ;
 8001122:	4b38      	ldr	r3, [pc, #224]	; (8001204 <main+0x320>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 8001128:	e0d5      	b.n	80012d6 <main+0x3f2>

					 }
				 }
				 else if(SOS[i] =='-'  && DASH == 1){
 800112a:	4a30      	ldr	r2, [pc, #192]	; (80011ec <main+0x308>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b2d      	cmp	r3, #45	; 0x2d
 8001134:	d168      	bne.n	8001208 <main+0x324>
 8001136:	4b32      	ldr	r3, [pc, #200]	; (8001200 <main+0x31c>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d164      	bne.n	8001208 <main+0x324>

					 htim2.Instance->CCR1 = 512 ;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <main+0x2b4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001146:	635a      	str	r2, [r3, #52]	; 0x34
					 if(HAL_GetTick() - morse_current_time >= 3*time_unit  ){
 8001148:	f001 f812 	bl	8002170 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <main+0x310>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	1ad2      	subs	r2, r2, r3
 8001154:	4b29      	ldr	r3, [pc, #164]	; (80011fc <main+0x318>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	460b      	mov	r3, r1
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	440b      	add	r3, r1
 8001160:	429a      	cmp	r2, r3
 8001162:	f0c0 80b8 	bcc.w	80012d6 <main+0x3f2>
						 morse_current_time = HAL_GetTick() ;
 8001166:	f001 f803 	bl	8002170 <HAL_GetTick>
 800116a:	4603      	mov	r3, r0
 800116c:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <main+0x310>)
 800116e:	6013      	str	r3, [r2, #0]

						 DOT =  0 ;
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <main+0x30c>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
						 DASH = 0 ;
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <main+0x31c>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
						 space_in_letter = 1 ;
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <main+0x320>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
					 if(HAL_GetTick() - morse_current_time >= 3*time_unit  ){
 8001182:	e0a8      	b.n	80012d6 <main+0x3f2>
 8001184:	20000034 	.word	0x20000034
 8001188:	2000026c 	.word	0x2000026c
 800118c:	20002320 	.word	0x20002320
 8001190:	200002fc 	.word	0x200002fc
 8001194:	200000f4 	.word	0x200000f4
 8001198:	20000188 	.word	0x20000188
 800119c:	200001d4 	.word	0x200001d4
 80011a0:	20000220 	.word	0x20000220
 80011a4:	2000230c 	.word	0x2000230c
 80011a8:	200002f4 	.word	0x200002f4
 80011ac:	20000000 	.word	0x20000000
 80011b0:	200002f8 	.word	0x200002f8
 80011b4:	20000001 	.word	0x20000001
 80011b8:	2000230b 	.word	0x2000230b
 80011bc:	2000230a 	.word	0x2000230a
 80011c0:	20002324 	.word	0x20002324
 80011c4:	20000010 	.word	0x20000010
 80011c8:	20002326 	.word	0x20002326
 80011cc:	20000044 	.word	0x20000044
 80011d0:	20002306 	.word	0x20002306
 80011d4:	20000002 	.word	0x20000002
 80011d8:	2000002e 	.word	0x2000002e
 80011dc:	20000030 	.word	0x20000030
 80011e0:	20000032 	.word	0x20000032
 80011e4:	48000400 	.word	0x48000400
 80011e8:	20000012 	.word	0x20000012
 80011ec:	2000001c 	.word	0x2000001c
 80011f0:	20000018 	.word	0x20000018
 80011f4:	20002318 	.word	0x20002318
 80011f8:	20002314 	.word	0x20002314
 80011fc:	20000016 	.word	0x20000016
 8001200:	20000019 	.word	0x20000019
 8001204:	2000231c 	.word	0x2000231c

					 }
				 }
				 else if(SOS[i]== ' '   && space_in_letter ==1){
 8001208:	4a45      	ldr	r2, [pc, #276]	; (8001320 <main+0x43c>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b20      	cmp	r3, #32
 8001212:	d141      	bne.n	8001298 <main+0x3b4>
 8001214:	4b43      	ldr	r3, [pc, #268]	; (8001324 <main+0x440>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d13d      	bne.n	8001298 <main+0x3b4>

					 htim2.Instance->CCR1 = 0 ;
 800121c:	4b42      	ldr	r3, [pc, #264]	; (8001328 <main+0x444>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2200      	movs	r2, #0
 8001222:	635a      	str	r2, [r3, #52]	; 0x34

					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 8001224:	f000 ffa4 	bl	8002170 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	4b40      	ldr	r3, [pc, #256]	; (800132c <main+0x448>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	4a3f      	ldr	r2, [pc, #252]	; (8001330 <main+0x44c>)
 8001232:	8812      	ldrh	r2, [r2, #0]
 8001234:	4293      	cmp	r3, r2
 8001236:	d34d      	bcc.n	80012d4 <main+0x3f0>
						 morse_current_time = HAL_GetTick() ;
 8001238:	f000 ff9a 	bl	8002170 <HAL_GetTick>
 800123c:	4603      	mov	r3, r0
 800123e:	4a3b      	ldr	r2, [pc, #236]	; (800132c <main+0x448>)
 8001240:	6013      	str	r3, [r2, #0]
						 space_in_letter = 0 ;
 8001242:	4b38      	ldr	r3, [pc, #224]	; (8001324 <main+0x440>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]

						 //NEXT CHARACTER CHECK
						 next_char_check = i ;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b39      	ldr	r3, [pc, #228]	; (8001334 <main+0x450>)
 800124e:	701a      	strb	r2, [r3, #0]
						 next_char_check++ ;
 8001250:	4b38      	ldr	r3, [pc, #224]	; (8001334 <main+0x450>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b36      	ldr	r3, [pc, #216]	; (8001334 <main+0x450>)
 800125a:	701a      	strb	r2, [r3, #0]
						 if(SOS[next_char_check] == '.' && DOT == 0 ){
 800125c:	4b35      	ldr	r3, [pc, #212]	; (8001334 <main+0x450>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <main+0x43c>)
 8001264:	5c9b      	ldrb	r3, [r3, r2]
 8001266:	2b2e      	cmp	r3, #46	; 0x2e
 8001268:	d107      	bne.n	800127a <main+0x396>
 800126a:	4b33      	ldr	r3, [pc, #204]	; (8001338 <main+0x454>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d103      	bne.n	800127a <main+0x396>
							 DOT= 1 ;
 8001272:	4b31      	ldr	r3, [pc, #196]	; (8001338 <main+0x454>)
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 8001278:	e02c      	b.n	80012d4 <main+0x3f0>
						 }else if(SOS[next_char_check] == '-' && DASH == 0){
 800127a:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <main+0x450>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	4b27      	ldr	r3, [pc, #156]	; (8001320 <main+0x43c>)
 8001282:	5c9b      	ldrb	r3, [r3, r2]
 8001284:	2b2d      	cmp	r3, #45	; 0x2d
 8001286:	d125      	bne.n	80012d4 <main+0x3f0>
 8001288:	4b2c      	ldr	r3, [pc, #176]	; (800133c <main+0x458>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d121      	bne.n	80012d4 <main+0x3f0>
							 DASH =1;
 8001290:	4b2a      	ldr	r3, [pc, #168]	; (800133c <main+0x458>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 8001296:	e01d      	b.n	80012d4 <main+0x3f0>

					 }

				 }
				 else{
					 if(SOS[i]== '\0'){
 8001298:	4a21      	ldr	r2, [pc, #132]	; (8001320 <main+0x43c>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d118      	bne.n	80012d6 <main+0x3f2>

						 htim2.Instance->CCR1 = 0 ;
 80012a4:	4b20      	ldr	r3, [pc, #128]	; (8001328 <main+0x444>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2200      	movs	r2, #0
 80012aa:	635a      	str	r2, [r3, #52]	; 0x34
						 if(HAL_GetTick() - morse_current_time >= 3*time_unit){
 80012ac:	f000 ff60 	bl	8002170 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	4b1e      	ldr	r3, [pc, #120]	; (800132c <main+0x448>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	1ad2      	subs	r2, r2, r3
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <main+0x44c>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	460b      	mov	r3, r1
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	440b      	add	r3, r1
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d306      	bcc.n	80012d6 <main+0x3f2>
							morse_current_time = HAL_GetTick() ;
 80012c8:	f000 ff52 	bl	8002170 <HAL_GetTick>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a17      	ldr	r2, [pc, #92]	; (800132c <main+0x448>)
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e000      	b.n	80012d6 <main+0x3f2>
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 80012d4:	bf00      	nop

						 }
					 }
				 }
				 if(next_char_checked == 1){
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <main+0x45c>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d109      	bne.n	80012f2 <main+0x40e>
					 character = SOS[i++] ;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <main+0x43c>)
 80012e6:	5cd2      	ldrb	r2, [r2, r3]
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <main+0x460>)
 80012ea:	701a      	strb	r2, [r3, #0]
					 next_char_checked = 0;
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <main+0x45c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
			 for(int i = 0; SOS[i] !='\0' ; i++){
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3301      	adds	r3, #1
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	4a09      	ldr	r2, [pc, #36]	; (8001320 <main+0x43c>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f47f aee1 	bne.w	80010c8 <main+0x1e4>
 8001306:	e62b      	b.n	8000f60 <main+0x7c>
				 }
			 }
		 }
		 else{
			 if(em_count == 2){ // CUSTOM MORSE
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <main+0x464>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b02      	cmp	r3, #2
 800130e:	f47f ae27 	bne.w	8000f60 <main+0x7c>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	2120      	movs	r1, #32
 8001316:	480d      	ldr	r0, [pc, #52]	; (800134c <main+0x468>)
 8001318:	f002 fc70 	bl	8003bfc <HAL_GPIO_WritePin>
	  system_state_update() ;
 800131c:	e620      	b.n	8000f60 <main+0x7c>
 800131e:	bf00      	nop
 8001320:	2000001c 	.word	0x2000001c
 8001324:	2000231c 	.word	0x2000231c
 8001328:	20000188 	.word	0x20000188
 800132c:	20002318 	.word	0x20002318
 8001330:	20000016 	.word	0x20000016
 8001334:	2000231d 	.word	0x2000231d
 8001338:	20000018 	.word	0x20000018
 800133c:	20000019 	.word	0x20000019
 8001340:	2000231e 	.word	0x2000231e
 8001344:	2000231f 	.word	0x2000231f
 8001348:	200002f8 	.word	0x200002f8
 800134c:	48000400 	.word	0x48000400

08001350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0a6      	sub	sp, #152	; 0x98
 8001354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800135a:	2228      	movs	r2, #40	; 0x28
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f006 fdce 	bl	8007f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001364:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2258      	movs	r2, #88	; 0x58
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f006 fdc0 	bl	8007f00 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001380:	2302      	movs	r3, #2
 8001382:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001384:	2301      	movs	r3, #1
 8001386:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001388:	2310      	movs	r3, #16
 800138a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138e:	2302      	movs	r3, #2
 8001390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001398:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800139c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013ae:	4618      	mov	r0, r3
 80013b0:	f002 fc60 	bl	8003c74 <HAL_RCC_OscConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013ba:	f000 fb6b 	bl	8001a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013be:	230f      	movs	r3, #15
 80013c0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c2:	2302      	movs	r3, #2
 80013c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013d8:	2102      	movs	r1, #2
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 fc9e 	bl	8004d1c <HAL_RCC_ClockConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013e6:	f000 fb55 	bl	8001a94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <SystemClock_Config+0xcc>)
 80013ec:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80013f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	4618      	mov	r0, r3
 8001404:	f003 fec0 	bl	8005188 <HAL_RCCEx_PeriphCLKConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800140e:	f000 fb41 	bl	8001a94 <Error_Handler>
  }
}
 8001412:	bf00      	nop
 8001414:	3798      	adds	r7, #152	; 0x98
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	00300082 	.word	0x00300082

08001420 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
 8001440:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001442:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <MX_ADC1_Init+0xdc>)
 8001444:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001448:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800144a:	4b2c      	ldr	r3, [pc, #176]	; (80014fc <MX_ADC1_Init+0xdc>)
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001450:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <MX_ADC1_Init+0xdc>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001456:	4b29      	ldr	r3, [pc, #164]	; (80014fc <MX_ADC1_Init+0xdc>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800145c:	4b27      	ldr	r3, [pc, #156]	; (80014fc <MX_ADC1_Init+0xdc>)
 800145e:	2201      	movs	r2, #1
 8001460:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <MX_ADC1_Init+0xdc>)
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800146a:	4b24      	ldr	r3, [pc, #144]	; (80014fc <MX_ADC1_Init+0xdc>)
 800146c:	2200      	movs	r2, #0
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <MX_ADC1_Init+0xdc>)
 8001472:	2201      	movs	r2, #1
 8001474:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <MX_ADC1_Init+0xdc>)
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800147c:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <MX_ADC1_Init+0xdc>)
 800147e:	2201      	movs	r2, #1
 8001480:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <MX_ADC1_Init+0xdc>)
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <MX_ADC1_Init+0xdc>)
 800148c:	2204      	movs	r2, #4
 800148e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <MX_ADC1_Init+0xdc>)
 8001492:	2200      	movs	r2, #0
 8001494:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <MX_ADC1_Init+0xdc>)
 8001498:	2200      	movs	r2, #0
 800149a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800149c:	4817      	ldr	r0, [pc, #92]	; (80014fc <MX_ADC1_Init+0xdc>)
 800149e:	f000 feab 	bl	80021f8 <HAL_ADC_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80014a8:	f000 faf4 	bl	8001a94 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	4619      	mov	r1, r3
 80014b6:	4811      	ldr	r0, [pc, #68]	; (80014fc <MX_ADC1_Init+0xdc>)
 80014b8:	f001 fca0 	bl	8002dfc <HAL_ADCEx_MultiModeConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80014c2:	f000 fae7 	bl	8001a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014c6:	2301      	movs	r3, #1
 80014c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014ca:	2301      	movs	r3, #1
 80014cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	4619      	mov	r1, r3
 80014e2:	4806      	ldr	r0, [pc, #24]	; (80014fc <MX_ADC1_Init+0xdc>)
 80014e4:	f001 f99e 	bl	8002824 <HAL_ADC_ConfigChannel>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80014ee:	f000 fad1 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200000f4 	.word	0x200000f4

08001500 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08e      	sub	sp, #56	; 0x38
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001506:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001520:	463b      	mov	r3, r7
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]
 800152e:	615a      	str	r2, [r3, #20]
 8001530:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001532:	4b33      	ldr	r3, [pc, #204]	; (8001600 <MX_TIM2_Init+0x100>)
 8001534:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001538:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36;
 800153a:	4b31      	ldr	r3, [pc, #196]	; (8001600 <MX_TIM2_Init+0x100>)
 800153c:	2224      	movs	r2, #36	; 0x24
 800153e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001540:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <MX_TIM2_Init+0x100>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 512;
 8001546:	4b2e      	ldr	r3, [pc, #184]	; (8001600 <MX_TIM2_Init+0x100>)
 8001548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800154c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154e:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <MX_TIM2_Init+0x100>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001554:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <MX_TIM2_Init+0x100>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800155a:	4829      	ldr	r0, [pc, #164]	; (8001600 <MX_TIM2_Init+0x100>)
 800155c:	f004 f832 	bl	80055c4 <HAL_TIM_Base_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001566:	f000 fa95 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001570:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001574:	4619      	mov	r1, r3
 8001576:	4822      	ldr	r0, [pc, #136]	; (8001600 <MX_TIM2_Init+0x100>)
 8001578:	f004 fafc 	bl	8005b74 <HAL_TIM_ConfigClockSource>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001582:	f000 fa87 	bl	8001a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001586:	481e      	ldr	r0, [pc, #120]	; (8001600 <MX_TIM2_Init+0x100>)
 8001588:	f004 f873 	bl	8005672 <HAL_TIM_PWM_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001592:	f000 fa7f 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	4619      	mov	r1, r3
 80015a4:	4816      	ldr	r0, [pc, #88]	; (8001600 <MX_TIM2_Init+0x100>)
 80015a6:	f005 f813 	bl	80065d0 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80015b0:	f000 fa70 	bl	8001a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b4:	2360      	movs	r3, #96	; 0x60
 80015b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	2200      	movs	r2, #0
 80015c8:	4619      	mov	r1, r3
 80015ca:	480d      	ldr	r0, [pc, #52]	; (8001600 <MX_TIM2_Init+0x100>)
 80015cc:	f004 f9be 	bl	800594c <HAL_TIM_PWM_ConfigChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80015d6:	f000 fa5d 	bl	8001a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015da:	463b      	mov	r3, r7
 80015dc:	220c      	movs	r2, #12
 80015de:	4619      	mov	r1, r3
 80015e0:	4807      	ldr	r0, [pc, #28]	; (8001600 <MX_TIM2_Init+0x100>)
 80015e2:	f004 f9b3 	bl	800594c <HAL_TIM_PWM_ConfigChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80015ec:	f000 fa52 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <MX_TIM2_Init+0x100>)
 80015f2:	f000 fb27 	bl	8001c44 <HAL_TIM_MspPostInit>

}
 80015f6:	bf00      	nop
 80015f8:	3738      	adds	r7, #56	; 0x38
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000188 	.word	0x20000188

08001604 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08e      	sub	sp, #56	; 0x38
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001624:	463b      	mov	r3, r7
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
 8001632:	615a      	str	r2, [r3, #20]
 8001634:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001636:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <MX_TIM3_Init+0xe8>)
 8001638:	4a2d      	ldr	r2, [pc, #180]	; (80016f0 <MX_TIM3_Init+0xec>)
 800163a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36;
 800163c:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <MX_TIM3_Init+0xe8>)
 800163e:	2224      	movs	r2, #36	; 0x24
 8001640:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001642:	4b2a      	ldr	r3, [pc, #168]	; (80016ec <MX_TIM3_Init+0xe8>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 512;
 8001648:	4b28      	ldr	r3, [pc, #160]	; (80016ec <MX_TIM3_Init+0xe8>)
 800164a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800164e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001650:	4b26      	ldr	r3, [pc, #152]	; (80016ec <MX_TIM3_Init+0xe8>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <MX_TIM3_Init+0xe8>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800165c:	4823      	ldr	r0, [pc, #140]	; (80016ec <MX_TIM3_Init+0xe8>)
 800165e:	f003 ffb1 	bl	80055c4 <HAL_TIM_Base_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001668:	f000 fa14 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001676:	4619      	mov	r1, r3
 8001678:	481c      	ldr	r0, [pc, #112]	; (80016ec <MX_TIM3_Init+0xe8>)
 800167a:	f004 fa7b 	bl	8005b74 <HAL_TIM_ConfigClockSource>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001684:	f000 fa06 	bl	8001a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001688:	4818      	ldr	r0, [pc, #96]	; (80016ec <MX_TIM3_Init+0xe8>)
 800168a:	f003 fff2 	bl	8005672 <HAL_TIM_PWM_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001694:	f000 f9fe 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016a0:	f107 031c 	add.w	r3, r7, #28
 80016a4:	4619      	mov	r1, r3
 80016a6:	4811      	ldr	r0, [pc, #68]	; (80016ec <MX_TIM3_Init+0xe8>)
 80016a8:	f004 ff92 	bl	80065d0 <HAL_TIMEx_MasterConfigSynchronization>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80016b2:	f000 f9ef 	bl	8001a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b6:	2360      	movs	r3, #96	; 0x60
 80016b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016c6:	463b      	mov	r3, r7
 80016c8:	220c      	movs	r2, #12
 80016ca:	4619      	mov	r1, r3
 80016cc:	4807      	ldr	r0, [pc, #28]	; (80016ec <MX_TIM3_Init+0xe8>)
 80016ce:	f004 f93d 	bl	800594c <HAL_TIM_PWM_ConfigChannel>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80016d8:	f000 f9dc 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016dc:	4803      	ldr	r0, [pc, #12]	; (80016ec <MX_TIM3_Init+0xe8>)
 80016de:	f000 fab1 	bl	8001c44 <HAL_TIM_MspPostInit>

}
 80016e2:	bf00      	nop
 80016e4:	3738      	adds	r7, #56	; 0x38
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200001d4 	.word	0x200001d4
 80016f0:	40000400 	.word	0x40000400

080016f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08e      	sub	sp, #56	; 0x38
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001714:	463b      	mov	r3, r7
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
 8001722:	615a      	str	r2, [r3, #20]
 8001724:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001726:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <MX_TIM4_Init+0xe8>)
 8001728:	4a2d      	ldr	r2, [pc, #180]	; (80017e0 <MX_TIM4_Init+0xec>)
 800172a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36;
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <MX_TIM4_Init+0xe8>)
 800172e:	2224      	movs	r2, #36	; 0x24
 8001730:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001732:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <MX_TIM4_Init+0xe8>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001738:	4b28      	ldr	r3, [pc, #160]	; (80017dc <MX_TIM4_Init+0xe8>)
 800173a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800173e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001740:	4b26      	ldr	r3, [pc, #152]	; (80017dc <MX_TIM4_Init+0xe8>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001746:	4b25      	ldr	r3, [pc, #148]	; (80017dc <MX_TIM4_Init+0xe8>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800174c:	4823      	ldr	r0, [pc, #140]	; (80017dc <MX_TIM4_Init+0xe8>)
 800174e:	f003 ff39 	bl	80055c4 <HAL_TIM_Base_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001758:	f000 f99c 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800175c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001762:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001766:	4619      	mov	r1, r3
 8001768:	481c      	ldr	r0, [pc, #112]	; (80017dc <MX_TIM4_Init+0xe8>)
 800176a:	f004 fa03 	bl	8005b74 <HAL_TIM_ConfigClockSource>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001774:	f000 f98e 	bl	8001a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001778:	4818      	ldr	r0, [pc, #96]	; (80017dc <MX_TIM4_Init+0xe8>)
 800177a:	f003 ff7a 	bl	8005672 <HAL_TIM_PWM_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001784:	f000 f986 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	4811      	ldr	r0, [pc, #68]	; (80017dc <MX_TIM4_Init+0xe8>)
 8001798:	f004 ff1a 	bl	80065d0 <HAL_TIMEx_MasterConfigSynchronization>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80017a2:	f000 f977 	bl	8001a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a6:	2360      	movs	r3, #96	; 0x60
 80017a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b6:	463b      	mov	r3, r7
 80017b8:	2200      	movs	r2, #0
 80017ba:	4619      	mov	r1, r3
 80017bc:	4807      	ldr	r0, [pc, #28]	; (80017dc <MX_TIM4_Init+0xe8>)
 80017be:	f004 f8c5 	bl	800594c <HAL_TIM_PWM_ConfigChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80017c8:	f000 f964 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017cc:	4803      	ldr	r0, [pc, #12]	; (80017dc <MX_TIM4_Init+0xe8>)
 80017ce:	f000 fa39 	bl	8001c44 <HAL_TIM_MspPostInit>

}
 80017d2:	bf00      	nop
 80017d4:	3738      	adds	r7, #56	; 0x38
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000220 	.word	0x20000220
 80017e0:	40000800 	.word	0x40000800

080017e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <MX_USART2_UART_Init+0x5c>)
 80017ea:	4a16      	ldr	r2, [pc, #88]	; (8001844 <MX_USART2_UART_Init+0x60>)
 80017ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <MX_USART2_UART_Init+0x5c>)
 80017f0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80017f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <MX_USART2_UART_Init+0x5c>)
 80017f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017fc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <MX_USART2_UART_Init+0x5c>)
 8001800:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001804:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <MX_USART2_UART_Init+0x5c>)
 8001808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800180c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_USART2_UART_Init+0x5c>)
 8001810:	220c      	movs	r2, #12
 8001812:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <MX_USART2_UART_Init+0x5c>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_USART2_UART_Init+0x5c>)
 800181c:	2200      	movs	r2, #0
 800181e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <MX_USART2_UART_Init+0x5c>)
 8001822:	2200      	movs	r2, #0
 8001824:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <MX_USART2_UART_Init+0x5c>)
 8001828:	2200      	movs	r2, #0
 800182a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <MX_USART2_UART_Init+0x5c>)
 800182e:	f004 ff5b 	bl	80066e8 <HAL_UART_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001838:	f000 f92c 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	2000026c 	.word	0x2000026c
 8001844:	40004400 	.word	0x40004400

08001848 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_DMA_Init+0x38>)
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <MX_DMA_Init+0x38>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6153      	str	r3, [r2, #20]
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_DMA_Init+0x38>)
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	200b      	movs	r0, #11
 800186c:	f001 fdc3 	bl	80033f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001870:	200b      	movs	r0, #11
 8001872:	f001 fddc 	bl	800342e <HAL_NVIC_EnableIRQ>

}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000

08001884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800189a:	4b49      	ldr	r3, [pc, #292]	; (80019c0 <MX_GPIO_Init+0x13c>)
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	4a48      	ldr	r2, [pc, #288]	; (80019c0 <MX_GPIO_Init+0x13c>)
 80018a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018a4:	6153      	str	r3, [r2, #20]
 80018a6:	4b46      	ldr	r3, [pc, #280]	; (80019c0 <MX_GPIO_Init+0x13c>)
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b2:	4b43      	ldr	r3, [pc, #268]	; (80019c0 <MX_GPIO_Init+0x13c>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	4a42      	ldr	r2, [pc, #264]	; (80019c0 <MX_GPIO_Init+0x13c>)
 80018b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018bc:	6153      	str	r3, [r2, #20]
 80018be:	4b40      	ldr	r3, [pc, #256]	; (80019c0 <MX_GPIO_Init+0x13c>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <MX_GPIO_Init+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	4a3c      	ldr	r2, [pc, #240]	; (80019c0 <MX_GPIO_Init+0x13c>)
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d4:	6153      	str	r3, [r2, #20]
 80018d6:	4b3a      	ldr	r3, [pc, #232]	; (80019c0 <MX_GPIO_Init+0x13c>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <MX_GPIO_Init+0x13c>)
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	4a36      	ldr	r2, [pc, #216]	; (80019c0 <MX_GPIO_Init+0x13c>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ec:	6153      	str	r3, [r2, #20]
 80018ee:	4b34      	ldr	r3, [pc, #208]	; (80019c0 <MX_GPIO_Init+0x13c>)
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D3_Pin|LED_D4_Pin|LED_D5_Pin, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001900:	4830      	ldr	r0, [pc, #192]	; (80019c4 <MX_GPIO_Init+0x140>)
 8001902:	f002 f97b 	bl	8003bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 7180 	mov.w	r1, #256	; 0x100
 800190c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001910:	f002 f974 	bl	8003bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800191a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800191e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4619      	mov	r1, r3
 800192a:	4827      	ldr	r0, [pc, #156]	; (80019c8 <MX_GPIO_Init+0x144>)
 800192c:	f001 ffc4 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001930:	23c0      	movs	r3, #192	; 0xc0
 8001932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001934:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800193a:	2301      	movs	r3, #1
 800193c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001948:	f001 ffb6 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D3_Pin LED_D4_Pin LED_D5_Pin */
  GPIO_InitStruct.Pin = LED_D3_Pin|LED_D4_Pin|LED_D5_Pin;
 800194c:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	2301      	movs	r3, #1
 8001954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	4817      	ldr	r0, [pc, #92]	; (80019c4 <MX_GPIO_Init+0x140>)
 8001966:	f001 ffa7 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D2_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 800196a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800196e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001970:	2301      	movs	r3, #1
 8001972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001986:	f001 ff97 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800198a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800198e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001990:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001996:	2301      	movs	r3, #1
 8001998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	4808      	ldr	r0, [pc, #32]	; (80019c4 <MX_GPIO_Init+0x140>)
 80019a2:	f001 ff89 	bl	80038b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2017      	movs	r0, #23
 80019ac:	f001 fd23 	bl	80033f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019b0:	2017      	movs	r0, #23
 80019b2:	f001 fd3c 	bl	800342e <HAL_NVIC_EnableIRQ>

}
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	; 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	48000400 	.word	0x48000400
 80019c8:	48000800 	.word	0x48000800

080019cc <MF_mode_LED>:

/* USER CODE BEGIN 4 */
// FUNCTIONS
void MF_mode_LED(){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80019d0:	2201      	movs	r2, #1
 80019d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019da:	f002 f90f 	bl	8003bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80019de:	2200      	movs	r2, #0
 80019e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019e4:	4807      	ldr	r0, [pc, #28]	; (8001a04 <MF_mode_LED+0x38>)
 80019e6:	f002 f909 	bl	8003bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2110      	movs	r1, #16
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <MF_mode_LED+0x38>)
 80019f0:	f002 f904 	bl	8003bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2120      	movs	r1, #32
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <MF_mode_LED+0x38>)
 80019fa:	f002 f8ff 	bl	8003bfc <HAL_GPIO_WritePin>
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	48000400 	.word	0x48000400

08001a08 <ME_mode_LED>:

void ME_mode_LED(){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a16:	f002 f8f1 	bl	8003bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a20:	4804      	ldr	r0, [pc, #16]	; (8001a34 <ME_mode_LED+0x2c>)
 8001a22:	f002 f8eb 	bl	8003bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2110      	movs	r1, #16
 8001a2a:	4802      	ldr	r0, [pc, #8]	; (8001a34 <ME_mode_LED+0x2c>)
 8001a2c:	f002 f8e6 	bl	8003bfc <HAL_GPIO_WritePin>
}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	48000400 	.word	0x48000400

08001a38 <MM_mode_LED>:

void MM_mode_LED(){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a46:	f002 f8d9 	bl	8003bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a50:	4807      	ldr	r0, [pc, #28]	; (8001a70 <MM_mode_LED+0x38>)
 8001a52:	f002 f8d3 	bl	8003bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	2110      	movs	r1, #16
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MM_mode_LED+0x38>)
 8001a5c:	f002 f8ce 	bl	8003bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2120      	movs	r1, #32
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <MM_mode_LED+0x38>)
 8001a66:	f002 f8c9 	bl	8003bfc <HAL_GPIO_WritePin>
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	48000400 	.word	0x48000400

08001a74 <HAL_ADC_ConvCpltCallback>:


// adc buffer filled by dma circular sampling
// data should not be processed in the interrupt, it makes rest of the
// progam inaccessible
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	adc_conv_complete = 1 ;
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]

}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20002306 	.word	0x20002306

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <Error_Handler+0x8>
	...

08001aa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_MspInit+0x44>)
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <HAL_MspInit+0x44>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6193      	str	r3, [r2, #24]
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <HAL_MspInit+0x44>)
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_MspInit+0x44>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <HAL_MspInit+0x44>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	61d3      	str	r3, [r2, #28]
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_MspInit+0x44>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ad6:	2007      	movs	r0, #7
 8001ad8:	f001 fc82 	bl	80033e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b08:	d14c      	bne.n	8001ba4 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b0a:	4b28      	ldr	r3, [pc, #160]	; (8001bac <HAL_ADC_MspInit+0xc4>)
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	4a27      	ldr	r2, [pc, #156]	; (8001bac <HAL_ADC_MspInit+0xc4>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b14:	6153      	str	r3, [r2, #20]
 8001b16:	4b25      	ldr	r3, [pc, #148]	; (8001bac <HAL_ADC_MspInit+0xc4>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	4b22      	ldr	r3, [pc, #136]	; (8001bac <HAL_ADC_MspInit+0xc4>)
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	4a21      	ldr	r2, [pc, #132]	; (8001bac <HAL_ADC_MspInit+0xc4>)
 8001b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b2c:	6153      	str	r3, [r2, #20]
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <HAL_ADC_MspInit+0xc4>)
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b50:	f001 feb2 	bl	80038b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b54:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <HAL_ADC_MspInit+0xc8>)
 8001b56:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <HAL_ADC_MspInit+0xcc>)
 8001b58:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_ADC_MspInit+0xc8>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <HAL_ADC_MspInit+0xc8>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_ADC_MspInit+0xc8>)
 8001b68:	2280      	movs	r2, #128	; 0x80
 8001b6a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <HAL_ADC_MspInit+0xc8>)
 8001b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b72:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <HAL_ADC_MspInit+0xc8>)
 8001b76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b7a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <HAL_ADC_MspInit+0xc8>)
 8001b7e:	2220      	movs	r2, #32
 8001b80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_ADC_MspInit+0xc8>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b88:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <HAL_ADC_MspInit+0xc8>)
 8001b8a:	f001 fc6a 	bl	8003462 <HAL_DMA_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001b94:	f7ff ff7e 	bl	8001a94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a05      	ldr	r2, [pc, #20]	; (8001bb0 <HAL_ADC_MspInit+0xc8>)
 8001b9c:	639a      	str	r2, [r3, #56]	; 0x38
 8001b9e:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <HAL_ADC_MspInit+0xc8>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ba4:	bf00      	nop
 8001ba6:	3728      	adds	r7, #40	; 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	20000144 	.word	0x20000144
 8001bb4:	40020008 	.word	0x40020008

08001bb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc8:	d10c      	bne.n	8001be4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bca:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_TIM_Base_MspInit+0x80>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	4a1a      	ldr	r2, [pc, #104]	; (8001c38 <HAL_TIM_Base_MspInit+0x80>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	61d3      	str	r3, [r2, #28]
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_TIM_Base_MspInit+0x80>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001be2:	e022      	b.n	8001c2a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <HAL_TIM_Base_MspInit+0x84>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d10c      	bne.n	8001c08 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_TIM_Base_MspInit+0x80>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	4a11      	ldr	r2, [pc, #68]	; (8001c38 <HAL_TIM_Base_MspInit+0x80>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	61d3      	str	r3, [r2, #28]
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <HAL_TIM_Base_MspInit+0x80>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
}
 8001c06:	e010      	b.n	8001c2a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <HAL_TIM_Base_MspInit+0x88>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d10b      	bne.n	8001c2a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_TIM_Base_MspInit+0x80>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <HAL_TIM_Base_MspInit+0x80>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	61d3      	str	r3, [r2, #28]
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_TIM_Base_MspInit+0x80>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
}
 8001c2a:	bf00      	nop
 8001c2c:	371c      	adds	r7, #28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40000400 	.word	0x40000400
 8001c40:	40000800 	.word	0x40000800

08001c44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08c      	sub	sp, #48	; 0x30
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c64:	d13a      	bne.n	8001cdc <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	4b42      	ldr	r3, [pc, #264]	; (8001d70 <HAL_TIM_MspPostInit+0x12c>)
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	4a41      	ldr	r2, [pc, #260]	; (8001d70 <HAL_TIM_MspPostInit+0x12c>)
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c70:	6153      	str	r3, [r2, #20]
 8001c72:	4b3f      	ldr	r3, [pc, #252]	; (8001d70 <HAL_TIM_MspPostInit+0x12c>)
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7e:	4b3c      	ldr	r3, [pc, #240]	; (8001d70 <HAL_TIM_MspPostInit+0x12c>)
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	4a3b      	ldr	r2, [pc, #236]	; (8001d70 <HAL_TIM_MspPostInit+0x12c>)
 8001c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c88:	6153      	str	r3, [r2, #20]
 8001c8a:	4b39      	ldr	r3, [pc, #228]	; (8001d70 <HAL_TIM_MspPostInit+0x12c>)
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c96:	2320      	movs	r3, #32
 8001c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 031c 	add.w	r3, r7, #28
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb4:	f001 fe00 	bl	80038b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001cb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4827      	ldr	r0, [pc, #156]	; (8001d74 <HAL_TIM_MspPostInit+0x130>)
 8001cd6:	f001 fdef 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001cda:	e044      	b.n	8001d66 <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM3)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a25      	ldr	r2, [pc, #148]	; (8001d78 <HAL_TIM_MspPostInit+0x134>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d11c      	bne.n	8001d20 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce6:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <HAL_TIM_MspPostInit+0x12c>)
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	4a21      	ldr	r2, [pc, #132]	; (8001d70 <HAL_TIM_MspPostInit+0x12c>)
 8001cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf0:	6153      	str	r3, [r2, #20]
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <HAL_TIM_MspPostInit+0x12c>)
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d12:	f107 031c 	add.w	r3, r7, #28
 8001d16:	4619      	mov	r1, r3
 8001d18:	4816      	ldr	r0, [pc, #88]	; (8001d74 <HAL_TIM_MspPostInit+0x130>)
 8001d1a:	f001 fdcd 	bl	80038b8 <HAL_GPIO_Init>
}
 8001d1e:	e022      	b.n	8001d66 <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM4)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a15      	ldr	r2, [pc, #84]	; (8001d7c <HAL_TIM_MspPostInit+0x138>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d11d      	bne.n	8001d66 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <HAL_TIM_MspPostInit+0x12c>)
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <HAL_TIM_MspPostInit+0x12c>)
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d34:	6153      	str	r3, [r2, #20]
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_TIM_MspPostInit+0x12c>)
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001d54:	230a      	movs	r3, #10
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	f107 031c 	add.w	r3, r7, #28
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d62:	f001 fda9 	bl	80038b8 <HAL_GPIO_Init>
}
 8001d66:	bf00      	nop
 8001d68:	3730      	adds	r7, #48	; 0x30
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000
 8001d74:	48000400 	.word	0x48000400
 8001d78:	40000400 	.word	0x40000400
 8001d7c:	40000800 	.word	0x40000800

08001d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1b      	ldr	r2, [pc, #108]	; (8001e0c <HAL_UART_MspInit+0x8c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d130      	bne.n	8001e04 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001da2:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <HAL_UART_MspInit+0x90>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	4a1a      	ldr	r2, [pc, #104]	; (8001e10 <HAL_UART_MspInit+0x90>)
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	61d3      	str	r3, [r2, #28]
 8001dae:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <HAL_UART_MspInit+0x90>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_UART_MspInit+0x90>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <HAL_UART_MspInit+0x90>)
 8001dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc4:	6153      	str	r3, [r2, #20]
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_UART_MspInit+0x90>)
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dd2:	230c      	movs	r3, #12
 8001dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001de2:	2307      	movs	r3, #7
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	4619      	mov	r1, r3
 8001dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df0:	f001 fd62 	bl	80038b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2100      	movs	r1, #0
 8001df8:	2026      	movs	r0, #38	; 0x26
 8001dfa:	f001 fafc 	bl	80033f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dfe:	2026      	movs	r0, #38	; 0x26
 8001e00:	f001 fb15 	bl	800342e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e04:	bf00      	nop
 8001e06:	3728      	adds	r7, #40	; 0x28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40004400 	.word	0x40004400
 8001e10:	40021000 	.word	0x40021000

08001e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <NMI_Handler+0x4>

08001e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <HardFault_Handler+0x4>

08001e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <MemManage_Handler+0x4>

08001e26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <BusFault_Handler+0x4>

08001e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <UsageFault_Handler+0x4>

08001e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e60:	f000 f972 	bl	8002148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <DMA1_Channel1_IRQHandler+0x10>)
 8001e6e:	f001 fc15 	bl	800369c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000144 	.word	0x20000144

08001e7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 8001e80:	4b64      	ldr	r3, [pc, #400]	; (8002014 <EXTI9_5_IRQHandler+0x198>)
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d038      	beq.n	8001efe <EXTI9_5_IRQHandler+0x82>

		if(HAL_GetTick() - ticks_pressed >= 20){
 8001e8c:	f000 f970 	bl	8002170 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4b61      	ldr	r3, [pc, #388]	; (8002018 <EXTI9_5_IRQHandler+0x19c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b13      	cmp	r3, #19
 8001e9a:	d92c      	bls.n	8001ef6 <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 8001e9c:	4b5f      	ldr	r3, [pc, #380]	; (800201c <EXTI9_5_IRQHandler+0x1a0>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d112      	bne.n	8001ecc <EXTI9_5_IRQHandler+0x50>
 8001ea6:	2140      	movs	r1, #64	; 0x40
 8001ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eac:	f001 fe8e 	bl	8003bcc <HAL_GPIO_ReadPin>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10a      	bne.n	8001ecc <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 8001eb6:	4b59      	ldr	r3, [pc, #356]	; (800201c <EXTI9_5_IRQHandler+0x1a0>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8001ebc:	f000 f958 	bl	8002170 <HAL_GetTick>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	4a55      	ldr	r2, [pc, #340]	; (8002018 <EXTI9_5_IRQHandler+0x19c>)
 8001ec4:	6013      	str	r3, [r2, #0]

				middle_button_pressed = 1;
 8001ec6:	4b56      	ldr	r3, [pc, #344]	; (8002020 <EXTI9_5_IRQHandler+0x1a4>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 8001ecc:	4b53      	ldr	r3, [pc, #332]	; (800201c <EXTI9_5_IRQHandler+0x1a0>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10f      	bne.n	8001ef6 <EXTI9_5_IRQHandler+0x7a>
 8001ed6:	2140      	movs	r1, #64	; 0x40
 8001ed8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001edc:	f001 fe76 	bl	8003bcc <HAL_GPIO_ReadPin>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d107      	bne.n	8001ef6 <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 8001ee6:	f000 f943 	bl	8002170 <HAL_GetTick>
 8001eea:	4603      	mov	r3, r0
 8001eec:	4a4a      	ldr	r2, [pc, #296]	; (8002018 <EXTI9_5_IRQHandler+0x19c>)
 8001eee:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8001ef0:	4b4a      	ldr	r3, [pc, #296]	; (800201c <EXTI9_5_IRQHandler+0x1a0>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 8001ef6:	4b47      	ldr	r3, [pc, #284]	; (8002014 <EXTI9_5_IRQHandler+0x198>)
 8001ef8:	2240      	movs	r2, #64	; 0x40
 8001efa:	615a      	str	r2, [r3, #20]
 8001efc:	e07d      	b.n	8001ffa <EXTI9_5_IRQHandler+0x17e>
	}
	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8001efe:	4b45      	ldr	r3, [pc, #276]	; (8002014 <EXTI9_5_IRQHandler+0x198>)
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d038      	beq.n	8001f7c <EXTI9_5_IRQHandler+0x100>

			if(HAL_GetTick() - ticks_pressed >= 20){
 8001f0a:	f000 f931 	bl	8002170 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	4b41      	ldr	r3, [pc, #260]	; (8002018 <EXTI9_5_IRQHandler+0x19c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b13      	cmp	r3, #19
 8001f18:	d92c      	bls.n	8001f74 <EXTI9_5_IRQHandler+0xf8>
				// stable low state
				if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 8001f1a:	4b40      	ldr	r3, [pc, #256]	; (800201c <EXTI9_5_IRQHandler+0x1a0>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d112      	bne.n	8001f4a <EXTI9_5_IRQHandler+0xce>
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f2a:	f001 fe4f 	bl	8003bcc <HAL_GPIO_ReadPin>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10a      	bne.n	8001f4a <EXTI9_5_IRQHandler+0xce>
					button_state =0 ; // stable low reached
 8001f34:	4b39      	ldr	r3, [pc, #228]	; (800201c <EXTI9_5_IRQHandler+0x1a0>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
					ticks_pressed = HAL_GetTick() ;
 8001f3a:	f000 f919 	bl	8002170 <HAL_GetTick>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4a35      	ldr	r2, [pc, #212]	; (8002018 <EXTI9_5_IRQHandler+0x19c>)
 8001f42:	6013      	str	r3, [r2, #0]

					right_button_pressed = 1;
 8001f44:	4b37      	ldr	r3, [pc, #220]	; (8002024 <EXTI9_5_IRQHandler+0x1a8>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
				}

				// stable high state
				if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 8001f4a:	4b34      	ldr	r3, [pc, #208]	; (800201c <EXTI9_5_IRQHandler+0x1a0>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10f      	bne.n	8001f74 <EXTI9_5_IRQHandler+0xf8>
 8001f54:	2180      	movs	r1, #128	; 0x80
 8001f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f5a:	f001 fe37 	bl	8003bcc <HAL_GPIO_ReadPin>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d107      	bne.n	8001f74 <EXTI9_5_IRQHandler+0xf8>
					ticks_pressed = HAL_GetTick() ;
 8001f64:	f000 f904 	bl	8002170 <HAL_GetTick>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	4a2b      	ldr	r2, [pc, #172]	; (8002018 <EXTI9_5_IRQHandler+0x19c>)
 8001f6c:	6013      	str	r3, [r2, #0]
					button_state =1 ; // stable high state
 8001f6e:	4b2b      	ldr	r3, [pc, #172]	; (800201c <EXTI9_5_IRQHandler+0x1a0>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]

				}
			}


			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <EXTI9_5_IRQHandler+0x198>)
 8001f76:	2280      	movs	r2, #128	; 0x80
 8001f78:	615a      	str	r2, [r3, #20]
 8001f7a:	e03e      	b.n	8001ffa <EXTI9_5_IRQHandler+0x17e>
	}
	else{
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 8001f7c:	4b25      	ldr	r3, [pc, #148]	; (8002014 <EXTI9_5_IRQHandler+0x198>)
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d038      	beq.n	8001ffa <EXTI9_5_IRQHandler+0x17e>

				if(HAL_GetTick() - ticks_pressed >= 20){
 8001f88:	f000 f8f2 	bl	8002170 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	4b22      	ldr	r3, [pc, #136]	; (8002018 <EXTI9_5_IRQHandler+0x19c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b13      	cmp	r3, #19
 8001f96:	d92c      	bls.n	8001ff2 <EXTI9_5_IRQHandler+0x176>
					// stable low state
					if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 8001f98:	4b20      	ldr	r3, [pc, #128]	; (800201c <EXTI9_5_IRQHandler+0x1a0>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d112      	bne.n	8001fc8 <EXTI9_5_IRQHandler+0x14c>
 8001fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fa6:	4820      	ldr	r0, [pc, #128]	; (8002028 <EXTI9_5_IRQHandler+0x1ac>)
 8001fa8:	f001 fe10 	bl	8003bcc <HAL_GPIO_ReadPin>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10a      	bne.n	8001fc8 <EXTI9_5_IRQHandler+0x14c>
						button_state =0 ; // stable low reached
 8001fb2:	4b1a      	ldr	r3, [pc, #104]	; (800201c <EXTI9_5_IRQHandler+0x1a0>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
						ticks_pressed = HAL_GetTick() ;
 8001fb8:	f000 f8da 	bl	8002170 <HAL_GetTick>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4a16      	ldr	r2, [pc, #88]	; (8002018 <EXTI9_5_IRQHandler+0x19c>)
 8001fc0:	6013      	str	r3, [r2, #0]

						left_button_pressed = 1;
 8001fc2:	4b1a      	ldr	r3, [pc, #104]	; (800202c <EXTI9_5_IRQHandler+0x1b0>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	701a      	strb	r2, [r3, #0]
					}

					// stable high state
					if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <EXTI9_5_IRQHandler+0x1a0>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10f      	bne.n	8001ff2 <EXTI9_5_IRQHandler+0x176>
 8001fd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fd6:	4814      	ldr	r0, [pc, #80]	; (8002028 <EXTI9_5_IRQHandler+0x1ac>)
 8001fd8:	f001 fdf8 	bl	8003bcc <HAL_GPIO_ReadPin>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d107      	bne.n	8001ff2 <EXTI9_5_IRQHandler+0x176>
						ticks_pressed = HAL_GetTick() ;
 8001fe2:	f000 f8c5 	bl	8002170 <HAL_GetTick>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <EXTI9_5_IRQHandler+0x19c>)
 8001fea:	6013      	str	r3, [r2, #0]
						button_state =1 ; // stable high state
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <EXTI9_5_IRQHandler+0x1a0>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]

					}
				}
				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <EXTI9_5_IRQHandler+0x198>)
 8001ff4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ff8:	615a      	str	r2, [r3, #20]
			}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001ffa:	2040      	movs	r0, #64	; 0x40
 8001ffc:	f001 fe16 	bl	8003c2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002000:	2080      	movs	r0, #128	; 0x80
 8002002:	f001 fe13 	bl	8003c2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002006:	f44f 7080 	mov.w	r0, #256	; 0x100
 800200a:	f001 fe0f 	bl	8003c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40010400 	.word	0x40010400
 8002018:	2000232c 	.word	0x2000232c
 800201c:	20000067 	.word	0x20000067
 8002020:	20002330 	.word	0x20002330
 8002024:	20002331 	.word	0x20002331
 8002028:	48000400 	.word	0x48000400
 800202c:	20002332 	.word	0x20002332

08002030 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <USART2_IRQHandler+0x10>)
 8002036:	f004 fcd1 	bl	80069dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	2000026c 	.word	0x2000026c

08002044 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <SystemInit+0x20>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <SystemInit+0x20>)
 8002050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800206c:	f7ff ffea 	bl	8002044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002070:	480c      	ldr	r0, [pc, #48]	; (80020a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002072:	490d      	ldr	r1, [pc, #52]	; (80020a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002074:	4a0d      	ldr	r2, [pc, #52]	; (80020ac <LoopForever+0xe>)
  movs r3, #0
 8002076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002078:	e002      	b.n	8002080 <LoopCopyDataInit>

0800207a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800207a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800207c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800207e:	3304      	adds	r3, #4

08002080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002084:	d3f9      	bcc.n	800207a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002086:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002088:	4c0a      	ldr	r4, [pc, #40]	; (80020b4 <LoopForever+0x16>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800208c:	e001      	b.n	8002092 <LoopFillZerobss>

0800208e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800208e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002090:	3204      	adds	r2, #4

08002092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002094:	d3fb      	bcc.n	800208e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002096:	f005 ff0f 	bl	8007eb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800209a:	f7fe ff23 	bl	8000ee4 <main>

0800209e <LoopForever>:

LoopForever:
    b LoopForever
 800209e:	e7fe      	b.n	800209e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020a0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80020a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a8:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 80020ac:	08008310 	.word	0x08008310
  ldr r2, =_sbss
 80020b0:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 80020b4:	20002338 	.word	0x20002338

080020b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020b8:	e7fe      	b.n	80020b8 <ADC1_2_IRQHandler>
	...

080020bc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_Init+0x28>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <HAL_Init+0x28>)
 80020c6:	f043 0310 	orr.w	r3, r3, #16
 80020ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020cc:	2003      	movs	r0, #3
 80020ce:	f001 f987 	bl	80033e0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020d2:	2000      	movs	r0, #0
 80020d4:	f000 f808 	bl	80020e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d8:	f7ff fce2 	bl	8001aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40022000 	.word	0x40022000

080020e8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_InitTick+0x54>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_InitTick+0x58>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	4619      	mov	r1, r3
 80020fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002102:	fbb2 f3f3 	udiv	r3, r2, r3
 8002106:	4618      	mov	r0, r3
 8002108:	f001 f99f 	bl	800344a <HAL_SYSTICK_Config>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e00e      	b.n	8002134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b0f      	cmp	r3, #15
 800211a:	d80a      	bhi.n	8002132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800211c:	2200      	movs	r2, #0
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	f04f 30ff 	mov.w	r0, #4294967295
 8002124:	f001 f967 	bl	80033f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002128:	4a06      	ldr	r2, [pc, #24]	; (8002144 <HAL_InitTick+0x5c>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	e000      	b.n	8002134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000068 	.word	0x20000068
 8002140:	20000070 	.word	0x20000070
 8002144:	2000006c 	.word	0x2000006c

08002148 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_IncTick+0x20>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_IncTick+0x24>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4413      	add	r3, r2
 8002158:	4a04      	ldr	r2, [pc, #16]	; (800216c <HAL_IncTick+0x24>)
 800215a:	6013      	str	r3, [r2, #0]
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000070 	.word	0x20000070
 800216c:	20002334 	.word	0x20002334

08002170 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return uwTick;  
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <HAL_GetTick+0x14>)
 8002176:	681b      	ldr	r3, [r3, #0]
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	20002334 	.word	0x20002334

08002188 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002190:	f7ff ffee 	bl	8002170 <HAL_GetTick>
 8002194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a0:	d005      	beq.n	80021ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <HAL_Delay+0x44>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4413      	add	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80021ae:	bf00      	nop
 80021b0:	f7ff ffde 	bl	8002170 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d8f7      	bhi.n	80021b0 <HAL_Delay+0x28>
  {
  }
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000070 	.word	0x20000070

080021d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b09a      	sub	sp, #104	; 0x68
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e1e3      	b.n	80025e0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	d176      	bne.n	8002318 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d152      	bne.n	80022d8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff fc4b 	bl	8001ae8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d13b      	bne.n	80022d8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 ff87 	bl	8003174 <ADC_Disable>
 8002266:	4603      	mov	r3, r0
 8002268:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	2b00      	cmp	r3, #0
 8002276:	d12f      	bne.n	80022d8 <HAL_ADC_Init+0xe0>
 8002278:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800227c:	2b00      	cmp	r3, #0
 800227e:	d12b      	bne.n	80022d8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002288:	f023 0302 	bic.w	r3, r3, #2
 800228c:	f043 0202 	orr.w	r2, r3, #2
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022a2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022b2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022b4:	4b92      	ldr	r3, [pc, #584]	; (8002500 <HAL_ADC_Init+0x308>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a92      	ldr	r2, [pc, #584]	; (8002504 <HAL_ADC_Init+0x30c>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	0c9a      	lsrs	r2, r3, #18
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022ca:	e002      	b.n	80022d2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f9      	bne.n	80022cc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d007      	beq.n	80022f6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80022f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022f4:	d110      	bne.n	8002318 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f023 0312 	bic.w	r3, r3, #18
 80022fe:	f043 0210 	orr.w	r2, r3, #16
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	f043 0201 	orr.w	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	2b00      	cmp	r3, #0
 8002322:	f040 8150 	bne.w	80025c6 <HAL_ADC_Init+0x3ce>
 8002326:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800232a:	2b00      	cmp	r3, #0
 800232c:	f040 814b 	bne.w	80025c6 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800233a:	2b00      	cmp	r3, #0
 800233c:	f040 8143 	bne.w	80025c6 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002348:	f043 0202 	orr.w	r2, r3, #2
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002358:	d004      	beq.n	8002364 <HAL_ADC_Init+0x16c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a6a      	ldr	r2, [pc, #424]	; (8002508 <HAL_ADC_Init+0x310>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d101      	bne.n	8002368 <HAL_ADC_Init+0x170>
 8002364:	4b69      	ldr	r3, [pc, #420]	; (800250c <HAL_ADC_Init+0x314>)
 8002366:	e000      	b.n	800236a <HAL_ADC_Init+0x172>
 8002368:	4b69      	ldr	r3, [pc, #420]	; (8002510 <HAL_ADC_Init+0x318>)
 800236a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002374:	d102      	bne.n	800237c <HAL_ADC_Init+0x184>
 8002376:	4b64      	ldr	r3, [pc, #400]	; (8002508 <HAL_ADC_Init+0x310>)
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	e01a      	b.n	80023b2 <HAL_ADC_Init+0x1ba>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a61      	ldr	r2, [pc, #388]	; (8002508 <HAL_ADC_Init+0x310>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d103      	bne.n	800238e <HAL_ADC_Init+0x196>
 8002386:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	e011      	b.n	80023b2 <HAL_ADC_Init+0x1ba>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a60      	ldr	r2, [pc, #384]	; (8002514 <HAL_ADC_Init+0x31c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d102      	bne.n	800239e <HAL_ADC_Init+0x1a6>
 8002398:	4b5f      	ldr	r3, [pc, #380]	; (8002518 <HAL_ADC_Init+0x320>)
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	e009      	b.n	80023b2 <HAL_ADC_Init+0x1ba>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a5d      	ldr	r2, [pc, #372]	; (8002518 <HAL_ADC_Init+0x320>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d102      	bne.n	80023ae <HAL_ADC_Init+0x1b6>
 80023a8:	4b5a      	ldr	r3, [pc, #360]	; (8002514 <HAL_ADC_Init+0x31c>)
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	e001      	b.n	80023b2 <HAL_ADC_Init+0x1ba>
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d108      	bne.n	80023d2 <HAL_ADC_Init+0x1da>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_Init+0x1da>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_ADC_Init+0x1dc>
 80023d2:	2300      	movs	r3, #0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d11c      	bne.n	8002412 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023d8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d010      	beq.n	8002400 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d107      	bne.n	80023fa <HAL_ADC_Init+0x202>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_ADC_Init+0x202>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <HAL_ADC_Init+0x204>
 80023fa:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d108      	bne.n	8002412 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	431a      	orrs	r2, r3
 800240e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002410:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	7e5b      	ldrb	r3, [r3, #25]
 8002416:	035b      	lsls	r3, r3, #13
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800241c:	2a01      	cmp	r2, #1
 800241e:	d002      	beq.n	8002426 <HAL_ADC_Init+0x22e>
 8002420:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002424:	e000      	b.n	8002428 <HAL_ADC_Init+0x230>
 8002426:	2200      	movs	r2, #0
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	4313      	orrs	r3, r2
 8002436:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002438:	4313      	orrs	r3, r2
 800243a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d11b      	bne.n	800247e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	7e5b      	ldrb	r3, [r3, #25]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d109      	bne.n	8002462 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	3b01      	subs	r3, #1
 8002454:	045a      	lsls	r2, r3, #17
 8002456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002458:	4313      	orrs	r3, r2
 800245a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245e:	663b      	str	r3, [r7, #96]	; 0x60
 8002460:	e00d      	b.n	800247e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800246a:	f043 0220 	orr.w	r2, r3, #32
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f043 0201 	orr.w	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	2b01      	cmp	r3, #1
 8002484:	d054      	beq.n	8002530 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a22      	ldr	r2, [pc, #136]	; (8002514 <HAL_ADC_Init+0x31c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d004      	beq.n	800249a <HAL_ADC_Init+0x2a2>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a20      	ldr	r2, [pc, #128]	; (8002518 <HAL_ADC_Init+0x320>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d140      	bne.n	800251c <HAL_ADC_Init+0x324>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80024a2:	d02a      	beq.n	80024fa <HAL_ADC_Init+0x302>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ac:	d022      	beq.n	80024f4 <HAL_ADC_Init+0x2fc>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80024b6:	d01a      	beq.n	80024ee <HAL_ADC_Init+0x2f6>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80024c0:	d012      	beq.n	80024e8 <HAL_ADC_Init+0x2f0>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80024ca:	d00a      	beq.n	80024e2 <HAL_ADC_Init+0x2ea>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80024d4:	d002      	beq.n	80024dc <HAL_ADC_Init+0x2e4>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	e023      	b.n	8002524 <HAL_ADC_Init+0x32c>
 80024dc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80024e0:	e020      	b.n	8002524 <HAL_ADC_Init+0x32c>
 80024e2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80024e6:	e01d      	b.n	8002524 <HAL_ADC_Init+0x32c>
 80024e8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80024ec:	e01a      	b.n	8002524 <HAL_ADC_Init+0x32c>
 80024ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f2:	e017      	b.n	8002524 <HAL_ADC_Init+0x32c>
 80024f4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80024f8:	e014      	b.n	8002524 <HAL_ADC_Init+0x32c>
 80024fa:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80024fe:	e011      	b.n	8002524 <HAL_ADC_Init+0x32c>
 8002500:	20000068 	.word	0x20000068
 8002504:	431bde83 	.word	0x431bde83
 8002508:	50000100 	.word	0x50000100
 800250c:	50000300 	.word	0x50000300
 8002510:	50000700 	.word	0x50000700
 8002514:	50000400 	.word	0x50000400
 8002518:	50000500 	.word	0x50000500
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002528:	4313      	orrs	r3, r2
 800252a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800252c:	4313      	orrs	r3, r2
 800252e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b00      	cmp	r3, #0
 800253c:	d114      	bne.n	8002568 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800254c:	f023 0302 	bic.w	r3, r3, #2
 8002550:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7e1b      	ldrb	r3, [r3, #24]
 8002556:	039a      	lsls	r2, r3, #14
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4313      	orrs	r3, r2
 8002562:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002564:	4313      	orrs	r3, r2
 8002566:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <HAL_ADC_Init+0x3f0>)
 8002570:	4013      	ands	r3, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002578:	430b      	orrs	r3, r1
 800257a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d10c      	bne.n	800259e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f023 010f 	bic.w	r1, r3, #15
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	1e5a      	subs	r2, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	631a      	str	r2, [r3, #48]	; 0x30
 800259c:	e007      	b.n	80025ae <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 020f 	bic.w	r2, r2, #15
 80025ac:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	f023 0303 	bic.w	r3, r3, #3
 80025bc:	f043 0201 	orr.w	r2, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	641a      	str	r2, [r3, #64]	; 0x40
 80025c4:	e00a      	b.n	80025dc <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f023 0312 	bic.w	r3, r3, #18
 80025ce:	f043 0210 	orr.w	r2, r3, #16
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80025d6:	2301      	movs	r3, #1
 80025d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80025dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3768      	adds	r7, #104	; 0x68
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	fff0c007 	.word	0xfff0c007

080025ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b00      	cmp	r3, #0
 8002608:	f040 80f7 	bne.w	80027fa <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_ADC_Start_DMA+0x2e>
 8002616:	2302      	movs	r3, #2
 8002618:	e0f2      	b.n	8002800 <HAL_ADC_Start_DMA+0x214>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800262a:	d004      	beq.n	8002636 <HAL_ADC_Start_DMA+0x4a>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a75      	ldr	r2, [pc, #468]	; (8002808 <HAL_ADC_Start_DMA+0x21c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d109      	bne.n	800264a <HAL_ADC_Start_DMA+0x5e>
 8002636:	4b75      	ldr	r3, [pc, #468]	; (800280c <HAL_ADC_Start_DMA+0x220>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	2b00      	cmp	r3, #0
 8002640:	bf0c      	ite	eq
 8002642:	2301      	moveq	r3, #1
 8002644:	2300      	movne	r3, #0
 8002646:	b2db      	uxtb	r3, r3
 8002648:	e008      	b.n	800265c <HAL_ADC_Start_DMA+0x70>
 800264a:	4b71      	ldr	r3, [pc, #452]	; (8002810 <HAL_ADC_Start_DMA+0x224>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	2b00      	cmp	r3, #0
 8002654:	bf0c      	ite	eq
 8002656:	2301      	moveq	r3, #1
 8002658:	2300      	movne	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80c5 	beq.w	80027ec <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 fd22 	bl	80030ac <ADC_Enable>
 8002668:	4603      	mov	r3, r0
 800266a:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f040 80b7 	bne.w	80027e2 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800267c:	f023 0301 	bic.w	r3, r3, #1
 8002680:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002690:	d004      	beq.n	800269c <HAL_ADC_Start_DMA+0xb0>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a5c      	ldr	r2, [pc, #368]	; (8002808 <HAL_ADC_Start_DMA+0x21c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d106      	bne.n	80026aa <HAL_ADC_Start_DMA+0xbe>
 800269c:	4b5b      	ldr	r3, [pc, #364]	; (800280c <HAL_ADC_Start_DMA+0x220>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d010      	beq.n	80026ca <HAL_ADC_Start_DMA+0xde>
 80026a8:	e005      	b.n	80026b6 <HAL_ADC_Start_DMA+0xca>
 80026aa:	4b59      	ldr	r3, [pc, #356]	; (8002810 <HAL_ADC_Start_DMA+0x224>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 031f 	and.w	r3, r3, #31
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d009      	beq.n	80026ca <HAL_ADC_Start_DMA+0xde>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026be:	d004      	beq.n	80026ca <HAL_ADC_Start_DMA+0xde>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a53      	ldr	r2, [pc, #332]	; (8002814 <HAL_ADC_Start_DMA+0x228>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d115      	bne.n	80026f6 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d036      	beq.n	8002752 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80026f4:	e02d      	b.n	8002752 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800270a:	d004      	beq.n	8002716 <HAL_ADC_Start_DMA+0x12a>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a3d      	ldr	r2, [pc, #244]	; (8002808 <HAL_ADC_Start_DMA+0x21c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d10a      	bne.n	800272c <HAL_ADC_Start_DMA+0x140>
 8002716:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf14      	ite	ne
 8002724:	2301      	movne	r3, #1
 8002726:	2300      	moveq	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	e008      	b.n	800273e <HAL_ADC_Start_DMA+0x152>
 800272c:	4b39      	ldr	r3, [pc, #228]	; (8002814 <HAL_ADC_Start_DMA+0x228>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	bf14      	ite	ne
 8002738:	2301      	movne	r3, #1
 800273a:	2300      	moveq	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800274a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800275a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800275e:	d106      	bne.n	800276e <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	f023 0206 	bic.w	r2, r3, #6
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	645a      	str	r2, [r3, #68]	; 0x44
 800276c:	e002      	b.n	8002774 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002780:	4a25      	ldr	r2, [pc, #148]	; (8002818 <HAL_ADC_Start_DMA+0x22c>)
 8002782:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002788:	4a24      	ldr	r2, [pc, #144]	; (800281c <HAL_ADC_Start_DMA+0x230>)
 800278a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002790:	4a23      	ldr	r2, [pc, #140]	; (8002820 <HAL_ADC_Start_DMA+0x234>)
 8002792:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	221c      	movs	r2, #28
 800279a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0210 	orr.w	r2, r2, #16
 80027aa:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3340      	adds	r3, #64	; 0x40
 80027c6:	4619      	mov	r1, r3
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f000 fe90 	bl	80034f0 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0204 	orr.w	r2, r2, #4
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	e00d      	b.n	80027fe <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80027ea:	e008      	b.n	80027fe <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80027f8:	e001      	b.n	80027fe <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027fa:	2302      	movs	r3, #2
 80027fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	50000100 	.word	0x50000100
 800280c:	50000300 	.word	0x50000300
 8002810:	50000700 	.word	0x50000700
 8002814:	50000400 	.word	0x50000400
 8002818:	08002fe1 	.word	0x08002fe1
 800281c:	0800305b 	.word	0x0800305b
 8002820:	08003077 	.word	0x08003077

08002824 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002824:	b480      	push	{r7}
 8002826:	b09b      	sub	sp, #108	; 0x6c
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x22>
 8002842:	2302      	movs	r3, #2
 8002844:	e2ca      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x5b8>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	f040 82ae 	bne.w	8002dba <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b04      	cmp	r3, #4
 8002864:	d81c      	bhi.n	80028a0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	461a      	mov	r2, r3
 800287a:	231f      	movs	r3, #31
 800287c:	4093      	lsls	r3, r2
 800287e:	43db      	mvns	r3, r3
 8002880:	4019      	ands	r1, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4413      	add	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	fa00 f203 	lsl.w	r2, r0, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	631a      	str	r2, [r3, #48]	; 0x30
 800289e:	e063      	b.n	8002968 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b09      	cmp	r3, #9
 80028a6:	d81e      	bhi.n	80028e6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4413      	add	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	3b1e      	subs	r3, #30
 80028bc:	221f      	movs	r2, #31
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	4019      	ands	r1, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	3b1e      	subs	r3, #30
 80028d8:	fa00 f203 	lsl.w	r2, r0, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	635a      	str	r2, [r3, #52]	; 0x34
 80028e4:	e040      	b.n	8002968 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b0e      	cmp	r3, #14
 80028ec:	d81e      	bhi.n	800292c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	3b3c      	subs	r3, #60	; 0x3c
 8002902:	221f      	movs	r2, #31
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	4019      	ands	r1, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	3b3c      	subs	r3, #60	; 0x3c
 800291e:	fa00 f203 	lsl.w	r2, r0, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	639a      	str	r2, [r3, #56]	; 0x38
 800292a:	e01d      	b.n	8002968 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	3b5a      	subs	r3, #90	; 0x5a
 8002940:	221f      	movs	r2, #31
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	4019      	ands	r1, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	3b5a      	subs	r3, #90	; 0x5a
 800295c:	fa00 f203 	lsl.w	r2, r0, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b00      	cmp	r3, #0
 8002974:	f040 80e5 	bne.w	8002b42 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b09      	cmp	r3, #9
 800297e:	d91c      	bls.n	80029ba <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6999      	ldr	r1, [r3, #24]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4613      	mov	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4413      	add	r3, r2
 8002990:	3b1e      	subs	r3, #30
 8002992:	2207      	movs	r2, #7
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	4019      	ands	r1, r3
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	6898      	ldr	r0, [r3, #8]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	3b1e      	subs	r3, #30
 80029ac:	fa00 f203 	lsl.w	r2, r0, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	619a      	str	r2, [r3, #24]
 80029b8:	e019      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6959      	ldr	r1, [r3, #20]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4613      	mov	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4413      	add	r3, r2
 80029ca:	2207      	movs	r2, #7
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	4019      	ands	r1, r3
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	6898      	ldr	r0, [r3, #8]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4613      	mov	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	fa00 f203 	lsl.w	r2, r0, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	695a      	ldr	r2, [r3, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	08db      	lsrs	r3, r3, #3
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d84f      	bhi.n	8002ab0 <HAL_ADC_ConfigChannel+0x28c>
 8002a10:	a201      	add	r2, pc, #4	; (adr r2, 8002a18 <HAL_ADC_ConfigChannel+0x1f4>)
 8002a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a16:	bf00      	nop
 8002a18:	08002a29 	.word	0x08002a29
 8002a1c:	08002a4b 	.word	0x08002a4b
 8002a20:	08002a6d 	.word	0x08002a6d
 8002a24:	08002a8f 	.word	0x08002a8f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a2e:	4b9a      	ldr	r3, [pc, #616]	; (8002c98 <HAL_ADC_ConfigChannel+0x474>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	0691      	lsls	r1, r2, #26
 8002a38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a46:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a48:	e07e      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a50:	4b91      	ldr	r3, [pc, #580]	; (8002c98 <HAL_ADC_ConfigChannel+0x474>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	0691      	lsls	r1, r2, #26
 8002a5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a68:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a6a:	e06d      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a72:	4b89      	ldr	r3, [pc, #548]	; (8002c98 <HAL_ADC_ConfigChannel+0x474>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	6812      	ldr	r2, [r2, #0]
 8002a7a:	0691      	lsls	r1, r2, #26
 8002a7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a8a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a8c:	e05c      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a94:	4b80      	ldr	r3, [pc, #512]	; (8002c98 <HAL_ADC_ConfigChannel+0x474>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	0691      	lsls	r1, r2, #26
 8002a9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002aac:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002aae:	e04b      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	069b      	lsls	r3, r3, #26
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d107      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ad2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ada:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	069b      	lsls	r3, r3, #26
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d107      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002af6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002afe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	069b      	lsls	r3, r3, #26
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d107      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b1a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	069b      	lsls	r3, r3, #26
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d10a      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b3e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002b40:	e001      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002b42:	bf00      	nop
 8002b44:	e000      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002b46:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d108      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x344>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x344>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x346>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f040 8130 	bne.w	8002dd0 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d00f      	beq.n	8002b98 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2201      	movs	r2, #1
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	400a      	ands	r2, r1
 8002b92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b96:	e049      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b09      	cmp	r3, #9
 8002bb8:	d91c      	bls.n	8002bf4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6999      	ldr	r1, [r3, #24]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	4413      	add	r3, r2
 8002bca:	3b1b      	subs	r3, #27
 8002bcc:	2207      	movs	r2, #7
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	4019      	ands	r1, r3
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	6898      	ldr	r0, [r3, #8]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4613      	mov	r3, r2
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4413      	add	r3, r2
 8002be4:	3b1b      	subs	r3, #27
 8002be6:	fa00 f203 	lsl.w	r2, r0, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	619a      	str	r2, [r3, #24]
 8002bf2:	e01b      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6959      	ldr	r1, [r3, #20]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	4613      	mov	r3, r2
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	4413      	add	r3, r2
 8002c06:	2207      	movs	r2, #7
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	4019      	ands	r1, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	6898      	ldr	r0, [r3, #8]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	4413      	add	r3, r2
 8002c20:	fa00 f203 	lsl.w	r2, r0, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c34:	d004      	beq.n	8002c40 <HAL_ADC_ConfigChannel+0x41c>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a18      	ldr	r2, [pc, #96]	; (8002c9c <HAL_ADC_ConfigChannel+0x478>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x420>
 8002c40:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <HAL_ADC_ConfigChannel+0x47c>)
 8002c42:	e000      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x422>
 8002c44:	4b17      	ldr	r3, [pc, #92]	; (8002ca4 <HAL_ADC_ConfigChannel+0x480>)
 8002c46:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b10      	cmp	r3, #16
 8002c4e:	d105      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d015      	beq.n	8002c88 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c60:	2b11      	cmp	r3, #17
 8002c62:	d105      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00b      	beq.n	8002c88 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c74:	2b12      	cmp	r3, #18
 8002c76:	f040 80ab 	bne.w	8002dd0 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f040 80a4 	bne.w	8002dd0 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c90:	d10a      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x484>
 8002c92:	4b02      	ldr	r3, [pc, #8]	; (8002c9c <HAL_ADC_ConfigChannel+0x478>)
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	e022      	b.n	8002cde <HAL_ADC_ConfigChannel+0x4ba>
 8002c98:	83fff000 	.word	0x83fff000
 8002c9c:	50000100 	.word	0x50000100
 8002ca0:	50000300 	.word	0x50000300
 8002ca4:	50000700 	.word	0x50000700
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a4e      	ldr	r2, [pc, #312]	; (8002de8 <HAL_ADC_ConfigChannel+0x5c4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d103      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x496>
 8002cb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	e011      	b.n	8002cde <HAL_ADC_ConfigChannel+0x4ba>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a4b      	ldr	r2, [pc, #300]	; (8002dec <HAL_ADC_ConfigChannel+0x5c8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d102      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x4a6>
 8002cc4:	4b4a      	ldr	r3, [pc, #296]	; (8002df0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	e009      	b.n	8002cde <HAL_ADC_ConfigChannel+0x4ba>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a48      	ldr	r2, [pc, #288]	; (8002df0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d102      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x4b6>
 8002cd4:	4b45      	ldr	r3, [pc, #276]	; (8002dec <HAL_ADC_ConfigChannel+0x5c8>)
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	e001      	b.n	8002cde <HAL_ADC_ConfigChannel+0x4ba>
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d108      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x4da>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x4da>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x4dc>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d150      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d04:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d010      	beq.n	8002d2c <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d107      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x502>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x502>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x504>
 8002d26:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d13c      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b10      	cmp	r3, #16
 8002d32:	d11d      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x54c>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d3c:	d118      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d48:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d4a:	4b2a      	ldr	r3, [pc, #168]	; (8002df4 <HAL_ADC_ConfigChannel+0x5d0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a2a      	ldr	r2, [pc, #168]	; (8002df8 <HAL_ADC_ConfigChannel+0x5d4>)
 8002d50:	fba2 2303 	umull	r2, r3, r2, r3
 8002d54:	0c9a      	lsrs	r2, r3, #18
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d60:	e002      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	3b01      	subs	r3, #1
 8002d66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f9      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d6e:	e02e      	b.n	8002dce <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b11      	cmp	r3, #17
 8002d76:	d10b      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x56c>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d80:	d106      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d8c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d8e:	e01e      	b.n	8002dce <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b12      	cmp	r3, #18
 8002d96:	d11a      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002da4:	e013      	b.n	8002dce <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f043 0220 	orr.w	r2, r3, #32
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002db8:	e00a      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f043 0220 	orr.w	r2, r3, #32
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002dcc:	e000      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002dce:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002dd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	376c      	adds	r7, #108	; 0x6c
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	50000100 	.word	0x50000100
 8002dec:	50000400 	.word	0x50000400
 8002df0:	50000500 	.word	0x50000500
 8002df4:	20000068 	.word	0x20000068
 8002df8:	431bde83 	.word	0x431bde83

08002dfc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b099      	sub	sp, #100	; 0x64
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e14:	d102      	bne.n	8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002e16:	4b6d      	ldr	r3, [pc, #436]	; (8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	e01a      	b.n	8002e52 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a6a      	ldr	r2, [pc, #424]	; (8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d103      	bne.n	8002e2e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002e26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	e011      	b.n	8002e52 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a67      	ldr	r2, [pc, #412]	; (8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d102      	bne.n	8002e3e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e38:	4b66      	ldr	r3, [pc, #408]	; (8002fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	e009      	b.n	8002e52 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a64      	ldr	r2, [pc, #400]	; (8002fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d102      	bne.n	8002e4e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002e48:	4b61      	ldr	r3, [pc, #388]	; (8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	e001      	b.n	8002e52 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0b0      	b.n	8002fbe <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e0a9      	b.n	8002fbe <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f040 808d 	bne.w	8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f040 8086 	bne.w	8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e98:	d004      	beq.n	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a4b      	ldr	r2, [pc, #300]	; (8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002ea4:	4b4c      	ldr	r3, [pc, #304]	; (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002ea6:	e000      	b.n	8002eaa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002ea8:	4b4c      	ldr	r3, [pc, #304]	; (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002eaa:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d040      	beq.n	8002f36 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002eb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6859      	ldr	r1, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ec6:	035b      	lsls	r3, r3, #13
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ece:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d108      	bne.n	8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d15c      	bne.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d107      	bne.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002f12:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d14b      	bne.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f20:	f023 030f 	bic.w	r3, r3, #15
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	6811      	ldr	r1, [r2, #0]
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	6892      	ldr	r2, [r2, #8]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f32:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f34:	e03c      	b.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f40:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d108      	bne.n	8002f62 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d123      	bne.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d107      	bne.n	8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002f84:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d112      	bne.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f92:	f023 030f 	bic.w	r3, r3, #15
 8002f96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f98:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f9a:	e009      	b.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	f043 0220 	orr.w	r2, r3, #32
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002fae:	e000      	b.n	8002fb2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fb0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002fba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3764      	adds	r7, #100	; 0x64
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	50000100 	.word	0x50000100
 8002fd0:	50000400 	.word	0x50000400
 8002fd4:	50000500 	.word	0x50000500
 8002fd8:	50000300 	.word	0x50000300
 8002fdc:	50000700 	.word	0x50000700

08002fe0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d126      	bne.n	8003048 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003010:	2b00      	cmp	r3, #0
 8003012:	d115      	bne.n	8003040 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003018:	2b00      	cmp	r3, #0
 800301a:	d111      	bne.n	8003040 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d105      	bne.n	8003040 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	f043 0201 	orr.w	r2, r3, #1
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f7fe fd17 	bl	8001a74 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003046:	e004      	b.n	8003052 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	4798      	blx	r3
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f7ff f8b1 	bl	80021d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003094:	f043 0204 	orr.w	r2, r3, #4
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f7ff f8a1 	bl	80021e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d108      	bne.n	80030d8 <ADC_Enable+0x2c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <ADC_Enable+0x2c>
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <ADC_Enable+0x2e>
 80030d8:	2300      	movs	r3, #0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d143      	bne.n	8003166 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	4b22      	ldr	r3, [pc, #136]	; (8003170 <ADC_Enable+0xc4>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00d      	beq.n	8003108 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	f043 0210 	orr.w	r2, r3, #16
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fc:	f043 0201 	orr.w	r2, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e02f      	b.n	8003168 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003118:	f7ff f82a 	bl	8002170 <HAL_GetTick>
 800311c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800311e:	e01b      	b.n	8003158 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003120:	f7ff f826 	bl	8002170 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d914      	bls.n	8003158 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d00d      	beq.n	8003158 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f043 0210 	orr.w	r2, r3, #16
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e007      	b.n	8003168 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b01      	cmp	r3, #1
 8003164:	d1dc      	bne.n	8003120 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	8000003f 	.word	0x8000003f

08003174 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	2b01      	cmp	r3, #1
 800318c:	d108      	bne.n	80031a0 <ADC_Disable+0x2c>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <ADC_Disable+0x2c>
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <ADC_Disable+0x2e>
 80031a0:	2300      	movs	r3, #0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d047      	beq.n	8003236 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 030d 	and.w	r3, r3, #13
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d10f      	bne.n	80031d4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0202 	orr.w	r2, r2, #2
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2203      	movs	r2, #3
 80031ca:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80031cc:	f7fe ffd0 	bl	8002170 <HAL_GetTick>
 80031d0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031d2:	e029      	b.n	8003228 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	f043 0210 	orr.w	r2, r3, #16
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e4:	f043 0201 	orr.w	r2, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e023      	b.n	8003238 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031f0:	f7fe ffbe 	bl	8002170 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d914      	bls.n	8003228 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b01      	cmp	r3, #1
 800320a:	d10d      	bne.n	8003228 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	f043 0210 	orr.w	r2, r3, #16
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321c:	f043 0201 	orr.w	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e007      	b.n	8003238 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d0dc      	beq.n	80031f0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003250:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <__NVIC_SetPriorityGrouping+0x44>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800325c:	4013      	ands	r3, r2
 800325e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800326c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003272:	4a04      	ldr	r2, [pc, #16]	; (8003284 <__NVIC_SetPriorityGrouping+0x44>)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	60d3      	str	r3, [r2, #12]
}
 8003278:	bf00      	nop
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	e000ed00 	.word	0xe000ed00

08003288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <__NVIC_GetPriorityGrouping+0x18>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	0a1b      	lsrs	r3, r3, #8
 8003292:	f003 0307 	and.w	r3, r3, #7
}
 8003296:	4618      	mov	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	db0b      	blt.n	80032ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032b6:	79fb      	ldrb	r3, [r7, #7]
 80032b8:	f003 021f 	and.w	r2, r3, #31
 80032bc:	4907      	ldr	r1, [pc, #28]	; (80032dc <__NVIC_EnableIRQ+0x38>)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	2001      	movs	r0, #1
 80032c6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	e000e100 	.word	0xe000e100

080032e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	6039      	str	r1, [r7, #0]
 80032ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	db0a      	blt.n	800330a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	490c      	ldr	r1, [pc, #48]	; (800332c <__NVIC_SetPriority+0x4c>)
 80032fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fe:	0112      	lsls	r2, r2, #4
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	440b      	add	r3, r1
 8003304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003308:	e00a      	b.n	8003320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	4908      	ldr	r1, [pc, #32]	; (8003330 <__NVIC_SetPriority+0x50>)
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	3b04      	subs	r3, #4
 8003318:	0112      	lsls	r2, r2, #4
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	440b      	add	r3, r1
 800331e:	761a      	strb	r2, [r3, #24]
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000e100 	.word	0xe000e100
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003334:	b480      	push	{r7}
 8003336:	b089      	sub	sp, #36	; 0x24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f1c3 0307 	rsb	r3, r3, #7
 800334e:	2b04      	cmp	r3, #4
 8003350:	bf28      	it	cs
 8003352:	2304      	movcs	r3, #4
 8003354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	3304      	adds	r3, #4
 800335a:	2b06      	cmp	r3, #6
 800335c:	d902      	bls.n	8003364 <NVIC_EncodePriority+0x30>
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	3b03      	subs	r3, #3
 8003362:	e000      	b.n	8003366 <NVIC_EncodePriority+0x32>
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003368:	f04f 32ff 	mov.w	r2, #4294967295
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43da      	mvns	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	401a      	ands	r2, r3
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800337c:	f04f 31ff 	mov.w	r1, #4294967295
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	fa01 f303 	lsl.w	r3, r1, r3
 8003386:	43d9      	mvns	r1, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800338c:	4313      	orrs	r3, r2
         );
}
 800338e:	4618      	mov	r0, r3
 8003390:	3724      	adds	r7, #36	; 0x24
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
	...

0800339c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033ac:	d301      	bcc.n	80033b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ae:	2301      	movs	r3, #1
 80033b0:	e00f      	b.n	80033d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033b2:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <SysTick_Config+0x40>)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ba:	210f      	movs	r1, #15
 80033bc:	f04f 30ff 	mov.w	r0, #4294967295
 80033c0:	f7ff ff8e 	bl	80032e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <SysTick_Config+0x40>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ca:	4b04      	ldr	r3, [pc, #16]	; (80033dc <SysTick_Config+0x40>)
 80033cc:	2207      	movs	r2, #7
 80033ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	e000e010 	.word	0xe000e010

080033e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff ff29 	bl	8003240 <__NVIC_SetPriorityGrouping>
}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	4603      	mov	r3, r0
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
 8003402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003408:	f7ff ff3e 	bl	8003288 <__NVIC_GetPriorityGrouping>
 800340c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	6978      	ldr	r0, [r7, #20]
 8003414:	f7ff ff8e 	bl	8003334 <NVIC_EncodePriority>
 8003418:	4602      	mov	r2, r0
 800341a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800341e:	4611      	mov	r1, r2
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ff5d 	bl	80032e0 <__NVIC_SetPriority>
}
 8003426:	bf00      	nop
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	4603      	mov	r3, r0
 8003436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff ff31 	bl	80032a4 <__NVIC_EnableIRQ>
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff ffa2 	bl	800339c <SysTick_Config>
 8003458:	4603      	mov	r3, r0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e037      	b.n	80034e8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800348e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003492:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800349c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f9b8 	bl	8003840 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}  
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_DMA_Start_IT+0x20>
 800350c:	2302      	movs	r3, #2
 800350e:	e04a      	b.n	80035a6 <HAL_DMA_Start_IT+0xb6>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800351e:	2b01      	cmp	r3, #1
 8003520:	d13a      	bne.n	8003598 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2202      	movs	r2, #2
 8003526:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0201 	bic.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f94b 	bl	80037e2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d008      	beq.n	8003566 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 020e 	orr.w	r2, r2, #14
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	e00f      	b.n	8003586 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 020a 	orr.w	r2, r2, #10
 8003574:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0204 	bic.w	r2, r2, #4
 8003584:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	e005      	b.n	80035a4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80035a0:	2302      	movs	r3, #2
 80035a2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80035a4:	7dfb      	ldrb	r3, [r7, #23]
} 
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d008      	beq.n	80035d2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2204      	movs	r2, #4
 80035c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e020      	b.n	8003614 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 020e 	bic.w	r2, r2, #14
 80035e0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0201 	bic.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fa:	2101      	movs	r1, #1
 80035fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003600:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003632:	2b02      	cmp	r3, #2
 8003634:	d005      	beq.n	8003642 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2204      	movs	r2, #4
 800363a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
 8003640:	e027      	b.n	8003692 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 020e 	bic.w	r2, r2, #14
 8003650:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0201 	bic.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366a:	2101      	movs	r1, #1
 800366c:	fa01 f202 	lsl.w	r2, r1, r2
 8003670:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	4798      	blx	r3
    } 
  }
  return status;
 8003692:	7bfb      	ldrb	r3, [r7, #15]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	2204      	movs	r2, #4
 80036ba:	409a      	lsls	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4013      	ands	r3, r2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d024      	beq.n	800370e <HAL_DMA_IRQHandler+0x72>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d01f      	beq.n	800370e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d107      	bne.n	80036ec <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0204 	bic.w	r2, r2, #4
 80036ea:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f4:	2104      	movs	r1, #4
 80036f6:	fa01 f202 	lsl.w	r2, r1, r2
 80036fa:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	2b00      	cmp	r3, #0
 8003702:	d06a      	beq.n	80037da <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800370c:	e065      	b.n	80037da <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	2202      	movs	r2, #2
 8003714:	409a      	lsls	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4013      	ands	r3, r2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d02c      	beq.n	8003778 <HAL_DMA_IRQHandler+0xdc>
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d027      	beq.n	8003778 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10b      	bne.n	800374e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 020a 	bic.w	r2, r2, #10
 8003744:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003756:	2102      	movs	r1, #2
 8003758:	fa01 f202 	lsl.w	r2, r1, r2
 800375c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376a:	2b00      	cmp	r3, #0
 800376c:	d035      	beq.n	80037da <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003776:	e030      	b.n	80037da <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	2208      	movs	r2, #8
 800377e:	409a      	lsls	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4013      	ands	r3, r2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d028      	beq.n	80037da <HAL_DMA_IRQHandler+0x13e>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d023      	beq.n	80037da <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 020e 	bic.w	r2, r2, #14
 80037a0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037aa:	2101      	movs	r1, #1
 80037ac:	fa01 f202 	lsl.w	r2, r1, r2
 80037b0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d004      	beq.n	80037da <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4798      	blx	r3
    }
  }
}  
 80037d8:	e7ff      	b.n	80037da <HAL_DMA_IRQHandler+0x13e>
 80037da:	bf00      	nop
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b085      	sub	sp, #20
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f8:	2101      	movs	r1, #1
 80037fa:	fa01 f202 	lsl.w	r2, r1, r2
 80037fe:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b10      	cmp	r3, #16
 800380e:	d108      	bne.n	8003822 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003820:	e007      	b.n	8003832 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	60da      	str	r2, [r3, #12]
}
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
	...

08003840 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <DMA_CalcBaseAndBitshift+0x60>)
 8003850:	429a      	cmp	r2, r3
 8003852:	d80f      	bhi.n	8003874 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <DMA_CalcBaseAndBitshift+0x64>)
 800385c:	4413      	add	r3, r2
 800385e:	4a12      	ldr	r2, [pc, #72]	; (80038a8 <DMA_CalcBaseAndBitshift+0x68>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	091b      	lsrs	r3, r3, #4
 8003866:	009a      	lsls	r2, r3, #2
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a0f      	ldr	r2, [pc, #60]	; (80038ac <DMA_CalcBaseAndBitshift+0x6c>)
 8003870:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003872:	e00e      	b.n	8003892 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	461a      	mov	r2, r3
 800387a:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <DMA_CalcBaseAndBitshift+0x70>)
 800387c:	4413      	add	r3, r2
 800387e:	4a0a      	ldr	r2, [pc, #40]	; (80038a8 <DMA_CalcBaseAndBitshift+0x68>)
 8003880:	fba2 2303 	umull	r2, r3, r2, r3
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	009a      	lsls	r2, r3, #2
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a09      	ldr	r2, [pc, #36]	; (80038b4 <DMA_CalcBaseAndBitshift+0x74>)
 8003890:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40020407 	.word	0x40020407
 80038a4:	bffdfff8 	.word	0xbffdfff8
 80038a8:	cccccccd 	.word	0xcccccccd
 80038ac:	40020000 	.word	0x40020000
 80038b0:	bffdfbf8 	.word	0xbffdfbf8
 80038b4:	40020400 	.word	0x40020400

080038b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038c6:	e160      	b.n	8003b8a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	2101      	movs	r1, #1
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	fa01 f303 	lsl.w	r3, r1, r3
 80038d4:	4013      	ands	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 8152 	beq.w	8003b84 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d005      	beq.n	80038f8 <HAL_GPIO_Init+0x40>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d130      	bne.n	800395a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	2203      	movs	r2, #3
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4013      	ands	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800392e:	2201      	movs	r2, #1
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	091b      	lsrs	r3, r3, #4
 8003944:	f003 0201 	and.w	r2, r3, #1
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b03      	cmp	r3, #3
 8003964:	d017      	beq.n	8003996 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	2203      	movs	r2, #3
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43db      	mvns	r3, r3
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d123      	bne.n	80039ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	08da      	lsrs	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3208      	adds	r2, #8
 80039aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	220f      	movs	r2, #15
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	08da      	lsrs	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3208      	adds	r2, #8
 80039e4:	6939      	ldr	r1, [r7, #16]
 80039e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	2203      	movs	r2, #3
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 0203 	and.w	r2, r3, #3
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 80ac 	beq.w	8003b84 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2c:	4b5e      	ldr	r3, [pc, #376]	; (8003ba8 <HAL_GPIO_Init+0x2f0>)
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	4a5d      	ldr	r2, [pc, #372]	; (8003ba8 <HAL_GPIO_Init+0x2f0>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6193      	str	r3, [r2, #24]
 8003a38:	4b5b      	ldr	r3, [pc, #364]	; (8003ba8 <HAL_GPIO_Init+0x2f0>)
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a44:	4a59      	ldr	r2, [pc, #356]	; (8003bac <HAL_GPIO_Init+0x2f4>)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	089b      	lsrs	r3, r3, #2
 8003a4a:	3302      	adds	r3, #2
 8003a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	220f      	movs	r2, #15
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4013      	ands	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a6e:	d025      	beq.n	8003abc <HAL_GPIO_Init+0x204>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a4f      	ldr	r2, [pc, #316]	; (8003bb0 <HAL_GPIO_Init+0x2f8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d01f      	beq.n	8003ab8 <HAL_GPIO_Init+0x200>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a4e      	ldr	r2, [pc, #312]	; (8003bb4 <HAL_GPIO_Init+0x2fc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d019      	beq.n	8003ab4 <HAL_GPIO_Init+0x1fc>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a4d      	ldr	r2, [pc, #308]	; (8003bb8 <HAL_GPIO_Init+0x300>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d013      	beq.n	8003ab0 <HAL_GPIO_Init+0x1f8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a4c      	ldr	r2, [pc, #304]	; (8003bbc <HAL_GPIO_Init+0x304>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00d      	beq.n	8003aac <HAL_GPIO_Init+0x1f4>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a4b      	ldr	r2, [pc, #300]	; (8003bc0 <HAL_GPIO_Init+0x308>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <HAL_GPIO_Init+0x1f0>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a4a      	ldr	r2, [pc, #296]	; (8003bc4 <HAL_GPIO_Init+0x30c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d101      	bne.n	8003aa4 <HAL_GPIO_Init+0x1ec>
 8003aa0:	2306      	movs	r3, #6
 8003aa2:	e00c      	b.n	8003abe <HAL_GPIO_Init+0x206>
 8003aa4:	2307      	movs	r3, #7
 8003aa6:	e00a      	b.n	8003abe <HAL_GPIO_Init+0x206>
 8003aa8:	2305      	movs	r3, #5
 8003aaa:	e008      	b.n	8003abe <HAL_GPIO_Init+0x206>
 8003aac:	2304      	movs	r3, #4
 8003aae:	e006      	b.n	8003abe <HAL_GPIO_Init+0x206>
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e004      	b.n	8003abe <HAL_GPIO_Init+0x206>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e002      	b.n	8003abe <HAL_GPIO_Init+0x206>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e000      	b.n	8003abe <HAL_GPIO_Init+0x206>
 8003abc:	2300      	movs	r3, #0
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	f002 0203 	and.w	r2, r2, #3
 8003ac4:	0092      	lsls	r2, r2, #2
 8003ac6:	4093      	lsls	r3, r2
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ace:	4937      	ldr	r1, [pc, #220]	; (8003bac <HAL_GPIO_Init+0x2f4>)
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	089b      	lsrs	r3, r3, #2
 8003ad4:	3302      	adds	r3, #2
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003adc:	4b3a      	ldr	r3, [pc, #232]	; (8003bc8 <HAL_GPIO_Init+0x310>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003b00:	4a31      	ldr	r2, [pc, #196]	; (8003bc8 <HAL_GPIO_Init+0x310>)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b06:	4b30      	ldr	r3, [pc, #192]	; (8003bc8 <HAL_GPIO_Init+0x310>)
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4013      	ands	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003b2a:	4a27      	ldr	r2, [pc, #156]	; (8003bc8 <HAL_GPIO_Init+0x310>)
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b30:	4b25      	ldr	r3, [pc, #148]	; (8003bc8 <HAL_GPIO_Init+0x310>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b54:	4a1c      	ldr	r2, [pc, #112]	; (8003bc8 <HAL_GPIO_Init+0x310>)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b5a:	4b1b      	ldr	r3, [pc, #108]	; (8003bc8 <HAL_GPIO_Init+0x310>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	43db      	mvns	r3, r3
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4013      	ands	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b7e:	4a12      	ldr	r2, [pc, #72]	; (8003bc8 <HAL_GPIO_Init+0x310>)
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	3301      	adds	r3, #1
 8003b88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	fa22 f303 	lsr.w	r3, r2, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f47f ae97 	bne.w	80038c8 <HAL_GPIO_Init+0x10>
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	bf00      	nop
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	40010000 	.word	0x40010000
 8003bb0:	48000400 	.word	0x48000400
 8003bb4:	48000800 	.word	0x48000800
 8003bb8:	48000c00 	.word	0x48000c00
 8003bbc:	48001000 	.word	0x48001000
 8003bc0:	48001400 	.word	0x48001400
 8003bc4:	48001800 	.word	0x48001800
 8003bc8:	40010400 	.word	0x40010400

08003bcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	887b      	ldrh	r3, [r7, #2]
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003be4:	2301      	movs	r3, #1
 8003be6:	73fb      	strb	r3, [r7, #15]
 8003be8:	e001      	b.n	8003bee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bea:	2300      	movs	r3, #0
 8003bec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	807b      	strh	r3, [r7, #2]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c0c:	787b      	ldrb	r3, [r7, #1]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c12:	887a      	ldrh	r2, [r7, #2]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c18:	e002      	b.n	8003c20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c1a:	887a      	ldrh	r2, [r7, #2]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c36:	4b08      	ldr	r3, [pc, #32]	; (8003c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	88fb      	ldrh	r3, [r7, #6]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d006      	beq.n	8003c50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c42:	4a05      	ldr	r2, [pc, #20]	; (8003c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c44:	88fb      	ldrh	r3, [r7, #6]
 8003c46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 f806 	bl	8003c5c <HAL_GPIO_EXTI_Callback>
  }
}
 8003c50:	bf00      	nop
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40010400 	.word	0x40010400

08003c5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c84:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d102      	bne.n	8003c9a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f001 b83a 	b.w	8004d0e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 816f 	beq.w	8003f8e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003cb0:	4bb5      	ldr	r3, [pc, #724]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 030c 	and.w	r3, r3, #12
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d00c      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cbc:	4bb2      	ldr	r3, [pc, #712]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 030c 	and.w	r3, r3, #12
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d15c      	bne.n	8003d82 <HAL_RCC_OscConfig+0x10e>
 8003cc8:	4baf      	ldr	r3, [pc, #700]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd4:	d155      	bne.n	8003d82 <HAL_RCC_OscConfig+0x10e>
 8003cd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cda:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ce2:	fa93 f3a3 	rbit	r3, r3
 8003ce6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cee:	fab3 f383 	clz	r3, r3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	095b      	lsrs	r3, r3, #5
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d102      	bne.n	8003d08 <HAL_RCC_OscConfig+0x94>
 8003d02:	4ba1      	ldr	r3, [pc, #644]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	e015      	b.n	8003d34 <HAL_RCC_OscConfig+0xc0>
 8003d08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d0c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d10:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003d14:	fa93 f3a3 	rbit	r3, r3
 8003d18:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003d1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d20:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003d24:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003d28:	fa93 f3a3 	rbit	r3, r3
 8003d2c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003d30:	4b95      	ldr	r3, [pc, #596]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d38:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003d3c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003d40:	fa92 f2a2 	rbit	r2, r2
 8003d44:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003d48:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003d4c:	fab2 f282 	clz	r2, r2
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	f042 0220 	orr.w	r2, r2, #32
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	f002 021f 	and.w	r2, r2, #31
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 8111 	beq.w	8003f8c <HAL_RCC_OscConfig+0x318>
 8003d6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f040 8108 	bne.w	8003f8c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	f000 bfc6 	b.w	8004d0e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d92:	d106      	bne.n	8003da2 <HAL_RCC_OscConfig+0x12e>
 8003d94:	4b7c      	ldr	r3, [pc, #496]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a7b      	ldr	r2, [pc, #492]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	e036      	b.n	8003e10 <HAL_RCC_OscConfig+0x19c>
 8003da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003da6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10c      	bne.n	8003dcc <HAL_RCC_OscConfig+0x158>
 8003db2:	4b75      	ldr	r3, [pc, #468]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a74      	ldr	r2, [pc, #464]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	4b72      	ldr	r3, [pc, #456]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a71      	ldr	r2, [pc, #452]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003dc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	e021      	b.n	8003e10 <HAL_RCC_OscConfig+0x19c>
 8003dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dd0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ddc:	d10c      	bne.n	8003df8 <HAL_RCC_OscConfig+0x184>
 8003dde:	4b6a      	ldr	r3, [pc, #424]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a69      	ldr	r2, [pc, #420]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	4b67      	ldr	r3, [pc, #412]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a66      	ldr	r2, [pc, #408]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	e00b      	b.n	8003e10 <HAL_RCC_OscConfig+0x19c>
 8003df8:	4b63      	ldr	r3, [pc, #396]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a62      	ldr	r2, [pc, #392]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	4b60      	ldr	r3, [pc, #384]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a5f      	ldr	r2, [pc, #380]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e0e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d059      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7fe f9a6 	bl	8002170 <HAL_GetTick>
 8003e24:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e2a:	f7fe f9a1 	bl	8002170 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b64      	cmp	r3, #100	; 0x64
 8003e38:	d902      	bls.n	8003e40 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	f000 bf67 	b.w	8004d0e <HAL_RCC_OscConfig+0x109a>
 8003e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e44:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e48:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003e4c:	fa93 f3a3 	rbit	r3, r3
 8003e50:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003e54:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e58:	fab3 f383 	clz	r3, r3
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d102      	bne.n	8003e72 <HAL_RCC_OscConfig+0x1fe>
 8003e6c:	4b46      	ldr	r3, [pc, #280]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	e015      	b.n	8003e9e <HAL_RCC_OscConfig+0x22a>
 8003e72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e76:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003e7e:	fa93 f3a3 	rbit	r3, r3
 8003e82:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e8a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003e8e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003e92:	fa93 f3a3 	rbit	r3, r3
 8003e96:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003e9a:	4b3b      	ldr	r3, [pc, #236]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ea2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003ea6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003eaa:	fa92 f2a2 	rbit	r2, r2
 8003eae:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003eb2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003eb6:	fab2 f282 	clz	r2, r2
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	f042 0220 	orr.w	r2, r2, #32
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	f002 021f 	and.w	r2, r2, #31
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0ab      	beq.n	8003e2a <HAL_RCC_OscConfig+0x1b6>
 8003ed2:	e05c      	b.n	8003f8e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed4:	f7fe f94c 	bl	8002170 <HAL_GetTick>
 8003ed8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ede:	f7fe f947 	bl	8002170 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b64      	cmp	r3, #100	; 0x64
 8003eec:	d902      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	f000 bf0d 	b.w	8004d0e <HAL_RCC_OscConfig+0x109a>
 8003ef4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ef8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003f00:	fa93 f3a3 	rbit	r3, r3
 8003f04:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003f08:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f0c:	fab3 f383 	clz	r3, r3
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d102      	bne.n	8003f26 <HAL_RCC_OscConfig+0x2b2>
 8003f20:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	e015      	b.n	8003f52 <HAL_RCC_OscConfig+0x2de>
 8003f26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f2a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003f32:	fa93 f3a3 	rbit	r3, r3
 8003f36:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003f3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f3e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003f42:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f46:	fa93 f3a3 	rbit	r3, r3
 8003f4a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003f4e:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <HAL_RCC_OscConfig+0x314>)
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f56:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003f5a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003f5e:	fa92 f2a2 	rbit	r2, r2
 8003f62:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003f66:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003f6a:	fab2 f282 	clz	r2, r2
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	f042 0220 	orr.w	r2, r2, #32
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	f002 021f 	and.w	r2, r2, #31
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f80:	4013      	ands	r3, r2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1ab      	bne.n	8003ede <HAL_RCC_OscConfig+0x26a>
 8003f86:	e002      	b.n	8003f8e <HAL_RCC_OscConfig+0x31a>
 8003f88:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 817f 	beq.w	80042a2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003fa4:	4ba7      	ldr	r3, [pc, #668]	; (8004244 <HAL_RCC_OscConfig+0x5d0>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 030c 	and.w	r3, r3, #12
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00c      	beq.n	8003fca <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003fb0:	4ba4      	ldr	r3, [pc, #656]	; (8004244 <HAL_RCC_OscConfig+0x5d0>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 030c 	and.w	r3, r3, #12
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d173      	bne.n	80040a4 <HAL_RCC_OscConfig+0x430>
 8003fbc:	4ba1      	ldr	r3, [pc, #644]	; (8004244 <HAL_RCC_OscConfig+0x5d0>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc8:	d16c      	bne.n	80040a4 <HAL_RCC_OscConfig+0x430>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003fd4:	fa93 f3a3 	rbit	r3, r3
 8003fd8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003fdc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fe0:	fab3 f383 	clz	r3, r3
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d102      	bne.n	8003ffa <HAL_RCC_OscConfig+0x386>
 8003ff4:	4b93      	ldr	r3, [pc, #588]	; (8004244 <HAL_RCC_OscConfig+0x5d0>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	e013      	b.n	8004022 <HAL_RCC_OscConfig+0x3ae>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004000:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004004:	fa93 f3a3 	rbit	r3, r3
 8004008:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800400c:	2302      	movs	r3, #2
 800400e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004012:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004016:	fa93 f3a3 	rbit	r3, r3
 800401a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800401e:	4b89      	ldr	r3, [pc, #548]	; (8004244 <HAL_RCC_OscConfig+0x5d0>)
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	2202      	movs	r2, #2
 8004024:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004028:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800402c:	fa92 f2a2 	rbit	r2, r2
 8004030:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004034:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004038:	fab2 f282 	clz	r2, r2
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	f042 0220 	orr.w	r2, r2, #32
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	f002 021f 	and.w	r2, r2, #31
 8004048:	2101      	movs	r1, #1
 800404a:	fa01 f202 	lsl.w	r2, r1, r2
 800404e:	4013      	ands	r3, r2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <HAL_RCC_OscConfig+0x3f6>
 8004054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004058:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d002      	beq.n	800406a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	f000 be52 	b.w	8004d0e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406a:	4b76      	ldr	r3, [pc, #472]	; (8004244 <HAL_RCC_OscConfig+0x5d0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004072:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004076:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	21f8      	movs	r1, #248	; 0xf8
 8004080:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004084:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004088:	fa91 f1a1 	rbit	r1, r1
 800408c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004090:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004094:	fab1 f181 	clz	r1, r1
 8004098:	b2c9      	uxtb	r1, r1
 800409a:	408b      	lsls	r3, r1
 800409c:	4969      	ldr	r1, [pc, #420]	; (8004244 <HAL_RCC_OscConfig+0x5d0>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a2:	e0fe      	b.n	80042a2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8088 	beq.w	80041c6 <HAL_RCC_OscConfig+0x552>
 80040b6:	2301      	movs	r3, #1
 80040b8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040bc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80040c8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040cc:	fab3 f383 	clz	r3, r3
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	461a      	mov	r2, r3
 80040de:	2301      	movs	r3, #1
 80040e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e2:	f7fe f845 	bl	8002170 <HAL_GetTick>
 80040e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ea:	e00a      	b.n	8004102 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ec:	f7fe f840 	bl	8002170 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d902      	bls.n	8004102 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	f000 be06 	b.w	8004d0e <HAL_RCC_OscConfig+0x109a>
 8004102:	2302      	movs	r3, #2
 8004104:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800410c:	fa93 f3a3 	rbit	r3, r3
 8004110:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004114:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004118:	fab3 f383 	clz	r3, r3
 800411c:	b2db      	uxtb	r3, r3
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	b2db      	uxtb	r3, r3
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b01      	cmp	r3, #1
 800412a:	d102      	bne.n	8004132 <HAL_RCC_OscConfig+0x4be>
 800412c:	4b45      	ldr	r3, [pc, #276]	; (8004244 <HAL_RCC_OscConfig+0x5d0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	e013      	b.n	800415a <HAL_RCC_OscConfig+0x4e6>
 8004132:	2302      	movs	r3, #2
 8004134:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004138:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800413c:	fa93 f3a3 	rbit	r3, r3
 8004140:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004144:	2302      	movs	r3, #2
 8004146:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800414a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800414e:	fa93 f3a3 	rbit	r3, r3
 8004152:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004156:	4b3b      	ldr	r3, [pc, #236]	; (8004244 <HAL_RCC_OscConfig+0x5d0>)
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	2202      	movs	r2, #2
 800415c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004160:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004164:	fa92 f2a2 	rbit	r2, r2
 8004168:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800416c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004170:	fab2 f282 	clz	r2, r2
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	f042 0220 	orr.w	r2, r2, #32
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	f002 021f 	and.w	r2, r2, #31
 8004180:	2101      	movs	r1, #1
 8004182:	fa01 f202 	lsl.w	r2, r1, r2
 8004186:	4013      	ands	r3, r2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0af      	beq.n	80040ec <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418c:	4b2d      	ldr	r3, [pc, #180]	; (8004244 <HAL_RCC_OscConfig+0x5d0>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004194:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004198:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	21f8      	movs	r1, #248	; 0xf8
 80041a2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80041aa:	fa91 f1a1 	rbit	r1, r1
 80041ae:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80041b2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80041b6:	fab1 f181 	clz	r1, r1
 80041ba:	b2c9      	uxtb	r1, r1
 80041bc:	408b      	lsls	r3, r1
 80041be:	4921      	ldr	r1, [pc, #132]	; (8004244 <HAL_RCC_OscConfig+0x5d0>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	600b      	str	r3, [r1, #0]
 80041c4:	e06d      	b.n	80042a2 <HAL_RCC_OscConfig+0x62e>
 80041c6:	2301      	movs	r3, #1
 80041c8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041cc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80041d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041dc:	fab3 f383 	clz	r3, r3
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	461a      	mov	r2, r3
 80041ee:	2300      	movs	r3, #0
 80041f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f2:	f7fd ffbd 	bl	8002170 <HAL_GetTick>
 80041f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041fa:	e00a      	b.n	8004212 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041fc:	f7fd ffb8 	bl	8002170 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d902      	bls.n	8004212 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	f000 bd7e 	b.w	8004d0e <HAL_RCC_OscConfig+0x109a>
 8004212:	2302      	movs	r3, #2
 8004214:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004218:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800421c:	fa93 f3a3 	rbit	r3, r3
 8004220:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004224:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004228:	fab3 f383 	clz	r3, r3
 800422c:	b2db      	uxtb	r3, r3
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	d105      	bne.n	8004248 <HAL_RCC_OscConfig+0x5d4>
 800423c:	4b01      	ldr	r3, [pc, #4]	; (8004244 <HAL_RCC_OscConfig+0x5d0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	e016      	b.n	8004270 <HAL_RCC_OscConfig+0x5fc>
 8004242:	bf00      	nop
 8004244:	40021000 	.word	0x40021000
 8004248:	2302      	movs	r3, #2
 800424a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004252:	fa93 f3a3 	rbit	r3, r3
 8004256:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800425a:	2302      	movs	r3, #2
 800425c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004260:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004264:	fa93 f3a3 	rbit	r3, r3
 8004268:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800426c:	4bbf      	ldr	r3, [pc, #764]	; (800456c <HAL_RCC_OscConfig+0x8f8>)
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	2202      	movs	r2, #2
 8004272:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004276:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800427a:	fa92 f2a2 	rbit	r2, r2
 800427e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004282:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004286:	fab2 f282 	clz	r2, r2
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	f042 0220 	orr.w	r2, r2, #32
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	f002 021f 	and.w	r2, r2, #31
 8004296:	2101      	movs	r1, #1
 8004298:	fa01 f202 	lsl.w	r2, r1, r2
 800429c:	4013      	ands	r3, r2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1ac      	bne.n	80041fc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8113 	beq.w	80044de <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d07c      	beq.n	80043c2 <HAL_RCC_OscConfig+0x74e>
 80042c8:	2301      	movs	r3, #1
 80042ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d2:	fa93 f3a3 	rbit	r3, r3
 80042d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80042da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042de:	fab3 f383 	clz	r3, r3
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	461a      	mov	r2, r3
 80042e6:	4ba2      	ldr	r3, [pc, #648]	; (8004570 <HAL_RCC_OscConfig+0x8fc>)
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	461a      	mov	r2, r3
 80042ee:	2301      	movs	r3, #1
 80042f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f2:	f7fd ff3d 	bl	8002170 <HAL_GetTick>
 80042f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042fa:	e00a      	b.n	8004312 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042fc:	f7fd ff38 	bl	8002170 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d902      	bls.n	8004312 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	f000 bcfe 	b.w	8004d0e <HAL_RCC_OscConfig+0x109a>
 8004312:	2302      	movs	r3, #2
 8004314:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800431c:	fa93 f2a3 	rbit	r2, r3
 8004320:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004324:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800432e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004332:	2202      	movs	r2, #2
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800433a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	fa93 f2a3 	rbit	r2, r3
 8004344:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004352:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004356:	2202      	movs	r2, #2
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800435e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	fa93 f2a3 	rbit	r2, r3
 8004368:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800436c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004370:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004372:	4b7e      	ldr	r3, [pc, #504]	; (800456c <HAL_RCC_OscConfig+0x8f8>)
 8004374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004376:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800437a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800437e:	2102      	movs	r1, #2
 8004380:	6019      	str	r1, [r3, #0]
 8004382:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004386:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	fa93 f1a3 	rbit	r1, r3
 8004390:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004394:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004398:	6019      	str	r1, [r3, #0]
  return result;
 800439a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800439e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	fab3 f383 	clz	r3, r3
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	2101      	movs	r1, #1
 80043b6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d09d      	beq.n	80042fc <HAL_RCC_OscConfig+0x688>
 80043c0:	e08d      	b.n	80044de <HAL_RCC_OscConfig+0x86a>
 80043c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80043ca:	2201      	movs	r2, #1
 80043cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	fa93 f2a3 	rbit	r2, r3
 80043dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043e0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80043e4:	601a      	str	r2, [r3, #0]
  return result;
 80043e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043ea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80043ee:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f0:	fab3 f383 	clz	r3, r3
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	461a      	mov	r2, r3
 80043f8:	4b5d      	ldr	r3, [pc, #372]	; (8004570 <HAL_RCC_OscConfig+0x8fc>)
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	461a      	mov	r2, r3
 8004400:	2300      	movs	r3, #0
 8004402:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004404:	f7fd feb4 	bl	8002170 <HAL_GetTick>
 8004408:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800440c:	e00a      	b.n	8004424 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800440e:	f7fd feaf 	bl	8002170 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d902      	bls.n	8004424 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	f000 bc75 	b.w	8004d0e <HAL_RCC_OscConfig+0x109a>
 8004424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004428:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800442c:	2202      	movs	r2, #2
 800442e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004430:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004434:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	fa93 f2a3 	rbit	r2, r3
 800443e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004442:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800444c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004450:	2202      	movs	r2, #2
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004458:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	fa93 f2a3 	rbit	r2, r3
 8004462:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004470:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004474:	2202      	movs	r2, #2
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800447c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	fa93 f2a3 	rbit	r2, r3
 8004486:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800448a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800448e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004490:	4b36      	ldr	r3, [pc, #216]	; (800456c <HAL_RCC_OscConfig+0x8f8>)
 8004492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004494:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004498:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800449c:	2102      	movs	r1, #2
 800449e:	6019      	str	r1, [r3, #0]
 80044a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044a4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	fa93 f1a3 	rbit	r1, r3
 80044ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044b2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80044b6:	6019      	str	r1, [r3, #0]
  return result;
 80044b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	fab3 f383 	clz	r3, r3
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f003 031f 	and.w	r3, r3, #31
 80044d2:	2101      	movs	r1, #1
 80044d4:	fa01 f303 	lsl.w	r3, r1, r3
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d197      	bne.n	800440e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 81a5 	beq.w	800483e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f4:	2300      	movs	r3, #0
 80044f6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044fa:	4b1c      	ldr	r3, [pc, #112]	; (800456c <HAL_RCC_OscConfig+0x8f8>)
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d116      	bne.n	8004534 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004506:	4b19      	ldr	r3, [pc, #100]	; (800456c <HAL_RCC_OscConfig+0x8f8>)
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	4a18      	ldr	r2, [pc, #96]	; (800456c <HAL_RCC_OscConfig+0x8f8>)
 800450c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004510:	61d3      	str	r3, [r2, #28]
 8004512:	4b16      	ldr	r3, [pc, #88]	; (800456c <HAL_RCC_OscConfig+0x8f8>)
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800451a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800451e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004528:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800452c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800452e:	2301      	movs	r3, #1
 8004530:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004534:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <HAL_RCC_OscConfig+0x900>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d121      	bne.n	8004584 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004540:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <HAL_RCC_OscConfig+0x900>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a0b      	ldr	r2, [pc, #44]	; (8004574 <HAL_RCC_OscConfig+0x900>)
 8004546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800454a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800454c:	f7fd fe10 	bl	8002170 <HAL_GetTick>
 8004550:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004554:	e010      	b.n	8004578 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004556:	f7fd fe0b 	bl	8002170 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b64      	cmp	r3, #100	; 0x64
 8004564:	d908      	bls.n	8004578 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e3d1      	b.n	8004d0e <HAL_RCC_OscConfig+0x109a>
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000
 8004570:	10908120 	.word	0x10908120
 8004574:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004578:	4b8d      	ldr	r3, [pc, #564]	; (80047b0 <HAL_RCC_OscConfig+0xb3c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0e8      	beq.n	8004556 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004588:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d106      	bne.n	80045a2 <HAL_RCC_OscConfig+0x92e>
 8004594:	4b87      	ldr	r3, [pc, #540]	; (80047b4 <HAL_RCC_OscConfig+0xb40>)
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	4a86      	ldr	r2, [pc, #536]	; (80047b4 <HAL_RCC_OscConfig+0xb40>)
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	6213      	str	r3, [r2, #32]
 80045a0:	e035      	b.n	800460e <HAL_RCC_OscConfig+0x99a>
 80045a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10c      	bne.n	80045cc <HAL_RCC_OscConfig+0x958>
 80045b2:	4b80      	ldr	r3, [pc, #512]	; (80047b4 <HAL_RCC_OscConfig+0xb40>)
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	4a7f      	ldr	r2, [pc, #508]	; (80047b4 <HAL_RCC_OscConfig+0xb40>)
 80045b8:	f023 0301 	bic.w	r3, r3, #1
 80045bc:	6213      	str	r3, [r2, #32]
 80045be:	4b7d      	ldr	r3, [pc, #500]	; (80047b4 <HAL_RCC_OscConfig+0xb40>)
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	4a7c      	ldr	r2, [pc, #496]	; (80047b4 <HAL_RCC_OscConfig+0xb40>)
 80045c4:	f023 0304 	bic.w	r3, r3, #4
 80045c8:	6213      	str	r3, [r2, #32]
 80045ca:	e020      	b.n	800460e <HAL_RCC_OscConfig+0x99a>
 80045cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b05      	cmp	r3, #5
 80045da:	d10c      	bne.n	80045f6 <HAL_RCC_OscConfig+0x982>
 80045dc:	4b75      	ldr	r3, [pc, #468]	; (80047b4 <HAL_RCC_OscConfig+0xb40>)
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	4a74      	ldr	r2, [pc, #464]	; (80047b4 <HAL_RCC_OscConfig+0xb40>)
 80045e2:	f043 0304 	orr.w	r3, r3, #4
 80045e6:	6213      	str	r3, [r2, #32]
 80045e8:	4b72      	ldr	r3, [pc, #456]	; (80047b4 <HAL_RCC_OscConfig+0xb40>)
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	4a71      	ldr	r2, [pc, #452]	; (80047b4 <HAL_RCC_OscConfig+0xb40>)
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	6213      	str	r3, [r2, #32]
 80045f4:	e00b      	b.n	800460e <HAL_RCC_OscConfig+0x99a>
 80045f6:	4b6f      	ldr	r3, [pc, #444]	; (80047b4 <HAL_RCC_OscConfig+0xb40>)
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	4a6e      	ldr	r2, [pc, #440]	; (80047b4 <HAL_RCC_OscConfig+0xb40>)
 80045fc:	f023 0301 	bic.w	r3, r3, #1
 8004600:	6213      	str	r3, [r2, #32]
 8004602:	4b6c      	ldr	r3, [pc, #432]	; (80047b4 <HAL_RCC_OscConfig+0xb40>)
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	4a6b      	ldr	r2, [pc, #428]	; (80047b4 <HAL_RCC_OscConfig+0xb40>)
 8004608:	f023 0304 	bic.w	r3, r3, #4
 800460c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800460e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004612:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 8081 	beq.w	8004722 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004620:	f7fd fda6 	bl	8002170 <HAL_GetTick>
 8004624:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004628:	e00b      	b.n	8004642 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800462a:	f7fd fda1 	bl	8002170 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	f241 3288 	movw	r2, #5000	; 0x1388
 800463a:	4293      	cmp	r3, r2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e365      	b.n	8004d0e <HAL_RCC_OscConfig+0x109a>
 8004642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004646:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800464a:	2202      	movs	r2, #2
 800464c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004652:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	fa93 f2a3 	rbit	r2, r3
 800465c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004660:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800466a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800466e:	2202      	movs	r2, #2
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004676:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	fa93 f2a3 	rbit	r2, r3
 8004680:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004684:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004688:	601a      	str	r2, [r3, #0]
  return result;
 800468a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800468e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004692:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004694:	fab3 f383 	clz	r3, r3
 8004698:	b2db      	uxtb	r3, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	b2db      	uxtb	r3, r3
 800469e:	f043 0302 	orr.w	r3, r3, #2
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d102      	bne.n	80046ae <HAL_RCC_OscConfig+0xa3a>
 80046a8:	4b42      	ldr	r3, [pc, #264]	; (80047b4 <HAL_RCC_OscConfig+0xb40>)
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	e013      	b.n	80046d6 <HAL_RCC_OscConfig+0xa62>
 80046ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80046b6:	2202      	movs	r2, #2
 80046b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046be:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	fa93 f2a3 	rbit	r2, r3
 80046c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046cc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	4b38      	ldr	r3, [pc, #224]	; (80047b4 <HAL_RCC_OscConfig+0xb40>)
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046da:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80046de:	2102      	movs	r1, #2
 80046e0:	6011      	str	r1, [r2, #0]
 80046e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046e6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	fa92 f1a2 	rbit	r1, r2
 80046f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046f4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80046f8:	6011      	str	r1, [r2, #0]
  return result;
 80046fa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046fe:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	fab2 f282 	clz	r2, r2
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	f002 021f 	and.w	r2, r2, #31
 8004714:	2101      	movs	r1, #1
 8004716:	fa01 f202 	lsl.w	r2, r1, r2
 800471a:	4013      	ands	r3, r2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d084      	beq.n	800462a <HAL_RCC_OscConfig+0x9b6>
 8004720:	e083      	b.n	800482a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004722:	f7fd fd25 	bl	8002170 <HAL_GetTick>
 8004726:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800472a:	e00b      	b.n	8004744 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800472c:	f7fd fd20 	bl	8002170 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	f241 3288 	movw	r2, #5000	; 0x1388
 800473c:	4293      	cmp	r3, r2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e2e4      	b.n	8004d0e <HAL_RCC_OscConfig+0x109a>
 8004744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004748:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800474c:	2202      	movs	r2, #2
 800474e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004750:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004754:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	fa93 f2a3 	rbit	r2, r3
 800475e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004762:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800476c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004770:	2202      	movs	r2, #2
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004778:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	fa93 f2a3 	rbit	r2, r3
 8004782:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004786:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800478a:	601a      	str	r2, [r3, #0]
  return result;
 800478c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004790:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004794:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004796:	fab3 f383 	clz	r3, r3
 800479a:	b2db      	uxtb	r3, r3
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	f043 0302 	orr.w	r3, r3, #2
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d106      	bne.n	80047b8 <HAL_RCC_OscConfig+0xb44>
 80047aa:	4b02      	ldr	r3, [pc, #8]	; (80047b4 <HAL_RCC_OscConfig+0xb40>)
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	e017      	b.n	80047e0 <HAL_RCC_OscConfig+0xb6c>
 80047b0:	40007000 	.word	0x40007000
 80047b4:	40021000 	.word	0x40021000
 80047b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047bc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80047c0:	2202      	movs	r2, #2
 80047c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047c8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	fa93 f2a3 	rbit	r2, r3
 80047d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047d6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	4bb3      	ldr	r3, [pc, #716]	; (8004aac <HAL_RCC_OscConfig+0xe38>)
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047e4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80047e8:	2102      	movs	r1, #2
 80047ea:	6011      	str	r1, [r2, #0]
 80047ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047f0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80047f4:	6812      	ldr	r2, [r2, #0]
 80047f6:	fa92 f1a2 	rbit	r1, r2
 80047fa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047fe:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004802:	6011      	str	r1, [r2, #0]
  return result;
 8004804:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004808:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800480c:	6812      	ldr	r2, [r2, #0]
 800480e:	fab2 f282 	clz	r2, r2
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	f002 021f 	and.w	r2, r2, #31
 800481e:	2101      	movs	r1, #1
 8004820:	fa01 f202 	lsl.w	r2, r1, r2
 8004824:	4013      	ands	r3, r2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d180      	bne.n	800472c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800482a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800482e:	2b01      	cmp	r3, #1
 8004830:	d105      	bne.n	800483e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004832:	4b9e      	ldr	r3, [pc, #632]	; (8004aac <HAL_RCC_OscConfig+0xe38>)
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	4a9d      	ldr	r2, [pc, #628]	; (8004aac <HAL_RCC_OscConfig+0xe38>)
 8004838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800483c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800483e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004842:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 825e 	beq.w	8004d0c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004850:	4b96      	ldr	r3, [pc, #600]	; (8004aac <HAL_RCC_OscConfig+0xe38>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 030c 	and.w	r3, r3, #12
 8004858:	2b08      	cmp	r3, #8
 800485a:	f000 821f 	beq.w	8004c9c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800485e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004862:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2b02      	cmp	r3, #2
 800486c:	f040 8170 	bne.w	8004b50 <HAL_RCC_OscConfig+0xedc>
 8004870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004874:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004878:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800487c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004882:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	fa93 f2a3 	rbit	r2, r3
 800488c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004890:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004894:	601a      	str	r2, [r3, #0]
  return result;
 8004896:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800489a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800489e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a0:	fab3 f383 	clz	r3, r3
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80048aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	461a      	mov	r2, r3
 80048b2:	2300      	movs	r3, #0
 80048b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b6:	f7fd fc5b 	bl	8002170 <HAL_GetTick>
 80048ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048be:	e009      	b.n	80048d4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c0:	f7fd fc56 	bl	8002170 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e21c      	b.n	8004d0e <HAL_RCC_OscConfig+0x109a>
 80048d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048d8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80048dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048e6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	fa93 f2a3 	rbit	r2, r3
 80048f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048f4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80048f8:	601a      	str	r2, [r3, #0]
  return result;
 80048fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048fe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004902:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004904:	fab3 f383 	clz	r3, r3
 8004908:	b2db      	uxtb	r3, r3
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	b2db      	uxtb	r3, r3
 800490e:	f043 0301 	orr.w	r3, r3, #1
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	d102      	bne.n	800491e <HAL_RCC_OscConfig+0xcaa>
 8004918:	4b64      	ldr	r3, [pc, #400]	; (8004aac <HAL_RCC_OscConfig+0xe38>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	e027      	b.n	800496e <HAL_RCC_OscConfig+0xcfa>
 800491e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004922:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800492a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004930:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	fa93 f2a3 	rbit	r2, r3
 800493a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800493e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004948:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800494c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004956:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	fa93 f2a3 	rbit	r2, r3
 8004960:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004964:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	4b50      	ldr	r3, [pc, #320]	; (8004aac <HAL_RCC_OscConfig+0xe38>)
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004972:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004976:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800497a:	6011      	str	r1, [r2, #0]
 800497c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004980:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004984:	6812      	ldr	r2, [r2, #0]
 8004986:	fa92 f1a2 	rbit	r1, r2
 800498a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800498e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004992:	6011      	str	r1, [r2, #0]
  return result;
 8004994:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004998:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	fab2 f282 	clz	r2, r2
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	f042 0220 	orr.w	r2, r2, #32
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	f002 021f 	and.w	r2, r2, #31
 80049ae:	2101      	movs	r1, #1
 80049b0:	fa01 f202 	lsl.w	r2, r1, r2
 80049b4:	4013      	ands	r3, r2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d182      	bne.n	80048c0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049ba:	4b3c      	ldr	r3, [pc, #240]	; (8004aac <HAL_RCC_OscConfig+0xe38>)
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	f023 020f 	bic.w	r2, r3, #15
 80049c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	4937      	ldr	r1, [pc, #220]	; (8004aac <HAL_RCC_OscConfig+0xe38>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80049d4:	4b35      	ldr	r3, [pc, #212]	; (8004aac <HAL_RCC_OscConfig+0xe38>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80049dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6a19      	ldr	r1, [r3, #32]
 80049e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	430b      	orrs	r3, r1
 80049f6:	492d      	ldr	r1, [pc, #180]	; (8004aac <HAL_RCC_OscConfig+0xe38>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	604b      	str	r3, [r1, #4]
 80049fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a00:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004a04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a0e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	fa93 f2a3 	rbit	r2, r3
 8004a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a1c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004a20:	601a      	str	r2, [r3, #0]
  return result;
 8004a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a26:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004a2a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a2c:	fab3 f383 	clz	r3, r3
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	2301      	movs	r3, #1
 8004a40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a42:	f7fd fb95 	bl	8002170 <HAL_GetTick>
 8004a46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a4a:	e009      	b.n	8004a60 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7fd fb90 	bl	8002170 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e156      	b.n	8004d0e <HAL_RCC_OscConfig+0x109a>
 8004a60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a64:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004a68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a72:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	fa93 f2a3 	rbit	r2, r3
 8004a7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a80:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004a84:	601a      	str	r2, [r3, #0]
  return result;
 8004a86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a8a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004a8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a90:	fab3 f383 	clz	r3, r3
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d105      	bne.n	8004ab0 <HAL_RCC_OscConfig+0xe3c>
 8004aa4:	4b01      	ldr	r3, [pc, #4]	; (8004aac <HAL_RCC_OscConfig+0xe38>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	e02a      	b.n	8004b00 <HAL_RCC_OscConfig+0xe8c>
 8004aaa:	bf00      	nop
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ab4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004ab8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ac2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	fa93 f2a3 	rbit	r2, r3
 8004acc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ad0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ada:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004ade:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ae8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	fa93 f2a3 	rbit	r2, r3
 8004af2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004af6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	4b86      	ldr	r3, [pc, #536]	; (8004d18 <HAL_RCC_OscConfig+0x10a4>)
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b04:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004b08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b0c:	6011      	str	r1, [r2, #0]
 8004b0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b12:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	fa92 f1a2 	rbit	r1, r2
 8004b1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b20:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004b24:	6011      	str	r1, [r2, #0]
  return result;
 8004b26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b2a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	fab2 f282 	clz	r2, r2
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	f042 0220 	orr.w	r2, r2, #32
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	f002 021f 	and.w	r2, r2, #31
 8004b40:	2101      	movs	r1, #1
 8004b42:	fa01 f202 	lsl.w	r2, r1, r2
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f43f af7f 	beq.w	8004a4c <HAL_RCC_OscConfig+0xdd8>
 8004b4e:	e0dd      	b.n	8004d0c <HAL_RCC_OscConfig+0x1098>
 8004b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b54:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004b58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b62:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	fa93 f2a3 	rbit	r2, r3
 8004b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b70:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004b74:	601a      	str	r2, [r3, #0]
  return result;
 8004b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b7a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004b7e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b80:	fab3 f383 	clz	r3, r3
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	461a      	mov	r2, r3
 8004b92:	2300      	movs	r3, #0
 8004b94:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b96:	f7fd faeb 	bl	8002170 <HAL_GetTick>
 8004b9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b9e:	e009      	b.n	8004bb4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ba0:	f7fd fae6 	bl	8002170 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e0ac      	b.n	8004d0e <HAL_RCC_OscConfig+0x109a>
 8004bb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bb8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bc6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	fa93 f2a3 	rbit	r2, r3
 8004bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bd4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004bd8:	601a      	str	r2, [r3, #0]
  return result;
 8004bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bde:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004be2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004be4:	fab3 f383 	clz	r3, r3
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f043 0301 	orr.w	r3, r3, #1
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d102      	bne.n	8004bfe <HAL_RCC_OscConfig+0xf8a>
 8004bf8:	4b47      	ldr	r3, [pc, #284]	; (8004d18 <HAL_RCC_OscConfig+0x10a4>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	e027      	b.n	8004c4e <HAL_RCC_OscConfig+0xfda>
 8004bfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c02:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004c06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c10:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	fa93 f2a3 	rbit	r2, r3
 8004c1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c1e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c28:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004c2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c36:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	fa93 f2a3 	rbit	r2, r3
 8004c40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c44:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	4b33      	ldr	r3, [pc, #204]	; (8004d18 <HAL_RCC_OscConfig+0x10a4>)
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c52:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004c56:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c5a:	6011      	str	r1, [r2, #0]
 8004c5c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c60:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	fa92 f1a2 	rbit	r1, r2
 8004c6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c6e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004c72:	6011      	str	r1, [r2, #0]
  return result;
 8004c74:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c78:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004c7c:	6812      	ldr	r2, [r2, #0]
 8004c7e:	fab2 f282 	clz	r2, r2
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	f042 0220 	orr.w	r2, r2, #32
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	f002 021f 	and.w	r2, r2, #31
 8004c8e:	2101      	movs	r1, #1
 8004c90:	fa01 f202 	lsl.w	r2, r1, r2
 8004c94:	4013      	ands	r3, r2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d182      	bne.n	8004ba0 <HAL_RCC_OscConfig+0xf2c>
 8004c9a:	e037      	b.n	8004d0c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ca0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e02e      	b.n	8004d0e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004cb0:	4b19      	ldr	r3, [pc, #100]	; (8004d18 <HAL_RCC_OscConfig+0x10a4>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004cb8:	4b17      	ldr	r3, [pc, #92]	; (8004d18 <HAL_RCC_OscConfig+0x10a4>)
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004cc0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004cc4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ccc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d117      	bne.n	8004d08 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004cd8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004cdc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ce4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d10b      	bne.n	8004d08 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004cf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cf4:	f003 020f 	and.w	r2, r3, #15
 8004cf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cfc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d001      	beq.n	8004d0c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e000      	b.n	8004d0e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40021000 	.word	0x40021000

08004d1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b09e      	sub	sp, #120	; 0x78
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e162      	b.n	8004ffa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d34:	4b90      	ldr	r3, [pc, #576]	; (8004f78 <HAL_RCC_ClockConfig+0x25c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d910      	bls.n	8004d64 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d42:	4b8d      	ldr	r3, [pc, #564]	; (8004f78 <HAL_RCC_ClockConfig+0x25c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f023 0207 	bic.w	r2, r3, #7
 8004d4a:	498b      	ldr	r1, [pc, #556]	; (8004f78 <HAL_RCC_ClockConfig+0x25c>)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d52:	4b89      	ldr	r3, [pc, #548]	; (8004f78 <HAL_RCC_ClockConfig+0x25c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d001      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e14a      	b.n	8004ffa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d008      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d70:	4b82      	ldr	r3, [pc, #520]	; (8004f7c <HAL_RCC_ClockConfig+0x260>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	497f      	ldr	r1, [pc, #508]	; (8004f7c <HAL_RCC_ClockConfig+0x260>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 80dc 	beq.w	8004f48 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d13c      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xf6>
 8004d98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d9c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004da0:	fa93 f3a3 	rbit	r3, r3
 8004da4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004da8:	fab3 f383 	clz	r3, r3
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d102      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xa6>
 8004dbc:	4b6f      	ldr	r3, [pc, #444]	; (8004f7c <HAL_RCC_ClockConfig+0x260>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	e00f      	b.n	8004de2 <HAL_RCC_ClockConfig+0xc6>
 8004dc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dc6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dca:	fa93 f3a3 	rbit	r3, r3
 8004dce:	667b      	str	r3, [r7, #100]	; 0x64
 8004dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dd4:	663b      	str	r3, [r7, #96]	; 0x60
 8004dd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dd8:	fa93 f3a3 	rbit	r3, r3
 8004ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dde:	4b67      	ldr	r3, [pc, #412]	; (8004f7c <HAL_RCC_ClockConfig+0x260>)
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004de6:	65ba      	str	r2, [r7, #88]	; 0x58
 8004de8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dea:	fa92 f2a2 	rbit	r2, r2
 8004dee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004df0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004df2:	fab2 f282 	clz	r2, r2
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	f042 0220 	orr.w	r2, r2, #32
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	f002 021f 	and.w	r2, r2, #31
 8004e02:	2101      	movs	r1, #1
 8004e04:	fa01 f202 	lsl.w	r2, r1, r2
 8004e08:	4013      	ands	r3, r2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d17b      	bne.n	8004f06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e0f3      	b.n	8004ffa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d13c      	bne.n	8004e94 <HAL_RCC_ClockConfig+0x178>
 8004e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e22:	fa93 f3a3 	rbit	r3, r3
 8004e26:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2a:	fab3 f383 	clz	r3, r3
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	f043 0301 	orr.w	r3, r3, #1
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d102      	bne.n	8004e44 <HAL_RCC_ClockConfig+0x128>
 8004e3e:	4b4f      	ldr	r3, [pc, #316]	; (8004f7c <HAL_RCC_ClockConfig+0x260>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	e00f      	b.n	8004e64 <HAL_RCC_ClockConfig+0x148>
 8004e44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e4c:	fa93 f3a3 	rbit	r3, r3
 8004e50:	647b      	str	r3, [r7, #68]	; 0x44
 8004e52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e56:	643b      	str	r3, [r7, #64]	; 0x40
 8004e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e5a:	fa93 f3a3 	rbit	r3, r3
 8004e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e60:	4b46      	ldr	r3, [pc, #280]	; (8004f7c <HAL_RCC_ClockConfig+0x260>)
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e68:	63ba      	str	r2, [r7, #56]	; 0x38
 8004e6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e6c:	fa92 f2a2 	rbit	r2, r2
 8004e70:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e74:	fab2 f282 	clz	r2, r2
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	f042 0220 	orr.w	r2, r2, #32
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	f002 021f 	and.w	r2, r2, #31
 8004e84:	2101      	movs	r1, #1
 8004e86:	fa01 f202 	lsl.w	r2, r1, r2
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d13a      	bne.n	8004f06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0b2      	b.n	8004ffa <HAL_RCC_ClockConfig+0x2de>
 8004e94:	2302      	movs	r3, #2
 8004e96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	fa93 f3a3 	rbit	r3, r3
 8004e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea2:	fab3 f383 	clz	r3, r3
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	095b      	lsrs	r3, r3, #5
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	f043 0301 	orr.w	r3, r3, #1
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d102      	bne.n	8004ebc <HAL_RCC_ClockConfig+0x1a0>
 8004eb6:	4b31      	ldr	r3, [pc, #196]	; (8004f7c <HAL_RCC_ClockConfig+0x260>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	e00d      	b.n	8004ed8 <HAL_RCC_ClockConfig+0x1bc>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	fa93 f3a3 	rbit	r3, r3
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec8:	2302      	movs	r3, #2
 8004eca:	623b      	str	r3, [r7, #32]
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	fa93 f3a3 	rbit	r3, r3
 8004ed2:	61fb      	str	r3, [r7, #28]
 8004ed4:	4b29      	ldr	r3, [pc, #164]	; (8004f7c <HAL_RCC_ClockConfig+0x260>)
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	2202      	movs	r2, #2
 8004eda:	61ba      	str	r2, [r7, #24]
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	fa92 f2a2 	rbit	r2, r2
 8004ee2:	617a      	str	r2, [r7, #20]
  return result;
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	fab2 f282 	clz	r2, r2
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	f042 0220 	orr.w	r2, r2, #32
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	f002 021f 	and.w	r2, r2, #31
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e079      	b.n	8004ffa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f06:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <HAL_RCC_ClockConfig+0x260>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f023 0203 	bic.w	r2, r3, #3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	491a      	ldr	r1, [pc, #104]	; (8004f7c <HAL_RCC_ClockConfig+0x260>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f18:	f7fd f92a 	bl	8002170 <HAL_GetTick>
 8004f1c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1e:	e00a      	b.n	8004f36 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f20:	f7fd f926 	bl	8002170 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e061      	b.n	8004ffa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f36:	4b11      	ldr	r3, [pc, #68]	; (8004f7c <HAL_RCC_ClockConfig+0x260>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f003 020c 	and.w	r2, r3, #12
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d1eb      	bne.n	8004f20 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f48:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <HAL_RCC_ClockConfig+0x25c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d214      	bcs.n	8004f80 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f56:	4b08      	ldr	r3, [pc, #32]	; (8004f78 <HAL_RCC_ClockConfig+0x25c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f023 0207 	bic.w	r2, r3, #7
 8004f5e:	4906      	ldr	r1, [pc, #24]	; (8004f78 <HAL_RCC_ClockConfig+0x25c>)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f66:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <HAL_RCC_ClockConfig+0x25c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d005      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e040      	b.n	8004ffa <HAL_RCC_ClockConfig+0x2de>
 8004f78:	40022000 	.word	0x40022000
 8004f7c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d008      	beq.n	8004f9e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f8c:	4b1d      	ldr	r3, [pc, #116]	; (8005004 <HAL_RCC_ClockConfig+0x2e8>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	491a      	ldr	r1, [pc, #104]	; (8005004 <HAL_RCC_ClockConfig+0x2e8>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0308 	and.w	r3, r3, #8
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d009      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004faa:	4b16      	ldr	r3, [pc, #88]	; (8005004 <HAL_RCC_ClockConfig+0x2e8>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	4912      	ldr	r1, [pc, #72]	; (8005004 <HAL_RCC_ClockConfig+0x2e8>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004fbe:	f000 f829 	bl	8005014 <HAL_RCC_GetSysClockFreq>
 8004fc2:	4601      	mov	r1, r0
 8004fc4:	4b0f      	ldr	r3, [pc, #60]	; (8005004 <HAL_RCC_ClockConfig+0x2e8>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fcc:	22f0      	movs	r2, #240	; 0xf0
 8004fce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	fa92 f2a2 	rbit	r2, r2
 8004fd6:	60fa      	str	r2, [r7, #12]
  return result;
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	fab2 f282 	clz	r2, r2
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	40d3      	lsrs	r3, r2
 8004fe2:	4a09      	ldr	r2, [pc, #36]	; (8005008 <HAL_RCC_ClockConfig+0x2ec>)
 8004fe4:	5cd3      	ldrb	r3, [r2, r3]
 8004fe6:	fa21 f303 	lsr.w	r3, r1, r3
 8004fea:	4a08      	ldr	r2, [pc, #32]	; (800500c <HAL_RCC_ClockConfig+0x2f0>)
 8004fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004fee:	4b08      	ldr	r3, [pc, #32]	; (8005010 <HAL_RCC_ClockConfig+0x2f4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fd f878 	bl	80020e8 <HAL_InitTick>
  
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3778      	adds	r7, #120	; 0x78
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40021000 	.word	0x40021000
 8005008:	080081cc 	.word	0x080081cc
 800500c:	20000068 	.word	0x20000068
 8005010:	2000006c 	.word	0x2000006c

08005014 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005014:	b480      	push	{r7}
 8005016:	b08b      	sub	sp, #44	; 0x2c
 8005018:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	61fb      	str	r3, [r7, #28]
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	2300      	movs	r3, #0
 8005024:	627b      	str	r3, [r7, #36]	; 0x24
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800502e:	4b2a      	ldr	r3, [pc, #168]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f003 030c 	and.w	r3, r3, #12
 800503a:	2b04      	cmp	r3, #4
 800503c:	d002      	beq.n	8005044 <HAL_RCC_GetSysClockFreq+0x30>
 800503e:	2b08      	cmp	r3, #8
 8005040:	d003      	beq.n	800504a <HAL_RCC_GetSysClockFreq+0x36>
 8005042:	e03f      	b.n	80050c4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005044:	4b25      	ldr	r3, [pc, #148]	; (80050dc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005046:	623b      	str	r3, [r7, #32]
      break;
 8005048:	e03f      	b.n	80050ca <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005050:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005054:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	fa92 f2a2 	rbit	r2, r2
 800505c:	607a      	str	r2, [r7, #4]
  return result;
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	fab2 f282 	clz	r2, r2
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	40d3      	lsrs	r3, r2
 8005068:	4a1d      	ldr	r2, [pc, #116]	; (80050e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800506a:	5cd3      	ldrb	r3, [r2, r3]
 800506c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800506e:	4b1a      	ldr	r3, [pc, #104]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005072:	f003 030f 	and.w	r3, r3, #15
 8005076:	220f      	movs	r2, #15
 8005078:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	fa92 f2a2 	rbit	r2, r2
 8005080:	60fa      	str	r2, [r7, #12]
  return result;
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	fab2 f282 	clz	r2, r2
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	40d3      	lsrs	r3, r2
 800508c:	4a15      	ldr	r2, [pc, #84]	; (80050e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800508e:	5cd3      	ldrb	r3, [r2, r3]
 8005090:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d008      	beq.n	80050ae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800509c:	4a0f      	ldr	r2, [pc, #60]	; (80050dc <HAL_RCC_GetSysClockFreq+0xc8>)
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	fb02 f303 	mul.w	r3, r2, r3
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
 80050ac:	e007      	b.n	80050be <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80050ae:	4a0b      	ldr	r2, [pc, #44]	; (80050dc <HAL_RCC_GetSysClockFreq+0xc8>)
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	fb02 f303 	mul.w	r3, r2, r3
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	623b      	str	r3, [r7, #32]
      break;
 80050c2:	e002      	b.n	80050ca <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <HAL_RCC_GetSysClockFreq+0xc8>)
 80050c6:	623b      	str	r3, [r7, #32]
      break;
 80050c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050ca:	6a3b      	ldr	r3, [r7, #32]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	372c      	adds	r7, #44	; 0x2c
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	40021000 	.word	0x40021000
 80050dc:	007a1200 	.word	0x007a1200
 80050e0:	080081e4 	.word	0x080081e4
 80050e4:	080081f4 	.word	0x080081f4

080050e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050ec:	4b03      	ldr	r3, [pc, #12]	; (80050fc <HAL_RCC_GetHCLKFreq+0x14>)
 80050ee:	681b      	ldr	r3, [r3, #0]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	20000068 	.word	0x20000068

08005100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005106:	f7ff ffef 	bl	80050e8 <HAL_RCC_GetHCLKFreq>
 800510a:	4601      	mov	r1, r0
 800510c:	4b0b      	ldr	r3, [pc, #44]	; (800513c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005114:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005118:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	fa92 f2a2 	rbit	r2, r2
 8005120:	603a      	str	r2, [r7, #0]
  return result;
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	fab2 f282 	clz	r2, r2
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	40d3      	lsrs	r3, r2
 800512c:	4a04      	ldr	r2, [pc, #16]	; (8005140 <HAL_RCC_GetPCLK1Freq+0x40>)
 800512e:	5cd3      	ldrb	r3, [r2, r3]
 8005130:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005134:	4618      	mov	r0, r3
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40021000 	.word	0x40021000
 8005140:	080081dc 	.word	0x080081dc

08005144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800514a:	f7ff ffcd 	bl	80050e8 <HAL_RCC_GetHCLKFreq>
 800514e:	4601      	mov	r1, r0
 8005150:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005158:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800515c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	fa92 f2a2 	rbit	r2, r2
 8005164:	603a      	str	r2, [r7, #0]
  return result;
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	fab2 f282 	clz	r2, r2
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	40d3      	lsrs	r3, r2
 8005170:	4a04      	ldr	r2, [pc, #16]	; (8005184 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005172:	5cd3      	ldrb	r3, [r2, r3]
 8005174:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005178:	4618      	mov	r0, r3
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40021000 	.word	0x40021000
 8005184:	080081dc 	.word	0x080081dc

08005188 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b092      	sub	sp, #72	; 0x48
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005198:	2300      	movs	r3, #0
 800519a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 80d4 	beq.w	8005354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ac:	4b4e      	ldr	r3, [pc, #312]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10e      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b8:	4b4b      	ldr	r3, [pc, #300]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	4a4a      	ldr	r2, [pc, #296]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c2:	61d3      	str	r3, [r2, #28]
 80051c4:	4b48      	ldr	r3, [pc, #288]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051cc:	60bb      	str	r3, [r7, #8]
 80051ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051d0:	2301      	movs	r3, #1
 80051d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d6:	4b45      	ldr	r3, [pc, #276]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d118      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051e2:	4b42      	ldr	r3, [pc, #264]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a41      	ldr	r2, [pc, #260]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ee:	f7fc ffbf 	bl	8002170 <HAL_GetTick>
 80051f2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f4:	e008      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f6:	f7fc ffbb 	bl	8002170 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b64      	cmp	r3, #100	; 0x64
 8005202:	d901      	bls.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e1d6      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005208:	4b38      	ldr	r3, [pc, #224]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f0      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005214:	4b34      	ldr	r3, [pc, #208]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800521c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800521e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 8084 	beq.w	800532e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800522e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005230:	429a      	cmp	r2, r3
 8005232:	d07c      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005234:	4b2c      	ldr	r3, [pc, #176]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800523c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800523e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005242:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005246:	fa93 f3a3 	rbit	r3, r3
 800524a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800524c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800524e:	fab3 f383 	clz	r3, r3
 8005252:	b2db      	uxtb	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	4b26      	ldr	r3, [pc, #152]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	461a      	mov	r2, r3
 800525e:	2301      	movs	r3, #1
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005266:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526a:	fa93 f3a3 	rbit	r3, r3
 800526e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005272:	fab3 f383 	clz	r3, r3
 8005276:	b2db      	uxtb	r3, r3
 8005278:	461a      	mov	r2, r3
 800527a:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800527c:	4413      	add	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	461a      	mov	r2, r3
 8005282:	2300      	movs	r3, #0
 8005284:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005286:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800528c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d04b      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005296:	f7fc ff6b 	bl	8002170 <HAL_GetTick>
 800529a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800529c:	e00a      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800529e:	f7fc ff67 	bl	8002170 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e180      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80052b4:	2302      	movs	r3, #2
 80052b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	fa93 f3a3 	rbit	r3, r3
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
 80052c0:	2302      	movs	r3, #2
 80052c2:	623b      	str	r3, [r7, #32]
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	fa93 f3a3 	rbit	r3, r3
 80052ca:	61fb      	str	r3, [r7, #28]
  return result;
 80052cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ce:	fab3 f383 	clz	r3, r3
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	095b      	lsrs	r3, r3, #5
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	f043 0302 	orr.w	r3, r3, #2
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d108      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80052e2:	4b01      	ldr	r3, [pc, #4]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	e00d      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80052e8:	40021000 	.word	0x40021000
 80052ec:	40007000 	.word	0x40007000
 80052f0:	10908100 	.word	0x10908100
 80052f4:	2302      	movs	r3, #2
 80052f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	fa93 f3a3 	rbit	r3, r3
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	4b9a      	ldr	r3, [pc, #616]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	2202      	movs	r2, #2
 8005306:	613a      	str	r2, [r7, #16]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	fa92 f2a2 	rbit	r2, r2
 800530e:	60fa      	str	r2, [r7, #12]
  return result;
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	fab2 f282 	clz	r2, r2
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	f002 021f 	and.w	r2, r2, #31
 8005322:	2101      	movs	r1, #1
 8005324:	fa01 f202 	lsl.w	r2, r1, r2
 8005328:	4013      	ands	r3, r2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0b7      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800532e:	4b8f      	ldr	r3, [pc, #572]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	498c      	ldr	r1, [pc, #560]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800533c:	4313      	orrs	r3, r2
 800533e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005340:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005344:	2b01      	cmp	r3, #1
 8005346:	d105      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005348:	4b88      	ldr	r3, [pc, #544]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	4a87      	ldr	r2, [pc, #540]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800534e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005352:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d008      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005360:	4b82      	ldr	r3, [pc, #520]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	f023 0203 	bic.w	r2, r3, #3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	497f      	ldr	r1, [pc, #508]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800536e:	4313      	orrs	r3, r2
 8005370:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d008      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800537e:	4b7b      	ldr	r3, [pc, #492]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	4978      	ldr	r1, [pc, #480]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800538c:	4313      	orrs	r3, r2
 800538e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b00      	cmp	r3, #0
 800539a:	d008      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800539c:	4b73      	ldr	r3, [pc, #460]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	4970      	ldr	r1, [pc, #448]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d008      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053ba:	4b6c      	ldr	r3, [pc, #432]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053be:	f023 0210 	bic.w	r2, r3, #16
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	4969      	ldr	r1, [pc, #420]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d008      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80053d8:	4b64      	ldr	r3, [pc, #400]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e4:	4961      	ldr	r1, [pc, #388]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d008      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053f6:	4b5d      	ldr	r3, [pc, #372]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	f023 0220 	bic.w	r2, r3, #32
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	495a      	ldr	r1, [pc, #360]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005404:	4313      	orrs	r3, r2
 8005406:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d008      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005414:	4b55      	ldr	r3, [pc, #340]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	4952      	ldr	r1, [pc, #328]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005422:	4313      	orrs	r3, r2
 8005424:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d008      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005432:	4b4e      	ldr	r3, [pc, #312]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	494b      	ldr	r1, [pc, #300]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005440:	4313      	orrs	r3, r2
 8005442:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0310 	and.w	r3, r3, #16
 800544c:	2b00      	cmp	r3, #0
 800544e:	d008      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005450:	4b46      	ldr	r3, [pc, #280]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005454:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	4943      	ldr	r1, [pc, #268]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800545e:	4313      	orrs	r3, r2
 8005460:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800546a:	2b00      	cmp	r3, #0
 800546c:	d008      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800546e:	4b3f      	ldr	r3, [pc, #252]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547a:	493c      	ldr	r1, [pc, #240]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800547c:	4313      	orrs	r3, r2
 800547e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800548c:	4b37      	ldr	r3, [pc, #220]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005498:	4934      	ldr	r1, [pc, #208]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800549a:	4313      	orrs	r3, r2
 800549c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d008      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80054aa:	4b30      	ldr	r3, [pc, #192]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ae:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b6:	492d      	ldr	r1, [pc, #180]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d008      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80054c8:	4b28      	ldr	r3, [pc, #160]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d4:	4925      	ldr	r1, [pc, #148]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d008      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80054e6:	4b21      	ldr	r3, [pc, #132]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	491e      	ldr	r1, [pc, #120]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d008      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005504:	4b19      	ldr	r3, [pc, #100]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005508:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	4916      	ldr	r1, [pc, #88]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005512:	4313      	orrs	r3, r2
 8005514:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d008      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005522:	4b12      	ldr	r3, [pc, #72]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552e:	490f      	ldr	r1, [pc, #60]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005530:	4313      	orrs	r3, r2
 8005532:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d008      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005540:	4b0a      	ldr	r3, [pc, #40]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554c:	4907      	ldr	r1, [pc, #28]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800554e:	4313      	orrs	r3, r2
 8005550:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00c      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800555e:	4b03      	ldr	r3, [pc, #12]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	e002      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800556a:	bf00      	nop
 800556c:	40021000 	.word	0x40021000
 8005570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005572:	4913      	ldr	r1, [pc, #76]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005574:	4313      	orrs	r3, r2
 8005576:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d008      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005584:	4b0e      	ldr	r3, [pc, #56]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005588:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005590:	490b      	ldr	r1, [pc, #44]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005592:	4313      	orrs	r3, r2
 8005594:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d008      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80055a2:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80055a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ae:	4904      	ldr	r1, [pc, #16]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3748      	adds	r7, #72	; 0x48
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	40021000 	.word	0x40021000

080055c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e049      	b.n	800566a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7fc fae4 	bl	8001bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3304      	adds	r3, #4
 8005600:	4619      	mov	r1, r3
 8005602:	4610      	mov	r0, r2
 8005604:	f000 fb80 	bl	8005d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b082      	sub	sp, #8
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e049      	b.n	8005718 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f841 	bl	8005720 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	3304      	adds	r3, #4
 80056ae:	4619      	mov	r1, r3
 80056b0:	4610      	mov	r0, r2
 80056b2:	f000 fb29 	bl	8005d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d109      	bne.n	8005758 <HAL_TIM_PWM_Start+0x24>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b01      	cmp	r3, #1
 800574e:	bf14      	ite	ne
 8005750:	2301      	movne	r3, #1
 8005752:	2300      	moveq	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	e03c      	b.n	80057d2 <HAL_TIM_PWM_Start+0x9e>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b04      	cmp	r3, #4
 800575c:	d109      	bne.n	8005772 <HAL_TIM_PWM_Start+0x3e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b01      	cmp	r3, #1
 8005768:	bf14      	ite	ne
 800576a:	2301      	movne	r3, #1
 800576c:	2300      	moveq	r3, #0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	e02f      	b.n	80057d2 <HAL_TIM_PWM_Start+0x9e>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b08      	cmp	r3, #8
 8005776:	d109      	bne.n	800578c <HAL_TIM_PWM_Start+0x58>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b01      	cmp	r3, #1
 8005782:	bf14      	ite	ne
 8005784:	2301      	movne	r3, #1
 8005786:	2300      	moveq	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	e022      	b.n	80057d2 <HAL_TIM_PWM_Start+0x9e>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2b0c      	cmp	r3, #12
 8005790:	d109      	bne.n	80057a6 <HAL_TIM_PWM_Start+0x72>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b01      	cmp	r3, #1
 800579c:	bf14      	ite	ne
 800579e:	2301      	movne	r3, #1
 80057a0:	2300      	moveq	r3, #0
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	e015      	b.n	80057d2 <HAL_TIM_PWM_Start+0x9e>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b10      	cmp	r3, #16
 80057aa:	d109      	bne.n	80057c0 <HAL_TIM_PWM_Start+0x8c>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	bf14      	ite	ne
 80057b8:	2301      	movne	r3, #1
 80057ba:	2300      	moveq	r3, #0
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	e008      	b.n	80057d2 <HAL_TIM_PWM_Start+0x9e>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	bf14      	ite	ne
 80057cc:	2301      	movne	r3, #1
 80057ce:	2300      	moveq	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e0a1      	b.n	800591e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d104      	bne.n	80057ea <HAL_TIM_PWM_Start+0xb6>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057e8:	e023      	b.n	8005832 <HAL_TIM_PWM_Start+0xfe>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d104      	bne.n	80057fa <HAL_TIM_PWM_Start+0xc6>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057f8:	e01b      	b.n	8005832 <HAL_TIM_PWM_Start+0xfe>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d104      	bne.n	800580a <HAL_TIM_PWM_Start+0xd6>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005808:	e013      	b.n	8005832 <HAL_TIM_PWM_Start+0xfe>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b0c      	cmp	r3, #12
 800580e:	d104      	bne.n	800581a <HAL_TIM_PWM_Start+0xe6>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005818:	e00b      	b.n	8005832 <HAL_TIM_PWM_Start+0xfe>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b10      	cmp	r3, #16
 800581e:	d104      	bne.n	800582a <HAL_TIM_PWM_Start+0xf6>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005828:	e003      	b.n	8005832 <HAL_TIM_PWM_Start+0xfe>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2202      	movs	r2, #2
 800582e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2201      	movs	r2, #1
 8005838:	6839      	ldr	r1, [r7, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fea2 	bl	8006584 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a38      	ldr	r2, [pc, #224]	; (8005928 <HAL_TIM_PWM_Start+0x1f4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d018      	beq.n	800587c <HAL_TIM_PWM_Start+0x148>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a37      	ldr	r2, [pc, #220]	; (800592c <HAL_TIM_PWM_Start+0x1f8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d013      	beq.n	800587c <HAL_TIM_PWM_Start+0x148>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a35      	ldr	r2, [pc, #212]	; (8005930 <HAL_TIM_PWM_Start+0x1fc>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00e      	beq.n	800587c <HAL_TIM_PWM_Start+0x148>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a34      	ldr	r2, [pc, #208]	; (8005934 <HAL_TIM_PWM_Start+0x200>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d009      	beq.n	800587c <HAL_TIM_PWM_Start+0x148>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a32      	ldr	r2, [pc, #200]	; (8005938 <HAL_TIM_PWM_Start+0x204>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d004      	beq.n	800587c <HAL_TIM_PWM_Start+0x148>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a31      	ldr	r2, [pc, #196]	; (800593c <HAL_TIM_PWM_Start+0x208>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d101      	bne.n	8005880 <HAL_TIM_PWM_Start+0x14c>
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <HAL_TIM_PWM_Start+0x14e>
 8005880:	2300      	movs	r3, #0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d007      	beq.n	8005896 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005894:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a23      	ldr	r2, [pc, #140]	; (8005928 <HAL_TIM_PWM_Start+0x1f4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d01d      	beq.n	80058dc <HAL_TIM_PWM_Start+0x1a8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a8:	d018      	beq.n	80058dc <HAL_TIM_PWM_Start+0x1a8>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a24      	ldr	r2, [pc, #144]	; (8005940 <HAL_TIM_PWM_Start+0x20c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d013      	beq.n	80058dc <HAL_TIM_PWM_Start+0x1a8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a22      	ldr	r2, [pc, #136]	; (8005944 <HAL_TIM_PWM_Start+0x210>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d00e      	beq.n	80058dc <HAL_TIM_PWM_Start+0x1a8>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a1a      	ldr	r2, [pc, #104]	; (800592c <HAL_TIM_PWM_Start+0x1f8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d009      	beq.n	80058dc <HAL_TIM_PWM_Start+0x1a8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a18      	ldr	r2, [pc, #96]	; (8005930 <HAL_TIM_PWM_Start+0x1fc>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d004      	beq.n	80058dc <HAL_TIM_PWM_Start+0x1a8>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a19      	ldr	r2, [pc, #100]	; (800593c <HAL_TIM_PWM_Start+0x208>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d115      	bne.n	8005908 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	4b19      	ldr	r3, [pc, #100]	; (8005948 <HAL_TIM_PWM_Start+0x214>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b06      	cmp	r3, #6
 80058ec:	d015      	beq.n	800591a <HAL_TIM_PWM_Start+0x1e6>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f4:	d011      	beq.n	800591a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f042 0201 	orr.w	r2, r2, #1
 8005904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005906:	e008      	b.n	800591a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0201 	orr.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	e000      	b.n	800591c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800591a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40012c00 	.word	0x40012c00
 800592c:	40013400 	.word	0x40013400
 8005930:	40014000 	.word	0x40014000
 8005934:	40014400 	.word	0x40014400
 8005938:	40014800 	.word	0x40014800
 800593c:	40015000 	.word	0x40015000
 8005940:	40000400 	.word	0x40000400
 8005944:	40000800 	.word	0x40000800
 8005948:	00010007 	.word	0x00010007

0800594c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005966:	2302      	movs	r3, #2
 8005968:	e0ff      	b.n	8005b6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b14      	cmp	r3, #20
 8005976:	f200 80f0 	bhi.w	8005b5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800597a:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800597c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005980:	080059d5 	.word	0x080059d5
 8005984:	08005b5b 	.word	0x08005b5b
 8005988:	08005b5b 	.word	0x08005b5b
 800598c:	08005b5b 	.word	0x08005b5b
 8005990:	08005a15 	.word	0x08005a15
 8005994:	08005b5b 	.word	0x08005b5b
 8005998:	08005b5b 	.word	0x08005b5b
 800599c:	08005b5b 	.word	0x08005b5b
 80059a0:	08005a57 	.word	0x08005a57
 80059a4:	08005b5b 	.word	0x08005b5b
 80059a8:	08005b5b 	.word	0x08005b5b
 80059ac:	08005b5b 	.word	0x08005b5b
 80059b0:	08005a97 	.word	0x08005a97
 80059b4:	08005b5b 	.word	0x08005b5b
 80059b8:	08005b5b 	.word	0x08005b5b
 80059bc:	08005b5b 	.word	0x08005b5b
 80059c0:	08005ad9 	.word	0x08005ad9
 80059c4:	08005b5b 	.word	0x08005b5b
 80059c8:	08005b5b 	.word	0x08005b5b
 80059cc:	08005b5b 	.word	0x08005b5b
 80059d0:	08005b19 	.word	0x08005b19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68b9      	ldr	r1, [r7, #8]
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fa32 	bl	8005e44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699a      	ldr	r2, [r3, #24]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0208 	orr.w	r2, r2, #8
 80059ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699a      	ldr	r2, [r3, #24]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0204 	bic.w	r2, r2, #4
 80059fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6999      	ldr	r1, [r3, #24]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	691a      	ldr	r2, [r3, #16]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	619a      	str	r2, [r3, #24]
      break;
 8005a12:	e0a5      	b.n	8005b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 faac 	bl	8005f78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699a      	ldr	r2, [r3, #24]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	699a      	ldr	r2, [r3, #24]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6999      	ldr	r1, [r3, #24]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	021a      	lsls	r2, r3, #8
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	619a      	str	r2, [r3, #24]
      break;
 8005a54:	e084      	b.n	8005b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68b9      	ldr	r1, [r7, #8]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 fb1f 	bl	80060a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69da      	ldr	r2, [r3, #28]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f042 0208 	orr.w	r2, r2, #8
 8005a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69da      	ldr	r2, [r3, #28]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0204 	bic.w	r2, r2, #4
 8005a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69d9      	ldr	r1, [r3, #28]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	61da      	str	r2, [r3, #28]
      break;
 8005a94:	e064      	b.n	8005b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68b9      	ldr	r1, [r7, #8]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 fb91 	bl	80061c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69da      	ldr	r2, [r3, #28]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69da      	ldr	r2, [r3, #28]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69d9      	ldr	r1, [r3, #28]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	021a      	lsls	r2, r3, #8
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	61da      	str	r2, [r3, #28]
      break;
 8005ad6:	e043      	b.n	8005b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fbe0 	bl	80062a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0208 	orr.w	r2, r2, #8
 8005af2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0204 	bic.w	r2, r2, #4
 8005b02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	691a      	ldr	r2, [r3, #16]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b16:	e023      	b.n	8005b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68b9      	ldr	r1, [r7, #8]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fc2a 	bl	8006378 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	021a      	lsls	r2, r3, #8
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b58:	e002      	b.n	8005b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop

08005b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_TIM_ConfigClockSource+0x1c>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e0b6      	b.n	8005cfe <HAL_TIM_ConfigClockSource+0x18a>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bcc:	d03e      	beq.n	8005c4c <HAL_TIM_ConfigClockSource+0xd8>
 8005bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd2:	f200 8087 	bhi.w	8005ce4 <HAL_TIM_ConfigClockSource+0x170>
 8005bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bda:	f000 8086 	beq.w	8005cea <HAL_TIM_ConfigClockSource+0x176>
 8005bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be2:	d87f      	bhi.n	8005ce4 <HAL_TIM_ConfigClockSource+0x170>
 8005be4:	2b70      	cmp	r3, #112	; 0x70
 8005be6:	d01a      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0xaa>
 8005be8:	2b70      	cmp	r3, #112	; 0x70
 8005bea:	d87b      	bhi.n	8005ce4 <HAL_TIM_ConfigClockSource+0x170>
 8005bec:	2b60      	cmp	r3, #96	; 0x60
 8005bee:	d050      	beq.n	8005c92 <HAL_TIM_ConfigClockSource+0x11e>
 8005bf0:	2b60      	cmp	r3, #96	; 0x60
 8005bf2:	d877      	bhi.n	8005ce4 <HAL_TIM_ConfigClockSource+0x170>
 8005bf4:	2b50      	cmp	r3, #80	; 0x50
 8005bf6:	d03c      	beq.n	8005c72 <HAL_TIM_ConfigClockSource+0xfe>
 8005bf8:	2b50      	cmp	r3, #80	; 0x50
 8005bfa:	d873      	bhi.n	8005ce4 <HAL_TIM_ConfigClockSource+0x170>
 8005bfc:	2b40      	cmp	r3, #64	; 0x40
 8005bfe:	d058      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0x13e>
 8005c00:	2b40      	cmp	r3, #64	; 0x40
 8005c02:	d86f      	bhi.n	8005ce4 <HAL_TIM_ConfigClockSource+0x170>
 8005c04:	2b30      	cmp	r3, #48	; 0x30
 8005c06:	d064      	beq.n	8005cd2 <HAL_TIM_ConfigClockSource+0x15e>
 8005c08:	2b30      	cmp	r3, #48	; 0x30
 8005c0a:	d86b      	bhi.n	8005ce4 <HAL_TIM_ConfigClockSource+0x170>
 8005c0c:	2b20      	cmp	r3, #32
 8005c0e:	d060      	beq.n	8005cd2 <HAL_TIM_ConfigClockSource+0x15e>
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	d867      	bhi.n	8005ce4 <HAL_TIM_ConfigClockSource+0x170>
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d05c      	beq.n	8005cd2 <HAL_TIM_ConfigClockSource+0x15e>
 8005c18:	2b10      	cmp	r3, #16
 8005c1a:	d05a      	beq.n	8005cd2 <HAL_TIM_ConfigClockSource+0x15e>
 8005c1c:	e062      	b.n	8005ce4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	6899      	ldr	r1, [r3, #8]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f000 fc89 	bl	8006544 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	609a      	str	r2, [r3, #8]
      break;
 8005c4a:	e04f      	b.n	8005cec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6818      	ldr	r0, [r3, #0]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	6899      	ldr	r1, [r3, #8]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f000 fc72 	bl	8006544 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c6e:	609a      	str	r2, [r3, #8]
      break;
 8005c70:	e03c      	b.n	8005cec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6818      	ldr	r0, [r3, #0]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	6859      	ldr	r1, [r3, #4]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f000 fbe6 	bl	8006450 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2150      	movs	r1, #80	; 0x50
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fc3f 	bl	800650e <TIM_ITRx_SetConfig>
      break;
 8005c90:	e02c      	b.n	8005cec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	6859      	ldr	r1, [r3, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f000 fc05 	bl	80064ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2160      	movs	r1, #96	; 0x60
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fc2f 	bl	800650e <TIM_ITRx_SetConfig>
      break;
 8005cb0:	e01c      	b.n	8005cec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6818      	ldr	r0, [r3, #0]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	6859      	ldr	r1, [r3, #4]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	f000 fbc6 	bl	8006450 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2140      	movs	r1, #64	; 0x40
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fc1f 	bl	800650e <TIM_ITRx_SetConfig>
      break;
 8005cd0:	e00c      	b.n	8005cec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	4610      	mov	r0, r2
 8005cde:	f000 fc16 	bl	800650e <TIM_ITRx_SetConfig>
      break;
 8005ce2:	e003      	b.n	8005cec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ce8:	e000      	b.n	8005cec <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005cea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a42      	ldr	r2, [pc, #264]	; (8005e24 <TIM_Base_SetConfig+0x11c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d013      	beq.n	8005d48 <TIM_Base_SetConfig+0x40>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d26:	d00f      	beq.n	8005d48 <TIM_Base_SetConfig+0x40>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a3f      	ldr	r2, [pc, #252]	; (8005e28 <TIM_Base_SetConfig+0x120>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00b      	beq.n	8005d48 <TIM_Base_SetConfig+0x40>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a3e      	ldr	r2, [pc, #248]	; (8005e2c <TIM_Base_SetConfig+0x124>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d007      	beq.n	8005d48 <TIM_Base_SetConfig+0x40>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a3d      	ldr	r2, [pc, #244]	; (8005e30 <TIM_Base_SetConfig+0x128>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d003      	beq.n	8005d48 <TIM_Base_SetConfig+0x40>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a3c      	ldr	r2, [pc, #240]	; (8005e34 <TIM_Base_SetConfig+0x12c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d108      	bne.n	8005d5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a31      	ldr	r2, [pc, #196]	; (8005e24 <TIM_Base_SetConfig+0x11c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d01f      	beq.n	8005da2 <TIM_Base_SetConfig+0x9a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d68:	d01b      	beq.n	8005da2 <TIM_Base_SetConfig+0x9a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a2e      	ldr	r2, [pc, #184]	; (8005e28 <TIM_Base_SetConfig+0x120>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d017      	beq.n	8005da2 <TIM_Base_SetConfig+0x9a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a2d      	ldr	r2, [pc, #180]	; (8005e2c <TIM_Base_SetConfig+0x124>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d013      	beq.n	8005da2 <TIM_Base_SetConfig+0x9a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a2c      	ldr	r2, [pc, #176]	; (8005e30 <TIM_Base_SetConfig+0x128>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d00f      	beq.n	8005da2 <TIM_Base_SetConfig+0x9a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a2c      	ldr	r2, [pc, #176]	; (8005e38 <TIM_Base_SetConfig+0x130>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00b      	beq.n	8005da2 <TIM_Base_SetConfig+0x9a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a2b      	ldr	r2, [pc, #172]	; (8005e3c <TIM_Base_SetConfig+0x134>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d007      	beq.n	8005da2 <TIM_Base_SetConfig+0x9a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a2a      	ldr	r2, [pc, #168]	; (8005e40 <TIM_Base_SetConfig+0x138>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d003      	beq.n	8005da2 <TIM_Base_SetConfig+0x9a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a25      	ldr	r2, [pc, #148]	; (8005e34 <TIM_Base_SetConfig+0x12c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d108      	bne.n	8005db4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a12      	ldr	r2, [pc, #72]	; (8005e24 <TIM_Base_SetConfig+0x11c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d013      	beq.n	8005e08 <TIM_Base_SetConfig+0x100>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a13      	ldr	r2, [pc, #76]	; (8005e30 <TIM_Base_SetConfig+0x128>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00f      	beq.n	8005e08 <TIM_Base_SetConfig+0x100>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a13      	ldr	r2, [pc, #76]	; (8005e38 <TIM_Base_SetConfig+0x130>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00b      	beq.n	8005e08 <TIM_Base_SetConfig+0x100>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a12      	ldr	r2, [pc, #72]	; (8005e3c <TIM_Base_SetConfig+0x134>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d007      	beq.n	8005e08 <TIM_Base_SetConfig+0x100>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a11      	ldr	r2, [pc, #68]	; (8005e40 <TIM_Base_SetConfig+0x138>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d003      	beq.n	8005e08 <TIM_Base_SetConfig+0x100>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a0c      	ldr	r2, [pc, #48]	; (8005e34 <TIM_Base_SetConfig+0x12c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d103      	bne.n	8005e10 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	615a      	str	r2, [r3, #20]
}
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	40012c00 	.word	0x40012c00
 8005e28:	40000400 	.word	0x40000400
 8005e2c:	40000800 	.word	0x40000800
 8005e30:	40013400 	.word	0x40013400
 8005e34:	40015000 	.word	0x40015000
 8005e38:	40014000 	.word	0x40014000
 8005e3c:	40014400 	.word	0x40014400
 8005e40:	40014800 	.word	0x40014800

08005e44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	f023 0201 	bic.w	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f023 0302 	bic.w	r3, r3, #2
 8005e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a30      	ldr	r2, [pc, #192]	; (8005f60 <TIM_OC1_SetConfig+0x11c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d013      	beq.n	8005ecc <TIM_OC1_SetConfig+0x88>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a2f      	ldr	r2, [pc, #188]	; (8005f64 <TIM_OC1_SetConfig+0x120>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00f      	beq.n	8005ecc <TIM_OC1_SetConfig+0x88>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a2e      	ldr	r2, [pc, #184]	; (8005f68 <TIM_OC1_SetConfig+0x124>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00b      	beq.n	8005ecc <TIM_OC1_SetConfig+0x88>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a2d      	ldr	r2, [pc, #180]	; (8005f6c <TIM_OC1_SetConfig+0x128>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d007      	beq.n	8005ecc <TIM_OC1_SetConfig+0x88>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a2c      	ldr	r2, [pc, #176]	; (8005f70 <TIM_OC1_SetConfig+0x12c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_OC1_SetConfig+0x88>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a2b      	ldr	r2, [pc, #172]	; (8005f74 <TIM_OC1_SetConfig+0x130>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d10c      	bne.n	8005ee6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f023 0308 	bic.w	r3, r3, #8
 8005ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f023 0304 	bic.w	r3, r3, #4
 8005ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a1d      	ldr	r2, [pc, #116]	; (8005f60 <TIM_OC1_SetConfig+0x11c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d013      	beq.n	8005f16 <TIM_OC1_SetConfig+0xd2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a1c      	ldr	r2, [pc, #112]	; (8005f64 <TIM_OC1_SetConfig+0x120>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d00f      	beq.n	8005f16 <TIM_OC1_SetConfig+0xd2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a1b      	ldr	r2, [pc, #108]	; (8005f68 <TIM_OC1_SetConfig+0x124>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00b      	beq.n	8005f16 <TIM_OC1_SetConfig+0xd2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a1a      	ldr	r2, [pc, #104]	; (8005f6c <TIM_OC1_SetConfig+0x128>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d007      	beq.n	8005f16 <TIM_OC1_SetConfig+0xd2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a19      	ldr	r2, [pc, #100]	; (8005f70 <TIM_OC1_SetConfig+0x12c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d003      	beq.n	8005f16 <TIM_OC1_SetConfig+0xd2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a18      	ldr	r2, [pc, #96]	; (8005f74 <TIM_OC1_SetConfig+0x130>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d111      	bne.n	8005f3a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	621a      	str	r2, [r3, #32]
}
 8005f54:	bf00      	nop
 8005f56:	371c      	adds	r7, #28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	40012c00 	.word	0x40012c00
 8005f64:	40013400 	.word	0x40013400
 8005f68:	40014000 	.word	0x40014000
 8005f6c:	40014400 	.word	0x40014400
 8005f70:	40014800 	.word	0x40014800
 8005f74:	40015000 	.word	0x40015000

08005f78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	f023 0210 	bic.w	r2, r3, #16
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	021b      	lsls	r3, r3, #8
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f023 0320 	bic.w	r3, r3, #32
 8005fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	011b      	lsls	r3, r3, #4
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a2c      	ldr	r2, [pc, #176]	; (8006088 <TIM_OC2_SetConfig+0x110>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d007      	beq.n	8005fec <TIM_OC2_SetConfig+0x74>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a2b      	ldr	r2, [pc, #172]	; (800608c <TIM_OC2_SetConfig+0x114>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d003      	beq.n	8005fec <TIM_OC2_SetConfig+0x74>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a2a      	ldr	r2, [pc, #168]	; (8006090 <TIM_OC2_SetConfig+0x118>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d10d      	bne.n	8006008 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	011b      	lsls	r3, r3, #4
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006006:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a1f      	ldr	r2, [pc, #124]	; (8006088 <TIM_OC2_SetConfig+0x110>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d013      	beq.n	8006038 <TIM_OC2_SetConfig+0xc0>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a1e      	ldr	r2, [pc, #120]	; (800608c <TIM_OC2_SetConfig+0x114>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d00f      	beq.n	8006038 <TIM_OC2_SetConfig+0xc0>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a1e      	ldr	r2, [pc, #120]	; (8006094 <TIM_OC2_SetConfig+0x11c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00b      	beq.n	8006038 <TIM_OC2_SetConfig+0xc0>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a1d      	ldr	r2, [pc, #116]	; (8006098 <TIM_OC2_SetConfig+0x120>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d007      	beq.n	8006038 <TIM_OC2_SetConfig+0xc0>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a1c      	ldr	r2, [pc, #112]	; (800609c <TIM_OC2_SetConfig+0x124>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d003      	beq.n	8006038 <TIM_OC2_SetConfig+0xc0>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a17      	ldr	r2, [pc, #92]	; (8006090 <TIM_OC2_SetConfig+0x118>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d113      	bne.n	8006060 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800603e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006046:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	4313      	orrs	r3, r2
 8006052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	621a      	str	r2, [r3, #32]
}
 800607a:	bf00      	nop
 800607c:	371c      	adds	r7, #28
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	40012c00 	.word	0x40012c00
 800608c:	40013400 	.word	0x40013400
 8006090:	40015000 	.word	0x40015000
 8006094:	40014000 	.word	0x40014000
 8006098:	40014400 	.word	0x40014400
 800609c:	40014800 	.word	0x40014800

080060a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 0303 	bic.w	r3, r3, #3
 80060da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	021b      	lsls	r3, r3, #8
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a2b      	ldr	r2, [pc, #172]	; (80061ac <TIM_OC3_SetConfig+0x10c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d007      	beq.n	8006112 <TIM_OC3_SetConfig+0x72>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a2a      	ldr	r2, [pc, #168]	; (80061b0 <TIM_OC3_SetConfig+0x110>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d003      	beq.n	8006112 <TIM_OC3_SetConfig+0x72>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a29      	ldr	r2, [pc, #164]	; (80061b4 <TIM_OC3_SetConfig+0x114>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d10d      	bne.n	800612e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006118:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	021b      	lsls	r3, r3, #8
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800612c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a1e      	ldr	r2, [pc, #120]	; (80061ac <TIM_OC3_SetConfig+0x10c>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d013      	beq.n	800615e <TIM_OC3_SetConfig+0xbe>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a1d      	ldr	r2, [pc, #116]	; (80061b0 <TIM_OC3_SetConfig+0x110>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00f      	beq.n	800615e <TIM_OC3_SetConfig+0xbe>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a1d      	ldr	r2, [pc, #116]	; (80061b8 <TIM_OC3_SetConfig+0x118>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d00b      	beq.n	800615e <TIM_OC3_SetConfig+0xbe>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a1c      	ldr	r2, [pc, #112]	; (80061bc <TIM_OC3_SetConfig+0x11c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d007      	beq.n	800615e <TIM_OC3_SetConfig+0xbe>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a1b      	ldr	r2, [pc, #108]	; (80061c0 <TIM_OC3_SetConfig+0x120>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d003      	beq.n	800615e <TIM_OC3_SetConfig+0xbe>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a16      	ldr	r2, [pc, #88]	; (80061b4 <TIM_OC3_SetConfig+0x114>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d113      	bne.n	8006186 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800616c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	011b      	lsls	r3, r3, #4
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	4313      	orrs	r3, r2
 8006178:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	621a      	str	r2, [r3, #32]
}
 80061a0:	bf00      	nop
 80061a2:	371c      	adds	r7, #28
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	40012c00 	.word	0x40012c00
 80061b0:	40013400 	.word	0x40013400
 80061b4:	40015000 	.word	0x40015000
 80061b8:	40014000 	.word	0x40014000
 80061bc:	40014400 	.word	0x40014400
 80061c0:	40014800 	.word	0x40014800

080061c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	021b      	lsls	r3, r3, #8
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	4313      	orrs	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	031b      	lsls	r3, r3, #12
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4313      	orrs	r3, r2
 800621e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a1a      	ldr	r2, [pc, #104]	; (800628c <TIM_OC4_SetConfig+0xc8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d013      	beq.n	8006250 <TIM_OC4_SetConfig+0x8c>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a19      	ldr	r2, [pc, #100]	; (8006290 <TIM_OC4_SetConfig+0xcc>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00f      	beq.n	8006250 <TIM_OC4_SetConfig+0x8c>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a18      	ldr	r2, [pc, #96]	; (8006294 <TIM_OC4_SetConfig+0xd0>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00b      	beq.n	8006250 <TIM_OC4_SetConfig+0x8c>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a17      	ldr	r2, [pc, #92]	; (8006298 <TIM_OC4_SetConfig+0xd4>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d007      	beq.n	8006250 <TIM_OC4_SetConfig+0x8c>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a16      	ldr	r2, [pc, #88]	; (800629c <TIM_OC4_SetConfig+0xd8>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d003      	beq.n	8006250 <TIM_OC4_SetConfig+0x8c>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a15      	ldr	r2, [pc, #84]	; (80062a0 <TIM_OC4_SetConfig+0xdc>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d109      	bne.n	8006264 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006256:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	019b      	lsls	r3, r3, #6
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	621a      	str	r2, [r3, #32]
}
 800627e:	bf00      	nop
 8006280:	371c      	adds	r7, #28
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	40012c00 	.word	0x40012c00
 8006290:	40013400 	.word	0x40013400
 8006294:	40014000 	.word	0x40014000
 8006298:	40014400 	.word	0x40014400
 800629c:	40014800 	.word	0x40014800
 80062a0:	40015000 	.word	0x40015000

080062a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80062e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	041b      	lsls	r3, r3, #16
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a19      	ldr	r2, [pc, #100]	; (8006360 <TIM_OC5_SetConfig+0xbc>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d013      	beq.n	8006326 <TIM_OC5_SetConfig+0x82>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a18      	ldr	r2, [pc, #96]	; (8006364 <TIM_OC5_SetConfig+0xc0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00f      	beq.n	8006326 <TIM_OC5_SetConfig+0x82>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a17      	ldr	r2, [pc, #92]	; (8006368 <TIM_OC5_SetConfig+0xc4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00b      	beq.n	8006326 <TIM_OC5_SetConfig+0x82>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a16      	ldr	r2, [pc, #88]	; (800636c <TIM_OC5_SetConfig+0xc8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d007      	beq.n	8006326 <TIM_OC5_SetConfig+0x82>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a15      	ldr	r2, [pc, #84]	; (8006370 <TIM_OC5_SetConfig+0xcc>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d003      	beq.n	8006326 <TIM_OC5_SetConfig+0x82>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a14      	ldr	r2, [pc, #80]	; (8006374 <TIM_OC5_SetConfig+0xd0>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d109      	bne.n	800633a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800632c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	621a      	str	r2, [r3, #32]
}
 8006354:	bf00      	nop
 8006356:	371c      	adds	r7, #28
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	40012c00 	.word	0x40012c00
 8006364:	40013400 	.word	0x40013400
 8006368:	40014000 	.word	0x40014000
 800636c:	40014400 	.word	0x40014400
 8006370:	40014800 	.word	0x40014800
 8006374:	40015000 	.word	0x40015000

08006378 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	021b      	lsls	r3, r3, #8
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	051b      	lsls	r3, r3, #20
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a1a      	ldr	r2, [pc, #104]	; (8006438 <TIM_OC6_SetConfig+0xc0>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d013      	beq.n	80063fc <TIM_OC6_SetConfig+0x84>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a19      	ldr	r2, [pc, #100]	; (800643c <TIM_OC6_SetConfig+0xc4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d00f      	beq.n	80063fc <TIM_OC6_SetConfig+0x84>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a18      	ldr	r2, [pc, #96]	; (8006440 <TIM_OC6_SetConfig+0xc8>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d00b      	beq.n	80063fc <TIM_OC6_SetConfig+0x84>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a17      	ldr	r2, [pc, #92]	; (8006444 <TIM_OC6_SetConfig+0xcc>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d007      	beq.n	80063fc <TIM_OC6_SetConfig+0x84>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a16      	ldr	r2, [pc, #88]	; (8006448 <TIM_OC6_SetConfig+0xd0>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d003      	beq.n	80063fc <TIM_OC6_SetConfig+0x84>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a15      	ldr	r2, [pc, #84]	; (800644c <TIM_OC6_SetConfig+0xd4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d109      	bne.n	8006410 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006402:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	029b      	lsls	r3, r3, #10
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	621a      	str	r2, [r3, #32]
}
 800642a:	bf00      	nop
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40012c00 	.word	0x40012c00
 800643c:	40013400 	.word	0x40013400
 8006440:	40014000 	.word	0x40014000
 8006444:	40014400 	.word	0x40014400
 8006448:	40014800 	.word	0x40014800
 800644c:	40015000 	.word	0x40015000

08006450 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	f023 0201 	bic.w	r2, r3, #1
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800647a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	011b      	lsls	r3, r3, #4
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	4313      	orrs	r3, r2
 8006484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f023 030a 	bic.w	r3, r3, #10
 800648c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	4313      	orrs	r3, r2
 8006494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	621a      	str	r2, [r3, #32]
}
 80064a2:	bf00      	nop
 80064a4:	371c      	adds	r7, #28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b087      	sub	sp, #28
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	f023 0210 	bic.w	r2, r3, #16
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	031b      	lsls	r3, r3, #12
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	011b      	lsls	r3, r3, #4
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	621a      	str	r2, [r3, #32]
}
 8006502:	bf00      	nop
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800650e:	b480      	push	{r7}
 8006510:	b085      	sub	sp, #20
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006524:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4313      	orrs	r3, r2
 800652c:	f043 0307 	orr.w	r3, r3, #7
 8006530:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	609a      	str	r2, [r3, #8]
}
 8006538:	bf00      	nop
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800655e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	021a      	lsls	r2, r3, #8
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	431a      	orrs	r2, r3
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4313      	orrs	r3, r2
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	609a      	str	r2, [r3, #8]
}
 8006578:	bf00      	nop
 800657a:	371c      	adds	r7, #28
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f003 031f 	and.w	r3, r3, #31
 8006596:	2201      	movs	r2, #1
 8006598:	fa02 f303 	lsl.w	r3, r2, r3
 800659c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6a1a      	ldr	r2, [r3, #32]
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	43db      	mvns	r3, r3
 80065a6:	401a      	ands	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a1a      	ldr	r2, [r3, #32]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f003 031f 	and.w	r3, r3, #31
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	fa01 f303 	lsl.w	r3, r1, r3
 80065bc:	431a      	orrs	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	621a      	str	r2, [r3, #32]
}
 80065c2:	bf00      	nop
 80065c4:	371c      	adds	r7, #28
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
	...

080065d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d101      	bne.n	80065e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e06d      	b.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a30      	ldr	r2, [pc, #192]	; (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d009      	beq.n	8006626 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a2f      	ldr	r2, [pc, #188]	; (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d004      	beq.n	8006626 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a2d      	ldr	r2, [pc, #180]	; (80066d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d108      	bne.n	8006638 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800662c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	4313      	orrs	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a1e      	ldr	r2, [pc, #120]	; (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d01d      	beq.n	8006698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006664:	d018      	beq.n	8006698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a1c      	ldr	r2, [pc, #112]	; (80066dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d013      	beq.n	8006698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a1a      	ldr	r2, [pc, #104]	; (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d00e      	beq.n	8006698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a15      	ldr	r2, [pc, #84]	; (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d009      	beq.n	8006698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a16      	ldr	r2, [pc, #88]	; (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d004      	beq.n	8006698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a11      	ldr	r2, [pc, #68]	; (80066d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d10c      	bne.n	80066b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800669e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	40012c00 	.word	0x40012c00
 80066d4:	40013400 	.word	0x40013400
 80066d8:	40015000 	.word	0x40015000
 80066dc:	40000400 	.word	0x40000400
 80066e0:	40000800 	.word	0x40000800
 80066e4:	40014000 	.word	0x40014000

080066e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e040      	b.n	800677c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d106      	bne.n	8006710 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7fb fb38 	bl	8001d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2224      	movs	r2, #36	; 0x24
 8006714:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0201 	bic.w	r2, r2, #1
 8006724:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fc5e 	bl	8006fe8 <UART_SetConfig>
 800672c:	4603      	mov	r3, r0
 800672e:	2b01      	cmp	r3, #1
 8006730:	d101      	bne.n	8006736 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e022      	b.n	800677c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fe26 	bl	8007390 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006752:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006762:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0201 	orr.w	r2, r2, #1
 8006772:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fead 	bl	80074d4 <UART_CheckIdleState>
 800677a:	4603      	mov	r3, r0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b08a      	sub	sp, #40	; 0x28
 8006788:	af02      	add	r7, sp, #8
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	603b      	str	r3, [r7, #0]
 8006790:	4613      	mov	r3, r2
 8006792:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006798:	2b20      	cmp	r3, #32
 800679a:	d178      	bne.n	800688e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d002      	beq.n	80067a8 <HAL_UART_Transmit+0x24>
 80067a2:	88fb      	ldrh	r3, [r7, #6]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e071      	b.n	8006890 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2221      	movs	r2, #33	; 0x21
 80067b8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067ba:	f7fb fcd9 	bl	8002170 <HAL_GetTick>
 80067be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	88fa      	ldrh	r2, [r7, #6]
 80067c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	88fa      	ldrh	r2, [r7, #6]
 80067cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d8:	d108      	bne.n	80067ec <HAL_UART_Transmit+0x68>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d104      	bne.n	80067ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80067e2:	2300      	movs	r3, #0
 80067e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	61bb      	str	r3, [r7, #24]
 80067ea:	e003      	b.n	80067f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067f0:	2300      	movs	r3, #0
 80067f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067f4:	e030      	b.n	8006858 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2200      	movs	r2, #0
 80067fe:	2180      	movs	r1, #128	; 0x80
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 ff0f 	bl	8007624 <UART_WaitOnFlagUntilTimeout>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d004      	beq.n	8006816 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2220      	movs	r2, #32
 8006810:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e03c      	b.n	8006890 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10b      	bne.n	8006834 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	881a      	ldrh	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006828:	b292      	uxth	r2, r2
 800682a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	3302      	adds	r3, #2
 8006830:	61bb      	str	r3, [r7, #24]
 8006832:	e008      	b.n	8006846 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	781a      	ldrb	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	b292      	uxth	r2, r2
 800683e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	3301      	adds	r3, #1
 8006844:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800684c:	b29b      	uxth	r3, r3
 800684e:	3b01      	subs	r3, #1
 8006850:	b29a      	uxth	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800685e:	b29b      	uxth	r3, r3
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1c8      	bne.n	80067f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2200      	movs	r2, #0
 800686c:	2140      	movs	r1, #64	; 0x40
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 fed8 	bl	8007624 <UART_WaitOnFlagUntilTimeout>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d004      	beq.n	8006884 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2220      	movs	r2, #32
 800687e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e005      	b.n	8006890 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2220      	movs	r2, #32
 8006888:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	e000      	b.n	8006890 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800688e:	2302      	movs	r3, #2
  }
}
 8006890:	4618      	mov	r0, r3
 8006892:	3720      	adds	r7, #32
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006898:	b480      	push	{r7}
 800689a:	b08b      	sub	sp, #44	; 0x2c
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	4613      	mov	r3, r2
 80068a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d147      	bne.n	800693e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <HAL_UART_Transmit_IT+0x22>
 80068b4:	88fb      	ldrh	r3, [r7, #6]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e040      	b.n	8006940 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	88fa      	ldrh	r2, [r7, #6]
 80068c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	88fa      	ldrh	r2, [r7, #6]
 80068d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2221      	movs	r2, #33	; 0x21
 80068e6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f0:	d107      	bne.n	8006902 <HAL_UART_Transmit_IT+0x6a>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d103      	bne.n	8006902 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4a13      	ldr	r2, [pc, #76]	; (800694c <HAL_UART_Transmit_IT+0xb4>)
 80068fe:	66da      	str	r2, [r3, #108]	; 0x6c
 8006900:	e002      	b.n	8006908 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4a12      	ldr	r2, [pc, #72]	; (8006950 <HAL_UART_Transmit_IT+0xb8>)
 8006906:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	613b      	str	r3, [r7, #16]
   return(result);
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	623b      	str	r3, [r7, #32]
 8006928:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	69f9      	ldr	r1, [r7, #28]
 800692c:	6a3a      	ldr	r2, [r7, #32]
 800692e:	e841 2300 	strex	r3, r2, [r1]
 8006932:	61bb      	str	r3, [r7, #24]
   return(result);
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1e6      	bne.n	8006908 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	e000      	b.n	8006940 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800693e:	2302      	movs	r3, #2
  }
}
 8006940:	4618      	mov	r0, r3
 8006942:	372c      	adds	r7, #44	; 0x2c
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	08007a2d 	.word	0x08007a2d
 8006950:	08007975 	.word	0x08007975

08006954 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b08a      	sub	sp, #40	; 0x28
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	4613      	mov	r3, r2
 8006960:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006968:	2b20      	cmp	r3, #32
 800696a:	d132      	bne.n	80069d2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <HAL_UART_Receive_IT+0x24>
 8006972:	88fb      	ldrh	r3, [r7, #6]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e02b      	b.n	80069d4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d018      	beq.n	80069c2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	613b      	str	r3, [r7, #16]
   return(result);
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069a4:	627b      	str	r3, [r7, #36]	; 0x24
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	623b      	str	r3, [r7, #32]
 80069b0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	69f9      	ldr	r1, [r7, #28]
 80069b4:	6a3a      	ldr	r2, [r7, #32]
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1e6      	bne.n	8006990 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069c2:	88fb      	ldrh	r3, [r7, #6]
 80069c4:	461a      	mov	r2, r3
 80069c6:	68b9      	ldr	r1, [r7, #8]
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 fe93 	bl	80076f4 <UART_Start_Receive_IT>
 80069ce:	4603      	mov	r3, r0
 80069d0:	e000      	b.n	80069d4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80069d2:	2302      	movs	r3, #2
  }
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3728      	adds	r7, #40	; 0x28
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b0ba      	sub	sp, #232	; 0xe8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006a06:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006a10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d115      	bne.n	8006a44 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00f      	beq.n	8006a44 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a28:	f003 0320 	and.w	r3, r3, #32
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d009      	beq.n	8006a44 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 82ab 	beq.w	8006f90 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	4798      	blx	r3
      }
      return;
 8006a42:	e2a5      	b.n	8006f90 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8117 	beq.w	8006c7c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006a5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006a5e:	4b85      	ldr	r3, [pc, #532]	; (8006c74 <HAL_UART_IRQHandler+0x298>)
 8006a60:	4013      	ands	r3, r2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 810a 	beq.w	8006c7c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d011      	beq.n	8006a98 <HAL_UART_IRQHandler+0xbc>
 8006a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00b      	beq.n	8006a98 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2201      	movs	r2, #1
 8006a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a8e:	f043 0201 	orr.w	r2, r3, #1
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d011      	beq.n	8006ac8 <HAL_UART_IRQHandler+0xec>
 8006aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00b      	beq.n	8006ac8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006abe:	f043 0204 	orr.w	r2, r3, #4
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d011      	beq.n	8006af8 <HAL_UART_IRQHandler+0x11c>
 8006ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00b      	beq.n	8006af8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2204      	movs	r2, #4
 8006ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aee:	f043 0202 	orr.w	r2, r3, #2
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006afc:	f003 0308 	and.w	r3, r3, #8
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d017      	beq.n	8006b34 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d105      	bne.n	8006b1c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00b      	beq.n	8006b34 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2208      	movs	r2, #8
 8006b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b2a:	f043 0208 	orr.w	r2, r3, #8
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d012      	beq.n	8006b66 <HAL_UART_IRQHandler+0x18a>
 8006b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00c      	beq.n	8006b66 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b5c:	f043 0220 	orr.w	r2, r3, #32
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 8211 	beq.w	8006f94 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00d      	beq.n	8006b9a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b82:	f003 0320 	and.w	r3, r3, #32
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d007      	beq.n	8006b9a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ba0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bae:	2b40      	cmp	r3, #64	; 0x40
 8006bb0:	d005      	beq.n	8006bbe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d04f      	beq.n	8006c5e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fe5e 	bl	8007880 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bce:	2b40      	cmp	r3, #64	; 0x40
 8006bd0:	d141      	bne.n	8006c56 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006be0:	e853 3f00 	ldrex	r3, [r3]
 8006be4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006be8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3308      	adds	r3, #8
 8006bfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006bfe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1d9      	bne.n	8006bd2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d013      	beq.n	8006c4e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c2a:	4a13      	ldr	r2, [pc, #76]	; (8006c78 <HAL_UART_IRQHandler+0x29c>)
 8006c2c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fc fcf4 	bl	8003620 <HAL_DMA_Abort_IT>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d017      	beq.n	8006c6e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006c48:	4610      	mov	r0, r2
 8006c4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c4c:	e00f      	b.n	8006c6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f9b4 	bl	8006fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c54:	e00b      	b.n	8006c6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f9b0 	bl	8006fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c5c:	e007      	b.n	8006c6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f9ac 	bl	8006fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006c6c:	e192      	b.n	8006f94 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6e:	bf00      	nop
    return;
 8006c70:	e190      	b.n	8006f94 <HAL_UART_IRQHandler+0x5b8>
 8006c72:	bf00      	nop
 8006c74:	04000120 	.word	0x04000120
 8006c78:	08007949 	.word	0x08007949

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	f040 814b 	bne.w	8006f1c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8a:	f003 0310 	and.w	r3, r3, #16
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 8144 	beq.w	8006f1c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c98:	f003 0310 	and.w	r3, r3, #16
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 813d 	beq.w	8006f1c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2210      	movs	r2, #16
 8006ca8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb4:	2b40      	cmp	r3, #64	; 0x40
 8006cb6:	f040 80b5 	bne.w	8006e24 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cc6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 8164 	beq.w	8006f98 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	f080 815c 	bcs.w	8006f98 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ce6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	2b20      	cmp	r3, #32
 8006cf2:	f000 8086 	beq.w	8006e02 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d24:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d28:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d30:	e841 2300 	strex	r3, r2, [r1]
 8006d34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1da      	bne.n	8006cf6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3308      	adds	r3, #8
 8006d46:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d4a:	e853 3f00 	ldrex	r3, [r3]
 8006d4e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d52:	f023 0301 	bic.w	r3, r3, #1
 8006d56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d64:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d68:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d70:	e841 2300 	strex	r3, r2, [r1]
 8006d74:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1e1      	bne.n	8006d40 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3308      	adds	r3, #8
 8006d82:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d86:	e853 3f00 	ldrex	r3, [r3]
 8006d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006da0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006da2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006da6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006da8:	e841 2300 	strex	r3, r2, [r1]
 8006dac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006dae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e3      	bne.n	8006d7c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dca:	e853 3f00 	ldrex	r3, [r3]
 8006dce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dd2:	f023 0310 	bic.w	r3, r3, #16
 8006dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006de4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006de6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006dea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dec:	e841 2300 	strex	r3, r2, [r1]
 8006df0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1e4      	bne.n	8006dc2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fc fbd6 	bl	80035ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2202      	movs	r2, #2
 8006e06:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f8d7 	bl	8006fd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e22:	e0b9      	b.n	8006f98 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 80ab 	beq.w	8006f9c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006e46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 80a6 	beq.w	8006f9c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e58:	e853 3f00 	ldrex	r3, [r3]
 8006e5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e72:	647b      	str	r3, [r7, #68]	; 0x44
 8006e74:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e7a:	e841 2300 	strex	r3, r2, [r1]
 8006e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1e4      	bne.n	8006e50 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3308      	adds	r3, #8
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	e853 3f00 	ldrex	r3, [r3]
 8006e94:	623b      	str	r3, [r7, #32]
   return(result);
 8006e96:	6a3b      	ldr	r3, [r7, #32]
 8006e98:	f023 0301 	bic.w	r3, r3, #1
 8006e9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	3308      	adds	r3, #8
 8006ea6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006eaa:	633a      	str	r2, [r7, #48]	; 0x30
 8006eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eb2:	e841 2300 	strex	r3, r2, [r1]
 8006eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1e3      	bne.n	8006e86 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	e853 3f00 	ldrex	r3, [r3]
 8006ede:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 0310 	bic.w	r3, r3, #16
 8006ee6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ef4:	61fb      	str	r3, [r7, #28]
 8006ef6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef8:	69b9      	ldr	r1, [r7, #24]
 8006efa:	69fa      	ldr	r2, [r7, #28]
 8006efc:	e841 2300 	strex	r3, r2, [r1]
 8006f00:	617b      	str	r3, [r7, #20]
   return(result);
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e4      	bne.n	8006ed2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f85b 	bl	8006fd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f1a:	e03f      	b.n	8006f9c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00e      	beq.n	8006f46 <HAL_UART_IRQHandler+0x56a>
 8006f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d008      	beq.n	8006f46 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 ffa6 	bl	8007e90 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f44:	e02d      	b.n	8006fa2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00e      	beq.n	8006f70 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d008      	beq.n	8006f70 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d01c      	beq.n	8006fa0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	4798      	blx	r3
    }
    return;
 8006f6e:	e017      	b.n	8006fa0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d012      	beq.n	8006fa2 <HAL_UART_IRQHandler+0x5c6>
 8006f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00c      	beq.n	8006fa2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fdaf 	bl	8007aec <UART_EndTransmit_IT>
    return;
 8006f8e:	e008      	b.n	8006fa2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006f90:	bf00      	nop
 8006f92:	e006      	b.n	8006fa2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006f94:	bf00      	nop
 8006f96:	e004      	b.n	8006fa2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006f98:	bf00      	nop
 8006f9a:	e002      	b.n	8006fa2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006f9c:	bf00      	nop
 8006f9e:	e000      	b.n	8006fa2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006fa0:	bf00      	nop
  }

}
 8006fa2:	37e8      	adds	r7, #232	; 0xe8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689a      	ldr	r2, [r3, #8]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	431a      	orrs	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	4313      	orrs	r3, r2
 800700a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	4b92      	ldr	r3, [pc, #584]	; (800725c <UART_SetConfig+0x274>)
 8007014:	4013      	ands	r3, r2
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	6812      	ldr	r2, [r2, #0]
 800701a:	6979      	ldr	r1, [r7, #20]
 800701c:	430b      	orrs	r3, r1
 800701e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68da      	ldr	r2, [r3, #12]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	4313      	orrs	r3, r2
 8007044:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	430a      	orrs	r2, r1
 8007058:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a80      	ldr	r2, [pc, #512]	; (8007260 <UART_SetConfig+0x278>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d120      	bne.n	80070a6 <UART_SetConfig+0xbe>
 8007064:	4b7f      	ldr	r3, [pc, #508]	; (8007264 <UART_SetConfig+0x27c>)
 8007066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007068:	f003 0303 	and.w	r3, r3, #3
 800706c:	2b03      	cmp	r3, #3
 800706e:	d817      	bhi.n	80070a0 <UART_SetConfig+0xb8>
 8007070:	a201      	add	r2, pc, #4	; (adr r2, 8007078 <UART_SetConfig+0x90>)
 8007072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007076:	bf00      	nop
 8007078:	08007089 	.word	0x08007089
 800707c:	08007095 	.word	0x08007095
 8007080:	0800709b 	.word	0x0800709b
 8007084:	0800708f 	.word	0x0800708f
 8007088:	2301      	movs	r3, #1
 800708a:	77fb      	strb	r3, [r7, #31]
 800708c:	e0b5      	b.n	80071fa <UART_SetConfig+0x212>
 800708e:	2302      	movs	r3, #2
 8007090:	77fb      	strb	r3, [r7, #31]
 8007092:	e0b2      	b.n	80071fa <UART_SetConfig+0x212>
 8007094:	2304      	movs	r3, #4
 8007096:	77fb      	strb	r3, [r7, #31]
 8007098:	e0af      	b.n	80071fa <UART_SetConfig+0x212>
 800709a:	2308      	movs	r3, #8
 800709c:	77fb      	strb	r3, [r7, #31]
 800709e:	e0ac      	b.n	80071fa <UART_SetConfig+0x212>
 80070a0:	2310      	movs	r3, #16
 80070a2:	77fb      	strb	r3, [r7, #31]
 80070a4:	e0a9      	b.n	80071fa <UART_SetConfig+0x212>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a6f      	ldr	r2, [pc, #444]	; (8007268 <UART_SetConfig+0x280>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d124      	bne.n	80070fa <UART_SetConfig+0x112>
 80070b0:	4b6c      	ldr	r3, [pc, #432]	; (8007264 <UART_SetConfig+0x27c>)
 80070b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80070b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80070bc:	d011      	beq.n	80070e2 <UART_SetConfig+0xfa>
 80070be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80070c2:	d817      	bhi.n	80070f4 <UART_SetConfig+0x10c>
 80070c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070c8:	d011      	beq.n	80070ee <UART_SetConfig+0x106>
 80070ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070ce:	d811      	bhi.n	80070f4 <UART_SetConfig+0x10c>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d003      	beq.n	80070dc <UART_SetConfig+0xf4>
 80070d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d8:	d006      	beq.n	80070e8 <UART_SetConfig+0x100>
 80070da:	e00b      	b.n	80070f4 <UART_SetConfig+0x10c>
 80070dc:	2300      	movs	r3, #0
 80070de:	77fb      	strb	r3, [r7, #31]
 80070e0:	e08b      	b.n	80071fa <UART_SetConfig+0x212>
 80070e2:	2302      	movs	r3, #2
 80070e4:	77fb      	strb	r3, [r7, #31]
 80070e6:	e088      	b.n	80071fa <UART_SetConfig+0x212>
 80070e8:	2304      	movs	r3, #4
 80070ea:	77fb      	strb	r3, [r7, #31]
 80070ec:	e085      	b.n	80071fa <UART_SetConfig+0x212>
 80070ee:	2308      	movs	r3, #8
 80070f0:	77fb      	strb	r3, [r7, #31]
 80070f2:	e082      	b.n	80071fa <UART_SetConfig+0x212>
 80070f4:	2310      	movs	r3, #16
 80070f6:	77fb      	strb	r3, [r7, #31]
 80070f8:	e07f      	b.n	80071fa <UART_SetConfig+0x212>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a5b      	ldr	r2, [pc, #364]	; (800726c <UART_SetConfig+0x284>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d124      	bne.n	800714e <UART_SetConfig+0x166>
 8007104:	4b57      	ldr	r3, [pc, #348]	; (8007264 <UART_SetConfig+0x27c>)
 8007106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007108:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800710c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007110:	d011      	beq.n	8007136 <UART_SetConfig+0x14e>
 8007112:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007116:	d817      	bhi.n	8007148 <UART_SetConfig+0x160>
 8007118:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800711c:	d011      	beq.n	8007142 <UART_SetConfig+0x15a>
 800711e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007122:	d811      	bhi.n	8007148 <UART_SetConfig+0x160>
 8007124:	2b00      	cmp	r3, #0
 8007126:	d003      	beq.n	8007130 <UART_SetConfig+0x148>
 8007128:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800712c:	d006      	beq.n	800713c <UART_SetConfig+0x154>
 800712e:	e00b      	b.n	8007148 <UART_SetConfig+0x160>
 8007130:	2300      	movs	r3, #0
 8007132:	77fb      	strb	r3, [r7, #31]
 8007134:	e061      	b.n	80071fa <UART_SetConfig+0x212>
 8007136:	2302      	movs	r3, #2
 8007138:	77fb      	strb	r3, [r7, #31]
 800713a:	e05e      	b.n	80071fa <UART_SetConfig+0x212>
 800713c:	2304      	movs	r3, #4
 800713e:	77fb      	strb	r3, [r7, #31]
 8007140:	e05b      	b.n	80071fa <UART_SetConfig+0x212>
 8007142:	2308      	movs	r3, #8
 8007144:	77fb      	strb	r3, [r7, #31]
 8007146:	e058      	b.n	80071fa <UART_SetConfig+0x212>
 8007148:	2310      	movs	r3, #16
 800714a:	77fb      	strb	r3, [r7, #31]
 800714c:	e055      	b.n	80071fa <UART_SetConfig+0x212>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a47      	ldr	r2, [pc, #284]	; (8007270 <UART_SetConfig+0x288>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d124      	bne.n	80071a2 <UART_SetConfig+0x1ba>
 8007158:	4b42      	ldr	r3, [pc, #264]	; (8007264 <UART_SetConfig+0x27c>)
 800715a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007160:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007164:	d011      	beq.n	800718a <UART_SetConfig+0x1a2>
 8007166:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800716a:	d817      	bhi.n	800719c <UART_SetConfig+0x1b4>
 800716c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007170:	d011      	beq.n	8007196 <UART_SetConfig+0x1ae>
 8007172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007176:	d811      	bhi.n	800719c <UART_SetConfig+0x1b4>
 8007178:	2b00      	cmp	r3, #0
 800717a:	d003      	beq.n	8007184 <UART_SetConfig+0x19c>
 800717c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007180:	d006      	beq.n	8007190 <UART_SetConfig+0x1a8>
 8007182:	e00b      	b.n	800719c <UART_SetConfig+0x1b4>
 8007184:	2300      	movs	r3, #0
 8007186:	77fb      	strb	r3, [r7, #31]
 8007188:	e037      	b.n	80071fa <UART_SetConfig+0x212>
 800718a:	2302      	movs	r3, #2
 800718c:	77fb      	strb	r3, [r7, #31]
 800718e:	e034      	b.n	80071fa <UART_SetConfig+0x212>
 8007190:	2304      	movs	r3, #4
 8007192:	77fb      	strb	r3, [r7, #31]
 8007194:	e031      	b.n	80071fa <UART_SetConfig+0x212>
 8007196:	2308      	movs	r3, #8
 8007198:	77fb      	strb	r3, [r7, #31]
 800719a:	e02e      	b.n	80071fa <UART_SetConfig+0x212>
 800719c:	2310      	movs	r3, #16
 800719e:	77fb      	strb	r3, [r7, #31]
 80071a0:	e02b      	b.n	80071fa <UART_SetConfig+0x212>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a33      	ldr	r2, [pc, #204]	; (8007274 <UART_SetConfig+0x28c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d124      	bne.n	80071f6 <UART_SetConfig+0x20e>
 80071ac:	4b2d      	ldr	r3, [pc, #180]	; (8007264 <UART_SetConfig+0x27c>)
 80071ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80071b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80071b8:	d011      	beq.n	80071de <UART_SetConfig+0x1f6>
 80071ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80071be:	d817      	bhi.n	80071f0 <UART_SetConfig+0x208>
 80071c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071c4:	d011      	beq.n	80071ea <UART_SetConfig+0x202>
 80071c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071ca:	d811      	bhi.n	80071f0 <UART_SetConfig+0x208>
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <UART_SetConfig+0x1f0>
 80071d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071d4:	d006      	beq.n	80071e4 <UART_SetConfig+0x1fc>
 80071d6:	e00b      	b.n	80071f0 <UART_SetConfig+0x208>
 80071d8:	2300      	movs	r3, #0
 80071da:	77fb      	strb	r3, [r7, #31]
 80071dc:	e00d      	b.n	80071fa <UART_SetConfig+0x212>
 80071de:	2302      	movs	r3, #2
 80071e0:	77fb      	strb	r3, [r7, #31]
 80071e2:	e00a      	b.n	80071fa <UART_SetConfig+0x212>
 80071e4:	2304      	movs	r3, #4
 80071e6:	77fb      	strb	r3, [r7, #31]
 80071e8:	e007      	b.n	80071fa <UART_SetConfig+0x212>
 80071ea:	2308      	movs	r3, #8
 80071ec:	77fb      	strb	r3, [r7, #31]
 80071ee:	e004      	b.n	80071fa <UART_SetConfig+0x212>
 80071f0:	2310      	movs	r3, #16
 80071f2:	77fb      	strb	r3, [r7, #31]
 80071f4:	e001      	b.n	80071fa <UART_SetConfig+0x212>
 80071f6:	2310      	movs	r3, #16
 80071f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007202:	d16b      	bne.n	80072dc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007204:	7ffb      	ldrb	r3, [r7, #31]
 8007206:	2b08      	cmp	r3, #8
 8007208:	d838      	bhi.n	800727c <UART_SetConfig+0x294>
 800720a:	a201      	add	r2, pc, #4	; (adr r2, 8007210 <UART_SetConfig+0x228>)
 800720c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007210:	08007235 	.word	0x08007235
 8007214:	0800723d 	.word	0x0800723d
 8007218:	08007245 	.word	0x08007245
 800721c:	0800727d 	.word	0x0800727d
 8007220:	0800724b 	.word	0x0800724b
 8007224:	0800727d 	.word	0x0800727d
 8007228:	0800727d 	.word	0x0800727d
 800722c:	0800727d 	.word	0x0800727d
 8007230:	08007253 	.word	0x08007253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007234:	f7fd ff64 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 8007238:	61b8      	str	r0, [r7, #24]
        break;
 800723a:	e024      	b.n	8007286 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800723c:	f7fd ff82 	bl	8005144 <HAL_RCC_GetPCLK2Freq>
 8007240:	61b8      	str	r0, [r7, #24]
        break;
 8007242:	e020      	b.n	8007286 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007244:	4b0c      	ldr	r3, [pc, #48]	; (8007278 <UART_SetConfig+0x290>)
 8007246:	61bb      	str	r3, [r7, #24]
        break;
 8007248:	e01d      	b.n	8007286 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800724a:	f7fd fee3 	bl	8005014 <HAL_RCC_GetSysClockFreq>
 800724e:	61b8      	str	r0, [r7, #24]
        break;
 8007250:	e019      	b.n	8007286 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007256:	61bb      	str	r3, [r7, #24]
        break;
 8007258:	e015      	b.n	8007286 <UART_SetConfig+0x29e>
 800725a:	bf00      	nop
 800725c:	efff69f3 	.word	0xefff69f3
 8007260:	40013800 	.word	0x40013800
 8007264:	40021000 	.word	0x40021000
 8007268:	40004400 	.word	0x40004400
 800726c:	40004800 	.word	0x40004800
 8007270:	40004c00 	.word	0x40004c00
 8007274:	40005000 	.word	0x40005000
 8007278:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	77bb      	strb	r3, [r7, #30]
        break;
 8007284:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d073      	beq.n	8007374 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	005a      	lsls	r2, r3, #1
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	085b      	lsrs	r3, r3, #1
 8007296:	441a      	add	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	2b0f      	cmp	r3, #15
 80072a6:	d916      	bls.n	80072d6 <UART_SetConfig+0x2ee>
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ae:	d212      	bcs.n	80072d6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	f023 030f 	bic.w	r3, r3, #15
 80072b8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	085b      	lsrs	r3, r3, #1
 80072be:	b29b      	uxth	r3, r3
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	89fb      	ldrh	r3, [r7, #14]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	89fa      	ldrh	r2, [r7, #14]
 80072d2:	60da      	str	r2, [r3, #12]
 80072d4:	e04e      	b.n	8007374 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	77bb      	strb	r3, [r7, #30]
 80072da:	e04b      	b.n	8007374 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072dc:	7ffb      	ldrb	r3, [r7, #31]
 80072de:	2b08      	cmp	r3, #8
 80072e0:	d827      	bhi.n	8007332 <UART_SetConfig+0x34a>
 80072e2:	a201      	add	r2, pc, #4	; (adr r2, 80072e8 <UART_SetConfig+0x300>)
 80072e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e8:	0800730d 	.word	0x0800730d
 80072ec:	08007315 	.word	0x08007315
 80072f0:	0800731d 	.word	0x0800731d
 80072f4:	08007333 	.word	0x08007333
 80072f8:	08007323 	.word	0x08007323
 80072fc:	08007333 	.word	0x08007333
 8007300:	08007333 	.word	0x08007333
 8007304:	08007333 	.word	0x08007333
 8007308:	0800732b 	.word	0x0800732b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800730c:	f7fd fef8 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 8007310:	61b8      	str	r0, [r7, #24]
        break;
 8007312:	e013      	b.n	800733c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007314:	f7fd ff16 	bl	8005144 <HAL_RCC_GetPCLK2Freq>
 8007318:	61b8      	str	r0, [r7, #24]
        break;
 800731a:	e00f      	b.n	800733c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800731c:	4b1b      	ldr	r3, [pc, #108]	; (800738c <UART_SetConfig+0x3a4>)
 800731e:	61bb      	str	r3, [r7, #24]
        break;
 8007320:	e00c      	b.n	800733c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007322:	f7fd fe77 	bl	8005014 <HAL_RCC_GetSysClockFreq>
 8007326:	61b8      	str	r0, [r7, #24]
        break;
 8007328:	e008      	b.n	800733c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800732a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800732e:	61bb      	str	r3, [r7, #24]
        break;
 8007330:	e004      	b.n	800733c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007332:	2300      	movs	r3, #0
 8007334:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	77bb      	strb	r3, [r7, #30]
        break;
 800733a:	bf00      	nop
    }

    if (pclk != 0U)
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d018      	beq.n	8007374 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	085a      	lsrs	r2, r3, #1
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	441a      	add	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	fbb2 f3f3 	udiv	r3, r2, r3
 8007354:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	2b0f      	cmp	r3, #15
 800735a:	d909      	bls.n	8007370 <UART_SetConfig+0x388>
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007362:	d205      	bcs.n	8007370 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	b29a      	uxth	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	60da      	str	r2, [r3, #12]
 800736e:	e001      	b.n	8007374 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007380:	7fbb      	ldrb	r3, [r7, #30]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3720      	adds	r7, #32
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	007a1200 	.word	0x007a1200

08007390 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00a      	beq.n	80073ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00a      	beq.n	80073dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	430a      	orrs	r2, r1
 80073da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00a      	beq.n	80073fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007402:	f003 0308 	and.w	r3, r3, #8
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	430a      	orrs	r2, r1
 800741e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007424:	f003 0310 	and.w	r3, r3, #16
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00a      	beq.n	8007442 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	430a      	orrs	r2, r1
 8007440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007446:	f003 0320 	and.w	r3, r3, #32
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00a      	beq.n	8007464 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	430a      	orrs	r2, r1
 8007462:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746c:	2b00      	cmp	r3, #0
 800746e:	d01a      	beq.n	80074a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	430a      	orrs	r2, r1
 8007484:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800748e:	d10a      	bne.n	80074a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	430a      	orrs	r2, r1
 80074a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00a      	beq.n	80074c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	605a      	str	r2, [r3, #4]
  }
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b098      	sub	sp, #96	; 0x60
 80074d8:	af02      	add	r7, sp, #8
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074e4:	f7fa fe44 	bl	8002170 <HAL_GetTick>
 80074e8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0308 	and.w	r3, r3, #8
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	d12e      	bne.n	8007556 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007500:	2200      	movs	r2, #0
 8007502:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f88c 	bl	8007624 <UART_WaitOnFlagUntilTimeout>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d021      	beq.n	8007556 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751a:	e853 3f00 	ldrex	r3, [r3]
 800751e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007526:	653b      	str	r3, [r7, #80]	; 0x50
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	461a      	mov	r2, r3
 800752e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007530:	647b      	str	r3, [r7, #68]	; 0x44
 8007532:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007534:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007536:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007538:	e841 2300 	strex	r3, r2, [r1]
 800753c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800753e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1e6      	bne.n	8007512 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2220      	movs	r2, #32
 8007548:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e062      	b.n	800761c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b04      	cmp	r3, #4
 8007562:	d149      	bne.n	80075f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007564:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800756c:	2200      	movs	r2, #0
 800756e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f856 	bl	8007624 <UART_WaitOnFlagUntilTimeout>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d03c      	beq.n	80075f8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	e853 3f00 	ldrex	r3, [r3]
 800758a:	623b      	str	r3, [r7, #32]
   return(result);
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	461a      	mov	r2, r3
 800759a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800759c:	633b      	str	r3, [r7, #48]	; 0x30
 800759e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075a4:	e841 2300 	strex	r3, r2, [r1]
 80075a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1e6      	bne.n	800757e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3308      	adds	r3, #8
 80075b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	e853 3f00 	ldrex	r3, [r3]
 80075be:	60fb      	str	r3, [r7, #12]
   return(result);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f023 0301 	bic.w	r3, r3, #1
 80075c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3308      	adds	r3, #8
 80075ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075d0:	61fa      	str	r2, [r7, #28]
 80075d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d4:	69b9      	ldr	r1, [r7, #24]
 80075d6:	69fa      	ldr	r2, [r7, #28]
 80075d8:	e841 2300 	strex	r3, r2, [r1]
 80075dc:	617b      	str	r3, [r7, #20]
   return(result);
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1e5      	bne.n	80075b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2220      	movs	r2, #32
 80075e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e011      	b.n	800761c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2220      	movs	r2, #32
 80075fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2220      	movs	r2, #32
 8007602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3758      	adds	r7, #88	; 0x58
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	603b      	str	r3, [r7, #0]
 8007630:	4613      	mov	r3, r2
 8007632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007634:	e049      	b.n	80076ca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763c:	d045      	beq.n	80076ca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800763e:	f7fa fd97 	bl	8002170 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	69ba      	ldr	r2, [r7, #24]
 800764a:	429a      	cmp	r2, r3
 800764c:	d302      	bcc.n	8007654 <UART_WaitOnFlagUntilTimeout+0x30>
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e048      	b.n	80076ea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0304 	and.w	r3, r3, #4
 8007662:	2b00      	cmp	r3, #0
 8007664:	d031      	beq.n	80076ca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	f003 0308 	and.w	r3, r3, #8
 8007670:	2b08      	cmp	r3, #8
 8007672:	d110      	bne.n	8007696 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2208      	movs	r2, #8
 800767a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 f8ff 	bl	8007880 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2208      	movs	r2, #8
 8007686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e029      	b.n	80076ea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	69db      	ldr	r3, [r3, #28]
 800769c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076a4:	d111      	bne.n	80076ca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 f8e5 	bl	8007880 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2220      	movs	r2, #32
 80076ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e00f      	b.n	80076ea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69da      	ldr	r2, [r3, #28]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	4013      	ands	r3, r2
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	bf0c      	ite	eq
 80076da:	2301      	moveq	r3, #1
 80076dc:	2300      	movne	r3, #0
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	461a      	mov	r2, r3
 80076e2:	79fb      	ldrb	r3, [r7, #7]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d0a6      	beq.n	8007636 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
	...

080076f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b097      	sub	sp, #92	; 0x5c
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	4613      	mov	r3, r2
 8007700:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	88fa      	ldrh	r2, [r7, #6]
 800770c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	88fa      	ldrh	r2, [r7, #6]
 8007714:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007726:	d10e      	bne.n	8007746 <UART_Start_Receive_IT+0x52>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d105      	bne.n	800773c <UART_Start_Receive_IT+0x48>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007736:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800773a:	e02d      	b.n	8007798 <UART_Start_Receive_IT+0xa4>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	22ff      	movs	r2, #255	; 0xff
 8007740:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007744:	e028      	b.n	8007798 <UART_Start_Receive_IT+0xa4>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10d      	bne.n	800776a <UART_Start_Receive_IT+0x76>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d104      	bne.n	8007760 <UART_Start_Receive_IT+0x6c>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	22ff      	movs	r2, #255	; 0xff
 800775a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800775e:	e01b      	b.n	8007798 <UART_Start_Receive_IT+0xa4>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	227f      	movs	r2, #127	; 0x7f
 8007764:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007768:	e016      	b.n	8007798 <UART_Start_Receive_IT+0xa4>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007772:	d10d      	bne.n	8007790 <UART_Start_Receive_IT+0x9c>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d104      	bne.n	8007786 <UART_Start_Receive_IT+0x92>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	227f      	movs	r2, #127	; 0x7f
 8007780:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007784:	e008      	b.n	8007798 <UART_Start_Receive_IT+0xa4>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	223f      	movs	r2, #63	; 0x3f
 800778a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800778e:	e003      	b.n	8007798 <UART_Start_Receive_IT+0xa4>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2222      	movs	r2, #34	; 0x22
 80077a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3308      	adds	r3, #8
 80077ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b2:	e853 3f00 	ldrex	r3, [r3]
 80077b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ba:	f043 0301 	orr.w	r3, r3, #1
 80077be:	657b      	str	r3, [r7, #84]	; 0x54
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3308      	adds	r3, #8
 80077c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80077ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077d0:	e841 2300 	strex	r3, r2, [r1]
 80077d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80077d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e5      	bne.n	80077a8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e4:	d107      	bne.n	80077f6 <UART_Start_Receive_IT+0x102>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d103      	bne.n	80077f6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	4a21      	ldr	r2, [pc, #132]	; (8007878 <UART_Start_Receive_IT+0x184>)
 80077f2:	669a      	str	r2, [r3, #104]	; 0x68
 80077f4:	e002      	b.n	80077fc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	4a20      	ldr	r2, [pc, #128]	; (800787c <UART_Start_Receive_IT+0x188>)
 80077fa:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d019      	beq.n	8007838 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	e853 3f00 	ldrex	r3, [r3]
 8007810:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007818:	64fb      	str	r3, [r7, #76]	; 0x4c
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007822:	637b      	str	r3, [r7, #52]	; 0x34
 8007824:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007826:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007828:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800782a:	e841 2300 	strex	r3, r2, [r1]
 800782e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1e6      	bne.n	8007804 <UART_Start_Receive_IT+0x110>
 8007836:	e018      	b.n	800786a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	e853 3f00 	ldrex	r3, [r3]
 8007844:	613b      	str	r3, [r7, #16]
   return(result);
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	f043 0320 	orr.w	r3, r3, #32
 800784c:	653b      	str	r3, [r7, #80]	; 0x50
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007856:	623b      	str	r3, [r7, #32]
 8007858:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	69f9      	ldr	r1, [r7, #28]
 800785c:	6a3a      	ldr	r2, [r7, #32]
 800785e:	e841 2300 	strex	r3, r2, [r1]
 8007862:	61bb      	str	r3, [r7, #24]
   return(result);
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1e6      	bne.n	8007838 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	375c      	adds	r7, #92	; 0x5c
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	08007ce9 	.word	0x08007ce9
 800787c:	08007b41 	.word	0x08007b41

08007880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007880:	b480      	push	{r7}
 8007882:	b095      	sub	sp, #84	; 0x54
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007890:	e853 3f00 	ldrex	r3, [r3]
 8007894:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007898:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800789c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078a6:	643b      	str	r3, [r7, #64]	; 0x40
 80078a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078ae:	e841 2300 	strex	r3, r2, [r1]
 80078b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1e6      	bne.n	8007888 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3308      	adds	r3, #8
 80078c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c2:	6a3b      	ldr	r3, [r7, #32]
 80078c4:	e853 3f00 	ldrex	r3, [r3]
 80078c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	f023 0301 	bic.w	r3, r3, #1
 80078d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3308      	adds	r3, #8
 80078d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078e2:	e841 2300 	strex	r3, r2, [r1]
 80078e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1e5      	bne.n	80078ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d118      	bne.n	8007928 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	e853 3f00 	ldrex	r3, [r3]
 8007902:	60bb      	str	r3, [r7, #8]
   return(result);
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f023 0310 	bic.w	r3, r3, #16
 800790a:	647b      	str	r3, [r7, #68]	; 0x44
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	461a      	mov	r2, r3
 8007912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007914:	61bb      	str	r3, [r7, #24]
 8007916:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007918:	6979      	ldr	r1, [r7, #20]
 800791a:	69ba      	ldr	r2, [r7, #24]
 800791c:	e841 2300 	strex	r3, r2, [r1]
 8007920:	613b      	str	r3, [r7, #16]
   return(result);
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1e6      	bne.n	80078f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2220      	movs	r2, #32
 800792c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800793c:	bf00      	nop
 800793e:	3754      	adds	r7, #84	; 0x54
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007954:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f7ff fb28 	bl	8006fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800796c:	bf00      	nop
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007974:	b480      	push	{r7}
 8007976:	b08f      	sub	sp, #60	; 0x3c
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007980:	2b21      	cmp	r3, #33	; 0x21
 8007982:	d14d      	bne.n	8007a20 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800798a:	b29b      	uxth	r3, r3
 800798c:	2b00      	cmp	r3, #0
 800798e:	d132      	bne.n	80079f6 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	61fb      	str	r3, [r7, #28]
   return(result);
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079a4:	637b      	str	r3, [r7, #52]	; 0x34
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079b0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e6      	bne.n	8007990 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	e853 3f00 	ldrex	r3, [r3]
 80079ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079d6:	633b      	str	r3, [r7, #48]	; 0x30
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	461a      	mov	r2, r3
 80079de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e0:	61bb      	str	r3, [r7, #24]
 80079e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e4:	6979      	ldr	r1, [r7, #20]
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	e841 2300 	strex	r3, r2, [r1]
 80079ec:	613b      	str	r3, [r7, #16]
   return(result);
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1e6      	bne.n	80079c2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80079f4:	e014      	b.n	8007a20 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079fa:	781a      	ldrb	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	b292      	uxth	r2, r2
 8007a02:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a08:	1c5a      	adds	r2, r3, #1
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	3b01      	subs	r3, #1
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007a20:	bf00      	nop
 8007a22:	373c      	adds	r7, #60	; 0x3c
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b091      	sub	sp, #68	; 0x44
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a38:	2b21      	cmp	r3, #33	; 0x21
 8007a3a:	d151      	bne.n	8007ae0 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d132      	bne.n	8007aae <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	e853 3f00 	ldrex	r3, [r3]
 8007a54:	623b      	str	r3, [r7, #32]
   return(result);
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a66:	633b      	str	r3, [r7, #48]	; 0x30
 8007a68:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a6e:	e841 2300 	strex	r3, r2, [r1]
 8007a72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1e6      	bne.n	8007a48 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	e853 3f00 	ldrex	r3, [r3]
 8007a86:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	461a      	mov	r2, r3
 8007a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a98:	61fb      	str	r3, [r7, #28]
 8007a9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9c:	69b9      	ldr	r1, [r7, #24]
 8007a9e:	69fa      	ldr	r2, [r7, #28]
 8007aa0:	e841 2300 	strex	r3, r2, [r1]
 8007aa4:	617b      	str	r3, [r7, #20]
   return(result);
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1e6      	bne.n	8007a7a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007aac:	e018      	b.n	8007ae0 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab6:	881a      	ldrh	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ac0:	b292      	uxth	r2, r2
 8007ac2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ac8:	1c9a      	adds	r2, r3, #2
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007ae0:	bf00      	nop
 8007ae2:	3744      	adds	r7, #68	; 0x44
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b088      	sub	sp, #32
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	e853 3f00 	ldrex	r3, [r3]
 8007b00:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b08:	61fb      	str	r3, [r7, #28]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	61bb      	str	r3, [r7, #24]
 8007b14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b16:	6979      	ldr	r1, [r7, #20]
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1e6      	bne.n	8007af4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2220      	movs	r2, #32
 8007b2a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7ff fa38 	bl	8006fa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b38:	bf00      	nop
 8007b3a:	3720      	adds	r7, #32
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b09c      	sub	sp, #112	; 0x70
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b4e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b58:	2b22      	cmp	r3, #34	; 0x22
 8007b5a:	f040 80b9 	bne.w	8007cd0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007b64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b68:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007b6c:	b2d9      	uxtb	r1, r3
 8007b6e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b78:	400a      	ands	r2, r1
 8007b7a:	b2d2      	uxtb	r2, r2
 8007b7c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b82:	1c5a      	adds	r2, r3, #1
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	3b01      	subs	r3, #1
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f040 809c 	bne.w	8007ce0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bb0:	e853 3f00 	ldrex	r3, [r3]
 8007bb4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bc8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bce:	e841 2300 	strex	r3, r2, [r1]
 8007bd2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1e6      	bne.n	8007ba8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3308      	adds	r3, #8
 8007be0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bec:	f023 0301 	bic.w	r3, r3, #1
 8007bf0:	667b      	str	r3, [r7, #100]	; 0x64
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007bfa:	647a      	str	r2, [r7, #68]	; 0x44
 8007bfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e5      	bne.n	8007bda <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d018      	beq.n	8007c62 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	e853 3f00 	ldrex	r3, [r3]
 8007c3c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c44:	663b      	str	r3, [r7, #96]	; 0x60
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c4e:	633b      	str	r3, [r7, #48]	; 0x30
 8007c50:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c56:	e841 2300 	strex	r3, r2, [r1]
 8007c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1e6      	bne.n	8007c30 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d12e      	bne.n	8007cc8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	e853 3f00 	ldrex	r3, [r3]
 8007c7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f023 0310 	bic.w	r3, r3, #16
 8007c84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c8e:	61fb      	str	r3, [r7, #28]
 8007c90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c92:	69b9      	ldr	r1, [r7, #24]
 8007c94:	69fa      	ldr	r2, [r7, #28]
 8007c96:	e841 2300 	strex	r3, r2, [r1]
 8007c9a:	617b      	str	r3, [r7, #20]
   return(result);
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1e6      	bne.n	8007c70 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	69db      	ldr	r3, [r3, #28]
 8007ca8:	f003 0310 	and.w	r3, r3, #16
 8007cac:	2b10      	cmp	r3, #16
 8007cae:	d103      	bne.n	8007cb8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2210      	movs	r2, #16
 8007cb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff f985 	bl	8006fd0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cc6:	e00b      	b.n	8007ce0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7f8 fd95 	bl	80007f8 <HAL_UART_RxCpltCallback>
}
 8007cce:	e007      	b.n	8007ce0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	699a      	ldr	r2, [r3, #24]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f042 0208 	orr.w	r2, r2, #8
 8007cde:	619a      	str	r2, [r3, #24]
}
 8007ce0:	bf00      	nop
 8007ce2:	3770      	adds	r7, #112	; 0x70
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b09c      	sub	sp, #112	; 0x70
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007cf6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d00:	2b22      	cmp	r3, #34	; 0x22
 8007d02:	f040 80b9 	bne.w	8007e78 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007d0c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d14:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d16:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007d1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007d1e:	4013      	ands	r3, r2
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d24:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d2a:	1c9a      	adds	r2, r3, #2
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f040 809c 	bne.w	8007e88 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d58:	e853 3f00 	ldrex	r3, [r3]
 8007d5c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d64:	667b      	str	r3, [r7, #100]	; 0x64
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d6e:	657b      	str	r3, [r7, #84]	; 0x54
 8007d70:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d76:	e841 2300 	strex	r3, r2, [r1]
 8007d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1e6      	bne.n	8007d50 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3308      	adds	r3, #8
 8007d88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d8c:	e853 3f00 	ldrex	r3, [r3]
 8007d90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	f023 0301 	bic.w	r3, r3, #1
 8007d98:	663b      	str	r3, [r7, #96]	; 0x60
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	3308      	adds	r3, #8
 8007da0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007da2:	643a      	str	r2, [r7, #64]	; 0x40
 8007da4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007da8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007daa:	e841 2300 	strex	r3, r2, [r1]
 8007dae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1e5      	bne.n	8007d82 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2220      	movs	r2, #32
 8007dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d018      	beq.n	8007e0a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	e853 3f00 	ldrex	r3, [r3]
 8007de4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007dec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007df8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dfe:	e841 2300 	strex	r3, r2, [r1]
 8007e02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1e6      	bne.n	8007dd8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d12e      	bne.n	8007e70 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	e853 3f00 	ldrex	r3, [r3]
 8007e24:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f023 0310 	bic.w	r3, r3, #16
 8007e2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e36:	61bb      	str	r3, [r7, #24]
 8007e38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3a:	6979      	ldr	r1, [r7, #20]
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	e841 2300 	strex	r3, r2, [r1]
 8007e42:	613b      	str	r3, [r7, #16]
   return(result);
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1e6      	bne.n	8007e18 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	f003 0310 	and.w	r3, r3, #16
 8007e54:	2b10      	cmp	r3, #16
 8007e56:	d103      	bne.n	8007e60 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2210      	movs	r2, #16
 8007e5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7ff f8b1 	bl	8006fd0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e6e:	e00b      	b.n	8007e88 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7f8 fcc1 	bl	80007f8 <HAL_UART_RxCpltCallback>
}
 8007e76:	e007      	b.n	8007e88 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	699a      	ldr	r2, [r3, #24]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f042 0208 	orr.w	r2, r2, #8
 8007e86:	619a      	str	r2, [r3, #24]
}
 8007e88:	bf00      	nop
 8007e8a:	3770      	adds	r7, #112	; 0x70
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <atoi>:
 8007ea4:	220a      	movs	r2, #10
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	f000 b8b4 	b.w	8008014 <strtol>

08007eac <__errno>:
 8007eac:	4b01      	ldr	r3, [pc, #4]	; (8007eb4 <__errno+0x8>)
 8007eae:	6818      	ldr	r0, [r3, #0]
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	20000074 	.word	0x20000074

08007eb8 <__libc_init_array>:
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	4d0d      	ldr	r5, [pc, #52]	; (8007ef0 <__libc_init_array+0x38>)
 8007ebc:	4c0d      	ldr	r4, [pc, #52]	; (8007ef4 <__libc_init_array+0x3c>)
 8007ebe:	1b64      	subs	r4, r4, r5
 8007ec0:	10a4      	asrs	r4, r4, #2
 8007ec2:	2600      	movs	r6, #0
 8007ec4:	42a6      	cmp	r6, r4
 8007ec6:	d109      	bne.n	8007edc <__libc_init_array+0x24>
 8007ec8:	4d0b      	ldr	r5, [pc, #44]	; (8007ef8 <__libc_init_array+0x40>)
 8007eca:	4c0c      	ldr	r4, [pc, #48]	; (8007efc <__libc_init_array+0x44>)
 8007ecc:	f000 f8ac 	bl	8008028 <_init>
 8007ed0:	1b64      	subs	r4, r4, r5
 8007ed2:	10a4      	asrs	r4, r4, #2
 8007ed4:	2600      	movs	r6, #0
 8007ed6:	42a6      	cmp	r6, r4
 8007ed8:	d105      	bne.n	8007ee6 <__libc_init_array+0x2e>
 8007eda:	bd70      	pop	{r4, r5, r6, pc}
 8007edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ee0:	4798      	blx	r3
 8007ee2:	3601      	adds	r6, #1
 8007ee4:	e7ee      	b.n	8007ec4 <__libc_init_array+0xc>
 8007ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eea:	4798      	blx	r3
 8007eec:	3601      	adds	r6, #1
 8007eee:	e7f2      	b.n	8007ed6 <__libc_init_array+0x1e>
 8007ef0:	08008308 	.word	0x08008308
 8007ef4:	08008308 	.word	0x08008308
 8007ef8:	08008308 	.word	0x08008308
 8007efc:	0800830c 	.word	0x0800830c

08007f00 <memset>:
 8007f00:	4402      	add	r2, r0
 8007f02:	4603      	mov	r3, r0
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d100      	bne.n	8007f0a <memset+0xa>
 8007f08:	4770      	bx	lr
 8007f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f0e:	e7f9      	b.n	8007f04 <memset+0x4>

08007f10 <_strtol_l.constprop.0>:
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f16:	d001      	beq.n	8007f1c <_strtol_l.constprop.0+0xc>
 8007f18:	2b24      	cmp	r3, #36	; 0x24
 8007f1a:	d906      	bls.n	8007f2a <_strtol_l.constprop.0+0x1a>
 8007f1c:	f7ff ffc6 	bl	8007eac <__errno>
 8007f20:	2316      	movs	r3, #22
 8007f22:	6003      	str	r3, [r0, #0]
 8007f24:	2000      	movs	r0, #0
 8007f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f2a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008010 <_strtol_l.constprop.0+0x100>
 8007f2e:	460d      	mov	r5, r1
 8007f30:	462e      	mov	r6, r5
 8007f32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f36:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007f3a:	f017 0708 	ands.w	r7, r7, #8
 8007f3e:	d1f7      	bne.n	8007f30 <_strtol_l.constprop.0+0x20>
 8007f40:	2c2d      	cmp	r4, #45	; 0x2d
 8007f42:	d132      	bne.n	8007faa <_strtol_l.constprop.0+0x9a>
 8007f44:	782c      	ldrb	r4, [r5, #0]
 8007f46:	2701      	movs	r7, #1
 8007f48:	1cb5      	adds	r5, r6, #2
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d05b      	beq.n	8008006 <_strtol_l.constprop.0+0xf6>
 8007f4e:	2b10      	cmp	r3, #16
 8007f50:	d109      	bne.n	8007f66 <_strtol_l.constprop.0+0x56>
 8007f52:	2c30      	cmp	r4, #48	; 0x30
 8007f54:	d107      	bne.n	8007f66 <_strtol_l.constprop.0+0x56>
 8007f56:	782c      	ldrb	r4, [r5, #0]
 8007f58:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007f5c:	2c58      	cmp	r4, #88	; 0x58
 8007f5e:	d14d      	bne.n	8007ffc <_strtol_l.constprop.0+0xec>
 8007f60:	786c      	ldrb	r4, [r5, #1]
 8007f62:	2310      	movs	r3, #16
 8007f64:	3502      	adds	r5, #2
 8007f66:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007f6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f6e:	f04f 0c00 	mov.w	ip, #0
 8007f72:	fbb8 f9f3 	udiv	r9, r8, r3
 8007f76:	4666      	mov	r6, ip
 8007f78:	fb03 8a19 	mls	sl, r3, r9, r8
 8007f7c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007f80:	f1be 0f09 	cmp.w	lr, #9
 8007f84:	d816      	bhi.n	8007fb4 <_strtol_l.constprop.0+0xa4>
 8007f86:	4674      	mov	r4, lr
 8007f88:	42a3      	cmp	r3, r4
 8007f8a:	dd24      	ble.n	8007fd6 <_strtol_l.constprop.0+0xc6>
 8007f8c:	f1bc 0f00 	cmp.w	ip, #0
 8007f90:	db1e      	blt.n	8007fd0 <_strtol_l.constprop.0+0xc0>
 8007f92:	45b1      	cmp	r9, r6
 8007f94:	d31c      	bcc.n	8007fd0 <_strtol_l.constprop.0+0xc0>
 8007f96:	d101      	bne.n	8007f9c <_strtol_l.constprop.0+0x8c>
 8007f98:	45a2      	cmp	sl, r4
 8007f9a:	db19      	blt.n	8007fd0 <_strtol_l.constprop.0+0xc0>
 8007f9c:	fb06 4603 	mla	r6, r6, r3, r4
 8007fa0:	f04f 0c01 	mov.w	ip, #1
 8007fa4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fa8:	e7e8      	b.n	8007f7c <_strtol_l.constprop.0+0x6c>
 8007faa:	2c2b      	cmp	r4, #43	; 0x2b
 8007fac:	bf04      	itt	eq
 8007fae:	782c      	ldrbeq	r4, [r5, #0]
 8007fb0:	1cb5      	addeq	r5, r6, #2
 8007fb2:	e7ca      	b.n	8007f4a <_strtol_l.constprop.0+0x3a>
 8007fb4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007fb8:	f1be 0f19 	cmp.w	lr, #25
 8007fbc:	d801      	bhi.n	8007fc2 <_strtol_l.constprop.0+0xb2>
 8007fbe:	3c37      	subs	r4, #55	; 0x37
 8007fc0:	e7e2      	b.n	8007f88 <_strtol_l.constprop.0+0x78>
 8007fc2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007fc6:	f1be 0f19 	cmp.w	lr, #25
 8007fca:	d804      	bhi.n	8007fd6 <_strtol_l.constprop.0+0xc6>
 8007fcc:	3c57      	subs	r4, #87	; 0x57
 8007fce:	e7db      	b.n	8007f88 <_strtol_l.constprop.0+0x78>
 8007fd0:	f04f 3cff 	mov.w	ip, #4294967295
 8007fd4:	e7e6      	b.n	8007fa4 <_strtol_l.constprop.0+0x94>
 8007fd6:	f1bc 0f00 	cmp.w	ip, #0
 8007fda:	da05      	bge.n	8007fe8 <_strtol_l.constprop.0+0xd8>
 8007fdc:	2322      	movs	r3, #34	; 0x22
 8007fde:	6003      	str	r3, [r0, #0]
 8007fe0:	4646      	mov	r6, r8
 8007fe2:	b942      	cbnz	r2, 8007ff6 <_strtol_l.constprop.0+0xe6>
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	e79e      	b.n	8007f26 <_strtol_l.constprop.0+0x16>
 8007fe8:	b107      	cbz	r7, 8007fec <_strtol_l.constprop.0+0xdc>
 8007fea:	4276      	negs	r6, r6
 8007fec:	2a00      	cmp	r2, #0
 8007fee:	d0f9      	beq.n	8007fe4 <_strtol_l.constprop.0+0xd4>
 8007ff0:	f1bc 0f00 	cmp.w	ip, #0
 8007ff4:	d000      	beq.n	8007ff8 <_strtol_l.constprop.0+0xe8>
 8007ff6:	1e69      	subs	r1, r5, #1
 8007ff8:	6011      	str	r1, [r2, #0]
 8007ffa:	e7f3      	b.n	8007fe4 <_strtol_l.constprop.0+0xd4>
 8007ffc:	2430      	movs	r4, #48	; 0x30
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1b1      	bne.n	8007f66 <_strtol_l.constprop.0+0x56>
 8008002:	2308      	movs	r3, #8
 8008004:	e7af      	b.n	8007f66 <_strtol_l.constprop.0+0x56>
 8008006:	2c30      	cmp	r4, #48	; 0x30
 8008008:	d0a5      	beq.n	8007f56 <_strtol_l.constprop.0+0x46>
 800800a:	230a      	movs	r3, #10
 800800c:	e7ab      	b.n	8007f66 <_strtol_l.constprop.0+0x56>
 800800e:	bf00      	nop
 8008010:	08008205 	.word	0x08008205

08008014 <strtol>:
 8008014:	4613      	mov	r3, r2
 8008016:	460a      	mov	r2, r1
 8008018:	4601      	mov	r1, r0
 800801a:	4802      	ldr	r0, [pc, #8]	; (8008024 <strtol+0x10>)
 800801c:	6800      	ldr	r0, [r0, #0]
 800801e:	f7ff bf77 	b.w	8007f10 <_strtol_l.constprop.0>
 8008022:	bf00      	nop
 8008024:	20000074 	.word	0x20000074

08008028 <_init>:
 8008028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802a:	bf00      	nop
 800802c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800802e:	bc08      	pop	{r3}
 8008030:	469e      	mov	lr, r3
 8008032:	4770      	bx	lr

08008034 <_fini>:
 8008034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008036:	bf00      	nop
 8008038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800803a:	bc08      	pop	{r3}
 800803c:	469e      	mov	lr, r3
 800803e:	4770      	bx	lr


Multi-Functional Light-Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006988  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006b28  08006b28  00016b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b98  08006b98  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08006b98  08006b98  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b98  08006b98  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b98  08006b98  00016b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b9c  08006b9c  00016b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006ba0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00002180  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002210  20002210  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e437  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002037  00000000  00000000  0002e4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a18  00000000  00000000  00030530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000950  00000000  00000000  00030f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002104b  00000000  00000000  00031898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e69b  00000000  00000000  000528e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9de1  00000000  00000000  00060f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012ad5f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d60  00000000  00000000  0012adb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006b10 	.word	0x08006b10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08006b10 	.word	0x08006b10

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t studentNum[13]="#:23765518:$\n" ;
uint8_t recvd_char[1];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

	//transmit recvd characer
	HAL_UART_Transmit(&huart2, recvd_char, 1, 50) ;
 80008a4:	2332      	movs	r3, #50	; 0x32
 80008a6:	2201      	movs	r2, #1
 80008a8:	4906      	ldr	r1, [pc, #24]	; (80008c4 <HAL_UART_RxCpltCallback+0x28>)
 80008aa:	4807      	ldr	r0, [pc, #28]	; (80008c8 <HAL_UART_RxCpltCallback+0x2c>)
 80008ac:	f004 f900 	bl	8004ab0 <HAL_UART_Transmit>

	// recieve character
	HAL_UART_Receive_IT(&huart2, recvd_char, 1);
 80008b0:	2201      	movs	r2, #1
 80008b2:	4904      	ldr	r1, [pc, #16]	; (80008c4 <HAL_UART_RxCpltCallback+0x28>)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <HAL_UART_RxCpltCallback+0x2c>)
 80008b6:	f004 f9e3 	bl	8004c80 <HAL_UART_Receive_IT>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200021ec 	.word	0x200021ec
 80008c8:	20000140 	.word	0x20000140

080008cc <adc_dma_val_processing>:

/**
 * scale up transmit ADC values
 */

void adc_dma_val_processing(){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0

	if(adc_conv_complete == 1){
 80008d2:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <adc_dma_val_processing+0xb8>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d142      	bne.n	8000960 <adc_dma_val_processing+0x94>

		adc_conv_complete =0  ;
 80008da:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <adc_dma_val_processing+0xb8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
		sum = 0 ;
 80008e0:	4b29      	ldr	r3, [pc, #164]	; (8000988 <adc_dma_val_processing+0xbc>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
		for(int i = 0 ; i < adc_buf_len ; i++){
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	e00c      	b.n	8000906 <adc_dma_val_processing+0x3a>
			sum += adc_buf[i] ;
 80008ec:	4a27      	ldr	r2, [pc, #156]	; (800098c <adc_dma_val_processing+0xc0>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <adc_dma_val_processing+0xbc>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	4a22      	ldr	r2, [pc, #136]	; (8000988 <adc_dma_val_processing+0xbc>)
 80008fe:	6013      	str	r3, [r2, #0]
		for(int i = 0 ; i < adc_buf_len ; i++){
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3301      	adds	r3, #1
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800090c:	dbee      	blt.n	80008ec <adc_dma_val_processing+0x20>
		}
		raw_adc_dma_val =(uint16_t)(sum/adc_buf_len) ;
 800090e:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <adc_dma_val_processing+0xbc>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	da01      	bge.n	800091a <adc_dma_val_processing+0x4e>
 8000916:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800091a:	131b      	asrs	r3, r3, #12
 800091c:	b29a      	uxth	r2, r3
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <adc_dma_val_processing+0xc4>)
 8000920:	801a      	strh	r2, [r3, #0]

		scaled_adc_val = (uint16_t)raw_adc_dma_val*adc_scale_up ; //adc scaled to max =4095
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <adc_dma_val_processing+0xc4>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ff2e 	bl	8000788 <__aeabi_i2d>
 800092c:	4b19      	ldr	r3, [pc, #100]	; (8000994 <adc_dma_val_processing+0xc8>)
 800092e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000932:	f7ff fcad 	bl	8000290 <__aeabi_dmul>
 8000936:	4602      	mov	r2, r0
 8000938:	460b      	mov	r3, r1
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	f7ff ff8d 	bl	800085c <__aeabi_d2uiz>
 8000942:	4603      	mov	r3, r0
 8000944:	b29a      	uxth	r2, r3
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <adc_dma_val_processing+0xcc>)
 8000948:	801a      	strh	r2, [r3, #0]

		//capture previous adc cal
		if(adc_val_capture == 1){
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <adc_dma_val_processing+0xd0>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d106      	bne.n	8000960 <adc_dma_val_processing+0x94>
			adc_val_snapshot = scaled_adc_val ;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <adc_dma_val_processing+0xcc>)
 8000954:	881a      	ldrh	r2, [r3, #0]
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <adc_dma_val_processing+0xd4>)
 8000958:	801a      	strh	r2, [r3, #0]
			adc_val_capture = 0 ;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <adc_dma_val_processing+0xd0>)
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
		}
	}

	// if ADC movement significant update LED intensity
	if(abs(scaled_adc_val - adc_val_snapshot) >15){
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <adc_dma_val_processing+0xcc>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <adc_dma_val_processing+0xd4>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	2b00      	cmp	r3, #0
 800096e:	bfb8      	it	lt
 8000970:	425b      	neglt	r3, r3
 8000972:	2b0f      	cmp	r3, #15
 8000974:	dd02      	ble.n	800097c <adc_dma_val_processing+0xb0>
	  update_led_via_ADC = 1 ;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <adc_dma_val_processing+0xd8>)
 8000978:	2201      	movs	r2, #1
 800097a:	701a      	strb	r2, [r3, #0]
	}

}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200021e6 	.word	0x200021e6
 8000988:	200021e0 	.word	0x200021e0
 800098c:	200001d0 	.word	0x200001d0
 8000990:	200021d0 	.word	0x200021d0
 8000994:	20000008 	.word	0x20000008
 8000998:	200021e8 	.word	0x200021e8
 800099c:	20000002 	.word	0x20000002
 80009a0:	200021e4 	.word	0x200021e4
 80009a4:	200021ea 	.word	0x200021ea

080009a8 <system_state_update>:


void system_state_update(){
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
	 if(left_button_pressed ==1 ){
 80009ac:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <system_state_update+0x48>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d118      	bne.n	80009e6 <system_state_update+0x3e>
		 button_count++ ;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <system_state_update+0x4c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <system_state_update+0x4c>)
 80009bc:	6013      	str	r3, [r2, #0]
		 if(button_count > 2){
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <system_state_update+0x4c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	dd02      	ble.n	80009cc <system_state_update+0x24>
			 button_count = 0 ;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <system_state_update+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
		 }
		 update_led_via_ADC =  0 ; // don't read ADC by default in next state
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <system_state_update+0x50>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
		 // snapshot of ADC taken in next state
		 if(adc_conv_complete == 1){
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <system_state_update+0x54>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d102      	bne.n	80009e0 <system_state_update+0x38>
			 adc_val_capture =1  ; // capture ADC value
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <system_state_update+0x58>)
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
		 }
		 left_button_pressed = 0 ;
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <system_state_update+0x48>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
	 }
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	200021f6 	.word	0x200021f6
 80009f4:	200001c8 	.word	0x200001c8
 80009f8:	200021ea 	.word	0x200021ea
 80009fc:	200021e6 	.word	0x200021e6
 8000a00:	20000002 	.word	0x20000002

08000a04 <right_button_state_update>:

/**
 * Updates system state after right button pressed in emergency mode
 */
void right_button_state_update(){
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
	if(button_count == 1){
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <right_button_state_update+0x5c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d117      	bne.n	8000a40 <right_button_state_update+0x3c>
		if(right_button_pressed){
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <right_button_state_update+0x60>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d01e      	beq.n	8000a56 <right_button_state_update+0x52>
			right_button_pressed = 0 ;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <right_button_state_update+0x60>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]

			update_led_via_ADC = 0 ; // dont read adc by default in next state
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <right_button_state_update+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]

			 em_count++ ;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <right_button_state_update+0x68>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <right_button_state_update+0x68>)
 8000a2e:	701a      	strb	r2, [r3, #0]

			 if(em_count>2){
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <right_button_state_update+0x68>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d90e      	bls.n	8000a56 <right_button_state_update+0x52>
				 em_count = 0;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <right_button_state_update+0x68>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
		}
	}else if( button_count != 1 && right_button_pressed){
		right_button_pressed = 0; //do not read right button presses triggered
								  // in other states except emergency mode
	}
}
 8000a3e:	e00a      	b.n	8000a56 <right_button_state_update+0x52>
	}else if( button_count != 1 && right_button_pressed){
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <right_button_state_update+0x5c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d006      	beq.n	8000a56 <right_button_state_update+0x52>
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <right_button_state_update+0x60>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d002      	beq.n	8000a56 <right_button_state_update+0x52>
		right_button_pressed = 0; //do not read right button presses triggered
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <right_button_state_update+0x60>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	200001c8 	.word	0x200001c8
 8000a64:	200021f5 	.word	0x200021f5
 8000a68:	200021ea 	.word	0x200021ea
 8000a6c:	200001cc 	.word	0x200001cc

08000a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a74:	f000 fd4a 	bl	800150c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a78:	f000 f8b8 	bl	8000bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7c:	f000 f9d8 	bl	8000e30 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a80:	f000 f9b8 	bl	8000df4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a84:	f000 f984 	bl	8000d90 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a88:	f000 f912 	bl	8000cb0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(200);
 8000a8c:	20c8      	movs	r0, #200	; 0xc8
 8000a8e:	f000 fda3 	bl	80015d8 <HAL_Delay>
  HAL_UART_Transmit(&huart2, studentNum, 13, 150); //transmit student number
 8000a92:	2396      	movs	r3, #150	; 0x96
 8000a94:	220d      	movs	r2, #13
 8000a96:	4947      	ldr	r1, [pc, #284]	; (8000bb4 <main+0x144>)
 8000a98:	4847      	ldr	r0, [pc, #284]	; (8000bb8 <main+0x148>)
 8000a9a:	f004 f809 	bl	8004ab0 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2, recvd_char, 1); //recv character input
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4946      	ldr	r1, [pc, #280]	; (8000bbc <main+0x14c>)
 8000aa2:	4845      	ldr	r0, [pc, #276]	; (8000bb8 <main+0x148>)
 8000aa4:	f004 f8ec 	bl	8004c80 <HAL_UART_Receive_IT>

  //Startup ADC
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, adc_buf_len) ;
 8000aa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aac:	4944      	ldr	r1, [pc, #272]	; (8000bc0 <main+0x150>)
 8000aae:	4845      	ldr	r0, [pc, #276]	; (8000bc4 <main+0x154>)
 8000ab0:	f000 ffc4 	bl	8001a3c <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // left button press to update system state (MF -> ME -> MM)
	  system_state_update() ;
 8000ab4:	f7ff ff78 	bl	80009a8 <system_state_update>
	  //run adc and capture previous snapshot of ADC value and adc movement processing
	  adc_dma_val_processing();
 8000ab8:	f7ff ff08 	bl	80008cc <adc_dma_val_processing>

	 // system state
	 if(button_count == 0 || start_up == 1){
 8000abc:	4b42      	ldr	r3, [pc, #264]	; (8000bc8 <main+0x158>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d003      	beq.n	8000acc <main+0x5c>
 8000ac4:	4b41      	ldr	r3, [pc, #260]	; (8000bcc <main+0x15c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d120      	bne.n	8000b0e <main+0x9e>
		 start_up = 0 ; //for default MF state
 8000acc:	4b3f      	ldr	r3, [pc, #252]	; (8000bcc <main+0x15c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]

		 MF_mode_LED() ; // sets the corresponding mode LED
 8000ad2:	f000 fa51 	bl	8000f78 <MF_mode_LED>
		 em_count=0;     // reset the emergency mode count
 8000ad6:	4b3e      	ldr	r3, [pc, #248]	; (8000bd0 <main+0x160>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
		 em_default = 1; // to re-enter the EM state
 8000adc:	4b3d      	ldr	r3, [pc, #244]	; (8000bd4 <main+0x164>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	701a      	strb	r2, [r3, #0]

		 //read ADC value and update LED intensity
		  if(update_led_via_ADC == 1){
 8000ae2:	4b3d      	ldr	r3, [pc, #244]	; (8000bd8 <main+0x168>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d139      	bne.n	8000b5e <main+0xee>
			  sprintf(adc_val, "%d\n", scaled_adc_val) ;
 8000aea:	4b3c      	ldr	r3, [pc, #240]	; (8000bdc <main+0x16c>)
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	493b      	ldr	r1, [pc, #236]	; (8000be0 <main+0x170>)
 8000af2:	483c      	ldr	r0, [pc, #240]	; (8000be4 <main+0x174>)
 8000af4:	f005 fb9e 	bl	8006234 <siprintf>
			  HAL_UART_Transmit_IT(&huart2, (uint8_t*)adc_val, strlen(adc_val)) ;
 8000af8:	483a      	ldr	r0, [pc, #232]	; (8000be4 <main+0x174>)
 8000afa:	f7ff fb71 	bl	80001e0 <strlen>
 8000afe:	4603      	mov	r3, r0
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	461a      	mov	r2, r3
 8000b04:	4937      	ldr	r1, [pc, #220]	; (8000be4 <main+0x174>)
 8000b06:	482c      	ldr	r0, [pc, #176]	; (8000bb8 <main+0x148>)
 8000b08:	f004 f85c 	bl	8004bc4 <HAL_UART_Transmit_IT>
		  if(update_led_via_ADC == 1){
 8000b0c:	e027      	b.n	8000b5e <main+0xee>
		  }

	 }else if(button_count == 1){// right button system state updated
 8000b0e:	4b2e      	ldr	r3, [pc, #184]	; (8000bc8 <main+0x158>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d117      	bne.n	8000b46 <main+0xd6>
		 ME_mode_LED() ; // sets the corresponding modes LED
 8000b16:	f000 fa4d 	bl	8000fb4 <ME_mode_LED>


		 if(update_led_via_ADC == 1){
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	; (8000bd8 <main+0x168>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d11d      	bne.n	8000b5e <main+0xee>
			 sprintf(adc_val, "%d\n", scaled_adc_val) ;
 8000b22:	4b2e      	ldr	r3, [pc, #184]	; (8000bdc <main+0x16c>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	492d      	ldr	r1, [pc, #180]	; (8000be0 <main+0x170>)
 8000b2a:	482e      	ldr	r0, [pc, #184]	; (8000be4 <main+0x174>)
 8000b2c:	f005 fb82 	bl	8006234 <siprintf>
			 HAL_UART_Transmit_IT(&huart2, (uint8_t*)adc_val, strlen(adc_val)) ;
 8000b30:	482c      	ldr	r0, [pc, #176]	; (8000be4 <main+0x174>)
 8000b32:	f7ff fb55 	bl	80001e0 <strlen>
 8000b36:	4603      	mov	r3, r0
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4929      	ldr	r1, [pc, #164]	; (8000be4 <main+0x174>)
 8000b3e:	481e      	ldr	r0, [pc, #120]	; (8000bb8 <main+0x148>)
 8000b40:	f004 f840 	bl	8004bc4 <HAL_UART_Transmit_IT>
 8000b44:	e00b      	b.n	8000b5e <main+0xee>
		 }
	 }else{
		 if(button_count == 2){
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <main+0x158>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d107      	bne.n	8000b5e <main+0xee>

			 em_count=0; // reset the emergency mode state
 8000b4e:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <main+0x160>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
			 em_default = 1; // to re-enter EM state
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <main+0x164>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]

			 MM_mode_LED() ; //sets the corresponding modes LED
 8000b5a:	f000 fa43 	bl	8000fe4 <MM_mode_LED>
		 }
	 }

	 // right button state update
	 right_button_state_update() ;
 8000b5e:	f7ff ff51 	bl	8000a04 <right_button_state_update>
	 //EMERGENCY MODES
	  if(button_count ==1 ){
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <main+0x158>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d1a4      	bne.n	8000ab4 <main+0x44>

		 if(em_count == 0 || em_default ==1){ //strobe wit default intensity
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <main+0x160>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <main+0x10a>
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <main+0x164>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d108      	bne.n	8000b8c <main+0x11c>
			 em_default = 0 ; //default state reached
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <main+0x164>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2120      	movs	r1, #32
 8000b84:	4818      	ldr	r0, [pc, #96]	; (8000be8 <main+0x178>)
 8000b86:	f002 fa61 	bl	800304c <HAL_GPIO_WritePin>
 8000b8a:	e012      	b.n	8000bb2 <main+0x142>
		 }
		 else if(em_count ==1){ // SOS morse
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <main+0x160>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d105      	bne.n	8000ba0 <main+0x130>

			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	2120      	movs	r1, #32
 8000b98:	4813      	ldr	r0, [pc, #76]	; (8000be8 <main+0x178>)
 8000b9a:	f002 fa57 	bl	800304c <HAL_GPIO_WritePin>
 8000b9e:	e789      	b.n	8000ab4 <main+0x44>
		 }
		 else{
			 if(em_count == 2){ // custom morse
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <main+0x160>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d185      	bne.n	8000ab4 <main+0x44>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2120      	movs	r1, #32
 8000bac:	480e      	ldr	r0, [pc, #56]	; (8000be8 <main+0x178>)
 8000bae:	f002 fa4d 	bl	800304c <HAL_GPIO_WritePin>
	  system_state_update() ;
 8000bb2:	e77f      	b.n	8000ab4 <main+0x44>
 8000bb4:	20000010 	.word	0x20000010
 8000bb8:	20000140 	.word	0x20000140
 8000bbc:	200021ec 	.word	0x200021ec
 8000bc0:	200001d0 	.word	0x200001d0
 8000bc4:	200000ac 	.word	0x200000ac
 8000bc8:	200001c8 	.word	0x200001c8
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	200001cc 	.word	0x200001cc
 8000bd4:	20000001 	.word	0x20000001
 8000bd8:	200021ea 	.word	0x200021ea
 8000bdc:	200021e8 	.word	0x200021e8
 8000be0:	08006b28 	.word	0x08006b28
 8000be4:	200021d4 	.word	0x200021d4
 8000be8:	48000400 	.word	0x48000400

08000bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b0a6      	sub	sp, #152	; 0x98
 8000bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bf6:	2228      	movs	r2, #40	; 0x28
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f005 fb12 	bl	8006224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2258      	movs	r2, #88	; 0x58
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f005 fb04 	bl	8006224 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c20:	2301      	movs	r3, #1
 8000c22:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c24:	2310      	movs	r3, #16
 8000c26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c38:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c46:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fa3a 	bl	80030c4 <HAL_RCC_OscConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c56:	f000 f9f3 	bl	8001040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5a:	230f      	movs	r3, #15
 8000c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c74:	2102      	movs	r1, #2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f003 fa78 	bl	800416c <HAL_RCC_ClockConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c82:	f000 f9dd 	bl	8001040 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000c86:	2382      	movs	r3, #130	; 0x82
 8000c88:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 fc9e 	bl	80045d8 <HAL_RCCEx_PeriphCLKConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ca2:	f000 f9cd 	bl	8001040 <Error_Handler>
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	3798      	adds	r7, #152	; 0x98
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
 8000cd0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <MX_ADC1_Init+0xdc>)
 8000cd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cd8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cda:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <MX_ADC1_Init+0xdc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ce0:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <MX_ADC1_Init+0xdc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ce6:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <MX_ADC1_Init+0xdc>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cec:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <MX_ADC1_Init+0xdc>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cf2:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <MX_ADC1_Init+0xdc>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cfa:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <MX_ADC1_Init+0xdc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d00:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <MX_ADC1_Init+0xdc>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d06:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <MX_ADC1_Init+0xdc>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <MX_ADC1_Init+0xdc>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <MX_ADC1_Init+0xdc>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <MX_ADC1_Init+0xdc>)
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_ADC1_Init+0xdc>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <MX_ADC1_Init+0xdc>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d2c:	4817      	ldr	r0, [pc, #92]	; (8000d8c <MX_ADC1_Init+0xdc>)
 8000d2e:	f000 fc8b 	bl	8001648 <HAL_ADC_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d38:	f000 f982 	bl	8001040 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	4811      	ldr	r0, [pc, #68]	; (8000d8c <MX_ADC1_Init+0xdc>)
 8000d48:	f001 fa80 	bl	800224c <HAL_ADCEx_MultiModeConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d52:	f000 f975 	bl	8001040 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	4619      	mov	r1, r3
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <MX_ADC1_Init+0xdc>)
 8000d74:	f000 ff7e 	bl	8001c74 <HAL_ADC_ConfigChannel>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000d7e:	f000 f95f 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	3728      	adds	r7, #40	; 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200000ac 	.word	0x200000ac

08000d90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <MX_USART2_UART_Init+0x5c>)
 8000d96:	4a16      	ldr	r2, [pc, #88]	; (8000df0 <MX_USART2_UART_Init+0x60>)
 8000d98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_USART2_UART_Init+0x5c>)
 8000d9c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000da0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_USART2_UART_Init+0x5c>)
 8000da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000da8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <MX_USART2_UART_Init+0x5c>)
 8000dac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000db0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_USART2_UART_Init+0x5c>)
 8000db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_USART2_UART_Init+0x5c>)
 8000dbc:	220c      	movs	r2, #12
 8000dbe:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <MX_USART2_UART_Init+0x5c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_USART2_UART_Init+0x5c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <MX_USART2_UART_Init+0x5c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_USART2_UART_Init+0x5c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <MX_USART2_UART_Init+0x5c>)
 8000dda:	f003 fe1b 	bl	8004a14 <HAL_UART_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000de4:	f000 f92c 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000140 	.word	0x20000140
 8000df0:	40004400 	.word	0x40004400

08000df4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_DMA_Init+0x38>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <MX_DMA_Init+0x38>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6153      	str	r3, [r2, #20]
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_DMA_Init+0x38>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	200b      	movs	r0, #11
 8000e18:	f001 fd15 	bl	8002846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e1c:	200b      	movs	r0, #11
 8000e1e:	f001 fd2e 	bl	800287e <HAL_NVIC_EnableIRQ>

}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000

08000e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	4b49      	ldr	r3, [pc, #292]	; (8000f6c <MX_GPIO_Init+0x13c>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	4a48      	ldr	r2, [pc, #288]	; (8000f6c <MX_GPIO_Init+0x13c>)
 8000e4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e50:	6153      	str	r3, [r2, #20]
 8000e52:	4b46      	ldr	r3, [pc, #280]	; (8000f6c <MX_GPIO_Init+0x13c>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e5e:	4b43      	ldr	r3, [pc, #268]	; (8000f6c <MX_GPIO_Init+0x13c>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	4a42      	ldr	r2, [pc, #264]	; (8000f6c <MX_GPIO_Init+0x13c>)
 8000e64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e68:	6153      	str	r3, [r2, #20]
 8000e6a:	4b40      	ldr	r3, [pc, #256]	; (8000f6c <MX_GPIO_Init+0x13c>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b3d      	ldr	r3, [pc, #244]	; (8000f6c <MX_GPIO_Init+0x13c>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	4a3c      	ldr	r2, [pc, #240]	; (8000f6c <MX_GPIO_Init+0x13c>)
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	6153      	str	r3, [r2, #20]
 8000e82:	4b3a      	ldr	r3, [pc, #232]	; (8000f6c <MX_GPIO_Init+0x13c>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	4b37      	ldr	r3, [pc, #220]	; (8000f6c <MX_GPIO_Init+0x13c>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	4a36      	ldr	r2, [pc, #216]	; (8000f6c <MX_GPIO_Init+0x13c>)
 8000e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e98:	6153      	str	r3, [r2, #20]
 8000e9a:	4b34      	ldr	r3, [pc, #208]	; (8000f6c <MX_GPIO_Init+0x13c>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_D2_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb0:	f002 f8cc 	bl	800304c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D3_Pin|LED_D4_Pin|LED_D5_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000eba:	482d      	ldr	r0, [pc, #180]	; (8000f70 <MX_GPIO_Init+0x140>)
 8000ebc:	f002 f8c6 	bl	800304c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ec6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4827      	ldr	r0, [pc, #156]	; (8000f74 <MX_GPIO_Init+0x144>)
 8000ed8:	f001 ff16 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED_D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_D2_Pin;
 8000edc:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef8:	f001 ff06 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000efc:	23c0      	movs	r3, #192	; 0xc0
 8000efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f00:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f001 fef8 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D3_Pin LED_D4_Pin LED_D5_Pin */
  GPIO_InitStruct.Pin = LED_D3_Pin|LED_D4_Pin|LED_D5_Pin;
 8000f18:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480f      	ldr	r0, [pc, #60]	; (8000f70 <MX_GPIO_Init+0x140>)
 8000f32:	f001 fee9 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f3c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4808      	ldr	r0, [pc, #32]	; (8000f70 <MX_GPIO_Init+0x140>)
 8000f4e:	f001 fedb 	bl	8002d08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	2017      	movs	r0, #23
 8000f58:	f001 fc75 	bl	8002846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f5c:	2017      	movs	r0, #23
 8000f5e:	f001 fc8e 	bl	800287e <HAL_NVIC_EnableIRQ>

}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	; 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	48000400 	.word	0x48000400
 8000f74:	48000800 	.word	0x48000800

08000f78 <MF_mode_LED>:

/* USER CODE BEGIN 4 */
// FUNCTIONS
void MF_mode_LED(){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	f002 f861 	bl	800304c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f90:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <MF_mode_LED+0x38>)
 8000f92:	f002 f85b 	bl	800304c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2110      	movs	r1, #16
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MF_mode_LED+0x38>)
 8000f9c:	f002 f856 	bl	800304c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2120      	movs	r1, #32
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <MF_mode_LED+0x38>)
 8000fa6:	f002 f851 	bl	800304c <HAL_GPIO_WritePin>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	48000400 	.word	0x48000400

08000fb4 <ME_mode_LED>:

void ME_mode_LED(){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc2:	f002 f843 	bl	800304c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <ME_mode_LED+0x2c>)
 8000fce:	f002 f83d 	bl	800304c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2110      	movs	r1, #16
 8000fd6:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <ME_mode_LED+0x2c>)
 8000fd8:	f002 f838 	bl	800304c <HAL_GPIO_WritePin>
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	48000400 	.word	0x48000400

08000fe4 <MM_mode_LED>:

void MM_mode_LED(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff2:	f002 f82b 	bl	800304c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ffc:	4807      	ldr	r0, [pc, #28]	; (800101c <MM_mode_LED+0x38>)
 8000ffe:	f002 f825 	bl	800304c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	2110      	movs	r1, #16
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <MM_mode_LED+0x38>)
 8001008:	f002 f820 	bl	800304c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2120      	movs	r1, #32
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <MM_mode_LED+0x38>)
 8001012:	f002 f81b 	bl	800304c <HAL_GPIO_WritePin>
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	48000400 	.word	0x48000400

08001020 <HAL_ADC_ConvCpltCallback>:


// adc buffer filled by dma circular sampling
// data should not be processed in the interrupt, it makes rest of the
// progam inaccessible
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	adc_conv_complete = 1 ;
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <HAL_ADC_ConvCpltCallback+0x1c>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]

}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	200021e6 	.word	0x200021e6

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
}
 8001046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001048:	e7fe      	b.n	8001048 <Error_Handler+0x8>
	...

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <HAL_MspInit+0x44>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <HAL_MspInit+0x44>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6193      	str	r3, [r2, #24]
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <HAL_MspInit+0x44>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_MspInit+0x44>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <HAL_MspInit+0x44>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	61d3      	str	r3, [r2, #28]
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_MspInit+0x44>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001082:	2007      	movs	r0, #7
 8001084:	f001 fbd4 	bl	8002830 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40021000 	.word	0x40021000

08001094 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010b4:	d14c      	bne.n	8001150 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010b6:	4b28      	ldr	r3, [pc, #160]	; (8001158 <HAL_ADC_MspInit+0xc4>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	4a27      	ldr	r2, [pc, #156]	; (8001158 <HAL_ADC_MspInit+0xc4>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c0:	6153      	str	r3, [r2, #20]
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <HAL_ADC_MspInit+0xc4>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b22      	ldr	r3, [pc, #136]	; (8001158 <HAL_ADC_MspInit+0xc4>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	4a21      	ldr	r2, [pc, #132]	; (8001158 <HAL_ADC_MspInit+0xc4>)
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	6153      	str	r3, [r2, #20]
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <HAL_ADC_MspInit+0xc4>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010e6:	2301      	movs	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ea:	2303      	movs	r3, #3
 80010ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fc:	f001 fe04 	bl	8002d08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <HAL_ADC_MspInit+0xc8>)
 8001102:	4a17      	ldr	r2, [pc, #92]	; (8001160 <HAL_ADC_MspInit+0xcc>)
 8001104:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_ADC_MspInit+0xc8>)
 8001108:	2200      	movs	r2, #0
 800110a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <HAL_ADC_MspInit+0xc8>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_ADC_MspInit+0xc8>)
 8001114:	2280      	movs	r2, #128	; 0x80
 8001116:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <HAL_ADC_MspInit+0xc8>)
 800111a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800111e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <HAL_ADC_MspInit+0xc8>)
 8001122:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001126:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <HAL_ADC_MspInit+0xc8>)
 800112a:	2220      	movs	r2, #32
 800112c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_ADC_MspInit+0xc8>)
 8001130:	2200      	movs	r2, #0
 8001132:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001134:	4809      	ldr	r0, [pc, #36]	; (800115c <HAL_ADC_MspInit+0xc8>)
 8001136:	f001 fbbc 	bl	80028b2 <HAL_DMA_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001140:	f7ff ff7e 	bl	8001040 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a05      	ldr	r2, [pc, #20]	; (800115c <HAL_ADC_MspInit+0xc8>)
 8001148:	639a      	str	r2, [r3, #56]	; 0x38
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_ADC_MspInit+0xc8>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001150:	bf00      	nop
 8001152:	3728      	adds	r7, #40	; 0x28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40021000 	.word	0x40021000
 800115c:	200000fc 	.word	0x200000fc
 8001160:	40020008 	.word	0x40020008

08001164 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a1b      	ldr	r2, [pc, #108]	; (80011f0 <HAL_UART_MspInit+0x8c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d130      	bne.n	80011e8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001186:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <HAL_UART_MspInit+0x90>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	4a1a      	ldr	r2, [pc, #104]	; (80011f4 <HAL_UART_MspInit+0x90>)
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	61d3      	str	r3, [r2, #28]
 8001192:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <HAL_UART_MspInit+0x90>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_UART_MspInit+0x90>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <HAL_UART_MspInit+0x90>)
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	6153      	str	r3, [r2, #20]
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_UART_MspInit+0x90>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011b6:	230c      	movs	r3, #12
 80011b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c6:	2307      	movs	r3, #7
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d4:	f001 fd98 	bl	8002d08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	2026      	movs	r0, #38	; 0x26
 80011de:	f001 fb32 	bl	8002846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011e2:	2026      	movs	r0, #38	; 0x26
 80011e4:	f001 fb4b 	bl	800287e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011e8:	bf00      	nop
 80011ea:	3728      	adds	r7, #40	; 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40004400 	.word	0x40004400
 80011f4:	40021000 	.word	0x40021000

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <NMI_Handler+0x4>

080011fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <HardFault_Handler+0x4>

08001204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <MemManage_Handler+0x4>

0800120a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <BusFault_Handler+0x4>

08001210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <UsageFault_Handler+0x4>

08001216 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001244:	f000 f9a8 	bl	8001598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}

0800124c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <DMA1_Channel1_IRQHandler+0x10>)
 8001252:	f001 fc4b 	bl	8002aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200000fc 	.word	0x200000fc

08001260 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 8001264:	4b64      	ldr	r3, [pc, #400]	; (80013f8 <EXTI9_5_IRQHandler+0x198>)
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126c:	2b00      	cmp	r3, #0
 800126e:	d038      	beq.n	80012e2 <EXTI9_5_IRQHandler+0x82>

		if(HAL_GetTick() - ticks_pressed >= 20){
 8001270:	f000 f9a6 	bl	80015c0 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	4b61      	ldr	r3, [pc, #388]	; (80013fc <EXTI9_5_IRQHandler+0x19c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b13      	cmp	r3, #19
 800127e:	d92c      	bls.n	80012da <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 8001280:	4b5f      	ldr	r3, [pc, #380]	; (8001400 <EXTI9_5_IRQHandler+0x1a0>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b01      	cmp	r3, #1
 8001288:	d112      	bne.n	80012b0 <EXTI9_5_IRQHandler+0x50>
 800128a:	2140      	movs	r1, #64	; 0x40
 800128c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001290:	f001 fec4 	bl	800301c <HAL_GPIO_ReadPin>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10a      	bne.n	80012b0 <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 800129a:	4b59      	ldr	r3, [pc, #356]	; (8001400 <EXTI9_5_IRQHandler+0x1a0>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 80012a0:	f000 f98e 	bl	80015c0 <HAL_GetTick>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a55      	ldr	r2, [pc, #340]	; (80013fc <EXTI9_5_IRQHandler+0x19c>)
 80012a8:	6013      	str	r3, [r2, #0]

				middle_button_pressed = 1;
 80012aa:	4b56      	ldr	r3, [pc, #344]	; (8001404 <EXTI9_5_IRQHandler+0x1a4>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 80012b0:	4b53      	ldr	r3, [pc, #332]	; (8001400 <EXTI9_5_IRQHandler+0x1a0>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10f      	bne.n	80012da <EXTI9_5_IRQHandler+0x7a>
 80012ba:	2140      	movs	r1, #64	; 0x40
 80012bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c0:	f001 feac 	bl	800301c <HAL_GPIO_ReadPin>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d107      	bne.n	80012da <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 80012ca:	f000 f979 	bl	80015c0 <HAL_GetTick>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a4a      	ldr	r2, [pc, #296]	; (80013fc <EXTI9_5_IRQHandler+0x19c>)
 80012d2:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 80012d4:	4b4a      	ldr	r3, [pc, #296]	; (8001400 <EXTI9_5_IRQHandler+0x1a0>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 80012da:	4b47      	ldr	r3, [pc, #284]	; (80013f8 <EXTI9_5_IRQHandler+0x198>)
 80012dc:	2240      	movs	r2, #64	; 0x40
 80012de:	615a      	str	r2, [r3, #20]
 80012e0:	e07d      	b.n	80013de <EXTI9_5_IRQHandler+0x17e>
	}
	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 80012e2:	4b45      	ldr	r3, [pc, #276]	; (80013f8 <EXTI9_5_IRQHandler+0x198>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d038      	beq.n	8001360 <EXTI9_5_IRQHandler+0x100>

			if(HAL_GetTick() - ticks_pressed >= 20){
 80012ee:	f000 f967 	bl	80015c0 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	4b41      	ldr	r3, [pc, #260]	; (80013fc <EXTI9_5_IRQHandler+0x19c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b13      	cmp	r3, #19
 80012fc:	d92c      	bls.n	8001358 <EXTI9_5_IRQHandler+0xf8>
				// stable low state
				if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 80012fe:	4b40      	ldr	r3, [pc, #256]	; (8001400 <EXTI9_5_IRQHandler+0x1a0>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b01      	cmp	r3, #1
 8001306:	d112      	bne.n	800132e <EXTI9_5_IRQHandler+0xce>
 8001308:	2180      	movs	r1, #128	; 0x80
 800130a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130e:	f001 fe85 	bl	800301c <HAL_GPIO_ReadPin>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10a      	bne.n	800132e <EXTI9_5_IRQHandler+0xce>
					button_state =0 ; // stable low reached
 8001318:	4b39      	ldr	r3, [pc, #228]	; (8001400 <EXTI9_5_IRQHandler+0x1a0>)
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
					ticks_pressed = HAL_GetTick() ;
 800131e:	f000 f94f 	bl	80015c0 <HAL_GetTick>
 8001322:	4603      	mov	r3, r0
 8001324:	4a35      	ldr	r2, [pc, #212]	; (80013fc <EXTI9_5_IRQHandler+0x19c>)
 8001326:	6013      	str	r3, [r2, #0]

					right_button_pressed = 1;
 8001328:	4b37      	ldr	r3, [pc, #220]	; (8001408 <EXTI9_5_IRQHandler+0x1a8>)
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
				}

				// stable high state
				if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 800132e:	4b34      	ldr	r3, [pc, #208]	; (8001400 <EXTI9_5_IRQHandler+0x1a0>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10f      	bne.n	8001358 <EXTI9_5_IRQHandler+0xf8>
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133e:	f001 fe6d 	bl	800301c <HAL_GPIO_ReadPin>
 8001342:	4603      	mov	r3, r0
 8001344:	2b01      	cmp	r3, #1
 8001346:	d107      	bne.n	8001358 <EXTI9_5_IRQHandler+0xf8>
					ticks_pressed = HAL_GetTick() ;
 8001348:	f000 f93a 	bl	80015c0 <HAL_GetTick>
 800134c:	4603      	mov	r3, r0
 800134e:	4a2b      	ldr	r2, [pc, #172]	; (80013fc <EXTI9_5_IRQHandler+0x19c>)
 8001350:	6013      	str	r3, [r2, #0]
					button_state =1 ; // stable high state
 8001352:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <EXTI9_5_IRQHandler+0x1a0>)
 8001354:	2201      	movs	r2, #1
 8001356:	701a      	strb	r2, [r3, #0]

				}
			}


			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <EXTI9_5_IRQHandler+0x198>)
 800135a:	2280      	movs	r2, #128	; 0x80
 800135c:	615a      	str	r2, [r3, #20]
 800135e:	e03e      	b.n	80013de <EXTI9_5_IRQHandler+0x17e>
	}
	else{
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 8001360:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <EXTI9_5_IRQHandler+0x198>)
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001368:	2b00      	cmp	r3, #0
 800136a:	d038      	beq.n	80013de <EXTI9_5_IRQHandler+0x17e>

				if(HAL_GetTick() - ticks_pressed >= 20){
 800136c:	f000 f928 	bl	80015c0 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <EXTI9_5_IRQHandler+0x19c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b13      	cmp	r3, #19
 800137a:	d92c      	bls.n	80013d6 <EXTI9_5_IRQHandler+0x176>
					// stable low state
					if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 800137c:	4b20      	ldr	r3, [pc, #128]	; (8001400 <EXTI9_5_IRQHandler+0x1a0>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b01      	cmp	r3, #1
 8001384:	d112      	bne.n	80013ac <EXTI9_5_IRQHandler+0x14c>
 8001386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800138a:	4820      	ldr	r0, [pc, #128]	; (800140c <EXTI9_5_IRQHandler+0x1ac>)
 800138c:	f001 fe46 	bl	800301c <HAL_GPIO_ReadPin>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10a      	bne.n	80013ac <EXTI9_5_IRQHandler+0x14c>
						button_state =0 ; // stable low reached
 8001396:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <EXTI9_5_IRQHandler+0x1a0>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
						ticks_pressed = HAL_GetTick() ;
 800139c:	f000 f910 	bl	80015c0 <HAL_GetTick>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4a16      	ldr	r2, [pc, #88]	; (80013fc <EXTI9_5_IRQHandler+0x19c>)
 80013a4:	6013      	str	r3, [r2, #0]

						left_button_pressed = 1;
 80013a6:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <EXTI9_5_IRQHandler+0x1b0>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
					}

					// stable high state
					if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <EXTI9_5_IRQHandler+0x1a0>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10f      	bne.n	80013d6 <EXTI9_5_IRQHandler+0x176>
 80013b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ba:	4814      	ldr	r0, [pc, #80]	; (800140c <EXTI9_5_IRQHandler+0x1ac>)
 80013bc:	f001 fe2e 	bl	800301c <HAL_GPIO_ReadPin>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d107      	bne.n	80013d6 <EXTI9_5_IRQHandler+0x176>
						ticks_pressed = HAL_GetTick() ;
 80013c6:	f000 f8fb 	bl	80015c0 <HAL_GetTick>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <EXTI9_5_IRQHandler+0x19c>)
 80013ce:	6013      	str	r3, [r2, #0]
						button_state =1 ; // stable high state
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <EXTI9_5_IRQHandler+0x1a0>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]

					}
				}
				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <EXTI9_5_IRQHandler+0x198>)
 80013d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013dc:	615a      	str	r2, [r3, #20]
			}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80013de:	2040      	movs	r0, #64	; 0x40
 80013e0:	f001 fe4c 	bl	800307c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80013e4:	2080      	movs	r0, #128	; 0x80
 80013e6:	f001 fe49 	bl	800307c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80013ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013ee:	f001 fe45 	bl	800307c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40010400 	.word	0x40010400
 80013fc:	200021f0 	.word	0x200021f0
 8001400:	2000001d 	.word	0x2000001d
 8001404:	200021f4 	.word	0x200021f4
 8001408:	200021f5 	.word	0x200021f5
 800140c:	48000400 	.word	0x48000400
 8001410:	200021f6 	.word	0x200021f6

08001414 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <USART2_IRQHandler+0x10>)
 800141a:	f003 fc75 	bl	8004d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000140 	.word	0x20000140

08001428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001430:	4a14      	ldr	r2, [pc, #80]	; (8001484 <_sbrk+0x5c>)
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <_sbrk+0x60>)
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <_sbrk+0x64>)
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <_sbrk+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	429a      	cmp	r2, r3
 8001456:	d207      	bcs.n	8001468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001458:	f004 feba 	bl	80061d0 <__errno>
 800145c:	4603      	mov	r3, r0
 800145e:	220c      	movs	r2, #12
 8001460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e009      	b.n	800147c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146e:	4b07      	ldr	r3, [pc, #28]	; (800148c <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <_sbrk+0x64>)
 8001478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20010000 	.word	0x20010000
 8001488:	00000400 	.word	0x00000400
 800148c:	200021f8 	.word	0x200021f8
 8001490:	20002210 	.word	0x20002210

08001494 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <SystemInit+0x20>)
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <SystemInit+0x20>)
 80014a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014bc:	f7ff ffea 	bl	8001494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80014c2:	490d      	ldr	r1, [pc, #52]	; (80014f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <LoopForever+0xe>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014d8:	4c0a      	ldr	r4, [pc, #40]	; (8001504 <LoopForever+0x16>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e6:	f004 fe79 	bl	80061dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ea:	f7ff fac1 	bl	8000a70 <main>

080014ee <LoopForever>:

LoopForever:
    b LoopForever
 80014ee:	e7fe      	b.n	80014ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80014fc:	08006ba0 	.word	0x08006ba0
  ldr r2, =_sbss
 8001500:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001504:	20002210 	.word	0x20002210

08001508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC1_2_IRQHandler>
	...

0800150c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_Init+0x28>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_Init+0x28>)
 8001516:	f043 0310 	orr.w	r3, r3, #16
 800151a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151c:	2003      	movs	r0, #3
 800151e:	f001 f987 	bl	8002830 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001522:	2000      	movs	r0, #0
 8001524:	f000 f808 	bl	8001538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001528:	f7ff fd90 	bl	800104c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40022000 	.word	0x40022000

08001538 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_InitTick+0x54>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_InitTick+0x58>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f001 f99f 	bl	800289a <HAL_SYSTICK_Config>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e00e      	b.n	8001584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d80a      	bhi.n	8001582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f001 f967 	bl	8002846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001578:	4a06      	ldr	r2, [pc, #24]	; (8001594 <HAL_InitTick+0x5c>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000020 	.word	0x20000020
 8001590:	20000028 	.word	0x20000028
 8001594:	20000024 	.word	0x20000024

08001598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000028 	.word	0x20000028
 80015bc:	200021fc 	.word	0x200021fc

080015c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	200021fc 	.word	0x200021fc

080015d8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffee 	bl	80015c0 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffde 	bl	80015c0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000028 	.word	0x20000028

08001620 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b09a      	sub	sp, #104	; 0x68
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001656:	2300      	movs	r3, #0
 8001658:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e1e3      	b.n	8001a30 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	2b00      	cmp	r3, #0
 8001678:	d176      	bne.n	8001768 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	2b00      	cmp	r3, #0
 8001680:	d152      	bne.n	8001728 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff fcf9 	bl	8001094 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d13b      	bne.n	8001728 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 ff87 	bl	80025c4 <ADC_Disable>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f003 0310 	and.w	r3, r3, #16
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d12f      	bne.n	8001728 <HAL_ADC_Init+0xe0>
 80016c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d12b      	bne.n	8001728 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016d8:	f023 0302 	bic.w	r3, r3, #2
 80016dc:	f043 0202 	orr.w	r2, r3, #2
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016f2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001702:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001704:	4b92      	ldr	r3, [pc, #584]	; (8001950 <HAL_ADC_Init+0x308>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a92      	ldr	r2, [pc, #584]	; (8001954 <HAL_ADC_Init+0x30c>)
 800170a:	fba2 2303 	umull	r2, r3, r2, r3
 800170e:	0c9a      	lsrs	r2, r3, #18
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800171a:	e002      	b.n	8001722 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	3b01      	subs	r3, #1
 8001720:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f9      	bne.n	800171c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001744:	d110      	bne.n	8001768 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f023 0312 	bic.w	r3, r3, #18
 800174e:	f043 0210 	orr.w	r2, r3, #16
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f043 0201 	orr.w	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b00      	cmp	r3, #0
 8001772:	f040 8150 	bne.w	8001a16 <HAL_ADC_Init+0x3ce>
 8001776:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800177a:	2b00      	cmp	r3, #0
 800177c:	f040 814b 	bne.w	8001a16 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800178a:	2b00      	cmp	r3, #0
 800178c:	f040 8143 	bne.w	8001a16 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001798:	f043 0202 	orr.w	r2, r3, #2
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017a8:	d004      	beq.n	80017b4 <HAL_ADC_Init+0x16c>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a6a      	ldr	r2, [pc, #424]	; (8001958 <HAL_ADC_Init+0x310>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d101      	bne.n	80017b8 <HAL_ADC_Init+0x170>
 80017b4:	4b69      	ldr	r3, [pc, #420]	; (800195c <HAL_ADC_Init+0x314>)
 80017b6:	e000      	b.n	80017ba <HAL_ADC_Init+0x172>
 80017b8:	4b69      	ldr	r3, [pc, #420]	; (8001960 <HAL_ADC_Init+0x318>)
 80017ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017c4:	d102      	bne.n	80017cc <HAL_ADC_Init+0x184>
 80017c6:	4b64      	ldr	r3, [pc, #400]	; (8001958 <HAL_ADC_Init+0x310>)
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	e01a      	b.n	8001802 <HAL_ADC_Init+0x1ba>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a61      	ldr	r2, [pc, #388]	; (8001958 <HAL_ADC_Init+0x310>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d103      	bne.n	80017de <HAL_ADC_Init+0x196>
 80017d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	e011      	b.n	8001802 <HAL_ADC_Init+0x1ba>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a60      	ldr	r2, [pc, #384]	; (8001964 <HAL_ADC_Init+0x31c>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d102      	bne.n	80017ee <HAL_ADC_Init+0x1a6>
 80017e8:	4b5f      	ldr	r3, [pc, #380]	; (8001968 <HAL_ADC_Init+0x320>)
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	e009      	b.n	8001802 <HAL_ADC_Init+0x1ba>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a5d      	ldr	r2, [pc, #372]	; (8001968 <HAL_ADC_Init+0x320>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d102      	bne.n	80017fe <HAL_ADC_Init+0x1b6>
 80017f8:	4b5a      	ldr	r3, [pc, #360]	; (8001964 <HAL_ADC_Init+0x31c>)
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	e001      	b.n	8001802 <HAL_ADC_Init+0x1ba>
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b01      	cmp	r3, #1
 800180e:	d108      	bne.n	8001822 <HAL_ADC_Init+0x1da>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b01      	cmp	r3, #1
 800181c:	d101      	bne.n	8001822 <HAL_ADC_Init+0x1da>
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <HAL_ADC_Init+0x1dc>
 8001822:	2300      	movs	r3, #0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d11c      	bne.n	8001862 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001828:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800182a:	2b00      	cmp	r3, #0
 800182c:	d010      	beq.n	8001850 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	2b01      	cmp	r3, #1
 8001838:	d107      	bne.n	800184a <HAL_ADC_Init+0x202>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_ADC_Init+0x202>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <HAL_ADC_Init+0x204>
 800184a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800184c:	2b00      	cmp	r3, #0
 800184e:	d108      	bne.n	8001862 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	431a      	orrs	r2, r3
 800185e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001860:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	7e5b      	ldrb	r3, [r3, #25]
 8001866:	035b      	lsls	r3, r3, #13
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800186c:	2a01      	cmp	r2, #1
 800186e:	d002      	beq.n	8001876 <HAL_ADC_Init+0x22e>
 8001870:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001874:	e000      	b.n	8001878 <HAL_ADC_Init+0x230>
 8001876:	2200      	movs	r2, #0
 8001878:	431a      	orrs	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4313      	orrs	r3, r2
 8001886:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001888:	4313      	orrs	r3, r2
 800188a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d11b      	bne.n	80018ce <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	7e5b      	ldrb	r3, [r3, #25]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d109      	bne.n	80018b2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	3b01      	subs	r3, #1
 80018a4:	045a      	lsls	r2, r3, #17
 80018a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018a8:	4313      	orrs	r3, r2
 80018aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ae:	663b      	str	r3, [r7, #96]	; 0x60
 80018b0:	e00d      	b.n	80018ce <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80018ba:	f043 0220 	orr.w	r2, r3, #32
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f043 0201 	orr.w	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d054      	beq.n	8001980 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a22      	ldr	r2, [pc, #136]	; (8001964 <HAL_ADC_Init+0x31c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d004      	beq.n	80018ea <HAL_ADC_Init+0x2a2>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a20      	ldr	r2, [pc, #128]	; (8001968 <HAL_ADC_Init+0x320>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d140      	bne.n	800196c <HAL_ADC_Init+0x324>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80018f2:	d02a      	beq.n	800194a <HAL_ADC_Init+0x302>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018fc:	d022      	beq.n	8001944 <HAL_ADC_Init+0x2fc>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001906:	d01a      	beq.n	800193e <HAL_ADC_Init+0x2f6>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001910:	d012      	beq.n	8001938 <HAL_ADC_Init+0x2f0>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800191a:	d00a      	beq.n	8001932 <HAL_ADC_Init+0x2ea>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001924:	d002      	beq.n	800192c <HAL_ADC_Init+0x2e4>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192a:	e023      	b.n	8001974 <HAL_ADC_Init+0x32c>
 800192c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001930:	e020      	b.n	8001974 <HAL_ADC_Init+0x32c>
 8001932:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001936:	e01d      	b.n	8001974 <HAL_ADC_Init+0x32c>
 8001938:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800193c:	e01a      	b.n	8001974 <HAL_ADC_Init+0x32c>
 800193e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001942:	e017      	b.n	8001974 <HAL_ADC_Init+0x32c>
 8001944:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001948:	e014      	b.n	8001974 <HAL_ADC_Init+0x32c>
 800194a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800194e:	e011      	b.n	8001974 <HAL_ADC_Init+0x32c>
 8001950:	20000020 	.word	0x20000020
 8001954:	431bde83 	.word	0x431bde83
 8001958:	50000100 	.word	0x50000100
 800195c:	50000300 	.word	0x50000300
 8001960:	50000700 	.word	0x50000700
 8001964:	50000400 	.word	0x50000400
 8001968:	50000500 	.word	0x50000500
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001978:	4313      	orrs	r3, r2
 800197a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800197c:	4313      	orrs	r3, r2
 800197e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b00      	cmp	r3, #0
 800198c:	d114      	bne.n	80019b8 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800199c:	f023 0302 	bic.w	r3, r3, #2
 80019a0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7e1b      	ldrb	r3, [r3, #24]
 80019a6:	039a      	lsls	r2, r3, #14
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4313      	orrs	r3, r2
 80019b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019b4:	4313      	orrs	r3, r2
 80019b6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <HAL_ADC_Init+0x3f0>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80019c8:	430b      	orrs	r3, r1
 80019ca:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d10c      	bne.n	80019ee <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f023 010f 	bic.w	r1, r3, #15
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	1e5a      	subs	r2, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	631a      	str	r2, [r3, #48]	; 0x30
 80019ec:	e007      	b.n	80019fe <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 020f 	bic.w	r2, r2, #15
 80019fc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f023 0303 	bic.w	r3, r3, #3
 8001a0c:	f043 0201 	orr.w	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	641a      	str	r2, [r3, #64]	; 0x40
 8001a14:	e00a      	b.n	8001a2c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f023 0312 	bic.w	r3, r3, #18
 8001a1e:	f043 0210 	orr.w	r2, r3, #16
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001a26:	2301      	movs	r3, #1
 8001a28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001a2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3768      	adds	r7, #104	; 0x68
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	fff0c007 	.word	0xfff0c007

08001a3c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f040 80f7 	bne.w	8001c4a <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_ADC_Start_DMA+0x2e>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e0f2      	b.n	8001c50 <HAL_ADC_Start_DMA+0x214>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a7a:	d004      	beq.n	8001a86 <HAL_ADC_Start_DMA+0x4a>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a75      	ldr	r2, [pc, #468]	; (8001c58 <HAL_ADC_Start_DMA+0x21c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d109      	bne.n	8001a9a <HAL_ADC_Start_DMA+0x5e>
 8001a86:	4b75      	ldr	r3, [pc, #468]	; (8001c5c <HAL_ADC_Start_DMA+0x220>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 031f 	and.w	r3, r3, #31
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	bf0c      	ite	eq
 8001a92:	2301      	moveq	r3, #1
 8001a94:	2300      	movne	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	e008      	b.n	8001aac <HAL_ADC_Start_DMA+0x70>
 8001a9a:	4b71      	ldr	r3, [pc, #452]	; (8001c60 <HAL_ADC_Start_DMA+0x224>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf0c      	ite	eq
 8001aa6:	2301      	moveq	r3, #1
 8001aa8:	2300      	movne	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 80c5 	beq.w	8001c3c <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 fd22 	bl	80024fc <ADC_Enable>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f040 80b7 	bne.w	8001c32 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001acc:	f023 0301 	bic.w	r3, r3, #1
 8001ad0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ae0:	d004      	beq.n	8001aec <HAL_ADC_Start_DMA+0xb0>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a5c      	ldr	r2, [pc, #368]	; (8001c58 <HAL_ADC_Start_DMA+0x21c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d106      	bne.n	8001afa <HAL_ADC_Start_DMA+0xbe>
 8001aec:	4b5b      	ldr	r3, [pc, #364]	; (8001c5c <HAL_ADC_Start_DMA+0x220>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 031f 	and.w	r3, r3, #31
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d010      	beq.n	8001b1a <HAL_ADC_Start_DMA+0xde>
 8001af8:	e005      	b.n	8001b06 <HAL_ADC_Start_DMA+0xca>
 8001afa:	4b59      	ldr	r3, [pc, #356]	; (8001c60 <HAL_ADC_Start_DMA+0x224>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 031f 	and.w	r3, r3, #31
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d009      	beq.n	8001b1a <HAL_ADC_Start_DMA+0xde>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b0e:	d004      	beq.n	8001b1a <HAL_ADC_Start_DMA+0xde>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a53      	ldr	r2, [pc, #332]	; (8001c64 <HAL_ADC_Start_DMA+0x228>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d115      	bne.n	8001b46 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d036      	beq.n	8001ba2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b44:	e02d      	b.n	8001ba2 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b5a:	d004      	beq.n	8001b66 <HAL_ADC_Start_DMA+0x12a>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a3d      	ldr	r2, [pc, #244]	; (8001c58 <HAL_ADC_Start_DMA+0x21c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d10a      	bne.n	8001b7c <HAL_ADC_Start_DMA+0x140>
 8001b66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf14      	ite	ne
 8001b74:	2301      	movne	r3, #1
 8001b76:	2300      	moveq	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	e008      	b.n	8001b8e <HAL_ADC_Start_DMA+0x152>
 8001b7c:	4b39      	ldr	r3, [pc, #228]	; (8001c64 <HAL_ADC_Start_DMA+0x228>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf14      	ite	ne
 8001b88:	2301      	movne	r3, #1
 8001b8a:	2300      	moveq	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bae:	d106      	bne.n	8001bbe <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	f023 0206 	bic.w	r2, r3, #6
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44
 8001bbc:	e002      	b.n	8001bc4 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd0:	4a25      	ldr	r2, [pc, #148]	; (8001c68 <HAL_ADC_Start_DMA+0x22c>)
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd8:	4a24      	ldr	r2, [pc, #144]	; (8001c6c <HAL_ADC_Start_DMA+0x230>)
 8001bda:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be0:	4a23      	ldr	r2, [pc, #140]	; (8001c70 <HAL_ADC_Start_DMA+0x234>)
 8001be2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	221c      	movs	r2, #28
 8001bea:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0210 	orr.w	r2, r2, #16
 8001bfa:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3340      	adds	r3, #64	; 0x40
 8001c16:	4619      	mov	r1, r3
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f000 fe90 	bl	8002940 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0204 	orr.w	r2, r2, #4
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	e00d      	b.n	8001c4e <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c3a:	e008      	b.n	8001c4e <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c48:	e001      	b.n	8001c4e <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	50000100 	.word	0x50000100
 8001c5c:	50000300 	.word	0x50000300
 8001c60:	50000700 	.word	0x50000700
 8001c64:	50000400 	.word	0x50000400
 8001c68:	08002431 	.word	0x08002431
 8001c6c:	080024ab 	.word	0x080024ab
 8001c70:	080024c7 	.word	0x080024c7

08001c74 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b09b      	sub	sp, #108	; 0x6c
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d101      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x22>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e2ca      	b.n	800222c <HAL_ADC_ConfigChannel+0x5b8>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f040 82ae 	bne.w	800220a <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d81c      	bhi.n	8001cf0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	461a      	mov	r2, r3
 8001cca:	231f      	movs	r3, #31
 8001ccc:	4093      	lsls	r3, r2
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	4019      	ands	r1, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	631a      	str	r2, [r3, #48]	; 0x30
 8001cee:	e063      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b09      	cmp	r3, #9
 8001cf6:	d81e      	bhi.n	8001d36 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4413      	add	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	3b1e      	subs	r3, #30
 8001d0c:	221f      	movs	r2, #31
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	4019      	ands	r1, r3
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	3b1e      	subs	r3, #30
 8001d28:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	635a      	str	r2, [r3, #52]	; 0x34
 8001d34:	e040      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b0e      	cmp	r3, #14
 8001d3c:	d81e      	bhi.n	8001d7c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	3b3c      	subs	r3, #60	; 0x3c
 8001d52:	221f      	movs	r2, #31
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	4019      	ands	r1, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	3b3c      	subs	r3, #60	; 0x3c
 8001d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	639a      	str	r2, [r3, #56]	; 0x38
 8001d7a:	e01d      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	3b5a      	subs	r3, #90	; 0x5a
 8001d90:	221f      	movs	r2, #31
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	4019      	ands	r1, r3
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	3b5a      	subs	r3, #90	; 0x5a
 8001dac:	fa00 f203 	lsl.w	r2, r0, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 80e5 	bne.w	8001f92 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b09      	cmp	r3, #9
 8001dce:	d91c      	bls.n	8001e0a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6999      	ldr	r1, [r3, #24]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	3b1e      	subs	r3, #30
 8001de2:	2207      	movs	r2, #7
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	4019      	ands	r1, r3
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6898      	ldr	r0, [r3, #8]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	3b1e      	subs	r3, #30
 8001dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	619a      	str	r2, [r3, #24]
 8001e08:	e019      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6959      	ldr	r1, [r3, #20]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	2207      	movs	r2, #7
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	4019      	ands	r1, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	6898      	ldr	r0, [r3, #8]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4413      	add	r3, r2
 8001e32:	fa00 f203 	lsl.w	r2, r0, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	695a      	ldr	r2, [r3, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	08db      	lsrs	r3, r3, #3
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d84f      	bhi.n	8001f00 <HAL_ADC_ConfigChannel+0x28c>
 8001e60:	a201      	add	r2, pc, #4	; (adr r2, 8001e68 <HAL_ADC_ConfigChannel+0x1f4>)
 8001e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e66:	bf00      	nop
 8001e68:	08001e79 	.word	0x08001e79
 8001e6c:	08001e9b 	.word	0x08001e9b
 8001e70:	08001ebd 	.word	0x08001ebd
 8001e74:	08001edf 	.word	0x08001edf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e7e:	4b9a      	ldr	r3, [pc, #616]	; (80020e8 <HAL_ADC_ConfigChannel+0x474>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	0691      	lsls	r1, r2, #26
 8001e88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e96:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e98:	e07e      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ea0:	4b91      	ldr	r3, [pc, #580]	; (80020e8 <HAL_ADC_ConfigChannel+0x474>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	0691      	lsls	r1, r2, #26
 8001eaa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001eac:	430a      	orrs	r2, r1
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001eb8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001eba:	e06d      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ec2:	4b89      	ldr	r3, [pc, #548]	; (80020e8 <HAL_ADC_ConfigChannel+0x474>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	0691      	lsls	r1, r2, #26
 8001ecc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001eda:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001edc:	e05c      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ee4:	4b80      	ldr	r3, [pc, #512]	; (80020e8 <HAL_ADC_ConfigChannel+0x474>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	0691      	lsls	r1, r2, #26
 8001eee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001efc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001efe:	e04b      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	069b      	lsls	r3, r3, #26
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d107      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f22:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	069b      	lsls	r3, r3, #26
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d107      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f46:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	069b      	lsls	r3, r3, #26
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d107      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f6a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	069b      	lsls	r3, r3, #26
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d10a      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f8e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001f90:	e001      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001f92:	bf00      	nop
 8001f94:	e000      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001f96:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d108      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x344>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x344>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_ADC_ConfigChannel+0x346>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f040 8130 	bne.w	8002220 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d00f      	beq.n	8001fe8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	400a      	ands	r2, r1
 8001fe2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001fe6:	e049      	b.n	800207c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b09      	cmp	r3, #9
 8002008:	d91c      	bls.n	8002044 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6999      	ldr	r1, [r3, #24]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4613      	mov	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	3b1b      	subs	r3, #27
 800201c:	2207      	movs	r2, #7
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	4019      	ands	r1, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6898      	ldr	r0, [r3, #8]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	3b1b      	subs	r3, #27
 8002036:	fa00 f203 	lsl.w	r2, r0, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	619a      	str	r2, [r3, #24]
 8002042:	e01b      	b.n	800207c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6959      	ldr	r1, [r3, #20]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	2207      	movs	r2, #7
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	4019      	ands	r1, r3
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	6898      	ldr	r0, [r3, #8]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	4613      	mov	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4413      	add	r3, r2
 8002070:	fa00 f203 	lsl.w	r2, r0, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002084:	d004      	beq.n	8002090 <HAL_ADC_ConfigChannel+0x41c>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a18      	ldr	r2, [pc, #96]	; (80020ec <HAL_ADC_ConfigChannel+0x478>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d101      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x420>
 8002090:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <HAL_ADC_ConfigChannel+0x47c>)
 8002092:	e000      	b.n	8002096 <HAL_ADC_ConfigChannel+0x422>
 8002094:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <HAL_ADC_ConfigChannel+0x480>)
 8002096:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b10      	cmp	r3, #16
 800209e:	d105      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80020a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d015      	beq.n	80020d8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80020b0:	2b11      	cmp	r3, #17
 80020b2:	d105      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80020b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00b      	beq.n	80020d8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80020c4:	2b12      	cmp	r3, #18
 80020c6:	f040 80ab 	bne.w	8002220 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80020ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f040 80a4 	bne.w	8002220 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020e0:	d10a      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x484>
 80020e2:	4b02      	ldr	r3, [pc, #8]	; (80020ec <HAL_ADC_ConfigChannel+0x478>)
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	e022      	b.n	800212e <HAL_ADC_ConfigChannel+0x4ba>
 80020e8:	83fff000 	.word	0x83fff000
 80020ec:	50000100 	.word	0x50000100
 80020f0:	50000300 	.word	0x50000300
 80020f4:	50000700 	.word	0x50000700
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a4e      	ldr	r2, [pc, #312]	; (8002238 <HAL_ADC_ConfigChannel+0x5c4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d103      	bne.n	800210a <HAL_ADC_ConfigChannel+0x496>
 8002102:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	e011      	b.n	800212e <HAL_ADC_ConfigChannel+0x4ba>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a4b      	ldr	r2, [pc, #300]	; (800223c <HAL_ADC_ConfigChannel+0x5c8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d102      	bne.n	800211a <HAL_ADC_ConfigChannel+0x4a6>
 8002114:	4b4a      	ldr	r3, [pc, #296]	; (8002240 <HAL_ADC_ConfigChannel+0x5cc>)
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	e009      	b.n	800212e <HAL_ADC_ConfigChannel+0x4ba>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a48      	ldr	r2, [pc, #288]	; (8002240 <HAL_ADC_ConfigChannel+0x5cc>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d102      	bne.n	800212a <HAL_ADC_ConfigChannel+0x4b6>
 8002124:	4b45      	ldr	r3, [pc, #276]	; (800223c <HAL_ADC_ConfigChannel+0x5c8>)
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	e001      	b.n	800212e <HAL_ADC_ConfigChannel+0x4ba>
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b01      	cmp	r3, #1
 800213a:	d108      	bne.n	800214e <HAL_ADC_ConfigChannel+0x4da>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_ADC_ConfigChannel+0x4da>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_ADC_ConfigChannel+0x4dc>
 800214e:	2300      	movs	r3, #0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d150      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002154:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002156:	2b00      	cmp	r3, #0
 8002158:	d010      	beq.n	800217c <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d107      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x502>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x502>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_ADC_ConfigChannel+0x504>
 8002176:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002178:	2b00      	cmp	r3, #0
 800217a:	d13c      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b10      	cmp	r3, #16
 8002182:	d11d      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x54c>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800218c:	d118      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800218e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002198:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800219a:	4b2a      	ldr	r3, [pc, #168]	; (8002244 <HAL_ADC_ConfigChannel+0x5d0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a2a      	ldr	r2, [pc, #168]	; (8002248 <HAL_ADC_ConfigChannel+0x5d4>)
 80021a0:	fba2 2303 	umull	r2, r3, r2, r3
 80021a4:	0c9a      	lsrs	r2, r3, #18
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021b0:	e002      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f9      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021be:	e02e      	b.n	800221e <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b11      	cmp	r3, #17
 80021c6:	d10b      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x56c>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021d0:	d106      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80021d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80021da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021dc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021de:	e01e      	b.n	800221e <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b12      	cmp	r3, #18
 80021e6:	d11a      	bne.n	800221e <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80021e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021f2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021f4:	e013      	b.n	800221e <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f043 0220 	orr.w	r2, r3, #32
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002208:	e00a      	b.n	8002220 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f043 0220 	orr.w	r2, r3, #32
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800221c:	e000      	b.n	8002220 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800221e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002228:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800222c:	4618      	mov	r0, r3
 800222e:	376c      	adds	r7, #108	; 0x6c
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	50000100 	.word	0x50000100
 800223c:	50000400 	.word	0x50000400
 8002240:	50000500 	.word	0x50000500
 8002244:	20000020 	.word	0x20000020
 8002248:	431bde83 	.word	0x431bde83

0800224c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800224c:	b480      	push	{r7}
 800224e:	b099      	sub	sp, #100	; 0x64
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002264:	d102      	bne.n	800226c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002266:	4b6d      	ldr	r3, [pc, #436]	; (800241c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	e01a      	b.n	80022a2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a6a      	ldr	r2, [pc, #424]	; (800241c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d103      	bne.n	800227e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002276:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	e011      	b.n	80022a2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a67      	ldr	r2, [pc, #412]	; (8002420 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d102      	bne.n	800228e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002288:	4b66      	ldr	r3, [pc, #408]	; (8002424 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	e009      	b.n	80022a2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a64      	ldr	r2, [pc, #400]	; (8002424 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d102      	bne.n	800229e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002298:	4b61      	ldr	r3, [pc, #388]	; (8002420 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	e001      	b.n	80022a2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0b0      	b.n	800240e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e0a9      	b.n	800240e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f040 808d 	bne.w	80023ec <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f040 8086 	bne.w	80023ec <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022e8:	d004      	beq.n	80022f4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a4b      	ldr	r2, [pc, #300]	; (800241c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d101      	bne.n	80022f8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80022f4:	4b4c      	ldr	r3, [pc, #304]	; (8002428 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80022f6:	e000      	b.n	80022fa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80022f8:	4b4c      	ldr	r3, [pc, #304]	; (800242c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80022fa:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d040      	beq.n	8002386 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002304:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	6859      	ldr	r1, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002316:	035b      	lsls	r3, r3, #13
 8002318:	430b      	orrs	r3, r1
 800231a:	431a      	orrs	r2, r3
 800231c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800231e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b01      	cmp	r3, #1
 800232c:	d108      	bne.n	8002340 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002340:	2300      	movs	r3, #0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d15c      	bne.n	8002400 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b01      	cmp	r3, #1
 8002350:	d107      	bne.n	8002362 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002362:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002364:	2b00      	cmp	r3, #0
 8002366:	d14b      	bne.n	8002400 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002368:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002370:	f023 030f 	bic.w	r3, r3, #15
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	6811      	ldr	r1, [r2, #0]
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	6892      	ldr	r2, [r2, #8]
 800237c:	430a      	orrs	r2, r1
 800237e:	431a      	orrs	r2, r3
 8002380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002382:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002384:	e03c      	b.n	8002400 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800238e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002390:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d108      	bne.n	80023b2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80023b2:	2300      	movs	r3, #0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d123      	bne.n	8002400 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d107      	bne.n	80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80023d4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d112      	bne.n	8002400 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80023da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023e2:	f023 030f 	bic.w	r3, r3, #15
 80023e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023e8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023ea:	e009      	b.n	8002400 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f043 0220 	orr.w	r2, r3, #32
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80023fe:	e000      	b.n	8002402 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002400:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800240a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800240e:	4618      	mov	r0, r3
 8002410:	3764      	adds	r7, #100	; 0x64
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	50000100 	.word	0x50000100
 8002420:	50000400 	.word	0x50000400
 8002424:	50000500 	.word	0x50000500
 8002428:	50000300 	.word	0x50000300
 800242c:	50000700 	.word	0x50000700

08002430 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002446:	2b00      	cmp	r3, #0
 8002448:	d126      	bne.n	8002498 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002460:	2b00      	cmp	r3, #0
 8002462:	d115      	bne.n	8002490 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002468:	2b00      	cmp	r3, #0
 800246a:	d111      	bne.n	8002490 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d105      	bne.n	8002490 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f043 0201 	orr.w	r2, r3, #1
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f7fe fdc5 	bl	8001020 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002496:	e004      	b.n	80024a2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	4798      	blx	r3
}
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b084      	sub	sp, #16
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f7ff f8b1 	bl	8001620 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	f043 0204 	orr.w	r2, r3, #4
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f7ff f8a1 	bl	8001634 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d108      	bne.n	8002528 <ADC_Enable+0x2c>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <ADC_Enable+0x2c>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <ADC_Enable+0x2e>
 8002528:	2300      	movs	r3, #0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d143      	bne.n	80025b6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <ADC_Enable+0xc4>)
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00d      	beq.n	8002558 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	f043 0210 	orr.w	r2, r3, #16
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254c:	f043 0201 	orr.w	r2, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e02f      	b.n	80025b8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002568:	f7ff f82a 	bl	80015c0 <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800256e:	e01b      	b.n	80025a8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002570:	f7ff f826 	bl	80015c0 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d914      	bls.n	80025a8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b01      	cmp	r3, #1
 800258a:	d00d      	beq.n	80025a8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f043 0210 	orr.w	r2, r3, #16
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259c:	f043 0201 	orr.w	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e007      	b.n	80025b8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d1dc      	bne.n	8002570 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	8000003f 	.word	0x8000003f

080025c4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d108      	bne.n	80025f0 <ADC_Disable+0x2c>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <ADC_Disable+0x2c>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <ADC_Disable+0x2e>
 80025f0:	2300      	movs	r3, #0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d047      	beq.n	8002686 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030d 	and.w	r3, r3, #13
 8002600:	2b01      	cmp	r3, #1
 8002602:	d10f      	bne.n	8002624 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0202 	orr.w	r2, r2, #2
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2203      	movs	r2, #3
 800261a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800261c:	f7fe ffd0 	bl	80015c0 <HAL_GetTick>
 8002620:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002622:	e029      	b.n	8002678 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	f043 0210 	orr.w	r2, r3, #16
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002634:	f043 0201 	orr.w	r2, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e023      	b.n	8002688 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002640:	f7fe ffbe 	bl	80015c0 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d914      	bls.n	8002678 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d10d      	bne.n	8002678 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f043 0210 	orr.w	r2, r3, #16
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	f043 0201 	orr.w	r2, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e007      	b.n	8002688 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b01      	cmp	r3, #1
 8002684:	d0dc      	beq.n	8002640 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ac:	4013      	ands	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026c2:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	60d3      	str	r3, [r2, #12]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <__NVIC_GetPriorityGrouping+0x18>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 0307 	and.w	r3, r3, #7
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	2b00      	cmp	r3, #0
 8002704:	db0b      	blt.n	800271e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	f003 021f 	and.w	r2, r3, #31
 800270c:	4907      	ldr	r1, [pc, #28]	; (800272c <__NVIC_EnableIRQ+0x38>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	2001      	movs	r0, #1
 8002716:	fa00 f202 	lsl.w	r2, r0, r2
 800271a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000e100 	.word	0xe000e100

08002730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	6039      	str	r1, [r7, #0]
 800273a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002740:	2b00      	cmp	r3, #0
 8002742:	db0a      	blt.n	800275a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	490c      	ldr	r1, [pc, #48]	; (800277c <__NVIC_SetPriority+0x4c>)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	0112      	lsls	r2, r2, #4
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	440b      	add	r3, r1
 8002754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002758:	e00a      	b.n	8002770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	b2da      	uxtb	r2, r3
 800275e:	4908      	ldr	r1, [pc, #32]	; (8002780 <__NVIC_SetPriority+0x50>)
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	3b04      	subs	r3, #4
 8002768:	0112      	lsls	r2, r2, #4
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	440b      	add	r3, r1
 800276e:	761a      	strb	r2, [r3, #24]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000e100 	.word	0xe000e100
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	; 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f1c3 0307 	rsb	r3, r3, #7
 800279e:	2b04      	cmp	r3, #4
 80027a0:	bf28      	it	cs
 80027a2:	2304      	movcs	r3, #4
 80027a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3304      	adds	r3, #4
 80027aa:	2b06      	cmp	r3, #6
 80027ac:	d902      	bls.n	80027b4 <NVIC_EncodePriority+0x30>
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3b03      	subs	r3, #3
 80027b2:	e000      	b.n	80027b6 <NVIC_EncodePriority+0x32>
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	f04f 32ff 	mov.w	r2, #4294967295
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43da      	mvns	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	401a      	ands	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027cc:	f04f 31ff 	mov.w	r1, #4294967295
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa01 f303 	lsl.w	r3, r1, r3
 80027d6:	43d9      	mvns	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027dc:	4313      	orrs	r3, r2
         );
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3724      	adds	r7, #36	; 0x24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027fc:	d301      	bcc.n	8002802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027fe:	2301      	movs	r3, #1
 8002800:	e00f      	b.n	8002822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002802:	4a0a      	ldr	r2, [pc, #40]	; (800282c <SysTick_Config+0x40>)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800280a:	210f      	movs	r1, #15
 800280c:	f04f 30ff 	mov.w	r0, #4294967295
 8002810:	f7ff ff8e 	bl	8002730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <SysTick_Config+0x40>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800281a:	4b04      	ldr	r3, [pc, #16]	; (800282c <SysTick_Config+0x40>)
 800281c:	2207      	movs	r2, #7
 800281e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	e000e010 	.word	0xe000e010

08002830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ff29 	bl	8002690 <__NVIC_SetPriorityGrouping>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af00      	add	r7, sp, #0
 800284c:	4603      	mov	r3, r0
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002858:	f7ff ff3e 	bl	80026d8 <__NVIC_GetPriorityGrouping>
 800285c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	6978      	ldr	r0, [r7, #20]
 8002864:	f7ff ff8e 	bl	8002784 <NVIC_EncodePriority>
 8002868:	4602      	mov	r2, r0
 800286a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff5d 	bl	8002730 <__NVIC_SetPriority>
}
 8002876:	bf00      	nop
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	4603      	mov	r3, r0
 8002886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff31 	bl	80026f4 <__NVIC_EnableIRQ>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ffa2 	bl	80027ec <SysTick_Config>
 80028a8:	4603      	mov	r3, r0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e037      	b.n	8002938 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80028e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002904:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4313      	orrs	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f9b8 	bl	8002c90 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}  
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_DMA_Start_IT+0x20>
 800295c:	2302      	movs	r3, #2
 800295e:	e04a      	b.n	80029f6 <HAL_DMA_Start_IT+0xb6>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800296e:	2b01      	cmp	r3, #1
 8002970:	d13a      	bne.n	80029e8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2202      	movs	r2, #2
 8002976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0201 	bic.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f94b 	bl	8002c32 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 020e 	orr.w	r2, r2, #14
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e00f      	b.n	80029d6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 020a 	orr.w	r2, r2, #10
 80029c4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0204 	bic.w	r2, r2, #4
 80029d4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	e005      	b.n	80029f4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80029f0:	2302      	movs	r3, #2
 80029f2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
} 
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d008      	beq.n	8002a22 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2204      	movs	r2, #4
 8002a14:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e020      	b.n	8002a64 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 020e 	bic.w	r2, r2, #14
 8002a30:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0201 	bic.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a50:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d005      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2204      	movs	r2, #4
 8002a8a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
 8002a90:	e027      	b.n	8002ae2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 020e 	bic.w	r2, r2, #14
 8002aa0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0201 	bic.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aba:	2101      	movs	r1, #1
 8002abc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	4798      	blx	r3
    } 
  }
  return status;
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	2204      	movs	r2, #4
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d024      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x72>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01f      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d107      	bne.n	8002b3c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0204 	bic.w	r2, r2, #4
 8002b3a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b44:	2104      	movs	r1, #4
 8002b46:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d06a      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002b5c:	e065      	b.n	8002c2a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	2202      	movs	r2, #2
 8002b64:	409a      	lsls	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d02c      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0xdc>
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d027      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10b      	bne.n	8002b9e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 020a 	bic.w	r2, r2, #10
 8002b94:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bac:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d035      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002bc6:	e030      	b.n	8002c2a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	2208      	movs	r2, #8
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d028      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x13e>
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d023      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 020e 	bic.w	r2, r2, #14
 8002bf0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002c00:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d004      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	4798      	blx	r3
    }
  }
}  
 8002c28:	e7ff      	b.n	8002c2a <HAL_DMA_IRQHandler+0x13e>
 8002c2a:	bf00      	nop
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b085      	sub	sp, #20
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c48:	2101      	movs	r1, #1
 8002c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b10      	cmp	r3, #16
 8002c5e:	d108      	bne.n	8002c72 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c70:	e007      	b.n	8002c82 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	60da      	str	r2, [r3, #12]
}
 8002c82:	bf00      	nop
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
	...

08002c90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <DMA_CalcBaseAndBitshift+0x60>)
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d80f      	bhi.n	8002cc4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <DMA_CalcBaseAndBitshift+0x64>)
 8002cac:	4413      	add	r3, r2
 8002cae:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <DMA_CalcBaseAndBitshift+0x68>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	009a      	lsls	r2, r3, #2
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a0f      	ldr	r2, [pc, #60]	; (8002cfc <DMA_CalcBaseAndBitshift+0x6c>)
 8002cc0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002cc2:	e00e      	b.n	8002ce2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <DMA_CalcBaseAndBitshift+0x70>)
 8002ccc:	4413      	add	r3, r2
 8002cce:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <DMA_CalcBaseAndBitshift+0x68>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	009a      	lsls	r2, r3, #2
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a09      	ldr	r2, [pc, #36]	; (8002d04 <DMA_CalcBaseAndBitshift+0x74>)
 8002ce0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40020407 	.word	0x40020407
 8002cf4:	bffdfff8 	.word	0xbffdfff8
 8002cf8:	cccccccd 	.word	0xcccccccd
 8002cfc:	40020000 	.word	0x40020000
 8002d00:	bffdfbf8 	.word	0xbffdfbf8
 8002d04:	40020400 	.word	0x40020400

08002d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d16:	e160      	b.n	8002fda <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	4013      	ands	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8152 	beq.w	8002fd4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d005      	beq.n	8002d48 <HAL_GPIO_Init+0x40>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d130      	bne.n	8002daa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	2203      	movs	r2, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d7e:	2201      	movs	r2, #1
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	f003 0201 	and.w	r2, r3, #1
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d017      	beq.n	8002de6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d123      	bne.n	8002e3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	08da      	lsrs	r2, r3, #3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3208      	adds	r2, #8
 8002dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	220f      	movs	r2, #15
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	691a      	ldr	r2, [r3, #16]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	08da      	lsrs	r2, r3, #3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3208      	adds	r2, #8
 8002e34:	6939      	ldr	r1, [r7, #16]
 8002e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	2203      	movs	r2, #3
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 0203 	and.w	r2, r3, #3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 80ac 	beq.w	8002fd4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7c:	4b5e      	ldr	r3, [pc, #376]	; (8002ff8 <HAL_GPIO_Init+0x2f0>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	4a5d      	ldr	r2, [pc, #372]	; (8002ff8 <HAL_GPIO_Init+0x2f0>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6193      	str	r3, [r2, #24]
 8002e88:	4b5b      	ldr	r3, [pc, #364]	; (8002ff8 <HAL_GPIO_Init+0x2f0>)
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e94:	4a59      	ldr	r2, [pc, #356]	; (8002ffc <HAL_GPIO_Init+0x2f4>)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	089b      	lsrs	r3, r3, #2
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	220f      	movs	r2, #15
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ebe:	d025      	beq.n	8002f0c <HAL_GPIO_Init+0x204>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a4f      	ldr	r2, [pc, #316]	; (8003000 <HAL_GPIO_Init+0x2f8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d01f      	beq.n	8002f08 <HAL_GPIO_Init+0x200>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a4e      	ldr	r2, [pc, #312]	; (8003004 <HAL_GPIO_Init+0x2fc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d019      	beq.n	8002f04 <HAL_GPIO_Init+0x1fc>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a4d      	ldr	r2, [pc, #308]	; (8003008 <HAL_GPIO_Init+0x300>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d013      	beq.n	8002f00 <HAL_GPIO_Init+0x1f8>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a4c      	ldr	r2, [pc, #304]	; (800300c <HAL_GPIO_Init+0x304>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00d      	beq.n	8002efc <HAL_GPIO_Init+0x1f4>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a4b      	ldr	r2, [pc, #300]	; (8003010 <HAL_GPIO_Init+0x308>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d007      	beq.n	8002ef8 <HAL_GPIO_Init+0x1f0>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a4a      	ldr	r2, [pc, #296]	; (8003014 <HAL_GPIO_Init+0x30c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <HAL_GPIO_Init+0x1ec>
 8002ef0:	2306      	movs	r3, #6
 8002ef2:	e00c      	b.n	8002f0e <HAL_GPIO_Init+0x206>
 8002ef4:	2307      	movs	r3, #7
 8002ef6:	e00a      	b.n	8002f0e <HAL_GPIO_Init+0x206>
 8002ef8:	2305      	movs	r3, #5
 8002efa:	e008      	b.n	8002f0e <HAL_GPIO_Init+0x206>
 8002efc:	2304      	movs	r3, #4
 8002efe:	e006      	b.n	8002f0e <HAL_GPIO_Init+0x206>
 8002f00:	2303      	movs	r3, #3
 8002f02:	e004      	b.n	8002f0e <HAL_GPIO_Init+0x206>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e002      	b.n	8002f0e <HAL_GPIO_Init+0x206>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <HAL_GPIO_Init+0x206>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	f002 0203 	and.w	r2, r2, #3
 8002f14:	0092      	lsls	r2, r2, #2
 8002f16:	4093      	lsls	r3, r2
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f1e:	4937      	ldr	r1, [pc, #220]	; (8002ffc <HAL_GPIO_Init+0x2f4>)
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	089b      	lsrs	r3, r3, #2
 8002f24:	3302      	adds	r3, #2
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f2c:	4b3a      	ldr	r3, [pc, #232]	; (8003018 <HAL_GPIO_Init+0x310>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f50:	4a31      	ldr	r2, [pc, #196]	; (8003018 <HAL_GPIO_Init+0x310>)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f56:	4b30      	ldr	r3, [pc, #192]	; (8003018 <HAL_GPIO_Init+0x310>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4013      	ands	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f7a:	4a27      	ldr	r2, [pc, #156]	; (8003018 <HAL_GPIO_Init+0x310>)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f80:	4b25      	ldr	r3, [pc, #148]	; (8003018 <HAL_GPIO_Init+0x310>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fa4:	4a1c      	ldr	r2, [pc, #112]	; (8003018 <HAL_GPIO_Init+0x310>)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002faa:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <HAL_GPIO_Init+0x310>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002fce:	4a12      	ldr	r2, [pc, #72]	; (8003018 <HAL_GPIO_Init+0x310>)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f47f ae97 	bne.w	8002d18 <HAL_GPIO_Init+0x10>
  }
}
 8002fea:	bf00      	nop
 8002fec:	bf00      	nop
 8002fee:	371c      	adds	r7, #28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40010000 	.word	0x40010000
 8003000:	48000400 	.word	0x48000400
 8003004:	48000800 	.word	0x48000800
 8003008:	48000c00 	.word	0x48000c00
 800300c:	48001000 	.word	0x48001000
 8003010:	48001400 	.word	0x48001400
 8003014:	48001800 	.word	0x48001800
 8003018:	40010400 	.word	0x40010400

0800301c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	887b      	ldrh	r3, [r7, #2]
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003034:	2301      	movs	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
 8003038:	e001      	b.n	800303e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800303e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	807b      	strh	r3, [r7, #2]
 8003058:	4613      	mov	r3, r2
 800305a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800305c:	787b      	ldrb	r3, [r7, #1]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003062:	887a      	ldrh	r2, [r7, #2]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003068:	e002      	b.n	8003070 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800306a:	887a      	ldrh	r2, [r7, #2]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003086:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003088:	695a      	ldr	r2, [r3, #20]
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d006      	beq.n	80030a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003092:	4a05      	ldr	r2, [pc, #20]	; (80030a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	4618      	mov	r0, r3
 800309c:	f000 f806 	bl	80030ac <HAL_GPIO_EXTI_Callback>
  }
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40010400 	.word	0x40010400

080030ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	f001 b83a 	b.w	800415e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 816f 	beq.w	80033de <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003100:	4bb5      	ldr	r3, [pc, #724]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	2b04      	cmp	r3, #4
 800310a:	d00c      	beq.n	8003126 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800310c:	4bb2      	ldr	r3, [pc, #712]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b08      	cmp	r3, #8
 8003116:	d15c      	bne.n	80031d2 <HAL_RCC_OscConfig+0x10e>
 8003118:	4baf      	ldr	r3, [pc, #700]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003124:	d155      	bne.n	80031d2 <HAL_RCC_OscConfig+0x10e>
 8003126:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800312a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003132:	fa93 f3a3 	rbit	r3, r3
 8003136:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800313a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d102      	bne.n	8003158 <HAL_RCC_OscConfig+0x94>
 8003152:	4ba1      	ldr	r3, [pc, #644]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	e015      	b.n	8003184 <HAL_RCC_OscConfig+0xc0>
 8003158:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800315c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003164:	fa93 f3a3 	rbit	r3, r3
 8003168:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800316c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003170:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003174:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003180:	4b95      	ldr	r3, [pc, #596]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003188:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800318c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003190:	fa92 f2a2 	rbit	r2, r2
 8003194:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003198:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800319c:	fab2 f282 	clz	r2, r2
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	f042 0220 	orr.w	r2, r2, #32
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	f002 021f 	and.w	r2, r2, #31
 80031ac:	2101      	movs	r1, #1
 80031ae:	fa01 f202 	lsl.w	r2, r1, r2
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 8111 	beq.w	80033dc <HAL_RCC_OscConfig+0x318>
 80031ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f040 8108 	bne.w	80033dc <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f000 bfc6 	b.w	800415e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e2:	d106      	bne.n	80031f2 <HAL_RCC_OscConfig+0x12e>
 80031e4:	4b7c      	ldr	r3, [pc, #496]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a7b      	ldr	r2, [pc, #492]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 80031ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	e036      	b.n	8003260 <HAL_RCC_OscConfig+0x19c>
 80031f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10c      	bne.n	800321c <HAL_RCC_OscConfig+0x158>
 8003202:	4b75      	ldr	r3, [pc, #468]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a74      	ldr	r2, [pc, #464]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 8003208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	4b72      	ldr	r3, [pc, #456]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a71      	ldr	r2, [pc, #452]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 8003214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e021      	b.n	8003260 <HAL_RCC_OscConfig+0x19c>
 800321c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003220:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0x184>
 800322e:	4b6a      	ldr	r3, [pc, #424]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a69      	ldr	r2, [pc, #420]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 8003234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	4b67      	ldr	r3, [pc, #412]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a66      	ldr	r2, [pc, #408]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 8003240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	e00b      	b.n	8003260 <HAL_RCC_OscConfig+0x19c>
 8003248:	4b63      	ldr	r3, [pc, #396]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a62      	ldr	r2, [pc, #392]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 800324e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	4b60      	ldr	r3, [pc, #384]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a5f      	ldr	r2, [pc, #380]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 800325a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800325e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003264:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d059      	beq.n	8003324 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7fe f9a6 	bl	80015c0 <HAL_GetTick>
 8003274:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003278:	e00a      	b.n	8003290 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800327a:	f7fe f9a1 	bl	80015c0 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d902      	bls.n	8003290 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	f000 bf67 	b.w	800415e <HAL_RCC_OscConfig+0x109a>
 8003290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003294:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003298:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800329c:	fa93 f3a3 	rbit	r3, r3
 80032a0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80032a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d102      	bne.n	80032c2 <HAL_RCC_OscConfig+0x1fe>
 80032bc:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	e015      	b.n	80032ee <HAL_RCC_OscConfig+0x22a>
 80032c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032c6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80032ce:	fa93 f3a3 	rbit	r3, r3
 80032d2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80032d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032da:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80032de:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80032ea:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032f2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80032f6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80032fa:	fa92 f2a2 	rbit	r2, r2
 80032fe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003302:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003306:	fab2 f282 	clz	r2, r2
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	f042 0220 	orr.w	r2, r2, #32
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	f002 021f 	and.w	r2, r2, #31
 8003316:	2101      	movs	r1, #1
 8003318:	fa01 f202 	lsl.w	r2, r1, r2
 800331c:	4013      	ands	r3, r2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0ab      	beq.n	800327a <HAL_RCC_OscConfig+0x1b6>
 8003322:	e05c      	b.n	80033de <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003324:	f7fe f94c 	bl	80015c0 <HAL_GetTick>
 8003328:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332c:	e00a      	b.n	8003344 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800332e:	f7fe f947 	bl	80015c0 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b64      	cmp	r3, #100	; 0x64
 800333c:	d902      	bls.n	8003344 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	f000 bf0d 	b.w	800415e <HAL_RCC_OscConfig+0x109a>
 8003344:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003348:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003350:	fa93 f3a3 	rbit	r3, r3
 8003354:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003358:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335c:	fab3 f383 	clz	r3, r3
 8003360:	b2db      	uxtb	r3, r3
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	b2db      	uxtb	r3, r3
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d102      	bne.n	8003376 <HAL_RCC_OscConfig+0x2b2>
 8003370:	4b19      	ldr	r3, [pc, #100]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	e015      	b.n	80033a2 <HAL_RCC_OscConfig+0x2de>
 8003376:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800337a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003382:	fa93 f3a3 	rbit	r3, r3
 8003386:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800338a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800338e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003392:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800339e:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <HAL_RCC_OscConfig+0x314>)
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033a6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80033aa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80033ae:	fa92 f2a2 	rbit	r2, r2
 80033b2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80033b6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80033ba:	fab2 f282 	clz	r2, r2
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	f042 0220 	orr.w	r2, r2, #32
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	f002 021f 	and.w	r2, r2, #31
 80033ca:	2101      	movs	r1, #1
 80033cc:	fa01 f202 	lsl.w	r2, r1, r2
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1ab      	bne.n	800332e <HAL_RCC_OscConfig+0x26a>
 80033d6:	e002      	b.n	80033de <HAL_RCC_OscConfig+0x31a>
 80033d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 817f 	beq.w	80036f2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80033f4:	4ba7      	ldr	r3, [pc, #668]	; (8003694 <HAL_RCC_OscConfig+0x5d0>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 030c 	and.w	r3, r3, #12
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00c      	beq.n	800341a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003400:	4ba4      	ldr	r3, [pc, #656]	; (8003694 <HAL_RCC_OscConfig+0x5d0>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 030c 	and.w	r3, r3, #12
 8003408:	2b08      	cmp	r3, #8
 800340a:	d173      	bne.n	80034f4 <HAL_RCC_OscConfig+0x430>
 800340c:	4ba1      	ldr	r3, [pc, #644]	; (8003694 <HAL_RCC_OscConfig+0x5d0>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003418:	d16c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x430>
 800341a:	2302      	movs	r3, #2
 800341c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003420:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003424:	fa93 f3a3 	rbit	r3, r3
 8003428:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800342c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003430:	fab3 f383 	clz	r3, r3
 8003434:	b2db      	uxtb	r3, r3
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b01      	cmp	r3, #1
 8003442:	d102      	bne.n	800344a <HAL_RCC_OscConfig+0x386>
 8003444:	4b93      	ldr	r3, [pc, #588]	; (8003694 <HAL_RCC_OscConfig+0x5d0>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	e013      	b.n	8003472 <HAL_RCC_OscConfig+0x3ae>
 800344a:	2302      	movs	r3, #2
 800344c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003454:	fa93 f3a3 	rbit	r3, r3
 8003458:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800345c:	2302      	movs	r3, #2
 800345e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003462:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800346e:	4b89      	ldr	r3, [pc, #548]	; (8003694 <HAL_RCC_OscConfig+0x5d0>)
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	2202      	movs	r2, #2
 8003474:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003478:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800347c:	fa92 f2a2 	rbit	r2, r2
 8003480:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003484:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003488:	fab2 f282 	clz	r2, r2
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	f042 0220 	orr.w	r2, r2, #32
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	f002 021f 	and.w	r2, r2, #31
 8003498:	2101      	movs	r1, #1
 800349a:	fa01 f202 	lsl.w	r2, r1, r2
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCC_OscConfig+0x3f6>
 80034a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d002      	beq.n	80034ba <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f000 be52 	b.w	800415e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ba:	4b76      	ldr	r3, [pc, #472]	; (8003694 <HAL_RCC_OscConfig+0x5d0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	21f8      	movs	r1, #248	; 0xf8
 80034d0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80034d8:	fa91 f1a1 	rbit	r1, r1
 80034dc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80034e0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80034e4:	fab1 f181 	clz	r1, r1
 80034e8:	b2c9      	uxtb	r1, r1
 80034ea:	408b      	lsls	r3, r1
 80034ec:	4969      	ldr	r1, [pc, #420]	; (8003694 <HAL_RCC_OscConfig+0x5d0>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f2:	e0fe      	b.n	80036f2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8088 	beq.w	8003616 <HAL_RCC_OscConfig+0x552>
 8003506:	2301      	movs	r3, #1
 8003508:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003510:	fa93 f3a3 	rbit	r3, r3
 8003514:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003518:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800351c:	fab3 f383 	clz	r3, r3
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003526:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	461a      	mov	r2, r3
 800352e:	2301      	movs	r3, #1
 8003530:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003532:	f7fe f845 	bl	80015c0 <HAL_GetTick>
 8003536:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353a:	e00a      	b.n	8003552 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800353c:	f7fe f840 	bl	80015c0 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d902      	bls.n	8003552 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	f000 be06 	b.w	800415e <HAL_RCC_OscConfig+0x109a>
 8003552:	2302      	movs	r3, #2
 8003554:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800355c:	fa93 f3a3 	rbit	r3, r3
 8003560:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003564:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003568:	fab3 f383 	clz	r3, r3
 800356c:	b2db      	uxtb	r3, r3
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	b2db      	uxtb	r3, r3
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b01      	cmp	r3, #1
 800357a:	d102      	bne.n	8003582 <HAL_RCC_OscConfig+0x4be>
 800357c:	4b45      	ldr	r3, [pc, #276]	; (8003694 <HAL_RCC_OscConfig+0x5d0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	e013      	b.n	80035aa <HAL_RCC_OscConfig+0x4e6>
 8003582:	2302      	movs	r3, #2
 8003584:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800358c:	fa93 f3a3 	rbit	r3, r3
 8003590:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003594:	2302      	movs	r3, #2
 8003596:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800359a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800359e:	fa93 f3a3 	rbit	r3, r3
 80035a2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80035a6:	4b3b      	ldr	r3, [pc, #236]	; (8003694 <HAL_RCC_OscConfig+0x5d0>)
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	2202      	movs	r2, #2
 80035ac:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80035b0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80035b4:	fa92 f2a2 	rbit	r2, r2
 80035b8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80035bc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80035c0:	fab2 f282 	clz	r2, r2
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	f042 0220 	orr.w	r2, r2, #32
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	f002 021f 	and.w	r2, r2, #31
 80035d0:	2101      	movs	r1, #1
 80035d2:	fa01 f202 	lsl.w	r2, r1, r2
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0af      	beq.n	800353c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035dc:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <HAL_RCC_OscConfig+0x5d0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	21f8      	movs	r1, #248	; 0xf8
 80035f2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80035fa:	fa91 f1a1 	rbit	r1, r1
 80035fe:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003602:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003606:	fab1 f181 	clz	r1, r1
 800360a:	b2c9      	uxtb	r1, r1
 800360c:	408b      	lsls	r3, r1
 800360e:	4921      	ldr	r1, [pc, #132]	; (8003694 <HAL_RCC_OscConfig+0x5d0>)
 8003610:	4313      	orrs	r3, r2
 8003612:	600b      	str	r3, [r1, #0]
 8003614:	e06d      	b.n	80036f2 <HAL_RCC_OscConfig+0x62e>
 8003616:	2301      	movs	r3, #1
 8003618:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003628:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800362c:	fab3 f383 	clz	r3, r3
 8003630:	b2db      	uxtb	r3, r3
 8003632:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003636:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	461a      	mov	r2, r3
 800363e:	2300      	movs	r3, #0
 8003640:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003642:	f7fd ffbd 	bl	80015c0 <HAL_GetTick>
 8003646:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800364a:	e00a      	b.n	8003662 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800364c:	f7fd ffb8 	bl	80015c0 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d902      	bls.n	8003662 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	f000 bd7e 	b.w	800415e <HAL_RCC_OscConfig+0x109a>
 8003662:	2302      	movs	r3, #2
 8003664:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003668:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800366c:	fa93 f3a3 	rbit	r3, r3
 8003670:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003674:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003678:	fab3 f383 	clz	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d105      	bne.n	8003698 <HAL_RCC_OscConfig+0x5d4>
 800368c:	4b01      	ldr	r3, [pc, #4]	; (8003694 <HAL_RCC_OscConfig+0x5d0>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	e016      	b.n	80036c0 <HAL_RCC_OscConfig+0x5fc>
 8003692:	bf00      	nop
 8003694:	40021000 	.word	0x40021000
 8003698:	2302      	movs	r3, #2
 800369a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036a2:	fa93 f3a3 	rbit	r3, r3
 80036a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80036aa:	2302      	movs	r3, #2
 80036ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80036b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80036bc:	4bbf      	ldr	r3, [pc, #764]	; (80039bc <HAL_RCC_OscConfig+0x8f8>)
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	2202      	movs	r2, #2
 80036c2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80036c6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80036ca:	fa92 f2a2 	rbit	r2, r2
 80036ce:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80036d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80036d6:	fab2 f282 	clz	r2, r2
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	f042 0220 	orr.w	r2, r2, #32
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	f002 021f 	and.w	r2, r2, #31
 80036e6:	2101      	movs	r1, #1
 80036e8:	fa01 f202 	lsl.w	r2, r1, r2
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1ac      	bne.n	800364c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8113 	beq.w	800392e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003708:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800370c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d07c      	beq.n	8003812 <HAL_RCC_OscConfig+0x74e>
 8003718:	2301      	movs	r3, #1
 800371a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003722:	fa93 f3a3 	rbit	r3, r3
 8003726:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800372a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	4ba2      	ldr	r3, [pc, #648]	; (80039c0 <HAL_RCC_OscConfig+0x8fc>)
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	461a      	mov	r2, r3
 800373e:	2301      	movs	r3, #1
 8003740:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003742:	f7fd ff3d 	bl	80015c0 <HAL_GetTick>
 8003746:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374a:	e00a      	b.n	8003762 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800374c:	f7fd ff38 	bl	80015c0 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d902      	bls.n	8003762 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	f000 bcfe 	b.w	800415e <HAL_RCC_OscConfig+0x109a>
 8003762:	2302      	movs	r3, #2
 8003764:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800376c:	fa93 f2a3 	rbit	r2, r3
 8003770:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003774:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800377e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003782:	2202      	movs	r2, #2
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800378a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	fa93 f2a3 	rbit	r2, r3
 8003794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037a6:	2202      	movs	r2, #2
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	fa93 f2a3 	rbit	r2, r3
 80037b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80037c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c2:	4b7e      	ldr	r3, [pc, #504]	; (80039bc <HAL_RCC_OscConfig+0x8f8>)
 80037c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80037ce:	2102      	movs	r1, #2
 80037d0:	6019      	str	r1, [r3, #0]
 80037d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	fa93 f1a3 	rbit	r1, r3
 80037e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037e8:	6019      	str	r1, [r3, #0]
  return result;
 80037ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ee:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	fab3 f383 	clz	r3, r3
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f003 031f 	and.w	r3, r3, #31
 8003804:	2101      	movs	r1, #1
 8003806:	fa01 f303 	lsl.w	r3, r1, r3
 800380a:	4013      	ands	r3, r2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d09d      	beq.n	800374c <HAL_RCC_OscConfig+0x688>
 8003810:	e08d      	b.n	800392e <HAL_RCC_OscConfig+0x86a>
 8003812:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003816:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800381a:	2201      	movs	r2, #1
 800381c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003822:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	fa93 f2a3 	rbit	r2, r3
 800382c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003830:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003834:	601a      	str	r2, [r3, #0]
  return result;
 8003836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800383a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800383e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003840:	fab3 f383 	clz	r3, r3
 8003844:	b2db      	uxtb	r3, r3
 8003846:	461a      	mov	r2, r3
 8003848:	4b5d      	ldr	r3, [pc, #372]	; (80039c0 <HAL_RCC_OscConfig+0x8fc>)
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	461a      	mov	r2, r3
 8003850:	2300      	movs	r3, #0
 8003852:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003854:	f7fd feb4 	bl	80015c0 <HAL_GetTick>
 8003858:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800385c:	e00a      	b.n	8003874 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800385e:	f7fd feaf 	bl	80015c0 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d902      	bls.n	8003874 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	f000 bc75 	b.w	800415e <HAL_RCC_OscConfig+0x109a>
 8003874:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003878:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800387c:	2202      	movs	r2, #2
 800387e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003884:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	fa93 f2a3 	rbit	r2, r3
 800388e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003892:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800389c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038a0:	2202      	movs	r2, #2
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	fa93 f2a3 	rbit	r2, r3
 80038b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80038c4:	2202      	movs	r2, #2
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	fa93 f2a3 	rbit	r2, r3
 80038d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80038de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e0:	4b36      	ldr	r3, [pc, #216]	; (80039bc <HAL_RCC_OscConfig+0x8f8>)
 80038e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038ec:	2102      	movs	r1, #2
 80038ee:	6019      	str	r1, [r3, #0]
 80038f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	fa93 f1a3 	rbit	r1, r3
 80038fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003902:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003906:	6019      	str	r1, [r3, #0]
  return result;
 8003908:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800390c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	fab3 f383 	clz	r3, r3
 8003916:	b2db      	uxtb	r3, r3
 8003918:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f003 031f 	and.w	r3, r3, #31
 8003922:	2101      	movs	r1, #1
 8003924:	fa01 f303 	lsl.w	r3, r1, r3
 8003928:	4013      	ands	r3, r2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d197      	bne.n	800385e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800392e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003932:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 81a5 	beq.w	8003c8e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003944:	2300      	movs	r3, #0
 8003946:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800394a:	4b1c      	ldr	r3, [pc, #112]	; (80039bc <HAL_RCC_OscConfig+0x8f8>)
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d116      	bne.n	8003984 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003956:	4b19      	ldr	r3, [pc, #100]	; (80039bc <HAL_RCC_OscConfig+0x8f8>)
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	4a18      	ldr	r2, [pc, #96]	; (80039bc <HAL_RCC_OscConfig+0x8f8>)
 800395c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003960:	61d3      	str	r3, [r2, #28]
 8003962:	4b16      	ldr	r3, [pc, #88]	; (80039bc <HAL_RCC_OscConfig+0x8f8>)
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800396a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800396e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003978:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800397c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800397e:	2301      	movs	r3, #1
 8003980:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003984:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <HAL_RCC_OscConfig+0x900>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d121      	bne.n	80039d4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003990:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <HAL_RCC_OscConfig+0x900>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a0b      	ldr	r2, [pc, #44]	; (80039c4 <HAL_RCC_OscConfig+0x900>)
 8003996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800399c:	f7fd fe10 	bl	80015c0 <HAL_GetTick>
 80039a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a4:	e010      	b.n	80039c8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a6:	f7fd fe0b 	bl	80015c0 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	; 0x64
 80039b4:	d908      	bls.n	80039c8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e3d1      	b.n	800415e <HAL_RCC_OscConfig+0x109a>
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000
 80039c0:	10908120 	.word	0x10908120
 80039c4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c8:	4b8d      	ldr	r3, [pc, #564]	; (8003c00 <HAL_RCC_OscConfig+0xb3c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0e8      	beq.n	80039a6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d106      	bne.n	80039f2 <HAL_RCC_OscConfig+0x92e>
 80039e4:	4b87      	ldr	r3, [pc, #540]	; (8003c04 <HAL_RCC_OscConfig+0xb40>)
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4a86      	ldr	r2, [pc, #536]	; (8003c04 <HAL_RCC_OscConfig+0xb40>)
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	6213      	str	r3, [r2, #32]
 80039f0:	e035      	b.n	8003a5e <HAL_RCC_OscConfig+0x99a>
 80039f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10c      	bne.n	8003a1c <HAL_RCC_OscConfig+0x958>
 8003a02:	4b80      	ldr	r3, [pc, #512]	; (8003c04 <HAL_RCC_OscConfig+0xb40>)
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	4a7f      	ldr	r2, [pc, #508]	; (8003c04 <HAL_RCC_OscConfig+0xb40>)
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	6213      	str	r3, [r2, #32]
 8003a0e:	4b7d      	ldr	r3, [pc, #500]	; (8003c04 <HAL_RCC_OscConfig+0xb40>)
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	4a7c      	ldr	r2, [pc, #496]	; (8003c04 <HAL_RCC_OscConfig+0xb40>)
 8003a14:	f023 0304 	bic.w	r3, r3, #4
 8003a18:	6213      	str	r3, [r2, #32]
 8003a1a:	e020      	b.n	8003a5e <HAL_RCC_OscConfig+0x99a>
 8003a1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b05      	cmp	r3, #5
 8003a2a:	d10c      	bne.n	8003a46 <HAL_RCC_OscConfig+0x982>
 8003a2c:	4b75      	ldr	r3, [pc, #468]	; (8003c04 <HAL_RCC_OscConfig+0xb40>)
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	4a74      	ldr	r2, [pc, #464]	; (8003c04 <HAL_RCC_OscConfig+0xb40>)
 8003a32:	f043 0304 	orr.w	r3, r3, #4
 8003a36:	6213      	str	r3, [r2, #32]
 8003a38:	4b72      	ldr	r3, [pc, #456]	; (8003c04 <HAL_RCC_OscConfig+0xb40>)
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	4a71      	ldr	r2, [pc, #452]	; (8003c04 <HAL_RCC_OscConfig+0xb40>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	6213      	str	r3, [r2, #32]
 8003a44:	e00b      	b.n	8003a5e <HAL_RCC_OscConfig+0x99a>
 8003a46:	4b6f      	ldr	r3, [pc, #444]	; (8003c04 <HAL_RCC_OscConfig+0xb40>)
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	4a6e      	ldr	r2, [pc, #440]	; (8003c04 <HAL_RCC_OscConfig+0xb40>)
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	6213      	str	r3, [r2, #32]
 8003a52:	4b6c      	ldr	r3, [pc, #432]	; (8003c04 <HAL_RCC_OscConfig+0xb40>)
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	4a6b      	ldr	r2, [pc, #428]	; (8003c04 <HAL_RCC_OscConfig+0xb40>)
 8003a58:	f023 0304 	bic.w	r3, r3, #4
 8003a5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 8081 	beq.w	8003b72 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a70:	f7fd fda6 	bl	80015c0 <HAL_GetTick>
 8003a74:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a78:	e00b      	b.n	8003a92 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a7a:	f7fd fda1 	bl	80015c0 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e365      	b.n	800415e <HAL_RCC_OscConfig+0x109a>
 8003a92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a96:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aa2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	fa93 f2a3 	rbit	r2, r3
 8003aac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ab0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003abe:	2202      	movs	r2, #2
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ac6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	fa93 f2a3 	rbit	r2, r3
 8003ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ad4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003ad8:	601a      	str	r2, [r3, #0]
  return result;
 8003ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ade:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003ae2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae4:	fab3 f383 	clz	r3, r3
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f043 0302 	orr.w	r3, r3, #2
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d102      	bne.n	8003afe <HAL_RCC_OscConfig+0xa3a>
 8003af8:	4b42      	ldr	r3, [pc, #264]	; (8003c04 <HAL_RCC_OscConfig+0xb40>)
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	e013      	b.n	8003b26 <HAL_RCC_OscConfig+0xa62>
 8003afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b02:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b06:	2202      	movs	r2, #2
 8003b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b0e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	fa93 f2a3 	rbit	r2, r3
 8003b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b1c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	4b38      	ldr	r3, [pc, #224]	; (8003c04 <HAL_RCC_OscConfig+0xb40>)
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b2a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b2e:	2102      	movs	r1, #2
 8003b30:	6011      	str	r1, [r2, #0]
 8003b32:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b36:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	fa92 f1a2 	rbit	r1, r2
 8003b40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b44:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003b48:	6011      	str	r1, [r2, #0]
  return result;
 8003b4a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b4e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003b52:	6812      	ldr	r2, [r2, #0]
 8003b54:	fab2 f282 	clz	r2, r2
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	f002 021f 	and.w	r2, r2, #31
 8003b64:	2101      	movs	r1, #1
 8003b66:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d084      	beq.n	8003a7a <HAL_RCC_OscConfig+0x9b6>
 8003b70:	e083      	b.n	8003c7a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b72:	f7fd fd25 	bl	80015c0 <HAL_GetTick>
 8003b76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7a:	e00b      	b.n	8003b94 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7c:	f7fd fd20 	bl	80015c0 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e2e4      	b.n	800415e <HAL_RCC_OscConfig+0x109a>
 8003b94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b98:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ba4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	fa93 f2a3 	rbit	r2, r3
 8003bae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bb2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bbc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bc8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	fa93 f2a3 	rbit	r2, r3
 8003bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bd6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003bda:	601a      	str	r2, [r3, #0]
  return result;
 8003bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003be0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003be4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be6:	fab3 f383 	clz	r3, r3
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f043 0302 	orr.w	r3, r3, #2
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCC_OscConfig+0xb44>
 8003bfa:	4b02      	ldr	r3, [pc, #8]	; (8003c04 <HAL_RCC_OscConfig+0xb40>)
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	e017      	b.n	8003c30 <HAL_RCC_OscConfig+0xb6c>
 8003c00:	40007000 	.word	0x40007000
 8003c04:	40021000 	.word	0x40021000
 8003c08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c0c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c10:	2202      	movs	r2, #2
 8003c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c18:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	fa93 f2a3 	rbit	r2, r3
 8003c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c26:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	4bb3      	ldr	r3, [pc, #716]	; (8003efc <HAL_RCC_OscConfig+0xe38>)
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c34:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c38:	2102      	movs	r1, #2
 8003c3a:	6011      	str	r1, [r2, #0]
 8003c3c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c40:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	fa92 f1a2 	rbit	r1, r2
 8003c4a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c4e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003c52:	6011      	str	r1, [r2, #0]
  return result;
 8003c54:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c58:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003c5c:	6812      	ldr	r2, [r2, #0]
 8003c5e:	fab2 f282 	clz	r2, r2
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	f002 021f 	and.w	r2, r2, #31
 8003c6e:	2101      	movs	r1, #1
 8003c70:	fa01 f202 	lsl.w	r2, r1, r2
 8003c74:	4013      	ands	r3, r2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d180      	bne.n	8003b7c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c7a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d105      	bne.n	8003c8e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c82:	4b9e      	ldr	r3, [pc, #632]	; (8003efc <HAL_RCC_OscConfig+0xe38>)
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	4a9d      	ldr	r2, [pc, #628]	; (8003efc <HAL_RCC_OscConfig+0xe38>)
 8003c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 825e 	beq.w	800415c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ca0:	4b96      	ldr	r3, [pc, #600]	; (8003efc <HAL_RCC_OscConfig+0xe38>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 030c 	and.w	r3, r3, #12
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	f000 821f 	beq.w	80040ec <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	f040 8170 	bne.w	8003fa0 <HAL_RCC_OscConfig+0xedc>
 8003cc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cc4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003cc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cd2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	fa93 f2a3 	rbit	r2, r3
 8003cdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ce0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003ce4:	601a      	str	r2, [r3, #0]
  return result;
 8003ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003cee:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf0:	fab3 f383 	clz	r3, r3
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cfa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	461a      	mov	r2, r3
 8003d02:	2300      	movs	r3, #0
 8003d04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d06:	f7fd fc5b 	bl	80015c0 <HAL_GetTick>
 8003d0a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d0e:	e009      	b.n	8003d24 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d10:	f7fd fc56 	bl	80015c0 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e21c      	b.n	800415e <HAL_RCC_OscConfig+0x109a>
 8003d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d28:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d36:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	fa93 f2a3 	rbit	r2, r3
 8003d40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d44:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d48:	601a      	str	r2, [r3, #0]
  return result;
 8003d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d4e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d52:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d54:	fab3 f383 	clz	r3, r3
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d102      	bne.n	8003d6e <HAL_RCC_OscConfig+0xcaa>
 8003d68:	4b64      	ldr	r3, [pc, #400]	; (8003efc <HAL_RCC_OscConfig+0xe38>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	e027      	b.n	8003dbe <HAL_RCC_OscConfig+0xcfa>
 8003d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d72:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d80:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	fa93 f2a3 	rbit	r2, r3
 8003d8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d8e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d98:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003d9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003da6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	fa93 f2a3 	rbit	r2, r3
 8003db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003db4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	4b50      	ldr	r3, [pc, #320]	; (8003efc <HAL_RCC_OscConfig+0xe38>)
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003dc2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003dc6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003dca:	6011      	str	r1, [r2, #0]
 8003dcc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003dd0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	fa92 f1a2 	rbit	r1, r2
 8003dda:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003dde:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003de2:	6011      	str	r1, [r2, #0]
  return result;
 8003de4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003de8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	fab2 f282 	clz	r2, r2
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	f042 0220 	orr.w	r2, r2, #32
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	f002 021f 	and.w	r2, r2, #31
 8003dfe:	2101      	movs	r1, #1
 8003e00:	fa01 f202 	lsl.w	r2, r1, r2
 8003e04:	4013      	ands	r3, r2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d182      	bne.n	8003d10 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e0a:	4b3c      	ldr	r3, [pc, #240]	; (8003efc <HAL_RCC_OscConfig+0xe38>)
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	f023 020f 	bic.w	r2, r3, #15
 8003e12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	4937      	ldr	r1, [pc, #220]	; (8003efc <HAL_RCC_OscConfig+0xe38>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003e24:	4b35      	ldr	r3, [pc, #212]	; (8003efc <HAL_RCC_OscConfig+0xe38>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6a19      	ldr	r1, [r3, #32]
 8003e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	430b      	orrs	r3, r1
 8003e46:	492d      	ldr	r1, [pc, #180]	; (8003efc <HAL_RCC_OscConfig+0xe38>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	604b      	str	r3, [r1, #4]
 8003e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e50:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e5e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	fa93 f2a3 	rbit	r2, r3
 8003e68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e6c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e70:	601a      	str	r2, [r3, #0]
  return result;
 8003e72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e76:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e7a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e7c:	fab3 f383 	clz	r3, r3
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2301      	movs	r3, #1
 8003e90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e92:	f7fd fb95 	bl	80015c0 <HAL_GetTick>
 8003e96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e9a:	e009      	b.n	8003eb0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fd fb90 	bl	80015c0 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e156      	b.n	800415e <HAL_RCC_OscConfig+0x109a>
 8003eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eb4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003eb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ebc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ec2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	fa93 f2a3 	rbit	r2, r3
 8003ecc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ed0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003ed4:	601a      	str	r2, [r3, #0]
  return result;
 8003ed6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eda:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003ede:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ee0:	fab3 f383 	clz	r3, r3
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d105      	bne.n	8003f00 <HAL_RCC_OscConfig+0xe3c>
 8003ef4:	4b01      	ldr	r3, [pc, #4]	; (8003efc <HAL_RCC_OscConfig+0xe38>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	e02a      	b.n	8003f50 <HAL_RCC_OscConfig+0xe8c>
 8003efa:	bf00      	nop
 8003efc:	40021000 	.word	0x40021000
 8003f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f04:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f12:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	fa93 f2a3 	rbit	r2, r3
 8003f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f20:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f2a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f38:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	fa93 f2a3 	rbit	r2, r3
 8003f42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f46:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	4b86      	ldr	r3, [pc, #536]	; (8004168 <HAL_RCC_OscConfig+0x10a4>)
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f54:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f5c:	6011      	str	r1, [r2, #0]
 8003f5e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f62:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f66:	6812      	ldr	r2, [r2, #0]
 8003f68:	fa92 f1a2 	rbit	r1, r2
 8003f6c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f70:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003f74:	6011      	str	r1, [r2, #0]
  return result;
 8003f76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f7a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	fab2 f282 	clz	r2, r2
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	f042 0220 	orr.w	r2, r2, #32
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	f002 021f 	and.w	r2, r2, #31
 8003f90:	2101      	movs	r1, #1
 8003f92:	fa01 f202 	lsl.w	r2, r1, r2
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f43f af7f 	beq.w	8003e9c <HAL_RCC_OscConfig+0xdd8>
 8003f9e:	e0dd      	b.n	800415c <HAL_RCC_OscConfig+0x1098>
 8003fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fa4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fb2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	fa93 f2a3 	rbit	r2, r3
 8003fbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fc0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003fc4:	601a      	str	r2, [r3, #0]
  return result;
 8003fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fca:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003fce:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd0:	fab3 f383 	clz	r3, r3
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe6:	f7fd faeb 	bl	80015c0 <HAL_GetTick>
 8003fea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fee:	e009      	b.n	8004004 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fd fae6 	bl	80015c0 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e0ac      	b.n	800415e <HAL_RCC_OscConfig+0x109a>
 8004004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004008:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800400c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004016:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	fa93 f2a3 	rbit	r2, r3
 8004020:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004024:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004028:	601a      	str	r2, [r3, #0]
  return result;
 800402a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800402e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004032:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004034:	fab3 f383 	clz	r3, r3
 8004038:	b2db      	uxtb	r3, r3
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	b2db      	uxtb	r3, r3
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b01      	cmp	r3, #1
 8004046:	d102      	bne.n	800404e <HAL_RCC_OscConfig+0xf8a>
 8004048:	4b47      	ldr	r3, [pc, #284]	; (8004168 <HAL_RCC_OscConfig+0x10a4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	e027      	b.n	800409e <HAL_RCC_OscConfig+0xfda>
 800404e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004052:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004056:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800405a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004060:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	fa93 f2a3 	rbit	r2, r3
 800406a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800406e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004078:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800407c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004086:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	fa93 f2a3 	rbit	r2, r3
 8004090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004094:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	4b33      	ldr	r3, [pc, #204]	; (8004168 <HAL_RCC_OscConfig+0x10a4>)
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040a2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040a6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040aa:	6011      	str	r1, [r2, #0]
 80040ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040b0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	fa92 f1a2 	rbit	r1, r2
 80040ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040be:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80040c2:	6011      	str	r1, [r2, #0]
  return result;
 80040c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040c8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80040cc:	6812      	ldr	r2, [r2, #0]
 80040ce:	fab2 f282 	clz	r2, r2
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	f042 0220 	orr.w	r2, r2, #32
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	f002 021f 	and.w	r2, r2, #31
 80040de:	2101      	movs	r1, #1
 80040e0:	fa01 f202 	lsl.w	r2, r1, r2
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d182      	bne.n	8003ff0 <HAL_RCC_OscConfig+0xf2c>
 80040ea:	e037      	b.n	800415c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e02e      	b.n	800415e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004100:	4b19      	ldr	r3, [pc, #100]	; (8004168 <HAL_RCC_OscConfig+0x10a4>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004108:	4b17      	ldr	r3, [pc, #92]	; (8004168 <HAL_RCC_OscConfig+0x10a4>)
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004110:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004114:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004118:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800411c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	429a      	cmp	r2, r3
 8004126:	d117      	bne.n	8004158 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004128:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800412c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004130:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004134:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800413c:	429a      	cmp	r2, r3
 800413e:	d10b      	bne.n	8004158 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004140:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004144:	f003 020f 	and.w	r2, r3, #15
 8004148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800414c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000

0800416c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b09e      	sub	sp, #120	; 0x78
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e162      	b.n	800444a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004184:	4b90      	ldr	r3, [pc, #576]	; (80043c8 <HAL_RCC_ClockConfig+0x25c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d910      	bls.n	80041b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b8d      	ldr	r3, [pc, #564]	; (80043c8 <HAL_RCC_ClockConfig+0x25c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 0207 	bic.w	r2, r3, #7
 800419a:	498b      	ldr	r1, [pc, #556]	; (80043c8 <HAL_RCC_ClockConfig+0x25c>)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	4313      	orrs	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b89      	ldr	r3, [pc, #548]	; (80043c8 <HAL_RCC_ClockConfig+0x25c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e14a      	b.n	800444a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c0:	4b82      	ldr	r3, [pc, #520]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	497f      	ldr	r1, [pc, #508]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 80dc 	beq.w	8004398 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d13c      	bne.n	8004262 <HAL_RCC_ClockConfig+0xf6>
 80041e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041f0:	fa93 f3a3 	rbit	r3, r3
 80041f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80041f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f8:	fab3 f383 	clz	r3, r3
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	b2db      	uxtb	r3, r3
 8004202:	f043 0301 	orr.w	r3, r3, #1
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	d102      	bne.n	8004212 <HAL_RCC_ClockConfig+0xa6>
 800420c:	4b6f      	ldr	r3, [pc, #444]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	e00f      	b.n	8004232 <HAL_RCC_ClockConfig+0xc6>
 8004212:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004216:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800421a:	fa93 f3a3 	rbit	r3, r3
 800421e:	667b      	str	r3, [r7, #100]	; 0x64
 8004220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004224:	663b      	str	r3, [r7, #96]	; 0x60
 8004226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004228:	fa93 f3a3 	rbit	r3, r3
 800422c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800422e:	4b67      	ldr	r3, [pc, #412]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004236:	65ba      	str	r2, [r7, #88]	; 0x58
 8004238:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800423a:	fa92 f2a2 	rbit	r2, r2
 800423e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004240:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004242:	fab2 f282 	clz	r2, r2
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	f042 0220 	orr.w	r2, r2, #32
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	f002 021f 	and.w	r2, r2, #31
 8004252:	2101      	movs	r1, #1
 8004254:	fa01 f202 	lsl.w	r2, r1, r2
 8004258:	4013      	ands	r3, r2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d17b      	bne.n	8004356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e0f3      	b.n	800444a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d13c      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x178>
 800426a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800426e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004272:	fa93 f3a3 	rbit	r3, r3
 8004276:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427a:	fab3 f383 	clz	r3, r3
 800427e:	b2db      	uxtb	r3, r3
 8004280:	095b      	lsrs	r3, r3, #5
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b01      	cmp	r3, #1
 800428c:	d102      	bne.n	8004294 <HAL_RCC_ClockConfig+0x128>
 800428e:	4b4f      	ldr	r3, [pc, #316]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	e00f      	b.n	80042b4 <HAL_RCC_ClockConfig+0x148>
 8004294:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004298:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800429c:	fa93 f3a3 	rbit	r3, r3
 80042a0:	647b      	str	r3, [r7, #68]	; 0x44
 80042a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042a6:	643b      	str	r3, [r7, #64]	; 0x40
 80042a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042aa:	fa93 f3a3 	rbit	r3, r3
 80042ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042b0:	4b46      	ldr	r3, [pc, #280]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80042ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042bc:	fa92 f2a2 	rbit	r2, r2
 80042c0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80042c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042c4:	fab2 f282 	clz	r2, r2
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	f042 0220 	orr.w	r2, r2, #32
 80042ce:	b2d2      	uxtb	r2, r2
 80042d0:	f002 021f 	and.w	r2, r2, #31
 80042d4:	2101      	movs	r1, #1
 80042d6:	fa01 f202 	lsl.w	r2, r1, r2
 80042da:	4013      	ands	r3, r2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d13a      	bne.n	8004356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0b2      	b.n	800444a <HAL_RCC_ClockConfig+0x2de>
 80042e4:	2302      	movs	r3, #2
 80042e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f2:	fab3 f383 	clz	r3, r3
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b01      	cmp	r3, #1
 8004304:	d102      	bne.n	800430c <HAL_RCC_ClockConfig+0x1a0>
 8004306:	4b31      	ldr	r3, [pc, #196]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	e00d      	b.n	8004328 <HAL_RCC_ClockConfig+0x1bc>
 800430c:	2302      	movs	r3, #2
 800430e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	fa93 f3a3 	rbit	r3, r3
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
 8004318:	2302      	movs	r3, #2
 800431a:	623b      	str	r3, [r7, #32]
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	fa93 f3a3 	rbit	r3, r3
 8004322:	61fb      	str	r3, [r7, #28]
 8004324:	4b29      	ldr	r3, [pc, #164]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	2202      	movs	r2, #2
 800432a:	61ba      	str	r2, [r7, #24]
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	fa92 f2a2 	rbit	r2, r2
 8004332:	617a      	str	r2, [r7, #20]
  return result;
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	fab2 f282 	clz	r2, r2
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	f042 0220 	orr.w	r2, r2, #32
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	f002 021f 	and.w	r2, r2, #31
 8004346:	2101      	movs	r1, #1
 8004348:	fa01 f202 	lsl.w	r2, r1, r2
 800434c:	4013      	ands	r3, r2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e079      	b.n	800444a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004356:	4b1d      	ldr	r3, [pc, #116]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f023 0203 	bic.w	r2, r3, #3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	491a      	ldr	r1, [pc, #104]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 8004364:	4313      	orrs	r3, r2
 8004366:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004368:	f7fd f92a 	bl	80015c0 <HAL_GetTick>
 800436c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436e:	e00a      	b.n	8004386 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004370:	f7fd f926 	bl	80015c0 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	f241 3288 	movw	r2, #5000	; 0x1388
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e061      	b.n	800444a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004386:	4b11      	ldr	r3, [pc, #68]	; (80043cc <HAL_RCC_ClockConfig+0x260>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f003 020c 	and.w	r2, r3, #12
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	429a      	cmp	r2, r3
 8004396:	d1eb      	bne.n	8004370 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <HAL_RCC_ClockConfig+0x25c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d214      	bcs.n	80043d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a6:	4b08      	ldr	r3, [pc, #32]	; (80043c8 <HAL_RCC_ClockConfig+0x25c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 0207 	bic.w	r2, r3, #7
 80043ae:	4906      	ldr	r1, [pc, #24]	; (80043c8 <HAL_RCC_ClockConfig+0x25c>)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b6:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <HAL_RCC_ClockConfig+0x25c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d005      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e040      	b.n	800444a <HAL_RCC_ClockConfig+0x2de>
 80043c8:	40022000 	.word	0x40022000
 80043cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043dc:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <HAL_RCC_ClockConfig+0x2e8>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	491a      	ldr	r1, [pc, #104]	; (8004454 <HAL_RCC_ClockConfig+0x2e8>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d009      	beq.n	800440e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043fa:	4b16      	ldr	r3, [pc, #88]	; (8004454 <HAL_RCC_ClockConfig+0x2e8>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4912      	ldr	r1, [pc, #72]	; (8004454 <HAL_RCC_ClockConfig+0x2e8>)
 800440a:	4313      	orrs	r3, r2
 800440c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800440e:	f000 f829 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8004412:	4601      	mov	r1, r0
 8004414:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <HAL_RCC_ClockConfig+0x2e8>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800441c:	22f0      	movs	r2, #240	; 0xf0
 800441e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	fa92 f2a2 	rbit	r2, r2
 8004426:	60fa      	str	r2, [r7, #12]
  return result;
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	fab2 f282 	clz	r2, r2
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	40d3      	lsrs	r3, r2
 8004432:	4a09      	ldr	r2, [pc, #36]	; (8004458 <HAL_RCC_ClockConfig+0x2ec>)
 8004434:	5cd3      	ldrb	r3, [r2, r3]
 8004436:	fa21 f303 	lsr.w	r3, r1, r3
 800443a:	4a08      	ldr	r2, [pc, #32]	; (800445c <HAL_RCC_ClockConfig+0x2f0>)
 800443c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800443e:	4b08      	ldr	r3, [pc, #32]	; (8004460 <HAL_RCC_ClockConfig+0x2f4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f7fd f878 	bl	8001538 <HAL_InitTick>
  
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3778      	adds	r7, #120	; 0x78
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000
 8004458:	08006b2c 	.word	0x08006b2c
 800445c:	20000020 	.word	0x20000020
 8004460:	20000024 	.word	0x20000024

08004464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004464:	b480      	push	{r7}
 8004466:	b08b      	sub	sp, #44	; 0x2c
 8004468:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	2300      	movs	r3, #0
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	2300      	movs	r3, #0
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800447e:	4b2a      	ldr	r3, [pc, #168]	; (8004528 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f003 030c 	and.w	r3, r3, #12
 800448a:	2b04      	cmp	r3, #4
 800448c:	d002      	beq.n	8004494 <HAL_RCC_GetSysClockFreq+0x30>
 800448e:	2b08      	cmp	r3, #8
 8004490:	d003      	beq.n	800449a <HAL_RCC_GetSysClockFreq+0x36>
 8004492:	e03f      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004494:	4b25      	ldr	r3, [pc, #148]	; (800452c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004496:	623b      	str	r3, [r7, #32]
      break;
 8004498:	e03f      	b.n	800451a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80044a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80044a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	fa92 f2a2 	rbit	r2, r2
 80044ac:	607a      	str	r2, [r7, #4]
  return result;
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	fab2 f282 	clz	r2, r2
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	40d3      	lsrs	r3, r2
 80044b8:	4a1d      	ldr	r2, [pc, #116]	; (8004530 <HAL_RCC_GetSysClockFreq+0xcc>)
 80044ba:	5cd3      	ldrb	r3, [r2, r3]
 80044bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80044be:	4b1a      	ldr	r3, [pc, #104]	; (8004528 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	220f      	movs	r2, #15
 80044c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	fa92 f2a2 	rbit	r2, r2
 80044d0:	60fa      	str	r2, [r7, #12]
  return result;
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	fab2 f282 	clz	r2, r2
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	40d3      	lsrs	r3, r2
 80044dc:	4a15      	ldr	r2, [pc, #84]	; (8004534 <HAL_RCC_GetSysClockFreq+0xd0>)
 80044de:	5cd3      	ldrb	r3, [r2, r3]
 80044e0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044ec:	4a0f      	ldr	r2, [pc, #60]	; (800452c <HAL_RCC_GetSysClockFreq+0xc8>)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	fb02 f303 	mul.w	r3, r2, r3
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
 80044fc:	e007      	b.n	800450e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044fe:	4a0b      	ldr	r2, [pc, #44]	; (800452c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	fbb2 f2f3 	udiv	r2, r2, r3
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	fb02 f303 	mul.w	r3, r2, r3
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	623b      	str	r3, [r7, #32]
      break;
 8004512:	e002      	b.n	800451a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004516:	623b      	str	r3, [r7, #32]
      break;
 8004518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800451a:	6a3b      	ldr	r3, [r7, #32]
}
 800451c:	4618      	mov	r0, r3
 800451e:	372c      	adds	r7, #44	; 0x2c
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	40021000 	.word	0x40021000
 800452c:	007a1200 	.word	0x007a1200
 8004530:	08006b44 	.word	0x08006b44
 8004534:	08006b54 	.word	0x08006b54

08004538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800453c:	4b03      	ldr	r3, [pc, #12]	; (800454c <HAL_RCC_GetHCLKFreq+0x14>)
 800453e:	681b      	ldr	r3, [r3, #0]
}
 8004540:	4618      	mov	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	20000020 	.word	0x20000020

08004550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004556:	f7ff ffef 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 800455a:	4601      	mov	r1, r0
 800455c:	4b0b      	ldr	r3, [pc, #44]	; (800458c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004564:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004568:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	fa92 f2a2 	rbit	r2, r2
 8004570:	603a      	str	r2, [r7, #0]
  return result;
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	fab2 f282 	clz	r2, r2
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	40d3      	lsrs	r3, r2
 800457c:	4a04      	ldr	r2, [pc, #16]	; (8004590 <HAL_RCC_GetPCLK1Freq+0x40>)
 800457e:	5cd3      	ldrb	r3, [r2, r3]
 8004580:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40021000 	.word	0x40021000
 8004590:	08006b3c 	.word	0x08006b3c

08004594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800459a:	f7ff ffcd 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 800459e:	4601      	mov	r1, r0
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80045a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80045ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	fa92 f2a2 	rbit	r2, r2
 80045b4:	603a      	str	r2, [r7, #0]
  return result;
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	fab2 f282 	clz	r2, r2
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	40d3      	lsrs	r3, r2
 80045c0:	4a04      	ldr	r2, [pc, #16]	; (80045d4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80045c2:	5cd3      	ldrb	r3, [r2, r3]
 80045c4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40021000 	.word	0x40021000
 80045d4:	08006b3c 	.word	0x08006b3c

080045d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b092      	sub	sp, #72	; 0x48
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80045e8:	2300      	movs	r3, #0
 80045ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 80d4 	beq.w	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045fc:	4b4e      	ldr	r3, [pc, #312]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10e      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004608:	4b4b      	ldr	r3, [pc, #300]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	4a4a      	ldr	r2, [pc, #296]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004612:	61d3      	str	r3, [r2, #28]
 8004614:	4b48      	ldr	r3, [pc, #288]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004620:	2301      	movs	r3, #1
 8004622:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004626:	4b45      	ldr	r3, [pc, #276]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d118      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004632:	4b42      	ldr	r3, [pc, #264]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a41      	ldr	r2, [pc, #260]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800463c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800463e:	f7fc ffbf 	bl	80015c0 <HAL_GetTick>
 8004642:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004644:	e008      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004646:	f7fc ffbb 	bl	80015c0 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b64      	cmp	r3, #100	; 0x64
 8004652:	d901      	bls.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e1d6      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004658:	4b38      	ldr	r3, [pc, #224]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0f0      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004664:	4b34      	ldr	r3, [pc, #208]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800466e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8084 	beq.w	800477e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004680:	429a      	cmp	r2, r3
 8004682:	d07c      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004684:	4b2c      	ldr	r3, [pc, #176]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800468e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004692:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004696:	fa93 f3a3 	rbit	r3, r3
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800469c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800469e:	fab3 f383 	clz	r3, r3
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	4b26      	ldr	r3, [pc, #152]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	461a      	mov	r2, r3
 80046ae:	2301      	movs	r3, #1
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ba:	fa93 f3a3 	rbit	r3, r3
 80046be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80046c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046c2:	fab3 f383 	clz	r3, r3
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	4b1d      	ldr	r3, [pc, #116]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	461a      	mov	r2, r3
 80046d2:	2300      	movs	r3, #0
 80046d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046d6:	4a18      	ldr	r2, [pc, #96]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d04b      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e6:	f7fc ff6b 	bl	80015c0 <HAL_GetTick>
 80046ea:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ec:	e00a      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ee:	f7fc ff67 	bl	80015c0 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d901      	bls.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e180      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004704:	2302      	movs	r3, #2
 8004706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	fa93 f3a3 	rbit	r3, r3
 800470e:	627b      	str	r3, [r7, #36]	; 0x24
 8004710:	2302      	movs	r3, #2
 8004712:	623b      	str	r3, [r7, #32]
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	fa93 f3a3 	rbit	r3, r3
 800471a:	61fb      	str	r3, [r7, #28]
  return result;
 800471c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471e:	fab3 f383 	clz	r3, r3
 8004722:	b2db      	uxtb	r3, r3
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f043 0302 	orr.w	r3, r3, #2
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d108      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004732:	4b01      	ldr	r3, [pc, #4]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	e00d      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004738:	40021000 	.word	0x40021000
 800473c:	40007000 	.word	0x40007000
 8004740:	10908100 	.word	0x10908100
 8004744:	2302      	movs	r3, #2
 8004746:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	fa93 f3a3 	rbit	r3, r3
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	4b9a      	ldr	r3, [pc, #616]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	2202      	movs	r2, #2
 8004756:	613a      	str	r2, [r7, #16]
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	fa92 f2a2 	rbit	r2, r2
 800475e:	60fa      	str	r2, [r7, #12]
  return result;
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	fab2 f282 	clz	r2, r2
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	f002 021f 	and.w	r2, r2, #31
 8004772:	2101      	movs	r1, #1
 8004774:	fa01 f202 	lsl.w	r2, r1, r2
 8004778:	4013      	ands	r3, r2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0b7      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800477e:	4b8f      	ldr	r3, [pc, #572]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	498c      	ldr	r1, [pc, #560]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800478c:	4313      	orrs	r3, r2
 800478e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004790:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004794:	2b01      	cmp	r3, #1
 8004796:	d105      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004798:	4b88      	ldr	r3, [pc, #544]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	4a87      	ldr	r2, [pc, #540]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800479e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047b0:	4b82      	ldr	r3, [pc, #520]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	f023 0203 	bic.w	r2, r3, #3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	497f      	ldr	r1, [pc, #508]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d008      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047ce:	4b7b      	ldr	r3, [pc, #492]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	4978      	ldr	r1, [pc, #480]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047ec:	4b73      	ldr	r3, [pc, #460]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	4970      	ldr	r1, [pc, #448]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	2b00      	cmp	r3, #0
 8004808:	d008      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800480a:	4b6c      	ldr	r3, [pc, #432]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	f023 0210 	bic.w	r2, r3, #16
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	4969      	ldr	r1, [pc, #420]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004818:	4313      	orrs	r3, r2
 800481a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d008      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004828:	4b64      	ldr	r3, [pc, #400]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	4961      	ldr	r1, [pc, #388]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004836:	4313      	orrs	r3, r2
 8004838:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d008      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004846:	4b5d      	ldr	r3, [pc, #372]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	f023 0220 	bic.w	r2, r3, #32
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	495a      	ldr	r1, [pc, #360]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004854:	4313      	orrs	r3, r2
 8004856:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004864:	4b55      	ldr	r3, [pc, #340]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	4952      	ldr	r1, [pc, #328]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004872:	4313      	orrs	r3, r2
 8004874:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d008      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004882:	4b4e      	ldr	r3, [pc, #312]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	494b      	ldr	r1, [pc, #300]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004890:	4313      	orrs	r3, r2
 8004892:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0310 	and.w	r3, r3, #16
 800489c:	2b00      	cmp	r3, #0
 800489e:	d008      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048a0:	4b46      	ldr	r3, [pc, #280]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	4943      	ldr	r1, [pc, #268]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d008      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048be:	4b3f      	ldr	r3, [pc, #252]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	493c      	ldr	r1, [pc, #240]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d008      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048dc:	4b37      	ldr	r3, [pc, #220]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e8:	4934      	ldr	r1, [pc, #208]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d008      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80048fa:	4b30      	ldr	r3, [pc, #192]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fe:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	492d      	ldr	r1, [pc, #180]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004908:	4313      	orrs	r3, r2
 800490a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004918:	4b28      	ldr	r3, [pc, #160]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004924:	4925      	ldr	r1, [pc, #148]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004926:	4313      	orrs	r3, r2
 8004928:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d008      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004936:	4b21      	ldr	r3, [pc, #132]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	491e      	ldr	r1, [pc, #120]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004944:	4313      	orrs	r3, r2
 8004946:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d008      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004954:	4b19      	ldr	r3, [pc, #100]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004958:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	4916      	ldr	r1, [pc, #88]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004962:	4313      	orrs	r3, r2
 8004964:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d008      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004972:	4b12      	ldr	r3, [pc, #72]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497e:	490f      	ldr	r1, [pc, #60]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004980:	4313      	orrs	r3, r2
 8004982:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004990:	4b0a      	ldr	r3, [pc, #40]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004994:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499c:	4907      	ldr	r1, [pc, #28]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00c      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80049ae:	4b03      	ldr	r3, [pc, #12]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	e002      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80049ba:	bf00      	nop
 80049bc:	40021000 	.word	0x40021000
 80049c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c2:	4913      	ldr	r1, [pc, #76]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80049d4:	4b0e      	ldr	r3, [pc, #56]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e0:	490b      	ldr	r1, [pc, #44]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d008      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80049f2:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fe:	4904      	ldr	r1, [pc, #16]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3748      	adds	r7, #72	; 0x48
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40021000 	.word	0x40021000

08004a14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e040      	b.n	8004aa8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d106      	bne.n	8004a3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fc fb94 	bl	8001164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2224      	movs	r2, #36	; 0x24
 8004a40:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0201 	bic.w	r2, r2, #1
 8004a50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fc5e 	bl	8005314 <UART_SetConfig>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d101      	bne.n	8004a62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e022      	b.n	8004aa8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fe26 	bl	80056bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fead 	bl	8005800 <UART_CheckIdleState>
 8004aa6:	4603      	mov	r3, r0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08a      	sub	sp, #40	; 0x28
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	4613      	mov	r3, r2
 8004abe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d178      	bne.n	8004bba <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_UART_Transmit+0x24>
 8004ace:	88fb      	ldrh	r3, [r7, #6]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e071      	b.n	8004bbc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2221      	movs	r2, #33	; 0x21
 8004ae4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ae6:	f7fc fd6b 	bl	80015c0 <HAL_GetTick>
 8004aea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	88fa      	ldrh	r2, [r7, #6]
 8004af0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	88fa      	ldrh	r2, [r7, #6]
 8004af8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b04:	d108      	bne.n	8004b18 <HAL_UART_Transmit+0x68>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d104      	bne.n	8004b18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	61bb      	str	r3, [r7, #24]
 8004b16:	e003      	b.n	8004b20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b20:	e030      	b.n	8004b84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2180      	movs	r1, #128	; 0x80
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 ff0f 	bl	8005950 <UART_WaitOnFlagUntilTimeout>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d004      	beq.n	8004b42 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e03c      	b.n	8004bbc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10b      	bne.n	8004b60 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	881a      	ldrh	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b54:	b292      	uxth	r2, r2
 8004b56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	3302      	adds	r3, #2
 8004b5c:	61bb      	str	r3, [r7, #24]
 8004b5e:	e008      	b.n	8004b72 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	781a      	ldrb	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	b292      	uxth	r2, r2
 8004b6a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1c8      	bne.n	8004b22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	2200      	movs	r2, #0
 8004b98:	2140      	movs	r1, #64	; 0x40
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 fed8 	bl	8005950 <UART_WaitOnFlagUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d004      	beq.n	8004bb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e005      	b.n	8004bbc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e000      	b.n	8004bbc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004bba:	2302      	movs	r3, #2
  }
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3720      	adds	r7, #32
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b08b      	sub	sp, #44	; 0x2c
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	d147      	bne.n	8004c6a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_UART_Transmit_IT+0x22>
 8004be0:	88fb      	ldrh	r3, [r7, #6]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e040      	b.n	8004c6c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	88fa      	ldrh	r2, [r7, #6]
 8004bf4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	88fa      	ldrh	r2, [r7, #6]
 8004bfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2221      	movs	r2, #33	; 0x21
 8004c12:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1c:	d107      	bne.n	8004c2e <HAL_UART_Transmit_IT+0x6a>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d103      	bne.n	8004c2e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4a13      	ldr	r2, [pc, #76]	; (8004c78 <HAL_UART_Transmit_IT+0xb4>)
 8004c2a:	66da      	str	r2, [r3, #108]	; 0x6c
 8004c2c:	e002      	b.n	8004c34 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4a12      	ldr	r2, [pc, #72]	; (8004c7c <HAL_UART_Transmit_IT+0xb8>)
 8004c32:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	613b      	str	r3, [r7, #16]
   return(result);
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	623b      	str	r3, [r7, #32]
 8004c54:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	69f9      	ldr	r1, [r7, #28]
 8004c58:	6a3a      	ldr	r2, [r7, #32]
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1e6      	bne.n	8004c34 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	e000      	b.n	8004c6c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004c6a:	2302      	movs	r3, #2
  }
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	372c      	adds	r7, #44	; 0x2c
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	08005d59 	.word	0x08005d59
 8004c7c:	08005ca1 	.word	0x08005ca1

08004c80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08a      	sub	sp, #40	; 0x28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d132      	bne.n	8004cfe <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <HAL_UART_Receive_IT+0x24>
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e02b      	b.n	8004d00 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d018      	beq.n	8004cee <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	623b      	str	r3, [r7, #32]
 8004cdc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cde:	69f9      	ldr	r1, [r7, #28]
 8004ce0:	6a3a      	ldr	r2, [r7, #32]
 8004ce2:	e841 2300 	strex	r3, r2, [r1]
 8004ce6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e6      	bne.n	8004cbc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cee:	88fb      	ldrh	r3, [r7, #6]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	68b9      	ldr	r1, [r7, #8]
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 fe93 	bl	8005a20 <UART_Start_Receive_IT>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	e000      	b.n	8004d00 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004cfe:	2302      	movs	r3, #2
  }
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3728      	adds	r7, #40	; 0x28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b0ba      	sub	sp, #232	; 0xe8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004d32:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d36:	4013      	ands	r3, r2
 8004d38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004d3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d115      	bne.n	8004d70 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00f      	beq.n	8004d70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d009      	beq.n	8004d70 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 82ab 	beq.w	80052bc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	4798      	blx	r3
      }
      return;
 8004d6e:	e2a5      	b.n	80052bc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 8117 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004d86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004d8a:	4b85      	ldr	r3, [pc, #532]	; (8004fa0 <HAL_UART_IRQHandler+0x298>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 810a 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d011      	beq.n	8004dc4 <HAL_UART_IRQHandler+0xbc>
 8004da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00b      	beq.n	8004dc4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2201      	movs	r2, #1
 8004db2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dba:	f043 0201 	orr.w	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d011      	beq.n	8004df4 <HAL_UART_IRQHandler+0xec>
 8004dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00b      	beq.n	8004df4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2202      	movs	r2, #2
 8004de2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dea:	f043 0204 	orr.w	r2, r3, #4
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d011      	beq.n	8004e24 <HAL_UART_IRQHandler+0x11c>
 8004e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00b      	beq.n	8004e24 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2204      	movs	r2, #4
 8004e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e1a:	f043 0202 	orr.w	r2, r3, #2
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d017      	beq.n	8004e60 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d105      	bne.n	8004e48 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00b      	beq.n	8004e60 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2208      	movs	r2, #8
 8004e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e56:	f043 0208 	orr.w	r2, r3, #8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d012      	beq.n	8004e92 <HAL_UART_IRQHandler+0x18a>
 8004e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00c      	beq.n	8004e92 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e88:	f043 0220 	orr.w	r2, r3, #32
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 8211 	beq.w	80052c0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00d      	beq.n	8004ec6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d007      	beq.n	8004ec6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ecc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eda:	2b40      	cmp	r3, #64	; 0x40
 8004edc:	d005      	beq.n	8004eea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ede:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ee2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d04f      	beq.n	8004f8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fe5e 	bl	8005bac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efa:	2b40      	cmp	r3, #64	; 0x40
 8004efc:	d141      	bne.n	8004f82 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3308      	adds	r3, #8
 8004f04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3308      	adds	r3, #8
 8004f26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f3a:	e841 2300 	strex	r3, r2, [r1]
 8004f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1d9      	bne.n	8004efe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d013      	beq.n	8004f7a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f56:	4a13      	ldr	r2, [pc, #76]	; (8004fa4 <HAL_UART_IRQHandler+0x29c>)
 8004f58:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fd fd86 	bl	8002a70 <HAL_DMA_Abort_IT>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d017      	beq.n	8004f9a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f74:	4610      	mov	r0, r2
 8004f76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f78:	e00f      	b.n	8004f9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f9b4 	bl	80052e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f80:	e00b      	b.n	8004f9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f9b0 	bl	80052e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f88:	e007      	b.n	8004f9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f9ac 	bl	80052e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004f98:	e192      	b.n	80052c0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f9a:	bf00      	nop
    return;
 8004f9c:	e190      	b.n	80052c0 <HAL_UART_IRQHandler+0x5b8>
 8004f9e:	bf00      	nop
 8004fa0:	04000120 	.word	0x04000120
 8004fa4:	08005c75 	.word	0x08005c75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	f040 814b 	bne.w	8005248 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 8144 	beq.w	8005248 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fc4:	f003 0310 	and.w	r3, r3, #16
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 813d 	beq.w	8005248 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2210      	movs	r2, #16
 8004fd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b40      	cmp	r3, #64	; 0x40
 8004fe2:	f040 80b5 	bne.w	8005150 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ff2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 8164 	beq.w	80052c4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005006:	429a      	cmp	r2, r3
 8005008:	f080 815c 	bcs.w	80052c4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005012:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	2b20      	cmp	r3, #32
 800501e:	f000 8086 	beq.w	800512e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800502e:	e853 3f00 	ldrex	r3, [r3]
 8005032:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005036:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800503a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800503e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	461a      	mov	r2, r3
 8005048:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800504c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005050:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005054:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005058:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800505c:	e841 2300 	strex	r3, r2, [r1]
 8005060:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005064:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1da      	bne.n	8005022 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3308      	adds	r3, #8
 8005072:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005076:	e853 3f00 	ldrex	r3, [r3]
 800507a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800507c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3308      	adds	r3, #8
 800508c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005090:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005094:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005098:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800509c:	e841 2300 	strex	r3, r2, [r1]
 80050a0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80050a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1e1      	bne.n	800506c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3308      	adds	r3, #8
 80050ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3308      	adds	r3, #8
 80050c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80050cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e3      	bne.n	80050a8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050fe:	f023 0310 	bic.w	r3, r3, #16
 8005102:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005110:	65bb      	str	r3, [r7, #88]	; 0x58
 8005112:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005114:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005116:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005118:	e841 2300 	strex	r3, r2, [r1]
 800511c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800511e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e4      	bne.n	80050ee <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005128:	4618      	mov	r0, r3
 800512a:	f7fd fc68 	bl	80029fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2202      	movs	r2, #2
 8005132:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005140:	b29b      	uxth	r3, r3
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	b29b      	uxth	r3, r3
 8005146:	4619      	mov	r1, r3
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f8d7 	bl	80052fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800514e:	e0b9      	b.n	80052c4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800515c:	b29b      	uxth	r3, r3
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800516a:	b29b      	uxth	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 80ab 	beq.w	80052c8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005172:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 80a6 	beq.w	80052c8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800518a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005190:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	461a      	mov	r2, r3
 800519a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800519e:	647b      	str	r3, [r7, #68]	; 0x44
 80051a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e4      	bne.n	800517c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3308      	adds	r3, #8
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	623b      	str	r3, [r7, #32]
   return(result);
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	f023 0301 	bic.w	r3, r3, #1
 80051c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3308      	adds	r3, #8
 80051d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80051d6:	633a      	str	r2, [r7, #48]	; 0x30
 80051d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e3      	bne.n	80051b2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	e853 3f00 	ldrex	r3, [r3]
 800520a:	60fb      	str	r3, [r7, #12]
   return(result);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0310 	bic.w	r3, r3, #16
 8005212:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005220:	61fb      	str	r3, [r7, #28]
 8005222:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	69b9      	ldr	r1, [r7, #24]
 8005226:	69fa      	ldr	r2, [r7, #28]
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	617b      	str	r3, [r7, #20]
   return(result);
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e4      	bne.n	80051fe <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800523a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800523e:	4619      	mov	r1, r3
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f85b 	bl	80052fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005246:	e03f      	b.n	80052c8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00e      	beq.n	8005272 <HAL_UART_IRQHandler+0x56a>
 8005254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005258:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005268:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 ffa6 	bl	80061bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005270:	e02d      	b.n	80052ce <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00e      	beq.n	800529c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800527e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005286:	2b00      	cmp	r3, #0
 8005288:	d008      	beq.n	800529c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d01c      	beq.n	80052cc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	4798      	blx	r3
    }
    return;
 800529a:	e017      	b.n	80052cc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800529c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d012      	beq.n	80052ce <HAL_UART_IRQHandler+0x5c6>
 80052a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00c      	beq.n	80052ce <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fdaf 	bl	8005e18 <UART_EndTransmit_IT>
    return;
 80052ba:	e008      	b.n	80052ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80052bc:	bf00      	nop
 80052be:	e006      	b.n	80052ce <HAL_UART_IRQHandler+0x5c6>
    return;
 80052c0:	bf00      	nop
 80052c2:	e004      	b.n	80052ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80052c4:	bf00      	nop
 80052c6:	e002      	b.n	80052ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80052c8:	bf00      	nop
 80052ca:	e000      	b.n	80052ce <HAL_UART_IRQHandler+0x5c6>
    return;
 80052cc:	bf00      	nop
  }

}
 80052ce:	37e8      	adds	r7, #232	; 0xe8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800531c:	2300      	movs	r3, #0
 800531e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	431a      	orrs	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	4313      	orrs	r3, r2
 8005336:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	4b92      	ldr	r3, [pc, #584]	; (8005588 <UART_SetConfig+0x274>)
 8005340:	4013      	ands	r3, r2
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6812      	ldr	r2, [r2, #0]
 8005346:	6979      	ldr	r1, [r7, #20]
 8005348:	430b      	orrs	r3, r1
 800534a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	430a      	orrs	r2, r1
 8005384:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a80      	ldr	r2, [pc, #512]	; (800558c <UART_SetConfig+0x278>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d120      	bne.n	80053d2 <UART_SetConfig+0xbe>
 8005390:	4b7f      	ldr	r3, [pc, #508]	; (8005590 <UART_SetConfig+0x27c>)
 8005392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	2b03      	cmp	r3, #3
 800539a:	d817      	bhi.n	80053cc <UART_SetConfig+0xb8>
 800539c:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <UART_SetConfig+0x90>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	080053b5 	.word	0x080053b5
 80053a8:	080053c1 	.word	0x080053c1
 80053ac:	080053c7 	.word	0x080053c7
 80053b0:	080053bb 	.word	0x080053bb
 80053b4:	2301      	movs	r3, #1
 80053b6:	77fb      	strb	r3, [r7, #31]
 80053b8:	e0b5      	b.n	8005526 <UART_SetConfig+0x212>
 80053ba:	2302      	movs	r3, #2
 80053bc:	77fb      	strb	r3, [r7, #31]
 80053be:	e0b2      	b.n	8005526 <UART_SetConfig+0x212>
 80053c0:	2304      	movs	r3, #4
 80053c2:	77fb      	strb	r3, [r7, #31]
 80053c4:	e0af      	b.n	8005526 <UART_SetConfig+0x212>
 80053c6:	2308      	movs	r3, #8
 80053c8:	77fb      	strb	r3, [r7, #31]
 80053ca:	e0ac      	b.n	8005526 <UART_SetConfig+0x212>
 80053cc:	2310      	movs	r3, #16
 80053ce:	77fb      	strb	r3, [r7, #31]
 80053d0:	e0a9      	b.n	8005526 <UART_SetConfig+0x212>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a6f      	ldr	r2, [pc, #444]	; (8005594 <UART_SetConfig+0x280>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d124      	bne.n	8005426 <UART_SetConfig+0x112>
 80053dc:	4b6c      	ldr	r3, [pc, #432]	; (8005590 <UART_SetConfig+0x27c>)
 80053de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053e8:	d011      	beq.n	800540e <UART_SetConfig+0xfa>
 80053ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053ee:	d817      	bhi.n	8005420 <UART_SetConfig+0x10c>
 80053f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053f4:	d011      	beq.n	800541a <UART_SetConfig+0x106>
 80053f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053fa:	d811      	bhi.n	8005420 <UART_SetConfig+0x10c>
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <UART_SetConfig+0xf4>
 8005400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005404:	d006      	beq.n	8005414 <UART_SetConfig+0x100>
 8005406:	e00b      	b.n	8005420 <UART_SetConfig+0x10c>
 8005408:	2300      	movs	r3, #0
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e08b      	b.n	8005526 <UART_SetConfig+0x212>
 800540e:	2302      	movs	r3, #2
 8005410:	77fb      	strb	r3, [r7, #31]
 8005412:	e088      	b.n	8005526 <UART_SetConfig+0x212>
 8005414:	2304      	movs	r3, #4
 8005416:	77fb      	strb	r3, [r7, #31]
 8005418:	e085      	b.n	8005526 <UART_SetConfig+0x212>
 800541a:	2308      	movs	r3, #8
 800541c:	77fb      	strb	r3, [r7, #31]
 800541e:	e082      	b.n	8005526 <UART_SetConfig+0x212>
 8005420:	2310      	movs	r3, #16
 8005422:	77fb      	strb	r3, [r7, #31]
 8005424:	e07f      	b.n	8005526 <UART_SetConfig+0x212>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a5b      	ldr	r2, [pc, #364]	; (8005598 <UART_SetConfig+0x284>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d124      	bne.n	800547a <UART_SetConfig+0x166>
 8005430:	4b57      	ldr	r3, [pc, #348]	; (8005590 <UART_SetConfig+0x27c>)
 8005432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005434:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005438:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800543c:	d011      	beq.n	8005462 <UART_SetConfig+0x14e>
 800543e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005442:	d817      	bhi.n	8005474 <UART_SetConfig+0x160>
 8005444:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005448:	d011      	beq.n	800546e <UART_SetConfig+0x15a>
 800544a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800544e:	d811      	bhi.n	8005474 <UART_SetConfig+0x160>
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <UART_SetConfig+0x148>
 8005454:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005458:	d006      	beq.n	8005468 <UART_SetConfig+0x154>
 800545a:	e00b      	b.n	8005474 <UART_SetConfig+0x160>
 800545c:	2300      	movs	r3, #0
 800545e:	77fb      	strb	r3, [r7, #31]
 8005460:	e061      	b.n	8005526 <UART_SetConfig+0x212>
 8005462:	2302      	movs	r3, #2
 8005464:	77fb      	strb	r3, [r7, #31]
 8005466:	e05e      	b.n	8005526 <UART_SetConfig+0x212>
 8005468:	2304      	movs	r3, #4
 800546a:	77fb      	strb	r3, [r7, #31]
 800546c:	e05b      	b.n	8005526 <UART_SetConfig+0x212>
 800546e:	2308      	movs	r3, #8
 8005470:	77fb      	strb	r3, [r7, #31]
 8005472:	e058      	b.n	8005526 <UART_SetConfig+0x212>
 8005474:	2310      	movs	r3, #16
 8005476:	77fb      	strb	r3, [r7, #31]
 8005478:	e055      	b.n	8005526 <UART_SetConfig+0x212>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a47      	ldr	r2, [pc, #284]	; (800559c <UART_SetConfig+0x288>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d124      	bne.n	80054ce <UART_SetConfig+0x1ba>
 8005484:	4b42      	ldr	r3, [pc, #264]	; (8005590 <UART_SetConfig+0x27c>)
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800548c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005490:	d011      	beq.n	80054b6 <UART_SetConfig+0x1a2>
 8005492:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005496:	d817      	bhi.n	80054c8 <UART_SetConfig+0x1b4>
 8005498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800549c:	d011      	beq.n	80054c2 <UART_SetConfig+0x1ae>
 800549e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054a2:	d811      	bhi.n	80054c8 <UART_SetConfig+0x1b4>
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <UART_SetConfig+0x19c>
 80054a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ac:	d006      	beq.n	80054bc <UART_SetConfig+0x1a8>
 80054ae:	e00b      	b.n	80054c8 <UART_SetConfig+0x1b4>
 80054b0:	2300      	movs	r3, #0
 80054b2:	77fb      	strb	r3, [r7, #31]
 80054b4:	e037      	b.n	8005526 <UART_SetConfig+0x212>
 80054b6:	2302      	movs	r3, #2
 80054b8:	77fb      	strb	r3, [r7, #31]
 80054ba:	e034      	b.n	8005526 <UART_SetConfig+0x212>
 80054bc:	2304      	movs	r3, #4
 80054be:	77fb      	strb	r3, [r7, #31]
 80054c0:	e031      	b.n	8005526 <UART_SetConfig+0x212>
 80054c2:	2308      	movs	r3, #8
 80054c4:	77fb      	strb	r3, [r7, #31]
 80054c6:	e02e      	b.n	8005526 <UART_SetConfig+0x212>
 80054c8:	2310      	movs	r3, #16
 80054ca:	77fb      	strb	r3, [r7, #31]
 80054cc:	e02b      	b.n	8005526 <UART_SetConfig+0x212>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a33      	ldr	r2, [pc, #204]	; (80055a0 <UART_SetConfig+0x28c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d124      	bne.n	8005522 <UART_SetConfig+0x20e>
 80054d8:	4b2d      	ldr	r3, [pc, #180]	; (8005590 <UART_SetConfig+0x27c>)
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054dc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80054e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054e4:	d011      	beq.n	800550a <UART_SetConfig+0x1f6>
 80054e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054ea:	d817      	bhi.n	800551c <UART_SetConfig+0x208>
 80054ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054f0:	d011      	beq.n	8005516 <UART_SetConfig+0x202>
 80054f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054f6:	d811      	bhi.n	800551c <UART_SetConfig+0x208>
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <UART_SetConfig+0x1f0>
 80054fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005500:	d006      	beq.n	8005510 <UART_SetConfig+0x1fc>
 8005502:	e00b      	b.n	800551c <UART_SetConfig+0x208>
 8005504:	2300      	movs	r3, #0
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e00d      	b.n	8005526 <UART_SetConfig+0x212>
 800550a:	2302      	movs	r3, #2
 800550c:	77fb      	strb	r3, [r7, #31]
 800550e:	e00a      	b.n	8005526 <UART_SetConfig+0x212>
 8005510:	2304      	movs	r3, #4
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e007      	b.n	8005526 <UART_SetConfig+0x212>
 8005516:	2308      	movs	r3, #8
 8005518:	77fb      	strb	r3, [r7, #31]
 800551a:	e004      	b.n	8005526 <UART_SetConfig+0x212>
 800551c:	2310      	movs	r3, #16
 800551e:	77fb      	strb	r3, [r7, #31]
 8005520:	e001      	b.n	8005526 <UART_SetConfig+0x212>
 8005522:	2310      	movs	r3, #16
 8005524:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800552e:	d16b      	bne.n	8005608 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005530:	7ffb      	ldrb	r3, [r7, #31]
 8005532:	2b08      	cmp	r3, #8
 8005534:	d838      	bhi.n	80055a8 <UART_SetConfig+0x294>
 8005536:	a201      	add	r2, pc, #4	; (adr r2, 800553c <UART_SetConfig+0x228>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	08005561 	.word	0x08005561
 8005540:	08005569 	.word	0x08005569
 8005544:	08005571 	.word	0x08005571
 8005548:	080055a9 	.word	0x080055a9
 800554c:	08005577 	.word	0x08005577
 8005550:	080055a9 	.word	0x080055a9
 8005554:	080055a9 	.word	0x080055a9
 8005558:	080055a9 	.word	0x080055a9
 800555c:	0800557f 	.word	0x0800557f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005560:	f7fe fff6 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 8005564:	61b8      	str	r0, [r7, #24]
        break;
 8005566:	e024      	b.n	80055b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005568:	f7ff f814 	bl	8004594 <HAL_RCC_GetPCLK2Freq>
 800556c:	61b8      	str	r0, [r7, #24]
        break;
 800556e:	e020      	b.n	80055b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005570:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <UART_SetConfig+0x290>)
 8005572:	61bb      	str	r3, [r7, #24]
        break;
 8005574:	e01d      	b.n	80055b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005576:	f7fe ff75 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 800557a:	61b8      	str	r0, [r7, #24]
        break;
 800557c:	e019      	b.n	80055b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800557e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005582:	61bb      	str	r3, [r7, #24]
        break;
 8005584:	e015      	b.n	80055b2 <UART_SetConfig+0x29e>
 8005586:	bf00      	nop
 8005588:	efff69f3 	.word	0xefff69f3
 800558c:	40013800 	.word	0x40013800
 8005590:	40021000 	.word	0x40021000
 8005594:	40004400 	.word	0x40004400
 8005598:	40004800 	.word	0x40004800
 800559c:	40004c00 	.word	0x40004c00
 80055a0:	40005000 	.word	0x40005000
 80055a4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	77bb      	strb	r3, [r7, #30]
        break;
 80055b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d073      	beq.n	80056a0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	005a      	lsls	r2, r3, #1
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	085b      	lsrs	r3, r3, #1
 80055c2:	441a      	add	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	2b0f      	cmp	r3, #15
 80055d2:	d916      	bls.n	8005602 <UART_SetConfig+0x2ee>
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055da:	d212      	bcs.n	8005602 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	b29b      	uxth	r3, r3
 80055e0:	f023 030f 	bic.w	r3, r3, #15
 80055e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	085b      	lsrs	r3, r3, #1
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	89fb      	ldrh	r3, [r7, #14]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	89fa      	ldrh	r2, [r7, #14]
 80055fe:	60da      	str	r2, [r3, #12]
 8005600:	e04e      	b.n	80056a0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	77bb      	strb	r3, [r7, #30]
 8005606:	e04b      	b.n	80056a0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005608:	7ffb      	ldrb	r3, [r7, #31]
 800560a:	2b08      	cmp	r3, #8
 800560c:	d827      	bhi.n	800565e <UART_SetConfig+0x34a>
 800560e:	a201      	add	r2, pc, #4	; (adr r2, 8005614 <UART_SetConfig+0x300>)
 8005610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005614:	08005639 	.word	0x08005639
 8005618:	08005641 	.word	0x08005641
 800561c:	08005649 	.word	0x08005649
 8005620:	0800565f 	.word	0x0800565f
 8005624:	0800564f 	.word	0x0800564f
 8005628:	0800565f 	.word	0x0800565f
 800562c:	0800565f 	.word	0x0800565f
 8005630:	0800565f 	.word	0x0800565f
 8005634:	08005657 	.word	0x08005657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005638:	f7fe ff8a 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 800563c:	61b8      	str	r0, [r7, #24]
        break;
 800563e:	e013      	b.n	8005668 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005640:	f7fe ffa8 	bl	8004594 <HAL_RCC_GetPCLK2Freq>
 8005644:	61b8      	str	r0, [r7, #24]
        break;
 8005646:	e00f      	b.n	8005668 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005648:	4b1b      	ldr	r3, [pc, #108]	; (80056b8 <UART_SetConfig+0x3a4>)
 800564a:	61bb      	str	r3, [r7, #24]
        break;
 800564c:	e00c      	b.n	8005668 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800564e:	f7fe ff09 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8005652:	61b8      	str	r0, [r7, #24]
        break;
 8005654:	e008      	b.n	8005668 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800565a:	61bb      	str	r3, [r7, #24]
        break;
 800565c:	e004      	b.n	8005668 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	77bb      	strb	r3, [r7, #30]
        break;
 8005666:	bf00      	nop
    }

    if (pclk != 0U)
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d018      	beq.n	80056a0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	085a      	lsrs	r2, r3, #1
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	441a      	add	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005680:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b0f      	cmp	r3, #15
 8005686:	d909      	bls.n	800569c <UART_SetConfig+0x388>
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800568e:	d205      	bcs.n	800569c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	b29a      	uxth	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60da      	str	r2, [r3, #12]
 800569a:	e001      	b.n	80056a0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80056ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3720      	adds	r7, #32
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	007a1200 	.word	0x007a1200

080056bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00a      	beq.n	80056e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	f003 0308 	and.w	r3, r3, #8
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	f003 0310 	and.w	r3, r3, #16
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00a      	beq.n	800576e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01a      	beq.n	80057d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ba:	d10a      	bne.n	80057d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	605a      	str	r2, [r3, #4]
  }
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b098      	sub	sp, #96	; 0x60
 8005804:	af02      	add	r7, sp, #8
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005810:	f7fb fed6 	bl	80015c0 <HAL_GetTick>
 8005814:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b08      	cmp	r3, #8
 8005822:	d12e      	bne.n	8005882 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005824:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800582c:	2200      	movs	r2, #0
 800582e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f88c 	bl	8005950 <UART_WaitOnFlagUntilTimeout>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d021      	beq.n	8005882 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005846:	e853 3f00 	ldrex	r3, [r3]
 800584a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800584c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005852:	653b      	str	r3, [r7, #80]	; 0x50
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	461a      	mov	r2, r3
 800585a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800585c:	647b      	str	r3, [r7, #68]	; 0x44
 800585e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005860:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005862:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005864:	e841 2300 	strex	r3, r2, [r1]
 8005868:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800586a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1e6      	bne.n	800583e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2220      	movs	r2, #32
 8005874:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e062      	b.n	8005948 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b04      	cmp	r3, #4
 800588e:	d149      	bne.n	8005924 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005898:	2200      	movs	r2, #0
 800589a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f856 	bl	8005950 <UART_WaitOnFlagUntilTimeout>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d03c      	beq.n	8005924 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	623b      	str	r3, [r7, #32]
   return(result);
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c8:	633b      	str	r3, [r7, #48]	; 0x30
 80058ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e6      	bne.n	80058aa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3308      	adds	r3, #8
 80058e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	e853 3f00 	ldrex	r3, [r3]
 80058ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0301 	bic.w	r3, r3, #1
 80058f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3308      	adds	r3, #8
 80058fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058fc:	61fa      	str	r2, [r7, #28]
 80058fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005900:	69b9      	ldr	r1, [r7, #24]
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	e841 2300 	strex	r3, r2, [r1]
 8005908:	617b      	str	r3, [r7, #20]
   return(result);
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e5      	bne.n	80058dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e011      	b.n	8005948 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2220      	movs	r2, #32
 8005928:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3758      	adds	r7, #88	; 0x58
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	603b      	str	r3, [r7, #0]
 800595c:	4613      	mov	r3, r2
 800595e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005960:	e049      	b.n	80059f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005968:	d045      	beq.n	80059f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596a:	f7fb fe29 	bl	80015c0 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	429a      	cmp	r2, r3
 8005978:	d302      	bcc.n	8005980 <UART_WaitOnFlagUntilTimeout+0x30>
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e048      	b.n	8005a16 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	d031      	beq.n	80059f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b08      	cmp	r3, #8
 800599e:	d110      	bne.n	80059c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2208      	movs	r2, #8
 80059a6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f8ff 	bl	8005bac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2208      	movs	r2, #8
 80059b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e029      	b.n	8005a16 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059d0:	d111      	bne.n	80059f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 f8e5 	bl	8005bac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e00f      	b.n	8005a16 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69da      	ldr	r2, [r3, #28]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4013      	ands	r3, r2
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	bf0c      	ite	eq
 8005a06:	2301      	moveq	r3, #1
 8005a08:	2300      	movne	r3, #0
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d0a6      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b097      	sub	sp, #92	; 0x5c
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	88fa      	ldrh	r2, [r7, #6]
 8005a38:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	88fa      	ldrh	r2, [r7, #6]
 8005a40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a52:	d10e      	bne.n	8005a72 <UART_Start_Receive_IT+0x52>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d105      	bne.n	8005a68 <UART_Start_Receive_IT+0x48>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a66:	e02d      	b.n	8005ac4 <UART_Start_Receive_IT+0xa4>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	22ff      	movs	r2, #255	; 0xff
 8005a6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a70:	e028      	b.n	8005ac4 <UART_Start_Receive_IT+0xa4>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10d      	bne.n	8005a96 <UART_Start_Receive_IT+0x76>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d104      	bne.n	8005a8c <UART_Start_Receive_IT+0x6c>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	22ff      	movs	r2, #255	; 0xff
 8005a86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a8a:	e01b      	b.n	8005ac4 <UART_Start_Receive_IT+0xa4>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	227f      	movs	r2, #127	; 0x7f
 8005a90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a94:	e016      	b.n	8005ac4 <UART_Start_Receive_IT+0xa4>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a9e:	d10d      	bne.n	8005abc <UART_Start_Receive_IT+0x9c>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d104      	bne.n	8005ab2 <UART_Start_Receive_IT+0x92>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	227f      	movs	r2, #127	; 0x7f
 8005aac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ab0:	e008      	b.n	8005ac4 <UART_Start_Receive_IT+0xa4>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	223f      	movs	r2, #63	; 0x3f
 8005ab6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005aba:	e003      	b.n	8005ac4 <UART_Start_Receive_IT+0xa4>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2222      	movs	r2, #34	; 0x22
 8005ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3308      	adds	r3, #8
 8005ada:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ade:	e853 3f00 	ldrex	r3, [r3]
 8005ae2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae6:	f043 0301 	orr.w	r3, r3, #1
 8005aea:	657b      	str	r3, [r7, #84]	; 0x54
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3308      	adds	r3, #8
 8005af2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005af4:	64ba      	str	r2, [r7, #72]	; 0x48
 8005af6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005afa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005afc:	e841 2300 	strex	r3, r2, [r1]
 8005b00:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1e5      	bne.n	8005ad4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b10:	d107      	bne.n	8005b22 <UART_Start_Receive_IT+0x102>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d103      	bne.n	8005b22 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4a21      	ldr	r2, [pc, #132]	; (8005ba4 <UART_Start_Receive_IT+0x184>)
 8005b1e:	669a      	str	r2, [r3, #104]	; 0x68
 8005b20:	e002      	b.n	8005b28 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4a20      	ldr	r2, [pc, #128]	; (8005ba8 <UART_Start_Receive_IT+0x188>)
 8005b26:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d019      	beq.n	8005b64 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b38:	e853 3f00 	ldrex	r3, [r3]
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005b44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b50:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b56:	e841 2300 	strex	r3, r2, [r1]
 8005b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1e6      	bne.n	8005b30 <UART_Start_Receive_IT+0x110>
 8005b62:	e018      	b.n	8005b96 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	613b      	str	r3, [r7, #16]
   return(result);
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f043 0320 	orr.w	r3, r3, #32
 8005b78:	653b      	str	r3, [r7, #80]	; 0x50
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b82:	623b      	str	r3, [r7, #32]
 8005b84:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	69f9      	ldr	r1, [r7, #28]
 8005b88:	6a3a      	ldr	r2, [r7, #32]
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e6      	bne.n	8005b64 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	375c      	adds	r7, #92	; 0x5c
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	08006015 	.word	0x08006015
 8005ba8:	08005e6d 	.word	0x08005e6d

08005bac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b095      	sub	sp, #84	; 0x54
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bbc:	e853 3f00 	ldrex	r3, [r3]
 8005bc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bd2:	643b      	str	r3, [r7, #64]	; 0x40
 8005bd4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bda:	e841 2300 	strex	r3, r2, [r1]
 8005bde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1e6      	bne.n	8005bb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3308      	adds	r3, #8
 8005bec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	e853 3f00 	ldrex	r3, [r3]
 8005bf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	f023 0301 	bic.w	r3, r3, #1
 8005bfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3308      	adds	r3, #8
 8005c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e5      	bne.n	8005be6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d118      	bne.n	8005c54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	e853 3f00 	ldrex	r3, [r3]
 8005c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f023 0310 	bic.w	r3, r3, #16
 8005c36:	647b      	str	r3, [r7, #68]	; 0x44
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c40:	61bb      	str	r3, [r7, #24]
 8005c42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c44:	6979      	ldr	r1, [r7, #20]
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	e841 2300 	strex	r3, r2, [r1]
 8005c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1e6      	bne.n	8005c22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c68:	bf00      	nop
 8005c6a:	3754      	adds	r7, #84	; 0x54
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f7ff fb28 	bl	80052e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c98:	bf00      	nop
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b08f      	sub	sp, #60	; 0x3c
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cac:	2b21      	cmp	r3, #33	; 0x21
 8005cae:	d14d      	bne.n	8005d4c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d132      	bne.n	8005d22 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cdc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e6      	bne.n	8005cbc <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d02:	633b      	str	r3, [r7, #48]	; 0x30
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0c:	61bb      	str	r3, [r7, #24]
 8005d0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	6979      	ldr	r1, [r7, #20]
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	613b      	str	r3, [r7, #16]
   return(result);
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e6      	bne.n	8005cee <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005d20:	e014      	b.n	8005d4c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d26:	781a      	ldrb	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	b292      	uxth	r2, r2
 8005d2e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	3b01      	subs	r3, #1
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005d4c:	bf00      	nop
 8005d4e:	373c      	adds	r7, #60	; 0x3c
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b091      	sub	sp, #68	; 0x44
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d64:	2b21      	cmp	r3, #33	; 0x21
 8005d66:	d151      	bne.n	8005e0c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d132      	bne.n	8005dda <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	623b      	str	r3, [r7, #32]
   return(result);
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d88:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d92:	633b      	str	r3, [r7, #48]	; 0x30
 8005d94:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d9a:	e841 2300 	strex	r3, r2, [r1]
 8005d9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e6      	bne.n	8005d74 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	e853 3f00 	ldrex	r3, [r3]
 8005db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dba:	637b      	str	r3, [r7, #52]	; 0x34
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc4:	61fb      	str	r3, [r7, #28]
 8005dc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc8:	69b9      	ldr	r1, [r7, #24]
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	e841 2300 	strex	r3, r2, [r1]
 8005dd0:	617b      	str	r3, [r7, #20]
   return(result);
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1e6      	bne.n	8005da6 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005dd8:	e018      	b.n	8005e0c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dde:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de2:	881a      	ldrh	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dec:	b292      	uxth	r2, r2
 8005dee:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df4:	1c9a      	adds	r2, r3, #2
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005e0c:	bf00      	nop
 8005e0e:	3744      	adds	r7, #68	; 0x44
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b088      	sub	sp, #32
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e34:	61fb      	str	r3, [r7, #28]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	61bb      	str	r3, [r7, #24]
 8005e40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	6979      	ldr	r1, [r7, #20]
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e6      	bne.n	8005e20 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2220      	movs	r2, #32
 8005e56:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff fa38 	bl	80052d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e64:	bf00      	nop
 8005e66:	3720      	adds	r7, #32
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b09c      	sub	sp, #112	; 0x70
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e7a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e84:	2b22      	cmp	r3, #34	; 0x22
 8005e86:	f040 80b9 	bne.w	8005ffc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e90:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e98:	b2d9      	uxtb	r1, r3
 8005e9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea4:	400a      	ands	r2, r1
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f040 809c 	bne.w	800600c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005edc:	e853 3f00 	ldrex	r3, [r3]
 8005ee0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ee8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ef2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ef4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ef8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e6      	bne.n	8005ed4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f18:	f023 0301 	bic.w	r3, r3, #1
 8005f1c:	667b      	str	r3, [r7, #100]	; 0x64
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3308      	adds	r3, #8
 8005f24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f26:	647a      	str	r2, [r7, #68]	; 0x44
 8005f28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f2e:	e841 2300 	strex	r3, r2, [r1]
 8005f32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e5      	bne.n	8005f06 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d018      	beq.n	8005f8e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	623b      	str	r3, [r7, #32]
   return(result);
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f70:	663b      	str	r3, [r7, #96]	; 0x60
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f7c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e6      	bne.n	8005f5c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d12e      	bne.n	8005ff4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f023 0310 	bic.w	r3, r3, #16
 8005fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fba:	61fb      	str	r3, [r7, #28]
 8005fbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	69b9      	ldr	r1, [r7, #24]
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	617b      	str	r3, [r7, #20]
   return(result);
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e6      	bne.n	8005f9c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	f003 0310 	and.w	r3, r3, #16
 8005fd8:	2b10      	cmp	r3, #16
 8005fda:	d103      	bne.n	8005fe4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2210      	movs	r2, #16
 8005fe2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff f985 	bl	80052fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ff2:	e00b      	b.n	800600c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7fa fc51 	bl	800089c <HAL_UART_RxCpltCallback>
}
 8005ffa:	e007      	b.n	800600c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f042 0208 	orr.w	r2, r2, #8
 800600a:	619a      	str	r2, [r3, #24]
}
 800600c:	bf00      	nop
 800600e:	3770      	adds	r7, #112	; 0x70
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b09c      	sub	sp, #112	; 0x70
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006022:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800602c:	2b22      	cmp	r3, #34	; 0x22
 800602e:	f040 80b9 	bne.w	80061a4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006038:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006040:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006042:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006046:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800604a:	4013      	ands	r3, r2
 800604c:	b29a      	uxth	r2, r3
 800604e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006050:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006056:	1c9a      	adds	r2, r3, #2
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006062:	b29b      	uxth	r3, r3
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006074:	b29b      	uxth	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	f040 809c 	bne.w	80061b4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800608a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800608c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006090:	667b      	str	r3, [r7, #100]	; 0x64
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800609a:	657b      	str	r3, [r7, #84]	; 0x54
 800609c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e6      	bne.n	800607c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3308      	adds	r3, #8
 80060b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	f023 0301 	bic.w	r3, r3, #1
 80060c4:	663b      	str	r3, [r7, #96]	; 0x60
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3308      	adds	r3, #8
 80060cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060ce:	643a      	str	r2, [r7, #64]	; 0x40
 80060d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e5      	bne.n	80060ae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d018      	beq.n	8006136 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	e853 3f00 	ldrex	r3, [r3]
 8006110:	61fb      	str	r3, [r7, #28]
   return(result);
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006118:	65fb      	str	r3, [r7, #92]	; 0x5c
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006124:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800612a:	e841 2300 	strex	r3, r2, [r1]
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1e6      	bne.n	8006104 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800613a:	2b01      	cmp	r3, #1
 800613c:	d12e      	bne.n	800619c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	60bb      	str	r3, [r7, #8]
   return(result);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f023 0310 	bic.w	r3, r3, #16
 8006158:	65bb      	str	r3, [r7, #88]	; 0x58
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006162:	61bb      	str	r3, [r7, #24]
 8006164:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006166:	6979      	ldr	r1, [r7, #20]
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	e841 2300 	strex	r3, r2, [r1]
 800616e:	613b      	str	r3, [r7, #16]
   return(result);
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1e6      	bne.n	8006144 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	f003 0310 	and.w	r3, r3, #16
 8006180:	2b10      	cmp	r3, #16
 8006182:	d103      	bne.n	800618c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2210      	movs	r2, #16
 800618a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7ff f8b1 	bl	80052fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800619a:	e00b      	b.n	80061b4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7fa fb7d 	bl	800089c <HAL_UART_RxCpltCallback>
}
 80061a2:	e007      	b.n	80061b4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f042 0208 	orr.w	r2, r2, #8
 80061b2:	619a      	str	r2, [r3, #24]
}
 80061b4:	bf00      	nop
 80061b6:	3770      	adds	r7, #112	; 0x70
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <__errno>:
 80061d0:	4b01      	ldr	r3, [pc, #4]	; (80061d8 <__errno+0x8>)
 80061d2:	6818      	ldr	r0, [r3, #0]
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	2000002c 	.word	0x2000002c

080061dc <__libc_init_array>:
 80061dc:	b570      	push	{r4, r5, r6, lr}
 80061de:	4d0d      	ldr	r5, [pc, #52]	; (8006214 <__libc_init_array+0x38>)
 80061e0:	4c0d      	ldr	r4, [pc, #52]	; (8006218 <__libc_init_array+0x3c>)
 80061e2:	1b64      	subs	r4, r4, r5
 80061e4:	10a4      	asrs	r4, r4, #2
 80061e6:	2600      	movs	r6, #0
 80061e8:	42a6      	cmp	r6, r4
 80061ea:	d109      	bne.n	8006200 <__libc_init_array+0x24>
 80061ec:	4d0b      	ldr	r5, [pc, #44]	; (800621c <__libc_init_array+0x40>)
 80061ee:	4c0c      	ldr	r4, [pc, #48]	; (8006220 <__libc_init_array+0x44>)
 80061f0:	f000 fc8e 	bl	8006b10 <_init>
 80061f4:	1b64      	subs	r4, r4, r5
 80061f6:	10a4      	asrs	r4, r4, #2
 80061f8:	2600      	movs	r6, #0
 80061fa:	42a6      	cmp	r6, r4
 80061fc:	d105      	bne.n	800620a <__libc_init_array+0x2e>
 80061fe:	bd70      	pop	{r4, r5, r6, pc}
 8006200:	f855 3b04 	ldr.w	r3, [r5], #4
 8006204:	4798      	blx	r3
 8006206:	3601      	adds	r6, #1
 8006208:	e7ee      	b.n	80061e8 <__libc_init_array+0xc>
 800620a:	f855 3b04 	ldr.w	r3, [r5], #4
 800620e:	4798      	blx	r3
 8006210:	3601      	adds	r6, #1
 8006212:	e7f2      	b.n	80061fa <__libc_init_array+0x1e>
 8006214:	08006b98 	.word	0x08006b98
 8006218:	08006b98 	.word	0x08006b98
 800621c:	08006b98 	.word	0x08006b98
 8006220:	08006b9c 	.word	0x08006b9c

08006224 <memset>:
 8006224:	4402      	add	r2, r0
 8006226:	4603      	mov	r3, r0
 8006228:	4293      	cmp	r3, r2
 800622a:	d100      	bne.n	800622e <memset+0xa>
 800622c:	4770      	bx	lr
 800622e:	f803 1b01 	strb.w	r1, [r3], #1
 8006232:	e7f9      	b.n	8006228 <memset+0x4>

08006234 <siprintf>:
 8006234:	b40e      	push	{r1, r2, r3}
 8006236:	b500      	push	{lr}
 8006238:	b09c      	sub	sp, #112	; 0x70
 800623a:	ab1d      	add	r3, sp, #116	; 0x74
 800623c:	9002      	str	r0, [sp, #8]
 800623e:	9006      	str	r0, [sp, #24]
 8006240:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006244:	4809      	ldr	r0, [pc, #36]	; (800626c <siprintf+0x38>)
 8006246:	9107      	str	r1, [sp, #28]
 8006248:	9104      	str	r1, [sp, #16]
 800624a:	4909      	ldr	r1, [pc, #36]	; (8006270 <siprintf+0x3c>)
 800624c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006250:	9105      	str	r1, [sp, #20]
 8006252:	6800      	ldr	r0, [r0, #0]
 8006254:	9301      	str	r3, [sp, #4]
 8006256:	a902      	add	r1, sp, #8
 8006258:	f000 f868 	bl	800632c <_svfiprintf_r>
 800625c:	9b02      	ldr	r3, [sp, #8]
 800625e:	2200      	movs	r2, #0
 8006260:	701a      	strb	r2, [r3, #0]
 8006262:	b01c      	add	sp, #112	; 0x70
 8006264:	f85d eb04 	ldr.w	lr, [sp], #4
 8006268:	b003      	add	sp, #12
 800626a:	4770      	bx	lr
 800626c:	2000002c 	.word	0x2000002c
 8006270:	ffff0208 	.word	0xffff0208

08006274 <__ssputs_r>:
 8006274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006278:	688e      	ldr	r6, [r1, #8]
 800627a:	429e      	cmp	r6, r3
 800627c:	4682      	mov	sl, r0
 800627e:	460c      	mov	r4, r1
 8006280:	4690      	mov	r8, r2
 8006282:	461f      	mov	r7, r3
 8006284:	d838      	bhi.n	80062f8 <__ssputs_r+0x84>
 8006286:	898a      	ldrh	r2, [r1, #12]
 8006288:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800628c:	d032      	beq.n	80062f4 <__ssputs_r+0x80>
 800628e:	6825      	ldr	r5, [r4, #0]
 8006290:	6909      	ldr	r1, [r1, #16]
 8006292:	eba5 0901 	sub.w	r9, r5, r1
 8006296:	6965      	ldr	r5, [r4, #20]
 8006298:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800629c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062a0:	3301      	adds	r3, #1
 80062a2:	444b      	add	r3, r9
 80062a4:	106d      	asrs	r5, r5, #1
 80062a6:	429d      	cmp	r5, r3
 80062a8:	bf38      	it	cc
 80062aa:	461d      	movcc	r5, r3
 80062ac:	0553      	lsls	r3, r2, #21
 80062ae:	d531      	bpl.n	8006314 <__ssputs_r+0xa0>
 80062b0:	4629      	mov	r1, r5
 80062b2:	f000 fb63 	bl	800697c <_malloc_r>
 80062b6:	4606      	mov	r6, r0
 80062b8:	b950      	cbnz	r0, 80062d0 <__ssputs_r+0x5c>
 80062ba:	230c      	movs	r3, #12
 80062bc:	f8ca 3000 	str.w	r3, [sl]
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062c6:	81a3      	strh	r3, [r4, #12]
 80062c8:	f04f 30ff 	mov.w	r0, #4294967295
 80062cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d0:	6921      	ldr	r1, [r4, #16]
 80062d2:	464a      	mov	r2, r9
 80062d4:	f000 fabe 	bl	8006854 <memcpy>
 80062d8:	89a3      	ldrh	r3, [r4, #12]
 80062da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e2:	81a3      	strh	r3, [r4, #12]
 80062e4:	6126      	str	r6, [r4, #16]
 80062e6:	6165      	str	r5, [r4, #20]
 80062e8:	444e      	add	r6, r9
 80062ea:	eba5 0509 	sub.w	r5, r5, r9
 80062ee:	6026      	str	r6, [r4, #0]
 80062f0:	60a5      	str	r5, [r4, #8]
 80062f2:	463e      	mov	r6, r7
 80062f4:	42be      	cmp	r6, r7
 80062f6:	d900      	bls.n	80062fa <__ssputs_r+0x86>
 80062f8:	463e      	mov	r6, r7
 80062fa:	6820      	ldr	r0, [r4, #0]
 80062fc:	4632      	mov	r2, r6
 80062fe:	4641      	mov	r1, r8
 8006300:	f000 fab6 	bl	8006870 <memmove>
 8006304:	68a3      	ldr	r3, [r4, #8]
 8006306:	1b9b      	subs	r3, r3, r6
 8006308:	60a3      	str	r3, [r4, #8]
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	4433      	add	r3, r6
 800630e:	6023      	str	r3, [r4, #0]
 8006310:	2000      	movs	r0, #0
 8006312:	e7db      	b.n	80062cc <__ssputs_r+0x58>
 8006314:	462a      	mov	r2, r5
 8006316:	f000 fba5 	bl	8006a64 <_realloc_r>
 800631a:	4606      	mov	r6, r0
 800631c:	2800      	cmp	r0, #0
 800631e:	d1e1      	bne.n	80062e4 <__ssputs_r+0x70>
 8006320:	6921      	ldr	r1, [r4, #16]
 8006322:	4650      	mov	r0, sl
 8006324:	f000 fabe 	bl	80068a4 <_free_r>
 8006328:	e7c7      	b.n	80062ba <__ssputs_r+0x46>
	...

0800632c <_svfiprintf_r>:
 800632c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006330:	4698      	mov	r8, r3
 8006332:	898b      	ldrh	r3, [r1, #12]
 8006334:	061b      	lsls	r3, r3, #24
 8006336:	b09d      	sub	sp, #116	; 0x74
 8006338:	4607      	mov	r7, r0
 800633a:	460d      	mov	r5, r1
 800633c:	4614      	mov	r4, r2
 800633e:	d50e      	bpl.n	800635e <_svfiprintf_r+0x32>
 8006340:	690b      	ldr	r3, [r1, #16]
 8006342:	b963      	cbnz	r3, 800635e <_svfiprintf_r+0x32>
 8006344:	2140      	movs	r1, #64	; 0x40
 8006346:	f000 fb19 	bl	800697c <_malloc_r>
 800634a:	6028      	str	r0, [r5, #0]
 800634c:	6128      	str	r0, [r5, #16]
 800634e:	b920      	cbnz	r0, 800635a <_svfiprintf_r+0x2e>
 8006350:	230c      	movs	r3, #12
 8006352:	603b      	str	r3, [r7, #0]
 8006354:	f04f 30ff 	mov.w	r0, #4294967295
 8006358:	e0d1      	b.n	80064fe <_svfiprintf_r+0x1d2>
 800635a:	2340      	movs	r3, #64	; 0x40
 800635c:	616b      	str	r3, [r5, #20]
 800635e:	2300      	movs	r3, #0
 8006360:	9309      	str	r3, [sp, #36]	; 0x24
 8006362:	2320      	movs	r3, #32
 8006364:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006368:	f8cd 800c 	str.w	r8, [sp, #12]
 800636c:	2330      	movs	r3, #48	; 0x30
 800636e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006518 <_svfiprintf_r+0x1ec>
 8006372:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006376:	f04f 0901 	mov.w	r9, #1
 800637a:	4623      	mov	r3, r4
 800637c:	469a      	mov	sl, r3
 800637e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006382:	b10a      	cbz	r2, 8006388 <_svfiprintf_r+0x5c>
 8006384:	2a25      	cmp	r2, #37	; 0x25
 8006386:	d1f9      	bne.n	800637c <_svfiprintf_r+0x50>
 8006388:	ebba 0b04 	subs.w	fp, sl, r4
 800638c:	d00b      	beq.n	80063a6 <_svfiprintf_r+0x7a>
 800638e:	465b      	mov	r3, fp
 8006390:	4622      	mov	r2, r4
 8006392:	4629      	mov	r1, r5
 8006394:	4638      	mov	r0, r7
 8006396:	f7ff ff6d 	bl	8006274 <__ssputs_r>
 800639a:	3001      	adds	r0, #1
 800639c:	f000 80aa 	beq.w	80064f4 <_svfiprintf_r+0x1c8>
 80063a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063a2:	445a      	add	r2, fp
 80063a4:	9209      	str	r2, [sp, #36]	; 0x24
 80063a6:	f89a 3000 	ldrb.w	r3, [sl]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 80a2 	beq.w	80064f4 <_svfiprintf_r+0x1c8>
 80063b0:	2300      	movs	r3, #0
 80063b2:	f04f 32ff 	mov.w	r2, #4294967295
 80063b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063ba:	f10a 0a01 	add.w	sl, sl, #1
 80063be:	9304      	str	r3, [sp, #16]
 80063c0:	9307      	str	r3, [sp, #28]
 80063c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063c6:	931a      	str	r3, [sp, #104]	; 0x68
 80063c8:	4654      	mov	r4, sl
 80063ca:	2205      	movs	r2, #5
 80063cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d0:	4851      	ldr	r0, [pc, #324]	; (8006518 <_svfiprintf_r+0x1ec>)
 80063d2:	f7f9 ff0d 	bl	80001f0 <memchr>
 80063d6:	9a04      	ldr	r2, [sp, #16]
 80063d8:	b9d8      	cbnz	r0, 8006412 <_svfiprintf_r+0xe6>
 80063da:	06d0      	lsls	r0, r2, #27
 80063dc:	bf44      	itt	mi
 80063de:	2320      	movmi	r3, #32
 80063e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063e4:	0711      	lsls	r1, r2, #28
 80063e6:	bf44      	itt	mi
 80063e8:	232b      	movmi	r3, #43	; 0x2b
 80063ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063ee:	f89a 3000 	ldrb.w	r3, [sl]
 80063f2:	2b2a      	cmp	r3, #42	; 0x2a
 80063f4:	d015      	beq.n	8006422 <_svfiprintf_r+0xf6>
 80063f6:	9a07      	ldr	r2, [sp, #28]
 80063f8:	4654      	mov	r4, sl
 80063fa:	2000      	movs	r0, #0
 80063fc:	f04f 0c0a 	mov.w	ip, #10
 8006400:	4621      	mov	r1, r4
 8006402:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006406:	3b30      	subs	r3, #48	; 0x30
 8006408:	2b09      	cmp	r3, #9
 800640a:	d94e      	bls.n	80064aa <_svfiprintf_r+0x17e>
 800640c:	b1b0      	cbz	r0, 800643c <_svfiprintf_r+0x110>
 800640e:	9207      	str	r2, [sp, #28]
 8006410:	e014      	b.n	800643c <_svfiprintf_r+0x110>
 8006412:	eba0 0308 	sub.w	r3, r0, r8
 8006416:	fa09 f303 	lsl.w	r3, r9, r3
 800641a:	4313      	orrs	r3, r2
 800641c:	9304      	str	r3, [sp, #16]
 800641e:	46a2      	mov	sl, r4
 8006420:	e7d2      	b.n	80063c8 <_svfiprintf_r+0x9c>
 8006422:	9b03      	ldr	r3, [sp, #12]
 8006424:	1d19      	adds	r1, r3, #4
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	9103      	str	r1, [sp, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	bfbb      	ittet	lt
 800642e:	425b      	neglt	r3, r3
 8006430:	f042 0202 	orrlt.w	r2, r2, #2
 8006434:	9307      	strge	r3, [sp, #28]
 8006436:	9307      	strlt	r3, [sp, #28]
 8006438:	bfb8      	it	lt
 800643a:	9204      	strlt	r2, [sp, #16]
 800643c:	7823      	ldrb	r3, [r4, #0]
 800643e:	2b2e      	cmp	r3, #46	; 0x2e
 8006440:	d10c      	bne.n	800645c <_svfiprintf_r+0x130>
 8006442:	7863      	ldrb	r3, [r4, #1]
 8006444:	2b2a      	cmp	r3, #42	; 0x2a
 8006446:	d135      	bne.n	80064b4 <_svfiprintf_r+0x188>
 8006448:	9b03      	ldr	r3, [sp, #12]
 800644a:	1d1a      	adds	r2, r3, #4
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	9203      	str	r2, [sp, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	bfb8      	it	lt
 8006454:	f04f 33ff 	movlt.w	r3, #4294967295
 8006458:	3402      	adds	r4, #2
 800645a:	9305      	str	r3, [sp, #20]
 800645c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006528 <_svfiprintf_r+0x1fc>
 8006460:	7821      	ldrb	r1, [r4, #0]
 8006462:	2203      	movs	r2, #3
 8006464:	4650      	mov	r0, sl
 8006466:	f7f9 fec3 	bl	80001f0 <memchr>
 800646a:	b140      	cbz	r0, 800647e <_svfiprintf_r+0x152>
 800646c:	2340      	movs	r3, #64	; 0x40
 800646e:	eba0 000a 	sub.w	r0, r0, sl
 8006472:	fa03 f000 	lsl.w	r0, r3, r0
 8006476:	9b04      	ldr	r3, [sp, #16]
 8006478:	4303      	orrs	r3, r0
 800647a:	3401      	adds	r4, #1
 800647c:	9304      	str	r3, [sp, #16]
 800647e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006482:	4826      	ldr	r0, [pc, #152]	; (800651c <_svfiprintf_r+0x1f0>)
 8006484:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006488:	2206      	movs	r2, #6
 800648a:	f7f9 feb1 	bl	80001f0 <memchr>
 800648e:	2800      	cmp	r0, #0
 8006490:	d038      	beq.n	8006504 <_svfiprintf_r+0x1d8>
 8006492:	4b23      	ldr	r3, [pc, #140]	; (8006520 <_svfiprintf_r+0x1f4>)
 8006494:	bb1b      	cbnz	r3, 80064de <_svfiprintf_r+0x1b2>
 8006496:	9b03      	ldr	r3, [sp, #12]
 8006498:	3307      	adds	r3, #7
 800649a:	f023 0307 	bic.w	r3, r3, #7
 800649e:	3308      	adds	r3, #8
 80064a0:	9303      	str	r3, [sp, #12]
 80064a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a4:	4433      	add	r3, r6
 80064a6:	9309      	str	r3, [sp, #36]	; 0x24
 80064a8:	e767      	b.n	800637a <_svfiprintf_r+0x4e>
 80064aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80064ae:	460c      	mov	r4, r1
 80064b0:	2001      	movs	r0, #1
 80064b2:	e7a5      	b.n	8006400 <_svfiprintf_r+0xd4>
 80064b4:	2300      	movs	r3, #0
 80064b6:	3401      	adds	r4, #1
 80064b8:	9305      	str	r3, [sp, #20]
 80064ba:	4619      	mov	r1, r3
 80064bc:	f04f 0c0a 	mov.w	ip, #10
 80064c0:	4620      	mov	r0, r4
 80064c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064c6:	3a30      	subs	r2, #48	; 0x30
 80064c8:	2a09      	cmp	r2, #9
 80064ca:	d903      	bls.n	80064d4 <_svfiprintf_r+0x1a8>
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d0c5      	beq.n	800645c <_svfiprintf_r+0x130>
 80064d0:	9105      	str	r1, [sp, #20]
 80064d2:	e7c3      	b.n	800645c <_svfiprintf_r+0x130>
 80064d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80064d8:	4604      	mov	r4, r0
 80064da:	2301      	movs	r3, #1
 80064dc:	e7f0      	b.n	80064c0 <_svfiprintf_r+0x194>
 80064de:	ab03      	add	r3, sp, #12
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	462a      	mov	r2, r5
 80064e4:	4b0f      	ldr	r3, [pc, #60]	; (8006524 <_svfiprintf_r+0x1f8>)
 80064e6:	a904      	add	r1, sp, #16
 80064e8:	4638      	mov	r0, r7
 80064ea:	f3af 8000 	nop.w
 80064ee:	1c42      	adds	r2, r0, #1
 80064f0:	4606      	mov	r6, r0
 80064f2:	d1d6      	bne.n	80064a2 <_svfiprintf_r+0x176>
 80064f4:	89ab      	ldrh	r3, [r5, #12]
 80064f6:	065b      	lsls	r3, r3, #25
 80064f8:	f53f af2c 	bmi.w	8006354 <_svfiprintf_r+0x28>
 80064fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064fe:	b01d      	add	sp, #116	; 0x74
 8006500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006504:	ab03      	add	r3, sp, #12
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	462a      	mov	r2, r5
 800650a:	4b06      	ldr	r3, [pc, #24]	; (8006524 <_svfiprintf_r+0x1f8>)
 800650c:	a904      	add	r1, sp, #16
 800650e:	4638      	mov	r0, r7
 8006510:	f000 f87a 	bl	8006608 <_printf_i>
 8006514:	e7eb      	b.n	80064ee <_svfiprintf_r+0x1c2>
 8006516:	bf00      	nop
 8006518:	08006b64 	.word	0x08006b64
 800651c:	08006b6e 	.word	0x08006b6e
 8006520:	00000000 	.word	0x00000000
 8006524:	08006275 	.word	0x08006275
 8006528:	08006b6a 	.word	0x08006b6a

0800652c <_printf_common>:
 800652c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006530:	4616      	mov	r6, r2
 8006532:	4699      	mov	r9, r3
 8006534:	688a      	ldr	r2, [r1, #8]
 8006536:	690b      	ldr	r3, [r1, #16]
 8006538:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800653c:	4293      	cmp	r3, r2
 800653e:	bfb8      	it	lt
 8006540:	4613      	movlt	r3, r2
 8006542:	6033      	str	r3, [r6, #0]
 8006544:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006548:	4607      	mov	r7, r0
 800654a:	460c      	mov	r4, r1
 800654c:	b10a      	cbz	r2, 8006552 <_printf_common+0x26>
 800654e:	3301      	adds	r3, #1
 8006550:	6033      	str	r3, [r6, #0]
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	0699      	lsls	r1, r3, #26
 8006556:	bf42      	ittt	mi
 8006558:	6833      	ldrmi	r3, [r6, #0]
 800655a:	3302      	addmi	r3, #2
 800655c:	6033      	strmi	r3, [r6, #0]
 800655e:	6825      	ldr	r5, [r4, #0]
 8006560:	f015 0506 	ands.w	r5, r5, #6
 8006564:	d106      	bne.n	8006574 <_printf_common+0x48>
 8006566:	f104 0a19 	add.w	sl, r4, #25
 800656a:	68e3      	ldr	r3, [r4, #12]
 800656c:	6832      	ldr	r2, [r6, #0]
 800656e:	1a9b      	subs	r3, r3, r2
 8006570:	42ab      	cmp	r3, r5
 8006572:	dc26      	bgt.n	80065c2 <_printf_common+0x96>
 8006574:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006578:	1e13      	subs	r3, r2, #0
 800657a:	6822      	ldr	r2, [r4, #0]
 800657c:	bf18      	it	ne
 800657e:	2301      	movne	r3, #1
 8006580:	0692      	lsls	r2, r2, #26
 8006582:	d42b      	bmi.n	80065dc <_printf_common+0xb0>
 8006584:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006588:	4649      	mov	r1, r9
 800658a:	4638      	mov	r0, r7
 800658c:	47c0      	blx	r8
 800658e:	3001      	adds	r0, #1
 8006590:	d01e      	beq.n	80065d0 <_printf_common+0xa4>
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	68e5      	ldr	r5, [r4, #12]
 8006596:	6832      	ldr	r2, [r6, #0]
 8006598:	f003 0306 	and.w	r3, r3, #6
 800659c:	2b04      	cmp	r3, #4
 800659e:	bf08      	it	eq
 80065a0:	1aad      	subeq	r5, r5, r2
 80065a2:	68a3      	ldr	r3, [r4, #8]
 80065a4:	6922      	ldr	r2, [r4, #16]
 80065a6:	bf0c      	ite	eq
 80065a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065ac:	2500      	movne	r5, #0
 80065ae:	4293      	cmp	r3, r2
 80065b0:	bfc4      	itt	gt
 80065b2:	1a9b      	subgt	r3, r3, r2
 80065b4:	18ed      	addgt	r5, r5, r3
 80065b6:	2600      	movs	r6, #0
 80065b8:	341a      	adds	r4, #26
 80065ba:	42b5      	cmp	r5, r6
 80065bc:	d11a      	bne.n	80065f4 <_printf_common+0xc8>
 80065be:	2000      	movs	r0, #0
 80065c0:	e008      	b.n	80065d4 <_printf_common+0xa8>
 80065c2:	2301      	movs	r3, #1
 80065c4:	4652      	mov	r2, sl
 80065c6:	4649      	mov	r1, r9
 80065c8:	4638      	mov	r0, r7
 80065ca:	47c0      	blx	r8
 80065cc:	3001      	adds	r0, #1
 80065ce:	d103      	bne.n	80065d8 <_printf_common+0xac>
 80065d0:	f04f 30ff 	mov.w	r0, #4294967295
 80065d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d8:	3501      	adds	r5, #1
 80065da:	e7c6      	b.n	800656a <_printf_common+0x3e>
 80065dc:	18e1      	adds	r1, r4, r3
 80065de:	1c5a      	adds	r2, r3, #1
 80065e0:	2030      	movs	r0, #48	; 0x30
 80065e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065e6:	4422      	add	r2, r4
 80065e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065f0:	3302      	adds	r3, #2
 80065f2:	e7c7      	b.n	8006584 <_printf_common+0x58>
 80065f4:	2301      	movs	r3, #1
 80065f6:	4622      	mov	r2, r4
 80065f8:	4649      	mov	r1, r9
 80065fa:	4638      	mov	r0, r7
 80065fc:	47c0      	blx	r8
 80065fe:	3001      	adds	r0, #1
 8006600:	d0e6      	beq.n	80065d0 <_printf_common+0xa4>
 8006602:	3601      	adds	r6, #1
 8006604:	e7d9      	b.n	80065ba <_printf_common+0x8e>
	...

08006608 <_printf_i>:
 8006608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800660c:	7e0f      	ldrb	r7, [r1, #24]
 800660e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006610:	2f78      	cmp	r7, #120	; 0x78
 8006612:	4691      	mov	r9, r2
 8006614:	4680      	mov	r8, r0
 8006616:	460c      	mov	r4, r1
 8006618:	469a      	mov	sl, r3
 800661a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800661e:	d807      	bhi.n	8006630 <_printf_i+0x28>
 8006620:	2f62      	cmp	r7, #98	; 0x62
 8006622:	d80a      	bhi.n	800663a <_printf_i+0x32>
 8006624:	2f00      	cmp	r7, #0
 8006626:	f000 80d8 	beq.w	80067da <_printf_i+0x1d2>
 800662a:	2f58      	cmp	r7, #88	; 0x58
 800662c:	f000 80a3 	beq.w	8006776 <_printf_i+0x16e>
 8006630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006634:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006638:	e03a      	b.n	80066b0 <_printf_i+0xa8>
 800663a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800663e:	2b15      	cmp	r3, #21
 8006640:	d8f6      	bhi.n	8006630 <_printf_i+0x28>
 8006642:	a101      	add	r1, pc, #4	; (adr r1, 8006648 <_printf_i+0x40>)
 8006644:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006648:	080066a1 	.word	0x080066a1
 800664c:	080066b5 	.word	0x080066b5
 8006650:	08006631 	.word	0x08006631
 8006654:	08006631 	.word	0x08006631
 8006658:	08006631 	.word	0x08006631
 800665c:	08006631 	.word	0x08006631
 8006660:	080066b5 	.word	0x080066b5
 8006664:	08006631 	.word	0x08006631
 8006668:	08006631 	.word	0x08006631
 800666c:	08006631 	.word	0x08006631
 8006670:	08006631 	.word	0x08006631
 8006674:	080067c1 	.word	0x080067c1
 8006678:	080066e5 	.word	0x080066e5
 800667c:	080067a3 	.word	0x080067a3
 8006680:	08006631 	.word	0x08006631
 8006684:	08006631 	.word	0x08006631
 8006688:	080067e3 	.word	0x080067e3
 800668c:	08006631 	.word	0x08006631
 8006690:	080066e5 	.word	0x080066e5
 8006694:	08006631 	.word	0x08006631
 8006698:	08006631 	.word	0x08006631
 800669c:	080067ab 	.word	0x080067ab
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	1d1a      	adds	r2, r3, #4
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	602a      	str	r2, [r5, #0]
 80066a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066b0:	2301      	movs	r3, #1
 80066b2:	e0a3      	b.n	80067fc <_printf_i+0x1f4>
 80066b4:	6820      	ldr	r0, [r4, #0]
 80066b6:	6829      	ldr	r1, [r5, #0]
 80066b8:	0606      	lsls	r6, r0, #24
 80066ba:	f101 0304 	add.w	r3, r1, #4
 80066be:	d50a      	bpl.n	80066d6 <_printf_i+0xce>
 80066c0:	680e      	ldr	r6, [r1, #0]
 80066c2:	602b      	str	r3, [r5, #0]
 80066c4:	2e00      	cmp	r6, #0
 80066c6:	da03      	bge.n	80066d0 <_printf_i+0xc8>
 80066c8:	232d      	movs	r3, #45	; 0x2d
 80066ca:	4276      	negs	r6, r6
 80066cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066d0:	485e      	ldr	r0, [pc, #376]	; (800684c <_printf_i+0x244>)
 80066d2:	230a      	movs	r3, #10
 80066d4:	e019      	b.n	800670a <_printf_i+0x102>
 80066d6:	680e      	ldr	r6, [r1, #0]
 80066d8:	602b      	str	r3, [r5, #0]
 80066da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066de:	bf18      	it	ne
 80066e0:	b236      	sxthne	r6, r6
 80066e2:	e7ef      	b.n	80066c4 <_printf_i+0xbc>
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	6820      	ldr	r0, [r4, #0]
 80066e8:	1d19      	adds	r1, r3, #4
 80066ea:	6029      	str	r1, [r5, #0]
 80066ec:	0601      	lsls	r1, r0, #24
 80066ee:	d501      	bpl.n	80066f4 <_printf_i+0xec>
 80066f0:	681e      	ldr	r6, [r3, #0]
 80066f2:	e002      	b.n	80066fa <_printf_i+0xf2>
 80066f4:	0646      	lsls	r6, r0, #25
 80066f6:	d5fb      	bpl.n	80066f0 <_printf_i+0xe8>
 80066f8:	881e      	ldrh	r6, [r3, #0]
 80066fa:	4854      	ldr	r0, [pc, #336]	; (800684c <_printf_i+0x244>)
 80066fc:	2f6f      	cmp	r7, #111	; 0x6f
 80066fe:	bf0c      	ite	eq
 8006700:	2308      	moveq	r3, #8
 8006702:	230a      	movne	r3, #10
 8006704:	2100      	movs	r1, #0
 8006706:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800670a:	6865      	ldr	r5, [r4, #4]
 800670c:	60a5      	str	r5, [r4, #8]
 800670e:	2d00      	cmp	r5, #0
 8006710:	bfa2      	ittt	ge
 8006712:	6821      	ldrge	r1, [r4, #0]
 8006714:	f021 0104 	bicge.w	r1, r1, #4
 8006718:	6021      	strge	r1, [r4, #0]
 800671a:	b90e      	cbnz	r6, 8006720 <_printf_i+0x118>
 800671c:	2d00      	cmp	r5, #0
 800671e:	d04d      	beq.n	80067bc <_printf_i+0x1b4>
 8006720:	4615      	mov	r5, r2
 8006722:	fbb6 f1f3 	udiv	r1, r6, r3
 8006726:	fb03 6711 	mls	r7, r3, r1, r6
 800672a:	5dc7      	ldrb	r7, [r0, r7]
 800672c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006730:	4637      	mov	r7, r6
 8006732:	42bb      	cmp	r3, r7
 8006734:	460e      	mov	r6, r1
 8006736:	d9f4      	bls.n	8006722 <_printf_i+0x11a>
 8006738:	2b08      	cmp	r3, #8
 800673a:	d10b      	bne.n	8006754 <_printf_i+0x14c>
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	07de      	lsls	r6, r3, #31
 8006740:	d508      	bpl.n	8006754 <_printf_i+0x14c>
 8006742:	6923      	ldr	r3, [r4, #16]
 8006744:	6861      	ldr	r1, [r4, #4]
 8006746:	4299      	cmp	r1, r3
 8006748:	bfde      	ittt	le
 800674a:	2330      	movle	r3, #48	; 0x30
 800674c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006750:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006754:	1b52      	subs	r2, r2, r5
 8006756:	6122      	str	r2, [r4, #16]
 8006758:	f8cd a000 	str.w	sl, [sp]
 800675c:	464b      	mov	r3, r9
 800675e:	aa03      	add	r2, sp, #12
 8006760:	4621      	mov	r1, r4
 8006762:	4640      	mov	r0, r8
 8006764:	f7ff fee2 	bl	800652c <_printf_common>
 8006768:	3001      	adds	r0, #1
 800676a:	d14c      	bne.n	8006806 <_printf_i+0x1fe>
 800676c:	f04f 30ff 	mov.w	r0, #4294967295
 8006770:	b004      	add	sp, #16
 8006772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006776:	4835      	ldr	r0, [pc, #212]	; (800684c <_printf_i+0x244>)
 8006778:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800677c:	6829      	ldr	r1, [r5, #0]
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	f851 6b04 	ldr.w	r6, [r1], #4
 8006784:	6029      	str	r1, [r5, #0]
 8006786:	061d      	lsls	r5, r3, #24
 8006788:	d514      	bpl.n	80067b4 <_printf_i+0x1ac>
 800678a:	07df      	lsls	r7, r3, #31
 800678c:	bf44      	itt	mi
 800678e:	f043 0320 	orrmi.w	r3, r3, #32
 8006792:	6023      	strmi	r3, [r4, #0]
 8006794:	b91e      	cbnz	r6, 800679e <_printf_i+0x196>
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	f023 0320 	bic.w	r3, r3, #32
 800679c:	6023      	str	r3, [r4, #0]
 800679e:	2310      	movs	r3, #16
 80067a0:	e7b0      	b.n	8006704 <_printf_i+0xfc>
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	f043 0320 	orr.w	r3, r3, #32
 80067a8:	6023      	str	r3, [r4, #0]
 80067aa:	2378      	movs	r3, #120	; 0x78
 80067ac:	4828      	ldr	r0, [pc, #160]	; (8006850 <_printf_i+0x248>)
 80067ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067b2:	e7e3      	b.n	800677c <_printf_i+0x174>
 80067b4:	0659      	lsls	r1, r3, #25
 80067b6:	bf48      	it	mi
 80067b8:	b2b6      	uxthmi	r6, r6
 80067ba:	e7e6      	b.n	800678a <_printf_i+0x182>
 80067bc:	4615      	mov	r5, r2
 80067be:	e7bb      	b.n	8006738 <_printf_i+0x130>
 80067c0:	682b      	ldr	r3, [r5, #0]
 80067c2:	6826      	ldr	r6, [r4, #0]
 80067c4:	6961      	ldr	r1, [r4, #20]
 80067c6:	1d18      	adds	r0, r3, #4
 80067c8:	6028      	str	r0, [r5, #0]
 80067ca:	0635      	lsls	r5, r6, #24
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	d501      	bpl.n	80067d4 <_printf_i+0x1cc>
 80067d0:	6019      	str	r1, [r3, #0]
 80067d2:	e002      	b.n	80067da <_printf_i+0x1d2>
 80067d4:	0670      	lsls	r0, r6, #25
 80067d6:	d5fb      	bpl.n	80067d0 <_printf_i+0x1c8>
 80067d8:	8019      	strh	r1, [r3, #0]
 80067da:	2300      	movs	r3, #0
 80067dc:	6123      	str	r3, [r4, #16]
 80067de:	4615      	mov	r5, r2
 80067e0:	e7ba      	b.n	8006758 <_printf_i+0x150>
 80067e2:	682b      	ldr	r3, [r5, #0]
 80067e4:	1d1a      	adds	r2, r3, #4
 80067e6:	602a      	str	r2, [r5, #0]
 80067e8:	681d      	ldr	r5, [r3, #0]
 80067ea:	6862      	ldr	r2, [r4, #4]
 80067ec:	2100      	movs	r1, #0
 80067ee:	4628      	mov	r0, r5
 80067f0:	f7f9 fcfe 	bl	80001f0 <memchr>
 80067f4:	b108      	cbz	r0, 80067fa <_printf_i+0x1f2>
 80067f6:	1b40      	subs	r0, r0, r5
 80067f8:	6060      	str	r0, [r4, #4]
 80067fa:	6863      	ldr	r3, [r4, #4]
 80067fc:	6123      	str	r3, [r4, #16]
 80067fe:	2300      	movs	r3, #0
 8006800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006804:	e7a8      	b.n	8006758 <_printf_i+0x150>
 8006806:	6923      	ldr	r3, [r4, #16]
 8006808:	462a      	mov	r2, r5
 800680a:	4649      	mov	r1, r9
 800680c:	4640      	mov	r0, r8
 800680e:	47d0      	blx	sl
 8006810:	3001      	adds	r0, #1
 8006812:	d0ab      	beq.n	800676c <_printf_i+0x164>
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	079b      	lsls	r3, r3, #30
 8006818:	d413      	bmi.n	8006842 <_printf_i+0x23a>
 800681a:	68e0      	ldr	r0, [r4, #12]
 800681c:	9b03      	ldr	r3, [sp, #12]
 800681e:	4298      	cmp	r0, r3
 8006820:	bfb8      	it	lt
 8006822:	4618      	movlt	r0, r3
 8006824:	e7a4      	b.n	8006770 <_printf_i+0x168>
 8006826:	2301      	movs	r3, #1
 8006828:	4632      	mov	r2, r6
 800682a:	4649      	mov	r1, r9
 800682c:	4640      	mov	r0, r8
 800682e:	47d0      	blx	sl
 8006830:	3001      	adds	r0, #1
 8006832:	d09b      	beq.n	800676c <_printf_i+0x164>
 8006834:	3501      	adds	r5, #1
 8006836:	68e3      	ldr	r3, [r4, #12]
 8006838:	9903      	ldr	r1, [sp, #12]
 800683a:	1a5b      	subs	r3, r3, r1
 800683c:	42ab      	cmp	r3, r5
 800683e:	dcf2      	bgt.n	8006826 <_printf_i+0x21e>
 8006840:	e7eb      	b.n	800681a <_printf_i+0x212>
 8006842:	2500      	movs	r5, #0
 8006844:	f104 0619 	add.w	r6, r4, #25
 8006848:	e7f5      	b.n	8006836 <_printf_i+0x22e>
 800684a:	bf00      	nop
 800684c:	08006b75 	.word	0x08006b75
 8006850:	08006b86 	.word	0x08006b86

08006854 <memcpy>:
 8006854:	440a      	add	r2, r1
 8006856:	4291      	cmp	r1, r2
 8006858:	f100 33ff 	add.w	r3, r0, #4294967295
 800685c:	d100      	bne.n	8006860 <memcpy+0xc>
 800685e:	4770      	bx	lr
 8006860:	b510      	push	{r4, lr}
 8006862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006866:	f803 4f01 	strb.w	r4, [r3, #1]!
 800686a:	4291      	cmp	r1, r2
 800686c:	d1f9      	bne.n	8006862 <memcpy+0xe>
 800686e:	bd10      	pop	{r4, pc}

08006870 <memmove>:
 8006870:	4288      	cmp	r0, r1
 8006872:	b510      	push	{r4, lr}
 8006874:	eb01 0402 	add.w	r4, r1, r2
 8006878:	d902      	bls.n	8006880 <memmove+0x10>
 800687a:	4284      	cmp	r4, r0
 800687c:	4623      	mov	r3, r4
 800687e:	d807      	bhi.n	8006890 <memmove+0x20>
 8006880:	1e43      	subs	r3, r0, #1
 8006882:	42a1      	cmp	r1, r4
 8006884:	d008      	beq.n	8006898 <memmove+0x28>
 8006886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800688a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800688e:	e7f8      	b.n	8006882 <memmove+0x12>
 8006890:	4402      	add	r2, r0
 8006892:	4601      	mov	r1, r0
 8006894:	428a      	cmp	r2, r1
 8006896:	d100      	bne.n	800689a <memmove+0x2a>
 8006898:	bd10      	pop	{r4, pc}
 800689a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800689e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068a2:	e7f7      	b.n	8006894 <memmove+0x24>

080068a4 <_free_r>:
 80068a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068a6:	2900      	cmp	r1, #0
 80068a8:	d044      	beq.n	8006934 <_free_r+0x90>
 80068aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ae:	9001      	str	r0, [sp, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f1a1 0404 	sub.w	r4, r1, #4
 80068b6:	bfb8      	it	lt
 80068b8:	18e4      	addlt	r4, r4, r3
 80068ba:	f000 f913 	bl	8006ae4 <__malloc_lock>
 80068be:	4a1e      	ldr	r2, [pc, #120]	; (8006938 <_free_r+0x94>)
 80068c0:	9801      	ldr	r0, [sp, #4]
 80068c2:	6813      	ldr	r3, [r2, #0]
 80068c4:	b933      	cbnz	r3, 80068d4 <_free_r+0x30>
 80068c6:	6063      	str	r3, [r4, #4]
 80068c8:	6014      	str	r4, [r2, #0]
 80068ca:	b003      	add	sp, #12
 80068cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068d0:	f000 b90e 	b.w	8006af0 <__malloc_unlock>
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	d908      	bls.n	80068ea <_free_r+0x46>
 80068d8:	6825      	ldr	r5, [r4, #0]
 80068da:	1961      	adds	r1, r4, r5
 80068dc:	428b      	cmp	r3, r1
 80068de:	bf01      	itttt	eq
 80068e0:	6819      	ldreq	r1, [r3, #0]
 80068e2:	685b      	ldreq	r3, [r3, #4]
 80068e4:	1949      	addeq	r1, r1, r5
 80068e6:	6021      	streq	r1, [r4, #0]
 80068e8:	e7ed      	b.n	80068c6 <_free_r+0x22>
 80068ea:	461a      	mov	r2, r3
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	b10b      	cbz	r3, 80068f4 <_free_r+0x50>
 80068f0:	42a3      	cmp	r3, r4
 80068f2:	d9fa      	bls.n	80068ea <_free_r+0x46>
 80068f4:	6811      	ldr	r1, [r2, #0]
 80068f6:	1855      	adds	r5, r2, r1
 80068f8:	42a5      	cmp	r5, r4
 80068fa:	d10b      	bne.n	8006914 <_free_r+0x70>
 80068fc:	6824      	ldr	r4, [r4, #0]
 80068fe:	4421      	add	r1, r4
 8006900:	1854      	adds	r4, r2, r1
 8006902:	42a3      	cmp	r3, r4
 8006904:	6011      	str	r1, [r2, #0]
 8006906:	d1e0      	bne.n	80068ca <_free_r+0x26>
 8006908:	681c      	ldr	r4, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	6053      	str	r3, [r2, #4]
 800690e:	4421      	add	r1, r4
 8006910:	6011      	str	r1, [r2, #0]
 8006912:	e7da      	b.n	80068ca <_free_r+0x26>
 8006914:	d902      	bls.n	800691c <_free_r+0x78>
 8006916:	230c      	movs	r3, #12
 8006918:	6003      	str	r3, [r0, #0]
 800691a:	e7d6      	b.n	80068ca <_free_r+0x26>
 800691c:	6825      	ldr	r5, [r4, #0]
 800691e:	1961      	adds	r1, r4, r5
 8006920:	428b      	cmp	r3, r1
 8006922:	bf04      	itt	eq
 8006924:	6819      	ldreq	r1, [r3, #0]
 8006926:	685b      	ldreq	r3, [r3, #4]
 8006928:	6063      	str	r3, [r4, #4]
 800692a:	bf04      	itt	eq
 800692c:	1949      	addeq	r1, r1, r5
 800692e:	6021      	streq	r1, [r4, #0]
 8006930:	6054      	str	r4, [r2, #4]
 8006932:	e7ca      	b.n	80068ca <_free_r+0x26>
 8006934:	b003      	add	sp, #12
 8006936:	bd30      	pop	{r4, r5, pc}
 8006938:	20002200 	.word	0x20002200

0800693c <sbrk_aligned>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	4e0e      	ldr	r6, [pc, #56]	; (8006978 <sbrk_aligned+0x3c>)
 8006940:	460c      	mov	r4, r1
 8006942:	6831      	ldr	r1, [r6, #0]
 8006944:	4605      	mov	r5, r0
 8006946:	b911      	cbnz	r1, 800694e <sbrk_aligned+0x12>
 8006948:	f000 f8bc 	bl	8006ac4 <_sbrk_r>
 800694c:	6030      	str	r0, [r6, #0]
 800694e:	4621      	mov	r1, r4
 8006950:	4628      	mov	r0, r5
 8006952:	f000 f8b7 	bl	8006ac4 <_sbrk_r>
 8006956:	1c43      	adds	r3, r0, #1
 8006958:	d00a      	beq.n	8006970 <sbrk_aligned+0x34>
 800695a:	1cc4      	adds	r4, r0, #3
 800695c:	f024 0403 	bic.w	r4, r4, #3
 8006960:	42a0      	cmp	r0, r4
 8006962:	d007      	beq.n	8006974 <sbrk_aligned+0x38>
 8006964:	1a21      	subs	r1, r4, r0
 8006966:	4628      	mov	r0, r5
 8006968:	f000 f8ac 	bl	8006ac4 <_sbrk_r>
 800696c:	3001      	adds	r0, #1
 800696e:	d101      	bne.n	8006974 <sbrk_aligned+0x38>
 8006970:	f04f 34ff 	mov.w	r4, #4294967295
 8006974:	4620      	mov	r0, r4
 8006976:	bd70      	pop	{r4, r5, r6, pc}
 8006978:	20002204 	.word	0x20002204

0800697c <_malloc_r>:
 800697c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006980:	1ccd      	adds	r5, r1, #3
 8006982:	f025 0503 	bic.w	r5, r5, #3
 8006986:	3508      	adds	r5, #8
 8006988:	2d0c      	cmp	r5, #12
 800698a:	bf38      	it	cc
 800698c:	250c      	movcc	r5, #12
 800698e:	2d00      	cmp	r5, #0
 8006990:	4607      	mov	r7, r0
 8006992:	db01      	blt.n	8006998 <_malloc_r+0x1c>
 8006994:	42a9      	cmp	r1, r5
 8006996:	d905      	bls.n	80069a4 <_malloc_r+0x28>
 8006998:	230c      	movs	r3, #12
 800699a:	603b      	str	r3, [r7, #0]
 800699c:	2600      	movs	r6, #0
 800699e:	4630      	mov	r0, r6
 80069a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a4:	4e2e      	ldr	r6, [pc, #184]	; (8006a60 <_malloc_r+0xe4>)
 80069a6:	f000 f89d 	bl	8006ae4 <__malloc_lock>
 80069aa:	6833      	ldr	r3, [r6, #0]
 80069ac:	461c      	mov	r4, r3
 80069ae:	bb34      	cbnz	r4, 80069fe <_malloc_r+0x82>
 80069b0:	4629      	mov	r1, r5
 80069b2:	4638      	mov	r0, r7
 80069b4:	f7ff ffc2 	bl	800693c <sbrk_aligned>
 80069b8:	1c43      	adds	r3, r0, #1
 80069ba:	4604      	mov	r4, r0
 80069bc:	d14d      	bne.n	8006a5a <_malloc_r+0xde>
 80069be:	6834      	ldr	r4, [r6, #0]
 80069c0:	4626      	mov	r6, r4
 80069c2:	2e00      	cmp	r6, #0
 80069c4:	d140      	bne.n	8006a48 <_malloc_r+0xcc>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	4631      	mov	r1, r6
 80069ca:	4638      	mov	r0, r7
 80069cc:	eb04 0803 	add.w	r8, r4, r3
 80069d0:	f000 f878 	bl	8006ac4 <_sbrk_r>
 80069d4:	4580      	cmp	r8, r0
 80069d6:	d13a      	bne.n	8006a4e <_malloc_r+0xd2>
 80069d8:	6821      	ldr	r1, [r4, #0]
 80069da:	3503      	adds	r5, #3
 80069dc:	1a6d      	subs	r5, r5, r1
 80069de:	f025 0503 	bic.w	r5, r5, #3
 80069e2:	3508      	adds	r5, #8
 80069e4:	2d0c      	cmp	r5, #12
 80069e6:	bf38      	it	cc
 80069e8:	250c      	movcc	r5, #12
 80069ea:	4629      	mov	r1, r5
 80069ec:	4638      	mov	r0, r7
 80069ee:	f7ff ffa5 	bl	800693c <sbrk_aligned>
 80069f2:	3001      	adds	r0, #1
 80069f4:	d02b      	beq.n	8006a4e <_malloc_r+0xd2>
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	442b      	add	r3, r5
 80069fa:	6023      	str	r3, [r4, #0]
 80069fc:	e00e      	b.n	8006a1c <_malloc_r+0xa0>
 80069fe:	6822      	ldr	r2, [r4, #0]
 8006a00:	1b52      	subs	r2, r2, r5
 8006a02:	d41e      	bmi.n	8006a42 <_malloc_r+0xc6>
 8006a04:	2a0b      	cmp	r2, #11
 8006a06:	d916      	bls.n	8006a36 <_malloc_r+0xba>
 8006a08:	1961      	adds	r1, r4, r5
 8006a0a:	42a3      	cmp	r3, r4
 8006a0c:	6025      	str	r5, [r4, #0]
 8006a0e:	bf18      	it	ne
 8006a10:	6059      	strne	r1, [r3, #4]
 8006a12:	6863      	ldr	r3, [r4, #4]
 8006a14:	bf08      	it	eq
 8006a16:	6031      	streq	r1, [r6, #0]
 8006a18:	5162      	str	r2, [r4, r5]
 8006a1a:	604b      	str	r3, [r1, #4]
 8006a1c:	4638      	mov	r0, r7
 8006a1e:	f104 060b 	add.w	r6, r4, #11
 8006a22:	f000 f865 	bl	8006af0 <__malloc_unlock>
 8006a26:	f026 0607 	bic.w	r6, r6, #7
 8006a2a:	1d23      	adds	r3, r4, #4
 8006a2c:	1af2      	subs	r2, r6, r3
 8006a2e:	d0b6      	beq.n	800699e <_malloc_r+0x22>
 8006a30:	1b9b      	subs	r3, r3, r6
 8006a32:	50a3      	str	r3, [r4, r2]
 8006a34:	e7b3      	b.n	800699e <_malloc_r+0x22>
 8006a36:	6862      	ldr	r2, [r4, #4]
 8006a38:	42a3      	cmp	r3, r4
 8006a3a:	bf0c      	ite	eq
 8006a3c:	6032      	streq	r2, [r6, #0]
 8006a3e:	605a      	strne	r2, [r3, #4]
 8006a40:	e7ec      	b.n	8006a1c <_malloc_r+0xa0>
 8006a42:	4623      	mov	r3, r4
 8006a44:	6864      	ldr	r4, [r4, #4]
 8006a46:	e7b2      	b.n	80069ae <_malloc_r+0x32>
 8006a48:	4634      	mov	r4, r6
 8006a4a:	6876      	ldr	r6, [r6, #4]
 8006a4c:	e7b9      	b.n	80069c2 <_malloc_r+0x46>
 8006a4e:	230c      	movs	r3, #12
 8006a50:	603b      	str	r3, [r7, #0]
 8006a52:	4638      	mov	r0, r7
 8006a54:	f000 f84c 	bl	8006af0 <__malloc_unlock>
 8006a58:	e7a1      	b.n	800699e <_malloc_r+0x22>
 8006a5a:	6025      	str	r5, [r4, #0]
 8006a5c:	e7de      	b.n	8006a1c <_malloc_r+0xa0>
 8006a5e:	bf00      	nop
 8006a60:	20002200 	.word	0x20002200

08006a64 <_realloc_r>:
 8006a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a68:	4680      	mov	r8, r0
 8006a6a:	4614      	mov	r4, r2
 8006a6c:	460e      	mov	r6, r1
 8006a6e:	b921      	cbnz	r1, 8006a7a <_realloc_r+0x16>
 8006a70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a74:	4611      	mov	r1, r2
 8006a76:	f7ff bf81 	b.w	800697c <_malloc_r>
 8006a7a:	b92a      	cbnz	r2, 8006a88 <_realloc_r+0x24>
 8006a7c:	f7ff ff12 	bl	80068a4 <_free_r>
 8006a80:	4625      	mov	r5, r4
 8006a82:	4628      	mov	r0, r5
 8006a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a88:	f000 f838 	bl	8006afc <_malloc_usable_size_r>
 8006a8c:	4284      	cmp	r4, r0
 8006a8e:	4607      	mov	r7, r0
 8006a90:	d802      	bhi.n	8006a98 <_realloc_r+0x34>
 8006a92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a96:	d812      	bhi.n	8006abe <_realloc_r+0x5a>
 8006a98:	4621      	mov	r1, r4
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	f7ff ff6e 	bl	800697c <_malloc_r>
 8006aa0:	4605      	mov	r5, r0
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d0ed      	beq.n	8006a82 <_realloc_r+0x1e>
 8006aa6:	42bc      	cmp	r4, r7
 8006aa8:	4622      	mov	r2, r4
 8006aaa:	4631      	mov	r1, r6
 8006aac:	bf28      	it	cs
 8006aae:	463a      	movcs	r2, r7
 8006ab0:	f7ff fed0 	bl	8006854 <memcpy>
 8006ab4:	4631      	mov	r1, r6
 8006ab6:	4640      	mov	r0, r8
 8006ab8:	f7ff fef4 	bl	80068a4 <_free_r>
 8006abc:	e7e1      	b.n	8006a82 <_realloc_r+0x1e>
 8006abe:	4635      	mov	r5, r6
 8006ac0:	e7df      	b.n	8006a82 <_realloc_r+0x1e>
	...

08006ac4 <_sbrk_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	4d06      	ldr	r5, [pc, #24]	; (8006ae0 <_sbrk_r+0x1c>)
 8006ac8:	2300      	movs	r3, #0
 8006aca:	4604      	mov	r4, r0
 8006acc:	4608      	mov	r0, r1
 8006ace:	602b      	str	r3, [r5, #0]
 8006ad0:	f7fa fcaa 	bl	8001428 <_sbrk>
 8006ad4:	1c43      	adds	r3, r0, #1
 8006ad6:	d102      	bne.n	8006ade <_sbrk_r+0x1a>
 8006ad8:	682b      	ldr	r3, [r5, #0]
 8006ada:	b103      	cbz	r3, 8006ade <_sbrk_r+0x1a>
 8006adc:	6023      	str	r3, [r4, #0]
 8006ade:	bd38      	pop	{r3, r4, r5, pc}
 8006ae0:	20002208 	.word	0x20002208

08006ae4 <__malloc_lock>:
 8006ae4:	4801      	ldr	r0, [pc, #4]	; (8006aec <__malloc_lock+0x8>)
 8006ae6:	f000 b811 	b.w	8006b0c <__retarget_lock_acquire_recursive>
 8006aea:	bf00      	nop
 8006aec:	2000220c 	.word	0x2000220c

08006af0 <__malloc_unlock>:
 8006af0:	4801      	ldr	r0, [pc, #4]	; (8006af8 <__malloc_unlock+0x8>)
 8006af2:	f000 b80c 	b.w	8006b0e <__retarget_lock_release_recursive>
 8006af6:	bf00      	nop
 8006af8:	2000220c 	.word	0x2000220c

08006afc <_malloc_usable_size_r>:
 8006afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b00:	1f18      	subs	r0, r3, #4
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	bfbc      	itt	lt
 8006b06:	580b      	ldrlt	r3, [r1, r0]
 8006b08:	18c0      	addlt	r0, r0, r3
 8006b0a:	4770      	bx	lr

08006b0c <__retarget_lock_acquire_recursive>:
 8006b0c:	4770      	bx	lr

08006b0e <__retarget_lock_release_recursive>:
 8006b0e:	4770      	bx	lr

08006b10 <_init>:
 8006b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b12:	bf00      	nop
 8006b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b16:	bc08      	pop	{r3}
 8006b18:	469e      	mov	lr, r3
 8006b1a:	4770      	bx	lr

08006b1c <_fini>:
 8006b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1e:	bf00      	nop
 8006b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b22:	bc08      	pop	{r3}
 8006b24:	469e      	mov	lr, r3
 8006b26:	4770      	bx	lr

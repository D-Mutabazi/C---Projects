
Multi-Functional Light-Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003e38  08003e38  00013e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e70  08003e70  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003e70  08003e70  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e70  08003e70  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e70  08003e70  00013e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e74  08003e74  00013e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000000b4  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000cc  200000cc  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b3a1  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a71  00000000  00000000  0002b3e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  0002ce60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006d0  00000000  00000000  0002d5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fceb  00000000  00000000  0002dc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ab24  00000000  00000000  0004d983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0351  00000000  00000000  000584a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001187f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001cc8  00000000  00000000  00118848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003e20 	.word	0x08003e20

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08003e20 	.word	0x08003e20

080001d4 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t studentNum[11]="#23765518$\n" ;
uint8_t recvd_char[1];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]

	//transmit recvd characer
	HAL_UART_Transmit(&huart2, recvd_char, 1, 50) ;
 80001dc:	2332      	movs	r3, #50	; 0x32
 80001de:	2201      	movs	r2, #1
 80001e0:	4906      	ldr	r1, [pc, #24]	; (80001fc <HAL_UART_RxCpltCallback+0x28>)
 80001e2:	4807      	ldr	r0, [pc, #28]	; (8000200 <HAL_UART_RxCpltCallback+0x2c>)
 80001e4:	f002 fb7a 	bl	80028dc <HAL_UART_Transmit>

	// recieve character
	HAL_UART_Receive_IT(&huart2, recvd_char, 1);
 80001e8:	2201      	movs	r2, #1
 80001ea:	4904      	ldr	r1, [pc, #16]	; (80001fc <HAL_UART_RxCpltCallback+0x28>)
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <HAL_UART_RxCpltCallback+0x2c>)
 80001ee:	f002 fbff 	bl	80029f0 <HAL_UART_Receive_IT>
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	200000bc 	.word	0x200000bc
 8000200:	20000034 	.word	0x20000034

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000208:	f000 fa68 	bl	80006dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020c:	f000 f828 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000210:	f000 f8b6 	bl	8000380 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000214:	f000 f882 	bl	800031c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(200);
 8000218:	20c8      	movs	r0, #200	; 0xc8
 800021a:	f000 fac5 	bl	80007a8 <HAL_Delay>
  HAL_UART_Transmit(&huart2, studentNum, 11, 150); //transmit student number
 800021e:	2396      	movs	r3, #150	; 0x96
 8000220:	220b      	movs	r2, #11
 8000222:	490b      	ldr	r1, [pc, #44]	; (8000250 <main+0x4c>)
 8000224:	480b      	ldr	r0, [pc, #44]	; (8000254 <main+0x50>)
 8000226:	f002 fb59 	bl	80028dc <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2, recvd_char, 1); //recv character input
 800022a:	2201      	movs	r2, #1
 800022c:	490a      	ldr	r1, [pc, #40]	; (8000258 <main+0x54>)
 800022e:	4809      	ldr	r0, [pc, #36]	; (8000254 <main+0x50>)
 8000230:	f002 fbde 	bl	80029f0 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 //10 ms delay
	  if(middle_button_pressed == 1){
 8000234:	4b09      	ldr	r3, [pc, #36]	; (800025c <main+0x58>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b01      	cmp	r3, #1
 800023a:	d1fb      	bne.n	8000234 <main+0x30>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5)  ;
 800023c:	2120      	movs	r1, #32
 800023e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000242:	f000 fe17 	bl	8000e74 <HAL_GPIO_TogglePin>
		  middle_button_pressed = 0;
 8000246:	4b05      	ldr	r3, [pc, #20]	; (800025c <main+0x58>)
 8000248:	2200      	movs	r2, #0
 800024a:	701a      	strb	r2, [r3, #0]
	  if(middle_button_pressed == 1){
 800024c:	e7f2      	b.n	8000234 <main+0x30>
 800024e:	bf00      	nop
 8000250:	20000000 	.word	0x20000000
 8000254:	20000034 	.word	0x20000034
 8000258:	200000bc 	.word	0x200000bc
 800025c:	200000c4 	.word	0x200000c4

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b0a6      	sub	sp, #152	; 0x98
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800026a:	2228      	movs	r2, #40	; 0x28
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f003 fdce 	bl	8003e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000274:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
 8000282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2258      	movs	r2, #88	; 0x58
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f003 fdc0 	bl	8003e10 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000290:	2302      	movs	r3, #2
 8000292:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000294:	2301      	movs	r3, #1
 8000296:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000298:	2310      	movs	r3, #16
 800029a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029e:	2302      	movs	r3, #2
 80002a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 fe16 	bl	8000ef0 <HAL_RCC_OscConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ca:	f000 f8d5 	bl	8000478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ce:	230f      	movs	r3, #15
 80002d0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d2:	2302      	movs	r3, #2
 80002d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002e8:	2102      	movs	r1, #2
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 fe54 	bl	8001f98 <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002f6:	f000 f8bf 	bl	8000478 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002fa:	2302      	movs	r3, #2
 80002fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002fe:	2300      	movs	r3, #0
 8000300:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	4618      	mov	r0, r3
 8000306:	f002 f87d 	bl	8002404 <HAL_RCCEx_PeriphCLKConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000310:	f000 f8b2 	bl	8000478 <Error_Handler>
  }
}
 8000314:	bf00      	nop
 8000316:	3798      	adds	r7, #152	; 0x98
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000320:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_USART2_UART_Init+0x5c>)
 8000322:	4a16      	ldr	r2, [pc, #88]	; (800037c <MX_USART2_UART_Init+0x60>)
 8000324:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000326:	4b14      	ldr	r3, [pc, #80]	; (8000378 <MX_USART2_UART_Init+0x5c>)
 8000328:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800032c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800032e:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MX_USART2_UART_Init+0x5c>)
 8000330:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000334:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000336:	4b10      	ldr	r3, [pc, #64]	; (8000378 <MX_USART2_UART_Init+0x5c>)
 8000338:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800033c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_USART2_UART_Init+0x5c>)
 8000340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000344:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000346:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_USART2_UART_Init+0x5c>)
 8000348:	220c      	movs	r2, #12
 800034a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034c:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <MX_USART2_UART_Init+0x5c>)
 800034e:	2200      	movs	r2, #0
 8000350:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_USART2_UART_Init+0x5c>)
 8000354:	2200      	movs	r2, #0
 8000356:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <MX_USART2_UART_Init+0x5c>)
 800035a:	2200      	movs	r2, #0
 800035c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_USART2_UART_Init+0x5c>)
 8000360:	2200      	movs	r2, #0
 8000362:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <MX_USART2_UART_Init+0x5c>)
 8000366:	f002 fa6b 	bl	8002840 <HAL_UART_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000370:	f000 f882 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000034 	.word	0x20000034
 800037c:	40004400 	.word	0x40004400

08000380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08a      	sub	sp, #40	; 0x28
 8000384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 0314 	add.w	r3, r7, #20
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000396:	4b36      	ldr	r3, [pc, #216]	; (8000470 <MX_GPIO_Init+0xf0>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a35      	ldr	r2, [pc, #212]	; (8000470 <MX_GPIO_Init+0xf0>)
 800039c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003a0:	6153      	str	r3, [r2, #20]
 80003a2:	4b33      	ldr	r3, [pc, #204]	; (8000470 <MX_GPIO_Init+0xf0>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003aa:	613b      	str	r3, [r7, #16]
 80003ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003ae:	4b30      	ldr	r3, [pc, #192]	; (8000470 <MX_GPIO_Init+0xf0>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	4a2f      	ldr	r2, [pc, #188]	; (8000470 <MX_GPIO_Init+0xf0>)
 80003b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003b8:	6153      	str	r3, [r2, #20]
 80003ba:	4b2d      	ldr	r3, [pc, #180]	; (8000470 <MX_GPIO_Init+0xf0>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c6:	4b2a      	ldr	r3, [pc, #168]	; (8000470 <MX_GPIO_Init+0xf0>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a29      	ldr	r2, [pc, #164]	; (8000470 <MX_GPIO_Init+0xf0>)
 80003cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003d0:	6153      	str	r3, [r2, #20]
 80003d2:	4b27      	ldr	r3, [pc, #156]	; (8000470 <MX_GPIO_Init+0xf0>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003da:	60bb      	str	r3, [r7, #8]
 80003dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003de:	4b24      	ldr	r3, [pc, #144]	; (8000470 <MX_GPIO_Init+0xf0>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a23      	ldr	r2, [pc, #140]	; (8000470 <MX_GPIO_Init+0xf0>)
 80003e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003e8:	6153      	str	r3, [r2, #20]
 80003ea:	4b21      	ldr	r3, [pc, #132]	; (8000470 <MX_GPIO_Init+0xf0>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2120      	movs	r1, #32
 80003fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fe:	f000 fd21 	bl	8000e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000408:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800040c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000412:	f107 0314 	add.w	r3, r7, #20
 8000416:	4619      	mov	r1, r3
 8000418:	4816      	ldr	r0, [pc, #88]	; (8000474 <MX_GPIO_Init+0xf4>)
 800041a:	f000 fb71 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800041e:	2320      	movs	r3, #32
 8000420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000422:	2301      	movs	r3, #1
 8000424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042a:	2300      	movs	r3, #0
 800042c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800042e:	f107 0314 	add.w	r3, r7, #20
 8000432:	4619      	mov	r1, r3
 8000434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000438:	f000 fb62 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800043c:	2340      	movs	r3, #64	; 0x40
 800043e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000440:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000446:	2301      	movs	r3, #1
 8000448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	4619      	mov	r1, r3
 8000450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000454:	f000 fb54 	bl	8000b00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000458:	2200      	movs	r2, #0
 800045a:	2100      	movs	r1, #0
 800045c:	2017      	movs	r0, #23
 800045e:	f000 faa2 	bl	80009a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000462:	2017      	movs	r0, #23
 8000464:	f000 fabb 	bl	80009de <HAL_NVIC_EnableIRQ>

}
 8000468:	bf00      	nop
 800046a:	3728      	adds	r7, #40	; 0x28
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40021000 	.word	0x40021000
 8000474:	48000800 	.word	0x48000800

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
}
 800047e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000480:	e7fe      	b.n	8000480 <Error_Handler+0x8>
	...

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_MspInit+0x44>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <HAL_MspInit+0x44>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6193      	str	r3, [r2, #24]
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <HAL_MspInit+0x44>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <HAL_MspInit+0x44>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <HAL_MspInit+0x44>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <HAL_MspInit+0x44>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004ba:	2007      	movs	r0, #7
 80004bc:	f000 fa68 	bl	8000990 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000

080004cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a1b      	ldr	r2, [pc, #108]	; (8000558 <HAL_UART_MspInit+0x8c>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d130      	bne.n	8000550 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004ee:	4b1b      	ldr	r3, [pc, #108]	; (800055c <HAL_UART_MspInit+0x90>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	4a1a      	ldr	r2, [pc, #104]	; (800055c <HAL_UART_MspInit+0x90>)
 80004f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f8:	61d3      	str	r3, [r2, #28]
 80004fa:	4b18      	ldr	r3, [pc, #96]	; (800055c <HAL_UART_MspInit+0x90>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000502:	613b      	str	r3, [r7, #16]
 8000504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <HAL_UART_MspInit+0x90>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a14      	ldr	r2, [pc, #80]	; (800055c <HAL_UART_MspInit+0x90>)
 800050c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b12      	ldr	r3, [pc, #72]	; (800055c <HAL_UART_MspInit+0x90>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800051e:	230c      	movs	r3, #12
 8000520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000522:	2302      	movs	r3, #2
 8000524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	2300      	movs	r3, #0
 8000528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052a:	2300      	movs	r3, #0
 800052c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800052e:	2307      	movs	r3, #7
 8000530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	4619      	mov	r1, r3
 8000538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053c:	f000 fae0 	bl	8000b00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000540:	2200      	movs	r2, #0
 8000542:	2100      	movs	r1, #0
 8000544:	2026      	movs	r0, #38	; 0x26
 8000546:	f000 fa2e 	bl	80009a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800054a:	2026      	movs	r0, #38	; 0x26
 800054c:	f000 fa47 	bl	80009de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000550:	bf00      	nop
 8000552:	3728      	adds	r7, #40	; 0x28
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40004400 	.word	0x40004400
 800055c:	40021000 	.word	0x40021000

08000560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <NMI_Handler+0x4>

08000566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <HardFault_Handler+0x4>

0800056c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <MemManage_Handler+0x4>

08000572 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000576:	e7fe      	b.n	8000576 <BusFault_Handler+0x4>

08000578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800057c:	e7fe      	b.n	800057c <UsageFault_Handler+0x4>

0800057e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ac:	f000 f8dc 	bl	8000768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <EXTI9_5_IRQHandler+0x8c>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d037      	beq.n	8000634 <EXTI9_5_IRQHandler+0x80>

		if(HAL_GetTick() - ticks_pressed >= 20){
 80005c4:	f000 f8e4 	bl	8000790 <HAL_GetTick>
 80005c8:	4602      	mov	r2, r0
 80005ca:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <EXTI9_5_IRQHandler+0x90>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	1ad3      	subs	r3, r2, r3
 80005d0:	2b13      	cmp	r3, #19
 80005d2:	d92c      	bls.n	800062e <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 80005d4:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <EXTI9_5_IRQHandler+0x94>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d112      	bne.n	8000604 <EXTI9_5_IRQHandler+0x50>
 80005de:	2140      	movs	r1, #64	; 0x40
 80005e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e4:	f000 fc16 	bl	8000e14 <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d10a      	bne.n	8000604 <EXTI9_5_IRQHandler+0x50>
				button_state =0 ;
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <EXTI9_5_IRQHandler+0x94>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 80005f4:	f000 f8cc 	bl	8000790 <HAL_GetTick>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <EXTI9_5_IRQHandler+0x90>)
 80005fc:	6013      	str	r3, [r2, #0]

				middle_button_pressed = 1;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <EXTI9_5_IRQHandler+0x98>)
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <EXTI9_5_IRQHandler+0x94>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	2b00      	cmp	r3, #0
 800060c:	d10f      	bne.n	800062e <EXTI9_5_IRQHandler+0x7a>
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f000 fbfe 	bl	8000e14 <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	2b01      	cmp	r3, #1
 800061c:	d107      	bne.n	800062e <EXTI9_5_IRQHandler+0x7a>
				button_state = 1 ;
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <EXTI9_5_IRQHandler+0x94>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8000624:	f000 f8b4 	bl	8000790 <HAL_GetTick>
 8000628:	4603      	mov	r3, r0
 800062a:	4a06      	ldr	r2, [pc, #24]	; (8000644 <EXTI9_5_IRQHandler+0x90>)
 800062c:	6013      	str	r3, [r2, #0]
//						middle_button_pressed= 1 ; //flag set
//					}
//			}
//

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <EXTI9_5_IRQHandler+0x8c>)
 8000630:	2240      	movs	r2, #64	; 0x40
 8000632:	615a      	str	r2, [r3, #20]
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000634:	2040      	movs	r0, #64	; 0x40
 8000636:	f000 fc37 	bl	8000ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40010400 	.word	0x40010400
 8000644:	200000c0 	.word	0x200000c0
 8000648:	2000000b 	.word	0x2000000b
 800064c:	200000c4 	.word	0x200000c4

08000650 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <USART2_IRQHandler+0x10>)
 8000656:	f002 fa0f 	bl	8002a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000034 	.word	0x20000034

08000664 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <SystemInit+0x20>)
 800066a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800066e:	4a05      	ldr	r2, [pc, #20]	; (8000684 <SystemInit+0x20>)
 8000670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006c0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800068c:	f7ff ffea 	bl	8000664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000692:	490d      	ldr	r1, [pc, #52]	; (80006c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000694:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <LoopForever+0xe>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000698:	e002      	b.n	80006a0 <LoopCopyDataInit>

0800069a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800069c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069e:	3304      	adds	r3, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a4:	d3f9      	bcc.n	800069a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a6:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a8:	4c0a      	ldr	r4, [pc, #40]	; (80006d4 <LoopForever+0x16>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ac:	e001      	b.n	80006b2 <LoopFillZerobss>

080006ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b0:	3204      	adds	r2, #4

080006b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b4:	d3fb      	bcc.n	80006ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006b6:	f003 fb87 	bl	8003dc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ba:	f7ff fda3 	bl	8000204 <main>

080006be <LoopForever>:

LoopForever:
    b LoopForever
 80006be:	e7fe      	b.n	80006be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80006cc:	08003e78 	.word	0x08003e78
  ldr r2, =_sbss
 80006d0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80006d4:	200000cc 	.word	0x200000cc

080006d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC1_2_IRQHandler>
	...

080006dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_Init+0x28>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <HAL_Init+0x28>)
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ec:	2003      	movs	r0, #3
 80006ee:	f000 f94f 	bl	8000990 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006f2:	2000      	movs	r0, #0
 80006f4:	f000 f808 	bl	8000708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f8:	f7ff fec4 	bl	8000484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40022000 	.word	0x40022000

08000708 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_InitTick+0x54>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_InitTick+0x58>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000722:	fbb2 f3f3 	udiv	r3, r2, r3
 8000726:	4618      	mov	r0, r3
 8000728:	f000 f967 	bl	80009fa <HAL_SYSTICK_Config>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e00e      	b.n	8000754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b0f      	cmp	r3, #15
 800073a:	d80a      	bhi.n	8000752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800073c:	2200      	movs	r2, #0
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
 8000744:	f000 f92f 	bl	80009a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <HAL_InitTick+0x5c>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800074e:	2300      	movs	r3, #0
 8000750:	e000      	b.n	8000754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2000000c 	.word	0x2000000c
 8000760:	20000014 	.word	0x20000014
 8000764:	20000010 	.word	0x20000010

08000768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_IncTick+0x20>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_IncTick+0x24>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4413      	add	r3, r2
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_IncTick+0x24>)
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000014 	.word	0x20000014
 800078c:	200000c8 	.word	0x200000c8

08000790 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;  
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <HAL_GetTick+0x14>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	200000c8 	.word	0x200000c8

080007a8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b0:	f7ff ffee 	bl	8000790 <HAL_GetTick>
 80007b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c0:	d005      	beq.n	80007ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <HAL_Delay+0x44>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	461a      	mov	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	4413      	add	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007ce:	bf00      	nop
 80007d0:	f7ff ffde 	bl	8000790 <HAL_GetTick>
 80007d4:	4602      	mov	r2, r0
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d8f7      	bhi.n	80007d0 <HAL_Delay+0x28>
  {
  }
}
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000014 	.word	0x20000014

080007f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <__NVIC_SetPriorityGrouping+0x44>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800080c:	4013      	ands	r3, r2
 800080e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800081c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000822:	4a04      	ldr	r2, [pc, #16]	; (8000834 <__NVIC_SetPriorityGrouping+0x44>)
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	60d3      	str	r3, [r2, #12]
}
 8000828:	bf00      	nop
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800083c:	4b04      	ldr	r3, [pc, #16]	; (8000850 <__NVIC_GetPriorityGrouping+0x18>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	0a1b      	lsrs	r3, r3, #8
 8000842:	f003 0307 	and.w	r3, r3, #7
}
 8000846:	4618      	mov	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	2b00      	cmp	r3, #0
 8000864:	db0b      	blt.n	800087e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	f003 021f 	and.w	r2, r3, #31
 800086c:	4907      	ldr	r1, [pc, #28]	; (800088c <__NVIC_EnableIRQ+0x38>)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	095b      	lsrs	r3, r3, #5
 8000874:	2001      	movs	r0, #1
 8000876:	fa00 f202 	lsl.w	r2, r0, r2
 800087a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000e100 	.word	0xe000e100

08000890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	db0a      	blt.n	80008ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	490c      	ldr	r1, [pc, #48]	; (80008dc <__NVIC_SetPriority+0x4c>)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	0112      	lsls	r2, r2, #4
 80008b0:	b2d2      	uxtb	r2, r2
 80008b2:	440b      	add	r3, r1
 80008b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b8:	e00a      	b.n	80008d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4908      	ldr	r1, [pc, #32]	; (80008e0 <__NVIC_SetPriority+0x50>)
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	f003 030f 	and.w	r3, r3, #15
 80008c6:	3b04      	subs	r3, #4
 80008c8:	0112      	lsls	r2, r2, #4
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	440b      	add	r3, r1
 80008ce:	761a      	strb	r2, [r3, #24]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000e100 	.word	0xe000e100
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b089      	sub	sp, #36	; 0x24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	f1c3 0307 	rsb	r3, r3, #7
 80008fe:	2b04      	cmp	r3, #4
 8000900:	bf28      	it	cs
 8000902:	2304      	movcs	r3, #4
 8000904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3304      	adds	r3, #4
 800090a:	2b06      	cmp	r3, #6
 800090c:	d902      	bls.n	8000914 <NVIC_EncodePriority+0x30>
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3b03      	subs	r3, #3
 8000912:	e000      	b.n	8000916 <NVIC_EncodePriority+0x32>
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	f04f 32ff 	mov.w	r2, #4294967295
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43da      	mvns	r2, r3
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	401a      	ands	r2, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800092c:	f04f 31ff 	mov.w	r1, #4294967295
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	43d9      	mvns	r1, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	4313      	orrs	r3, r2
         );
}
 800093e:	4618      	mov	r0, r3
 8000940:	3724      	adds	r7, #36	; 0x24
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3b01      	subs	r3, #1
 8000958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800095c:	d301      	bcc.n	8000962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095e:	2301      	movs	r3, #1
 8000960:	e00f      	b.n	8000982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <SysTick_Config+0x40>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096a:	210f      	movs	r1, #15
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f7ff ff8e 	bl	8000890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <SysTick_Config+0x40>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <SysTick_Config+0x40>)
 800097c:	2207      	movs	r2, #7
 800097e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	e000e010 	.word	0xe000e010

08000990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ff29 	bl	80007f0 <__NVIC_SetPriorityGrouping>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	4603      	mov	r3, r0
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b8:	f7ff ff3e 	bl	8000838 <__NVIC_GetPriorityGrouping>
 80009bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	68b9      	ldr	r1, [r7, #8]
 80009c2:	6978      	ldr	r0, [r7, #20]
 80009c4:	f7ff ff8e 	bl	80008e4 <NVIC_EncodePriority>
 80009c8:	4602      	mov	r2, r0
 80009ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff5d 	bl	8000890 <__NVIC_SetPriority>
}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff31 	bl	8000854 <__NVIC_EnableIRQ>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ffa2 	bl	800094c <SysTick_Config>
 8000a08:	4603      	mov	r3, r0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d008      	beq.n	8000a36 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2204      	movs	r2, #4
 8000a28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e020      	b.n	8000a78 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f022 020e 	bic.w	r2, r2, #14
 8000a44:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f022 0201 	bic.w	r2, r2, #1
 8000a54:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a5e:	2101      	movs	r1, #1
 8000a60:	fa01 f202 	lsl.w	r2, r1, r2
 8000a64:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d005      	beq.n	8000aa6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]
 8000aa4:	e027      	b.n	8000af6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f022 020e 	bic.w	r2, r2, #14
 8000ab4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f022 0201 	bic.w	r2, r2, #1
 8000ac4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ace:	2101      	movs	r1, #1
 8000ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d003      	beq.n	8000af6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	4798      	blx	r3
    } 
  }
  return status;
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b087      	sub	sp, #28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0e:	e160      	b.n	8000dd2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	2101      	movs	r1, #1
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 8152 	beq.w	8000dcc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d005      	beq.n	8000b40 <HAL_GPIO_Init+0x40>
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 0303 	and.w	r3, r3, #3
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d130      	bne.n	8000ba2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	68da      	ldr	r2, [r3, #12]
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b76:	2201      	movs	r2, #1
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	091b      	lsrs	r3, r3, #4
 8000b8c:	f003 0201 	and.w	r2, r3, #1
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 0303 	and.w	r3, r3, #3
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d017      	beq.n	8000bde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	2203      	movs	r2, #3
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f003 0303 	and.w	r3, r3, #3
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d123      	bne.n	8000c32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	08da      	lsrs	r2, r3, #3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3208      	adds	r2, #8
 8000bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	220f      	movs	r2, #15
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	691a      	ldr	r2, [r3, #16]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f003 0307 	and.w	r3, r3, #7
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	08da      	lsrs	r2, r3, #3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3208      	adds	r2, #8
 8000c2c:	6939      	ldr	r1, [r7, #16]
 8000c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 0203 	and.w	r2, r3, #3
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 80ac 	beq.w	8000dcc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c74:	4b5e      	ldr	r3, [pc, #376]	; (8000df0 <HAL_GPIO_Init+0x2f0>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a5d      	ldr	r2, [pc, #372]	; (8000df0 <HAL_GPIO_Init+0x2f0>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b5b      	ldr	r3, [pc, #364]	; (8000df0 <HAL_GPIO_Init+0x2f0>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c8c:	4a59      	ldr	r2, [pc, #356]	; (8000df4 <HAL_GPIO_Init+0x2f4>)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	089b      	lsrs	r3, r3, #2
 8000c92:	3302      	adds	r3, #2
 8000c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	220f      	movs	r2, #15
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cb6:	d025      	beq.n	8000d04 <HAL_GPIO_Init+0x204>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a4f      	ldr	r2, [pc, #316]	; (8000df8 <HAL_GPIO_Init+0x2f8>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d01f      	beq.n	8000d00 <HAL_GPIO_Init+0x200>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a4e      	ldr	r2, [pc, #312]	; (8000dfc <HAL_GPIO_Init+0x2fc>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d019      	beq.n	8000cfc <HAL_GPIO_Init+0x1fc>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a4d      	ldr	r2, [pc, #308]	; (8000e00 <HAL_GPIO_Init+0x300>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d013      	beq.n	8000cf8 <HAL_GPIO_Init+0x1f8>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a4c      	ldr	r2, [pc, #304]	; (8000e04 <HAL_GPIO_Init+0x304>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d00d      	beq.n	8000cf4 <HAL_GPIO_Init+0x1f4>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a4b      	ldr	r2, [pc, #300]	; (8000e08 <HAL_GPIO_Init+0x308>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d007      	beq.n	8000cf0 <HAL_GPIO_Init+0x1f0>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a4a      	ldr	r2, [pc, #296]	; (8000e0c <HAL_GPIO_Init+0x30c>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d101      	bne.n	8000cec <HAL_GPIO_Init+0x1ec>
 8000ce8:	2306      	movs	r3, #6
 8000cea:	e00c      	b.n	8000d06 <HAL_GPIO_Init+0x206>
 8000cec:	2307      	movs	r3, #7
 8000cee:	e00a      	b.n	8000d06 <HAL_GPIO_Init+0x206>
 8000cf0:	2305      	movs	r3, #5
 8000cf2:	e008      	b.n	8000d06 <HAL_GPIO_Init+0x206>
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	e006      	b.n	8000d06 <HAL_GPIO_Init+0x206>
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	e004      	b.n	8000d06 <HAL_GPIO_Init+0x206>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e002      	b.n	8000d06 <HAL_GPIO_Init+0x206>
 8000d00:	2301      	movs	r3, #1
 8000d02:	e000      	b.n	8000d06 <HAL_GPIO_Init+0x206>
 8000d04:	2300      	movs	r3, #0
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	f002 0203 	and.w	r2, r2, #3
 8000d0c:	0092      	lsls	r2, r2, #2
 8000d0e:	4093      	lsls	r3, r2
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d16:	4937      	ldr	r1, [pc, #220]	; (8000df4 <HAL_GPIO_Init+0x2f4>)
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d24:	4b3a      	ldr	r3, [pc, #232]	; (8000e10 <HAL_GPIO_Init+0x310>)
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d003      	beq.n	8000d48 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d48:	4a31      	ldr	r2, [pc, #196]	; (8000e10 <HAL_GPIO_Init+0x310>)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d4e:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <HAL_GPIO_Init+0x310>)
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	43db      	mvns	r3, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d72:	4a27      	ldr	r2, [pc, #156]	; (8000e10 <HAL_GPIO_Init+0x310>)
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d78:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <HAL_GPIO_Init+0x310>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d9c:	4a1c      	ldr	r2, [pc, #112]	; (8000e10 <HAL_GPIO_Init+0x310>)
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000da2:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <HAL_GPIO_Init+0x310>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <HAL_GPIO_Init+0x310>)
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f47f ae97 	bne.w	8000b10 <HAL_GPIO_Init+0x10>
  }
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	371c      	adds	r7, #28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40010000 	.word	0x40010000
 8000df8:	48000400 	.word	0x48000400
 8000dfc:	48000800 	.word	0x48000800
 8000e00:	48000c00 	.word	0x48000c00
 8000e04:	48001000 	.word	0x48001000
 8000e08:	48001400 	.word	0x48001400
 8000e0c:	48001800 	.word	0x48001800
 8000e10:	40010400 	.word	0x40010400

08000e14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	887b      	ldrh	r3, [r7, #2]
 8000e26:	4013      	ands	r3, r2
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d002      	beq.n	8000e32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	73fb      	strb	r3, [r7, #15]
 8000e30:	e001      	b.n	8000e36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]
 8000e50:	4613      	mov	r3, r2
 8000e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e54:	787b      	ldrb	r3, [r7, #1]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e5a:	887a      	ldrh	r2, [r7, #2]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e60:	e002      	b.n	8000e68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e62:	887a      	ldrh	r2, [r7, #2]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e86:	887a      	ldrh	r2, [r7, #2]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	041a      	lsls	r2, r3, #16
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	43d9      	mvns	r1, r3
 8000e92:	887b      	ldrh	r3, [r7, #2]
 8000e94:	400b      	ands	r3, r1
 8000e96:	431a      	orrs	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	619a      	str	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000eb4:	695a      	ldr	r2, [r3, #20]
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d006      	beq.n	8000ecc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ec0:	88fb      	ldrh	r3, [r7, #6]
 8000ec2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f806 	bl	8000ed8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40010400 	.word	0x40010400

08000ed8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000efc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f00:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	f001 b83a 	b.w	8001f8a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 816f 	beq.w	800120a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f2c:	4bb5      	ldr	r3, [pc, #724]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 030c 	and.w	r3, r3, #12
 8000f34:	2b04      	cmp	r3, #4
 8000f36:	d00c      	beq.n	8000f52 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f38:	4bb2      	ldr	r3, [pc, #712]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 030c 	and.w	r3, r3, #12
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d15c      	bne.n	8000ffe <HAL_RCC_OscConfig+0x10e>
 8000f44:	4baf      	ldr	r3, [pc, #700]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f50:	d155      	bne.n	8000ffe <HAL_RCC_OscConfig+0x10e>
 8000f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f56:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000f5e:	fa93 f3a3 	rbit	r3, r3
 8000f62:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f66:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6a:	fab3 f383 	clz	r3, r3
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	095b      	lsrs	r3, r3, #5
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d102      	bne.n	8000f84 <HAL_RCC_OscConfig+0x94>
 8000f7e:	4ba1      	ldr	r3, [pc, #644]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	e015      	b.n	8000fb0 <HAL_RCC_OscConfig+0xc0>
 8000f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f88:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000f90:	fa93 f3a3 	rbit	r3, r3
 8000f94:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000f98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f9c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000fa0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000fa4:	fa93 f3a3 	rbit	r3, r3
 8000fa8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000fac:	4b95      	ldr	r3, [pc, #596]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fb4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000fb8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000fbc:	fa92 f2a2 	rbit	r2, r2
 8000fc0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000fc4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000fc8:	fab2 f282 	clz	r2, r2
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	f042 0220 	orr.w	r2, r2, #32
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	f002 021f 	and.w	r2, r2, #31
 8000fd8:	2101      	movs	r1, #1
 8000fda:	fa01 f202 	lsl.w	r2, r1, r2
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 8111 	beq.w	8001208 <HAL_RCC_OscConfig+0x318>
 8000fe6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f040 8108 	bne.w	8001208 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	f000 bfc6 	b.w	8001f8a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ffe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001002:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100e:	d106      	bne.n	800101e <HAL_RCC_OscConfig+0x12e>
 8001010:	4b7c      	ldr	r3, [pc, #496]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a7b      	ldr	r2, [pc, #492]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	e036      	b.n	800108c <HAL_RCC_OscConfig+0x19c>
 800101e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001022:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10c      	bne.n	8001048 <HAL_RCC_OscConfig+0x158>
 800102e:	4b75      	ldr	r3, [pc, #468]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a74      	ldr	r2, [pc, #464]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	4b72      	ldr	r3, [pc, #456]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a71      	ldr	r2, [pc, #452]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	e021      	b.n	800108c <HAL_RCC_OscConfig+0x19c>
 8001048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800104c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001058:	d10c      	bne.n	8001074 <HAL_RCC_OscConfig+0x184>
 800105a:	4b6a      	ldr	r3, [pc, #424]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a69      	ldr	r2, [pc, #420]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	4b67      	ldr	r3, [pc, #412]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a66      	ldr	r2, [pc, #408]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 800106c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e00b      	b.n	800108c <HAL_RCC_OscConfig+0x19c>
 8001074:	4b63      	ldr	r3, [pc, #396]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a62      	ldr	r2, [pc, #392]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 800107a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b60      	ldr	r3, [pc, #384]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a5f      	ldr	r2, [pc, #380]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800108a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800108c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001090:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d059      	beq.n	8001150 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fb78 	bl	8000790 <HAL_GetTick>
 80010a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a4:	e00a      	b.n	80010bc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a6:	f7ff fb73 	bl	8000790 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b64      	cmp	r3, #100	; 0x64
 80010b4:	d902      	bls.n	80010bc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	f000 bf67 	b.w	8001f8a <HAL_RCC_OscConfig+0x109a>
 80010bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80010c8:	fa93 f3a3 	rbit	r3, r3
 80010cc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80010d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d4:	fab3 f383 	clz	r3, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	095b      	lsrs	r3, r3, #5
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d102      	bne.n	80010ee <HAL_RCC_OscConfig+0x1fe>
 80010e8:	4b46      	ldr	r3, [pc, #280]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	e015      	b.n	800111a <HAL_RCC_OscConfig+0x22a>
 80010ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80010fa:	fa93 f3a3 	rbit	r3, r3
 80010fe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001102:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001106:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800110a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800110e:	fa93 f3a3 	rbit	r3, r3
 8001112:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001116:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800111e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001122:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001126:	fa92 f2a2 	rbit	r2, r2
 800112a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800112e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001132:	fab2 f282 	clz	r2, r2
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	f042 0220 	orr.w	r2, r2, #32
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	f002 021f 	and.w	r2, r2, #31
 8001142:	2101      	movs	r1, #1
 8001144:	fa01 f202 	lsl.w	r2, r1, r2
 8001148:	4013      	ands	r3, r2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0ab      	beq.n	80010a6 <HAL_RCC_OscConfig+0x1b6>
 800114e:	e05c      	b.n	800120a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fb1e 	bl	8000790 <HAL_GetTick>
 8001154:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001158:	e00a      	b.n	8001170 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800115a:	f7ff fb19 	bl	8000790 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b64      	cmp	r3, #100	; 0x64
 8001168:	d902      	bls.n	8001170 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	f000 bf0d 	b.w	8001f8a <HAL_RCC_OscConfig+0x109a>
 8001170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001174:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001178:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800117c:	fa93 f3a3 	rbit	r3, r3
 8001180:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001184:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001188:	fab3 f383 	clz	r3, r3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b01      	cmp	r3, #1
 800119a:	d102      	bne.n	80011a2 <HAL_RCC_OscConfig+0x2b2>
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	e015      	b.n	80011ce <HAL_RCC_OscConfig+0x2de>
 80011a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80011ae:	fa93 f3a3 	rbit	r3, r3
 80011b2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80011b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80011be:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80011c2:	fa93 f3a3 	rbit	r3, r3
 80011c6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_RCC_OscConfig+0x314>)
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011d2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80011d6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80011da:	fa92 f2a2 	rbit	r2, r2
 80011de:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80011e2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80011e6:	fab2 f282 	clz	r2, r2
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	f042 0220 	orr.w	r2, r2, #32
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	f002 021f 	and.w	r2, r2, #31
 80011f6:	2101      	movs	r1, #1
 80011f8:	fa01 f202 	lsl.w	r2, r1, r2
 80011fc:	4013      	ands	r3, r2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1ab      	bne.n	800115a <HAL_RCC_OscConfig+0x26a>
 8001202:	e002      	b.n	800120a <HAL_RCC_OscConfig+0x31a>
 8001204:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800120e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 817f 	beq.w	800151e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001220:	4ba7      	ldr	r3, [pc, #668]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 030c 	and.w	r3, r3, #12
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00c      	beq.n	8001246 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800122c:	4ba4      	ldr	r3, [pc, #656]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 030c 	and.w	r3, r3, #12
 8001234:	2b08      	cmp	r3, #8
 8001236:	d173      	bne.n	8001320 <HAL_RCC_OscConfig+0x430>
 8001238:	4ba1      	ldr	r3, [pc, #644]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001244:	d16c      	bne.n	8001320 <HAL_RCC_OscConfig+0x430>
 8001246:	2302      	movs	r3, #2
 8001248:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001250:	fa93 f3a3 	rbit	r3, r3
 8001254:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001258:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125c:	fab3 f383 	clz	r3, r3
 8001260:	b2db      	uxtb	r3, r3
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b01      	cmp	r3, #1
 800126e:	d102      	bne.n	8001276 <HAL_RCC_OscConfig+0x386>
 8001270:	4b93      	ldr	r3, [pc, #588]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	e013      	b.n	800129e <HAL_RCC_OscConfig+0x3ae>
 8001276:	2302      	movs	r3, #2
 8001278:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001280:	fa93 f3a3 	rbit	r3, r3
 8001284:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001288:	2302      	movs	r3, #2
 800128a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800128e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001292:	fa93 f3a3 	rbit	r3, r3
 8001296:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800129a:	4b89      	ldr	r3, [pc, #548]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	2202      	movs	r2, #2
 80012a0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80012a4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80012a8:	fa92 f2a2 	rbit	r2, r2
 80012ac:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80012b0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80012b4:	fab2 f282 	clz	r2, r2
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	f042 0220 	orr.w	r2, r2, #32
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	f002 021f 	and.w	r2, r2, #31
 80012c4:	2101      	movs	r1, #1
 80012c6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00a      	beq.n	80012e6 <HAL_RCC_OscConfig+0x3f6>
 80012d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d002      	beq.n	80012e6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	f000 be52 	b.w	8001f8a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e6:	4b76      	ldr	r3, [pc, #472]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	21f8      	movs	r1, #248	; 0xf8
 80012fc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001300:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001304:	fa91 f1a1 	rbit	r1, r1
 8001308:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800130c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001310:	fab1 f181 	clz	r1, r1
 8001314:	b2c9      	uxtb	r1, r1
 8001316:	408b      	lsls	r3, r1
 8001318:	4969      	ldr	r1, [pc, #420]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 800131a:	4313      	orrs	r3, r2
 800131c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131e:	e0fe      	b.n	800151e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001320:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001324:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 8088 	beq.w	8001442 <HAL_RCC_OscConfig+0x552>
 8001332:	2301      	movs	r3, #1
 8001334:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001338:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800133c:	fa93 f3a3 	rbit	r3, r3
 8001340:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001344:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001348:	fab3 f383 	clz	r3, r3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001352:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	461a      	mov	r2, r3
 800135a:	2301      	movs	r3, #1
 800135c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135e:	f7ff fa17 	bl	8000790 <HAL_GetTick>
 8001362:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001366:	e00a      	b.n	800137e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001368:	f7ff fa12 	bl	8000790 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d902      	bls.n	800137e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	f000 be06 	b.w	8001f8a <HAL_RCC_OscConfig+0x109a>
 800137e:	2302      	movs	r3, #2
 8001380:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001384:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001388:	fa93 f3a3 	rbit	r3, r3
 800138c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001390:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001394:	fab3 f383 	clz	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	095b      	lsrs	r3, r3, #5
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d102      	bne.n	80013ae <HAL_RCC_OscConfig+0x4be>
 80013a8:	4b45      	ldr	r3, [pc, #276]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	e013      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e6>
 80013ae:	2302      	movs	r3, #2
 80013b0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80013b8:	fa93 f3a3 	rbit	r3, r3
 80013bc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80013c0:	2302      	movs	r3, #2
 80013c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80013c6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80013ca:	fa93 f3a3 	rbit	r3, r3
 80013ce:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80013d2:	4b3b      	ldr	r3, [pc, #236]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	2202      	movs	r2, #2
 80013d8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80013dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80013e0:	fa92 f2a2 	rbit	r2, r2
 80013e4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80013e8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013ec:	fab2 f282 	clz	r2, r2
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	f042 0220 	orr.w	r2, r2, #32
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	f002 021f 	and.w	r2, r2, #31
 80013fc:	2101      	movs	r1, #1
 80013fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001402:	4013      	ands	r3, r2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0af      	beq.n	8001368 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001408:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001410:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001414:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	21f8      	movs	r1, #248	; 0xf8
 800141e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001422:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001426:	fa91 f1a1 	rbit	r1, r1
 800142a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800142e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001432:	fab1 f181 	clz	r1, r1
 8001436:	b2c9      	uxtb	r1, r1
 8001438:	408b      	lsls	r3, r1
 800143a:	4921      	ldr	r1, [pc, #132]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
 8001440:	e06d      	b.n	800151e <HAL_RCC_OscConfig+0x62e>
 8001442:	2301      	movs	r3, #1
 8001444:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001448:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800144c:	fa93 f3a3 	rbit	r3, r3
 8001450:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001454:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001458:	fab3 f383 	clz	r3, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001462:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	461a      	mov	r2, r3
 800146a:	2300      	movs	r3, #0
 800146c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff f98f 	bl	8000790 <HAL_GetTick>
 8001472:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	e00a      	b.n	800148e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001478:	f7ff f98a 	bl	8000790 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d902      	bls.n	800148e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	f000 bd7e 	b.w	8001f8a <HAL_RCC_OscConfig+0x109a>
 800148e:	2302      	movs	r3, #2
 8001490:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001494:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001498:	fa93 f3a3 	rbit	r3, r3
 800149c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80014a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a4:	fab3 f383 	clz	r3, r3
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d105      	bne.n	80014c4 <HAL_RCC_OscConfig+0x5d4>
 80014b8:	4b01      	ldr	r3, [pc, #4]	; (80014c0 <HAL_RCC_OscConfig+0x5d0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	e016      	b.n	80014ec <HAL_RCC_OscConfig+0x5fc>
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000
 80014c4:	2302      	movs	r3, #2
 80014c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014ce:	fa93 f3a3 	rbit	r3, r3
 80014d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80014d6:	2302      	movs	r3, #2
 80014d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014e0:	fa93 f3a3 	rbit	r3, r3
 80014e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014e8:	4bbf      	ldr	r3, [pc, #764]	; (80017e8 <HAL_RCC_OscConfig+0x8f8>)
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	2202      	movs	r2, #2
 80014ee:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80014f2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80014f6:	fa92 f2a2 	rbit	r2, r2
 80014fa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80014fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001502:	fab2 f282 	clz	r2, r2
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	f042 0220 	orr.w	r2, r2, #32
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	f002 021f 	and.w	r2, r2, #31
 8001512:	2101      	movs	r1, #1
 8001514:	fa01 f202 	lsl.w	r2, r1, r2
 8001518:	4013      	ands	r3, r2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1ac      	bne.n	8001478 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001522:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 8113 	beq.w	800175a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001534:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001538:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d07c      	beq.n	800163e <HAL_RCC_OscConfig+0x74e>
 8001544:	2301      	movs	r3, #1
 8001546:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800154e:	fa93 f3a3 	rbit	r3, r3
 8001552:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001556:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800155a:	fab3 f383 	clz	r3, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	4ba2      	ldr	r3, [pc, #648]	; (80017ec <HAL_RCC_OscConfig+0x8fc>)
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	461a      	mov	r2, r3
 800156a:	2301      	movs	r3, #1
 800156c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff f90f 	bl	8000790 <HAL_GetTick>
 8001572:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001576:	e00a      	b.n	800158e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001578:	f7ff f90a 	bl	8000790 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d902      	bls.n	800158e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	f000 bcfe 	b.w	8001f8a <HAL_RCC_OscConfig+0x109a>
 800158e:	2302      	movs	r3, #2
 8001590:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001598:	fa93 f2a3 	rbit	r2, r3
 800159c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015ae:	2202      	movs	r2, #2
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	fa93 f2a3 	rbit	r2, r3
 80015c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015d2:	2202      	movs	r2, #2
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	fa93 f2a3 	rbit	r2, r3
 80015e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ee:	4b7e      	ldr	r3, [pc, #504]	; (80017e8 <HAL_RCC_OscConfig+0x8f8>)
 80015f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015fa:	2102      	movs	r1, #2
 80015fc:	6019      	str	r1, [r3, #0]
 80015fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001602:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	fa93 f1a3 	rbit	r1, r3
 800160c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001610:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001614:	6019      	str	r1, [r3, #0]
  return result;
 8001616:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800161a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	fab3 f383 	clz	r3, r3
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800162a:	b2db      	uxtb	r3, r3
 800162c:	f003 031f 	and.w	r3, r3, #31
 8001630:	2101      	movs	r1, #1
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	4013      	ands	r3, r2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d09d      	beq.n	8001578 <HAL_RCC_OscConfig+0x688>
 800163c:	e08d      	b.n	800175a <HAL_RCC_OscConfig+0x86a>
 800163e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001642:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800164e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	fa93 f2a3 	rbit	r2, r3
 8001658:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800165c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001660:	601a      	str	r2, [r3, #0]
  return result;
 8001662:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001666:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800166a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800166c:	fab3 f383 	clz	r3, r3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	4b5d      	ldr	r3, [pc, #372]	; (80017ec <HAL_RCC_OscConfig+0x8fc>)
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	461a      	mov	r2, r3
 800167c:	2300      	movs	r3, #0
 800167e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001680:	f7ff f886 	bl	8000790 <HAL_GetTick>
 8001684:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001688:	e00a      	b.n	80016a0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800168a:	f7ff f881 	bl	8000790 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d902      	bls.n	80016a0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	f000 bc75 	b.w	8001f8a <HAL_RCC_OscConfig+0x109a>
 80016a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80016a8:	2202      	movs	r2, #2
 80016aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	fa93 f2a3 	rbit	r2, r3
 80016ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016cc:	2202      	movs	r2, #2
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	fa93 f2a3 	rbit	r2, r3
 80016de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016f0:	2202      	movs	r2, #2
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	fa93 f2a3 	rbit	r2, r3
 8001702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001706:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800170a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170c:	4b36      	ldr	r3, [pc, #216]	; (80017e8 <HAL_RCC_OscConfig+0x8f8>)
 800170e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001714:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001718:	2102      	movs	r1, #2
 800171a:	6019      	str	r1, [r3, #0]
 800171c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001720:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	fa93 f1a3 	rbit	r1, r3
 800172a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800172e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001732:	6019      	str	r1, [r3, #0]
  return result;
 8001734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001738:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	fab3 f383 	clz	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001748:	b2db      	uxtb	r3, r3
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	2101      	movs	r1, #1
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	4013      	ands	r3, r2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d197      	bne.n	800168a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800175a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800175e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 81a5 	beq.w	8001aba <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001776:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <HAL_RCC_OscConfig+0x8f8>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d116      	bne.n	80017b0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_RCC_OscConfig+0x8f8>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	4a18      	ldr	r2, [pc, #96]	; (80017e8 <HAL_RCC_OscConfig+0x8f8>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178c:	61d3      	str	r3, [r2, #28]
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <HAL_RCC_OscConfig+0x8f8>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001796:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800179a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017a8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80017aa:	2301      	movs	r3, #1
 80017ac:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_RCC_OscConfig+0x900>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d121      	bne.n	8001800 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_RCC_OscConfig+0x900>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <HAL_RCC_OscConfig+0x900>)
 80017c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c8:	f7fe ffe2 	bl	8000790 <HAL_GetTick>
 80017cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d0:	e010      	b.n	80017f4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d2:	f7fe ffdd 	bl	8000790 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b64      	cmp	r3, #100	; 0x64
 80017e0:	d908      	bls.n	80017f4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e3d1      	b.n	8001f8a <HAL_RCC_OscConfig+0x109a>
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	10908120 	.word	0x10908120
 80017f0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f4:	4b8d      	ldr	r3, [pc, #564]	; (8001a2c <HAL_RCC_OscConfig+0xb3c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0e8      	beq.n	80017d2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001804:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d106      	bne.n	800181e <HAL_RCC_OscConfig+0x92e>
 8001810:	4b87      	ldr	r3, [pc, #540]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	4a86      	ldr	r2, [pc, #536]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6213      	str	r3, [r2, #32]
 800181c:	e035      	b.n	800188a <HAL_RCC_OscConfig+0x99a>
 800181e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001822:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0x958>
 800182e:	4b80      	ldr	r3, [pc, #512]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	4a7f      	ldr	r2, [pc, #508]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001834:	f023 0301 	bic.w	r3, r3, #1
 8001838:	6213      	str	r3, [r2, #32]
 800183a:	4b7d      	ldr	r3, [pc, #500]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	4a7c      	ldr	r2, [pc, #496]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001840:	f023 0304 	bic.w	r3, r3, #4
 8001844:	6213      	str	r3, [r2, #32]
 8001846:	e020      	b.n	800188a <HAL_RCC_OscConfig+0x99a>
 8001848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b05      	cmp	r3, #5
 8001856:	d10c      	bne.n	8001872 <HAL_RCC_OscConfig+0x982>
 8001858:	4b75      	ldr	r3, [pc, #468]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	4a74      	ldr	r2, [pc, #464]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	6213      	str	r3, [r2, #32]
 8001864:	4b72      	ldr	r3, [pc, #456]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4a71      	ldr	r2, [pc, #452]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6213      	str	r3, [r2, #32]
 8001870:	e00b      	b.n	800188a <HAL_RCC_OscConfig+0x99a>
 8001872:	4b6f      	ldr	r3, [pc, #444]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	4a6e      	ldr	r2, [pc, #440]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	6213      	str	r3, [r2, #32]
 800187e:	4b6c      	ldr	r3, [pc, #432]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	4a6b      	ldr	r2, [pc, #428]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001884:	f023 0304 	bic.w	r3, r3, #4
 8001888:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800188a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 8081 	beq.w	800199e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189c:	f7fe ff78 	bl	8000790 <HAL_GetTick>
 80018a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a4:	e00b      	b.n	80018be <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a6:	f7fe ff73 	bl	8000790 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e365      	b.n	8001f8a <HAL_RCC_OscConfig+0x109a>
 80018be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018c6:	2202      	movs	r2, #2
 80018c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	fa93 f2a3 	rbit	r2, r3
 80018d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018ea:	2202      	movs	r2, #2
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	fa93 f2a3 	rbit	r2, r3
 80018fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001900:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001904:	601a      	str	r2, [r3, #0]
  return result;
 8001906:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800190a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800190e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001910:	fab3 f383 	clz	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f043 0302 	orr.w	r3, r3, #2
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d102      	bne.n	800192a <HAL_RCC_OscConfig+0xa3a>
 8001924:	4b42      	ldr	r3, [pc, #264]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	e013      	b.n	8001952 <HAL_RCC_OscConfig+0xa62>
 800192a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800192e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001932:	2202      	movs	r2, #2
 8001934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800193a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	fa93 f2a3 	rbit	r2, r3
 8001944:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001948:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	4b38      	ldr	r3, [pc, #224]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001956:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800195a:	2102      	movs	r1, #2
 800195c:	6011      	str	r1, [r2, #0]
 800195e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001962:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	fa92 f1a2 	rbit	r1, r2
 800196c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001970:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001974:	6011      	str	r1, [r2, #0]
  return result;
 8001976:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800197a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	fab2 f282 	clz	r2, r2
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	f002 021f 	and.w	r2, r2, #31
 8001990:	2101      	movs	r1, #1
 8001992:	fa01 f202 	lsl.w	r2, r1, r2
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d084      	beq.n	80018a6 <HAL_RCC_OscConfig+0x9b6>
 800199c:	e083      	b.n	8001aa6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199e:	f7fe fef7 	bl	8000790 <HAL_GetTick>
 80019a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a6:	e00b      	b.n	80019c0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a8:	f7fe fef2 	bl	8000790 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e2e4      	b.n	8001f8a <HAL_RCC_OscConfig+0x109a>
 80019c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019c8:	2202      	movs	r2, #2
 80019ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	fa93 f2a3 	rbit	r2, r3
 80019da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019ec:	2202      	movs	r2, #2
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	fa93 f2a3 	rbit	r2, r3
 80019fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a02:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a06:	601a      	str	r2, [r3, #0]
  return result;
 8001a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a10:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	095b      	lsrs	r3, r3, #5
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d106      	bne.n	8001a34 <HAL_RCC_OscConfig+0xb44>
 8001a26:	4b02      	ldr	r3, [pc, #8]	; (8001a30 <HAL_RCC_OscConfig+0xb40>)
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	e017      	b.n	8001a5c <HAL_RCC_OscConfig+0xb6c>
 8001a2c:	40007000 	.word	0x40007000
 8001a30:	40021000 	.word	0x40021000
 8001a34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a38:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a44:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	fa93 f2a3 	rbit	r2, r3
 8001a4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a52:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	4bb3      	ldr	r3, [pc, #716]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a60:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a64:	2102      	movs	r1, #2
 8001a66:	6011      	str	r1, [r2, #0]
 8001a68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a6c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a70:	6812      	ldr	r2, [r2, #0]
 8001a72:	fa92 f1a2 	rbit	r1, r2
 8001a76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a7a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001a7e:	6011      	str	r1, [r2, #0]
  return result;
 8001a80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a84:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	fab2 f282 	clz	r2, r2
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	f002 021f 	and.w	r2, r2, #31
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d180      	bne.n	80019a8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001aa6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d105      	bne.n	8001aba <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aae:	4b9e      	ldr	r3, [pc, #632]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4a9d      	ldr	r2, [pc, #628]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001abe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 825e 	beq.w	8001f88 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001acc:	4b96      	ldr	r3, [pc, #600]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	f000 821f 	beq.w	8001f18 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ade:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	f040 8170 	bne.w	8001dcc <HAL_RCC_OscConfig+0xedc>
 8001aec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001af4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001afe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	fa93 f2a3 	rbit	r2, r3
 8001b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b0c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b10:	601a      	str	r2, [r3, #0]
  return result;
 8001b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b16:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b1a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1c:	fab3 f383 	clz	r3, r3
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	2300      	movs	r3, #0
 8001b30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7fe fe2d 	bl	8000790 <HAL_GetTick>
 8001b36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3a:	e009      	b.n	8001b50 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7fe fe28 	bl	8000790 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e21c      	b.n	8001f8a <HAL_RCC_OscConfig+0x109a>
 8001b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b54:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b62:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	fa93 f2a3 	rbit	r2, r3
 8001b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b70:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b74:	601a      	str	r2, [r3, #0]
  return result;
 8001b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b7a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b80:	fab3 f383 	clz	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d102      	bne.n	8001b9a <HAL_RCC_OscConfig+0xcaa>
 8001b94:	4b64      	ldr	r3, [pc, #400]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	e027      	b.n	8001bea <HAL_RCC_OscConfig+0xcfa>
 8001b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ba2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bac:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	fa93 f2a3 	rbit	r2, r3
 8001bb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bba:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	fa93 f2a3 	rbit	r2, r3
 8001bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	4b50      	ldr	r3, [pc, #320]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bf2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bf6:	6011      	str	r1, [r2, #0]
 8001bf8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bfc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	fa92 f1a2 	rbit	r1, r2
 8001c06:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c0a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001c0e:	6011      	str	r1, [r2, #0]
  return result;
 8001c10:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c14:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	fab2 f282 	clz	r2, r2
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	f042 0220 	orr.w	r2, r2, #32
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	f002 021f 	and.w	r2, r2, #31
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d182      	bne.n	8001b3c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c36:	4b3c      	ldr	r3, [pc, #240]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	f023 020f 	bic.w	r2, r3, #15
 8001c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	4937      	ldr	r1, [pc, #220]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001c50:	4b35      	ldr	r3, [pc, #212]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001c58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6a19      	ldr	r1, [r3, #32]
 8001c64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	430b      	orrs	r3, r1
 8001c72:	492d      	ldr	r1, [pc, #180]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
 8001c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	fa93 f2a3 	rbit	r2, r3
 8001c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c98:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c9c:	601a      	str	r2, [r3, #0]
  return result;
 8001c9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ca6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca8:	fab3 f383 	clz	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cb2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	461a      	mov	r2, r3
 8001cba:	2301      	movs	r3, #1
 8001cbc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7fe fd67 	bl	8000790 <HAL_GetTick>
 8001cc2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc6:	e009      	b.n	8001cdc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7fe fd62 	bl	8000790 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e156      	b.n	8001f8a <HAL_RCC_OscConfig+0x109a>
 8001cdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ce4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cee:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	fa93 f2a3 	rbit	r2, r3
 8001cf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cfc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d00:	601a      	str	r2, [r3, #0]
  return result;
 8001d02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d06:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d105      	bne.n	8001d2c <HAL_RCC_OscConfig+0xe3c>
 8001d20:	4b01      	ldr	r3, [pc, #4]	; (8001d28 <HAL_RCC_OscConfig+0xe38>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	e02a      	b.n	8001d7c <HAL_RCC_OscConfig+0xe8c>
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d30:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	fa93 f2a3 	rbit	r2, r3
 8001d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d56:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d64:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	fa93 f2a3 	rbit	r2, r3
 8001d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d72:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	4b86      	ldr	r3, [pc, #536]	; (8001f94 <HAL_RCC_OscConfig+0x10a4>)
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d80:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d88:	6011      	str	r1, [r2, #0]
 8001d8a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d8e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	fa92 f1a2 	rbit	r1, r2
 8001d98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d9c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001da0:	6011      	str	r1, [r2, #0]
  return result;
 8001da2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001da6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	fab2 f282 	clz	r2, r2
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	f042 0220 	orr.w	r2, r2, #32
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	f002 021f 	and.w	r2, r2, #31
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f43f af7f 	beq.w	8001cc8 <HAL_RCC_OscConfig+0xdd8>
 8001dca:	e0dd      	b.n	8001f88 <HAL_RCC_OscConfig+0x1098>
 8001dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001dd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dde:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	fa93 f2a3 	rbit	r2, r3
 8001de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dec:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001df0:	601a      	str	r2, [r3, #0]
  return result;
 8001df2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dfa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfc:	fab3 f383 	clz	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2300      	movs	r3, #0
 8001e10:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e12:	f7fe fcbd 	bl	8000790 <HAL_GetTick>
 8001e16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1a:	e009      	b.n	8001e30 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7fe fcb8 	bl	8000790 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e0ac      	b.n	8001f8a <HAL_RCC_OscConfig+0x109a>
 8001e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e34:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e42:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fa93 f2a3 	rbit	r2, r3
 8001e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e50:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e54:	601a      	str	r2, [r3, #0]
  return result;
 8001e56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d102      	bne.n	8001e7a <HAL_RCC_OscConfig+0xf8a>
 8001e74:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <HAL_RCC_OscConfig+0x10a4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	e027      	b.n	8001eca <HAL_RCC_OscConfig+0xfda>
 8001e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e8c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	fa93 f2a3 	rbit	r2, r3
 8001e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e9a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001ea8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	fa93 f2a3 	rbit	r2, r3
 8001ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <HAL_RCC_OscConfig+0x10a4>)
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ece:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ed2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ed6:	6011      	str	r1, [r2, #0]
 8001ed8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001edc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	fa92 f1a2 	rbit	r1, r2
 8001ee6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eea:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001eee:	6011      	str	r1, [r2, #0]
  return result;
 8001ef0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ef4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	fab2 f282 	clz	r2, r2
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	f042 0220 	orr.w	r2, r2, #32
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	f002 021f 	and.w	r2, r2, #31
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d182      	bne.n	8001e1c <HAL_RCC_OscConfig+0xf2c>
 8001f16:	e037      	b.n	8001f88 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e02e      	b.n	8001f8a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_RCC_OscConfig+0x10a4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001f34:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <HAL_RCC_OscConfig+0x10a4>)
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f40:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d117      	bne.n	8001f84 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f58:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d10b      	bne.n	8001f84 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001f6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f70:	f003 020f 	and.w	r2, r3, #15
 8001f74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000

08001f98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b09e      	sub	sp, #120	; 0x78
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e162      	b.n	8002276 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb0:	4b90      	ldr	r3, [pc, #576]	; (80021f4 <HAL_RCC_ClockConfig+0x25c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d910      	bls.n	8001fe0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbe:	4b8d      	ldr	r3, [pc, #564]	; (80021f4 <HAL_RCC_ClockConfig+0x25c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 0207 	bic.w	r2, r3, #7
 8001fc6:	498b      	ldr	r1, [pc, #556]	; (80021f4 <HAL_RCC_ClockConfig+0x25c>)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fce:	4b89      	ldr	r3, [pc, #548]	; (80021f4 <HAL_RCC_ClockConfig+0x25c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e14a      	b.n	8002276 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fec:	4b82      	ldr	r3, [pc, #520]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	497f      	ldr	r1, [pc, #508]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 80dc 	beq.w	80021c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d13c      	bne.n	800208e <HAL_RCC_ClockConfig+0xf6>
 8002014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002018:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002024:	fab3 f383 	clz	r3, r3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	b2db      	uxtb	r3, r3
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b01      	cmp	r3, #1
 8002036:	d102      	bne.n	800203e <HAL_RCC_ClockConfig+0xa6>
 8002038:	4b6f      	ldr	r3, [pc, #444]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	e00f      	b.n	800205e <HAL_RCC_ClockConfig+0xc6>
 800203e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002042:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	667b      	str	r3, [r7, #100]	; 0x64
 800204c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002050:	663b      	str	r3, [r7, #96]	; 0x60
 8002052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	65fb      	str	r3, [r7, #92]	; 0x5c
 800205a:	4b67      	ldr	r3, [pc, #412]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002062:	65ba      	str	r2, [r7, #88]	; 0x58
 8002064:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002066:	fa92 f2a2 	rbit	r2, r2
 800206a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800206c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800206e:	fab2 f282 	clz	r2, r2
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	f042 0220 	orr.w	r2, r2, #32
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	f002 021f 	and.w	r2, r2, #31
 800207e:	2101      	movs	r1, #1
 8002080:	fa01 f202 	lsl.w	r2, r1, r2
 8002084:	4013      	ands	r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d17b      	bne.n	8002182 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0f3      	b.n	8002276 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d13c      	bne.n	8002110 <HAL_RCC_ClockConfig+0x178>
 8002096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800209a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	095b      	lsrs	r3, r3, #5
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d102      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x128>
 80020ba:	4b4f      	ldr	r3, [pc, #316]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	e00f      	b.n	80020e0 <HAL_RCC_ClockConfig+0x148>
 80020c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	647b      	str	r3, [r7, #68]	; 0x44
 80020ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020d2:	643b      	str	r3, [r7, #64]	; 0x40
 80020d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020dc:	4b46      	ldr	r3, [pc, #280]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80020e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020e8:	fa92 f2a2 	rbit	r2, r2
 80020ec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80020ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020f0:	fab2 f282 	clz	r2, r2
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	f042 0220 	orr.w	r2, r2, #32
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	f002 021f 	and.w	r2, r2, #31
 8002100:	2101      	movs	r1, #1
 8002102:	fa01 f202 	lsl.w	r2, r1, r2
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d13a      	bne.n	8002182 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0b2      	b.n	8002276 <HAL_RCC_ClockConfig+0x2de>
 8002110:	2302      	movs	r3, #2
 8002112:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800211c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	095b      	lsrs	r3, r3, #5
 8002126:	b2db      	uxtb	r3, r3
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d102      	bne.n	8002138 <HAL_RCC_ClockConfig+0x1a0>
 8002132:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	e00d      	b.n	8002154 <HAL_RCC_ClockConfig+0x1bc>
 8002138:	2302      	movs	r3, #2
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
 8002144:	2302      	movs	r3, #2
 8002146:	623b      	str	r3, [r7, #32]
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	61fb      	str	r3, [r7, #28]
 8002150:	4b29      	ldr	r3, [pc, #164]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	2202      	movs	r2, #2
 8002156:	61ba      	str	r2, [r7, #24]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	fa92 f2a2 	rbit	r2, r2
 800215e:	617a      	str	r2, [r7, #20]
  return result;
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	fab2 f282 	clz	r2, r2
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f042 0220 	orr.w	r2, r2, #32
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	f002 021f 	and.w	r2, r2, #31
 8002172:	2101      	movs	r1, #1
 8002174:	fa01 f202 	lsl.w	r2, r1, r2
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e079      	b.n	8002276 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002182:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f023 0203 	bic.w	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	491a      	ldr	r1, [pc, #104]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002194:	f7fe fafc 	bl	8000790 <HAL_GetTick>
 8002198:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800219c:	f7fe faf8 	bl	8000790 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e061      	b.n	8002276 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HAL_RCC_ClockConfig+0x260>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 020c 	and.w	r2, r3, #12
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d1eb      	bne.n	800219c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_RCC_ClockConfig+0x25c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d214      	bcs.n	80021fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <HAL_RCC_ClockConfig+0x25c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 0207 	bic.w	r2, r3, #7
 80021da:	4906      	ldr	r1, [pc, #24]	; (80021f4 <HAL_RCC_ClockConfig+0x25c>)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e2:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <HAL_RCC_ClockConfig+0x25c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e040      	b.n	8002276 <HAL_RCC_ClockConfig+0x2de>
 80021f4:	40022000 	.word	0x40022000
 80021f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HAL_RCC_ClockConfig+0x2e8>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	491a      	ldr	r1, [pc, #104]	; (8002280 <HAL_RCC_ClockConfig+0x2e8>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002226:	4b16      	ldr	r3, [pc, #88]	; (8002280 <HAL_RCC_ClockConfig+0x2e8>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4912      	ldr	r1, [pc, #72]	; (8002280 <HAL_RCC_ClockConfig+0x2e8>)
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800223a:	f000 f829 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 800223e:	4601      	mov	r1, r0
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <HAL_RCC_ClockConfig+0x2e8>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002248:	22f0      	movs	r2, #240	; 0xf0
 800224a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	fa92 f2a2 	rbit	r2, r2
 8002252:	60fa      	str	r2, [r7, #12]
  return result;
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	fab2 f282 	clz	r2, r2
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	40d3      	lsrs	r3, r2
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x2ec>)
 8002260:	5cd3      	ldrb	r3, [r2, r3]
 8002262:	fa21 f303 	lsr.w	r3, r1, r3
 8002266:	4a08      	ldr	r2, [pc, #32]	; (8002288 <HAL_RCC_ClockConfig+0x2f0>)
 8002268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_RCC_ClockConfig+0x2f4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fa4a 	bl	8000708 <HAL_InitTick>
  
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3778      	adds	r7, #120	; 0x78
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	08003e38 	.word	0x08003e38
 8002288:	2000000c 	.word	0x2000000c
 800228c:	20000010 	.word	0x20000010

08002290 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002290:	b480      	push	{r7}
 8002292:	b08b      	sub	sp, #44	; 0x2c
 8002294:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	2300      	movs	r3, #0
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80022aa:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d002      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x30>
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d003      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0x36>
 80022be:	e03f      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022c0:	4b25      	ldr	r3, [pc, #148]	; (8002358 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022c2:	623b      	str	r3, [r7, #32]
      break;
 80022c4:	e03f      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022cc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	fa92 f2a2 	rbit	r2, r2
 80022d8:	607a      	str	r2, [r7, #4]
  return result;
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	fab2 f282 	clz	r2, r2
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	40d3      	lsrs	r3, r2
 80022e4:	4a1d      	ldr	r2, [pc, #116]	; (800235c <HAL_RCC_GetSysClockFreq+0xcc>)
 80022e6:	5cd3      	ldrb	r3, [r2, r3]
 80022e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80022ea:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	220f      	movs	r2, #15
 80022f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	fa92 f2a2 	rbit	r2, r2
 80022fc:	60fa      	str	r2, [r7, #12]
  return result;
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	fab2 f282 	clz	r2, r2
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	40d3      	lsrs	r3, r2
 8002308:	4a15      	ldr	r2, [pc, #84]	; (8002360 <HAL_RCC_GetSysClockFreq+0xd0>)
 800230a:	5cd3      	ldrb	r3, [r2, r3]
 800230c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002318:	4a0f      	ldr	r2, [pc, #60]	; (8002358 <HAL_RCC_GetSysClockFreq+0xc8>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
 8002328:	e007      	b.n	800233a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800232a:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <HAL_RCC_GetSysClockFreq+0xc8>)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	fb02 f303 	mul.w	r3, r2, r3
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	623b      	str	r3, [r7, #32]
      break;
 800233e:	e002      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002342:	623b      	str	r3, [r7, #32]
      break;
 8002344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002346:	6a3b      	ldr	r3, [r7, #32]
}
 8002348:	4618      	mov	r0, r3
 800234a:	372c      	adds	r7, #44	; 0x2c
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40021000 	.word	0x40021000
 8002358:	007a1200 	.word	0x007a1200
 800235c:	08003e50 	.word	0x08003e50
 8002360:	08003e60 	.word	0x08003e60

08002364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <HAL_RCC_GetHCLKFreq+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	2000000c 	.word	0x2000000c

0800237c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002382:	f7ff ffef 	bl	8002364 <HAL_RCC_GetHCLKFreq>
 8002386:	4601      	mov	r1, r0
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002390:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002394:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	fa92 f2a2 	rbit	r2, r2
 800239c:	603a      	str	r2, [r7, #0]
  return result;
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	fab2 f282 	clz	r2, r2
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	40d3      	lsrs	r3, r2
 80023a8:	4a04      	ldr	r2, [pc, #16]	; (80023bc <HAL_RCC_GetPCLK1Freq+0x40>)
 80023aa:	5cd3      	ldrb	r3, [r2, r3]
 80023ac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	08003e48 	.word	0x08003e48

080023c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023c6:	f7ff ffcd 	bl	8002364 <HAL_RCC_GetHCLKFreq>
 80023ca:	4601      	mov	r1, r0
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80023d4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80023d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	fa92 f2a2 	rbit	r2, r2
 80023e0:	603a      	str	r2, [r7, #0]
  return result;
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	fab2 f282 	clz	r2, r2
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	40d3      	lsrs	r3, r2
 80023ec:	4a04      	ldr	r2, [pc, #16]	; (8002400 <HAL_RCC_GetPCLK2Freq+0x40>)
 80023ee:	5cd3      	ldrb	r3, [r2, r3]
 80023f0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	08003e48 	.word	0x08003e48

08002404 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b092      	sub	sp, #72	; 0x48
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002414:	2300      	movs	r3, #0
 8002416:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 80d4 	beq.w	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002428:	4b4e      	ldr	r3, [pc, #312]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10e      	bne.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002434:	4b4b      	ldr	r3, [pc, #300]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	4a4a      	ldr	r2, [pc, #296]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800243a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243e:	61d3      	str	r3, [r2, #28]
 8002440:	4b48      	ldr	r3, [pc, #288]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244c:	2301      	movs	r3, #1
 800244e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002452:	4b45      	ldr	r3, [pc, #276]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d118      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800245e:	4b42      	ldr	r3, [pc, #264]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a41      	ldr	r2, [pc, #260]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002468:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246a:	f7fe f991 	bl	8000790 <HAL_GetTick>
 800246e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002470:	e008      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002472:	f7fe f98d 	bl	8000790 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b64      	cmp	r3, #100	; 0x64
 800247e:	d901      	bls.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e1d6      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002484:	4b38      	ldr	r3, [pc, #224]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002490:	4b34      	ldr	r3, [pc, #208]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002498:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800249a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 8084 	beq.w	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d07c      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024b0:	4b2c      	ldr	r3, [pc, #176]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b26      	ldr	r3, [pc, #152]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	461a      	mov	r2, r3
 80024da:	2301      	movs	r3, #1
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	461a      	mov	r2, r3
 80024fe:	2300      	movs	r3, #0
 8002500:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002502:	4a18      	ldr	r2, [pc, #96]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002506:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d04b      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002512:	f7fe f93d 	bl	8000790 <HAL_GetTick>
 8002516:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7fe f939 	bl	8000790 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	; 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e180      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002530:	2302      	movs	r3, #2
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
 800253c:	2302      	movs	r3, #2
 800253e:	623b      	str	r3, [r7, #32]
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	fa93 f3a3 	rbit	r3, r3
 8002546:	61fb      	str	r3, [r7, #28]
  return result;
 8002548:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d108      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800255e:	4b01      	ldr	r3, [pc, #4]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	e00d      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002564:	40021000 	.word	0x40021000
 8002568:	40007000 	.word	0x40007000
 800256c:	10908100 	.word	0x10908100
 8002570:	2302      	movs	r3, #2
 8002572:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	4b9a      	ldr	r3, [pc, #616]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	2202      	movs	r2, #2
 8002582:	613a      	str	r2, [r7, #16]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	fa92 f2a2 	rbit	r2, r2
 800258a:	60fa      	str	r2, [r7, #12]
  return result;
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	fab2 f282 	clz	r2, r2
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	f002 021f 	and.w	r2, r2, #31
 800259e:	2101      	movs	r1, #1
 80025a0:	fa01 f202 	lsl.w	r2, r1, r2
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0b7      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80025aa:	4b8f      	ldr	r3, [pc, #572]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	498c      	ldr	r1, [pc, #560]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d105      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c4:	4b88      	ldr	r3, [pc, #544]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	4a87      	ldr	r2, [pc, #540]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025dc:	4b82      	ldr	r3, [pc, #520]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	f023 0203 	bic.w	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	497f      	ldr	r1, [pc, #508]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025fa:	4b7b      	ldr	r3, [pc, #492]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	4978      	ldr	r1, [pc, #480]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002608:	4313      	orrs	r3, r2
 800260a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002618:	4b73      	ldr	r3, [pc, #460]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	4970      	ldr	r1, [pc, #448]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002626:	4313      	orrs	r3, r2
 8002628:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002636:	4b6c      	ldr	r3, [pc, #432]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f023 0210 	bic.w	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4969      	ldr	r1, [pc, #420]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002644:	4313      	orrs	r3, r2
 8002646:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002654:	4b64      	ldr	r3, [pc, #400]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	4961      	ldr	r1, [pc, #388]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002672:	4b5d      	ldr	r3, [pc, #372]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f023 0220 	bic.w	r2, r3, #32
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	495a      	ldr	r1, [pc, #360]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002680:	4313      	orrs	r3, r2
 8002682:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002690:	4b55      	ldr	r3, [pc, #340]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	4952      	ldr	r1, [pc, #328]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d008      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026ae:	4b4e      	ldr	r3, [pc, #312]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	494b      	ldr	r1, [pc, #300]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026cc:	4b46      	ldr	r3, [pc, #280]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	4943      	ldr	r1, [pc, #268]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026ea:	4b3f      	ldr	r3, [pc, #252]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	493c      	ldr	r1, [pc, #240]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002708:	4b37      	ldr	r3, [pc, #220]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	4934      	ldr	r1, [pc, #208]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d008      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002726:	4b30      	ldr	r3, [pc, #192]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002732:	492d      	ldr	r1, [pc, #180]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002734:	4313      	orrs	r3, r2
 8002736:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002744:	4b28      	ldr	r3, [pc, #160]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002750:	4925      	ldr	r1, [pc, #148]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d008      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002762:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	491e      	ldr	r1, [pc, #120]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002770:	4313      	orrs	r3, r2
 8002772:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278c:	4916      	ldr	r1, [pc, #88]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800279e:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027aa:	490f      	ldr	r1, [pc, #60]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80027bc:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	4907      	ldr	r1, [pc, #28]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00c      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80027da:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	e002      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80027e6:	bf00      	nop
 80027e8:	40021000 	.word	0x40021000
 80027ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ee:	4913      	ldr	r1, [pc, #76]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002800:	4b0e      	ldr	r3, [pc, #56]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280c:	490b      	ldr	r1, [pc, #44]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800280e:	4313      	orrs	r3, r2
 8002810:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282a:	4904      	ldr	r1, [pc, #16]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800282c:	4313      	orrs	r3, r2
 800282e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3748      	adds	r7, #72	; 0x48
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000

08002840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e040      	b.n	80028d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fd fe32 	bl	80004cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2224      	movs	r2, #36	; 0x24
 800286c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0201 	bic.w	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 fc00 	bl	8003084 <UART_SetConfig>
 8002884:	4603      	mov	r3, r0
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e022      	b.n	80028d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fdc8 	bl	800342c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fe4f 	bl	8003570 <UART_CheckIdleState>
 80028d2:	4603      	mov	r3, r0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	4613      	mov	r3, r2
 80028ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	d178      	bne.n	80029e6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <HAL_UART_Transmit+0x24>
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e071      	b.n	80029e8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2221      	movs	r2, #33	; 0x21
 8002910:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002912:	f7fd ff3d 	bl	8000790 <HAL_GetTick>
 8002916:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	88fa      	ldrh	r2, [r7, #6]
 800291c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	88fa      	ldrh	r2, [r7, #6]
 8002924:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002930:	d108      	bne.n	8002944 <HAL_UART_Transmit+0x68>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d104      	bne.n	8002944 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	e003      	b.n	800294c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002948:	2300      	movs	r3, #0
 800294a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800294c:	e030      	b.n	80029b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2200      	movs	r2, #0
 8002956:	2180      	movs	r1, #128	; 0x80
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 feb1 	bl	80036c0 <UART_WaitOnFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d004      	beq.n	800296e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2220      	movs	r2, #32
 8002968:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e03c      	b.n	80029e8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10b      	bne.n	800298c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	881a      	ldrh	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002980:	b292      	uxth	r2, r2
 8002982:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	3302      	adds	r3, #2
 8002988:	61bb      	str	r3, [r7, #24]
 800298a:	e008      	b.n	800299e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	b292      	uxth	r2, r2
 8002996:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	3301      	adds	r3, #1
 800299c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1c8      	bne.n	800294e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2200      	movs	r2, #0
 80029c4:	2140      	movs	r1, #64	; 0x40
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 fe7a 	bl	80036c0 <UART_WaitOnFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d004      	beq.n	80029dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2220      	movs	r2, #32
 80029d6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e005      	b.n	80029e8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2220      	movs	r2, #32
 80029e0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	e000      	b.n	80029e8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80029e6:	2302      	movs	r3, #2
  }
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3720      	adds	r7, #32
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	4613      	mov	r3, r2
 80029fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	d132      	bne.n	8002a6e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <HAL_UART_Receive_IT+0x24>
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e02b      	b.n	8002a70 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d018      	beq.n	8002a5e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	e853 3f00 	ldrex	r3, [r3]
 8002a38:	613b      	str	r3, [r7, #16]
   return(result);
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	623b      	str	r3, [r7, #32]
 8002a4c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4e:	69f9      	ldr	r1, [r7, #28]
 8002a50:	6a3a      	ldr	r2, [r7, #32]
 8002a52:	e841 2300 	strex	r3, r2, [r1]
 8002a56:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1e6      	bne.n	8002a2c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	461a      	mov	r2, r3
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fe93 	bl	8003790 <UART_Start_Receive_IT>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	e000      	b.n	8002a70 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
  }
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3728      	adds	r7, #40	; 0x28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b0ba      	sub	sp, #232	; 0xe8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002aa2:	f640 030f 	movw	r3, #2063	; 0x80f
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002aac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d115      	bne.n	8002ae0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00f      	beq.n	8002ae0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 82ab 	beq.w	800302c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	4798      	blx	r3
      }
      return;
 8002ade:	e2a5      	b.n	800302c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ae0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 8117 	beq.w	8002d18 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002af6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002afa:	4b85      	ldr	r3, [pc, #532]	; (8002d10 <HAL_UART_IRQHandler+0x298>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 810a 	beq.w	8002d18 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d011      	beq.n	8002b34 <HAL_UART_IRQHandler+0xbc>
 8002b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00b      	beq.n	8002b34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2201      	movs	r2, #1
 8002b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b2a:	f043 0201 	orr.w	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d011      	beq.n	8002b64 <HAL_UART_IRQHandler+0xec>
 8002b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00b      	beq.n	8002b64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2202      	movs	r2, #2
 8002b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b5a:	f043 0204 	orr.w	r2, r3, #4
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d011      	beq.n	8002b94 <HAL_UART_IRQHandler+0x11c>
 8002b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00b      	beq.n	8002b94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2204      	movs	r2, #4
 8002b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b8a:	f043 0202 	orr.w	r2, r3, #2
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d017      	beq.n	8002bd0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d105      	bne.n	8002bb8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bb0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00b      	beq.n	8002bd0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bc6:	f043 0208 	orr.w	r2, r3, #8
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d012      	beq.n	8002c02 <HAL_UART_IRQHandler+0x18a>
 8002bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00c      	beq.n	8002c02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bf8:	f043 0220 	orr.w	r2, r3, #32
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8211 	beq.w	8003030 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00d      	beq.n	8002c36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4a:	2b40      	cmp	r3, #64	; 0x40
 8002c4c:	d005      	beq.n	8002c5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d04f      	beq.n	8002cfa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fe5e 	bl	800391c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6a:	2b40      	cmp	r3, #64	; 0x40
 8002c6c:	d141      	bne.n	8002cf2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3308      	adds	r3, #8
 8002c74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c7c:	e853 3f00 	ldrex	r3, [r3]
 8002c80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	3308      	adds	r3, #8
 8002c96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ca6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002caa:	e841 2300 	strex	r3, r2, [r1]
 8002cae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002cb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1d9      	bne.n	8002c6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d013      	beq.n	8002cea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc6:	4a13      	ldr	r2, [pc, #76]	; (8002d14 <HAL_UART_IRQHandler+0x29c>)
 8002cc8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fd fed8 	bl	8000a84 <HAL_DMA_Abort_IT>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d017      	beq.n	8002d0a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce8:	e00f      	b.n	8002d0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f9b4 	bl	8003058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf0:	e00b      	b.n	8002d0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f9b0 	bl	8003058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf8:	e007      	b.n	8002d0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f9ac 	bl	8003058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002d08:	e192      	b.n	8003030 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d0a:	bf00      	nop
    return;
 8002d0c:	e190      	b.n	8003030 <HAL_UART_IRQHandler+0x5b8>
 8002d0e:	bf00      	nop
 8002d10:	04000120 	.word	0x04000120
 8002d14:	080039e5 	.word	0x080039e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	f040 814b 	bne.w	8002fb8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8144 	beq.w	8002fb8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 813d 	beq.w	8002fb8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2210      	movs	r2, #16
 8002d44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d50:	2b40      	cmp	r3, #64	; 0x40
 8002d52:	f040 80b5 	bne.w	8002ec0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d62:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 8164 	beq.w	8003034 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002d72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d76:	429a      	cmp	r2, r3
 8002d78:	f080 815c 	bcs.w	8003034 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	f000 8086 	beq.w	8002e9e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d9e:	e853 3f00 	ldrex	r3, [r3]
 8002da2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002da6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002daa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002dbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dc0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002dc8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dcc:	e841 2300 	strex	r3, r2, [r1]
 8002dd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002dd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1da      	bne.n	8002d92 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3308      	adds	r3, #8
 8002de2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002de6:	e853 3f00 	ldrex	r3, [r3]
 8002dea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002dec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dee:	f023 0301 	bic.w	r3, r3, #1
 8002df2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	3308      	adds	r3, #8
 8002dfc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e00:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e04:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e06:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e0c:	e841 2300 	strex	r3, r2, [r1]
 8002e10:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e1      	bne.n	8002ddc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3308      	adds	r3, #8
 8002e1e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e22:	e853 3f00 	ldrex	r3, [r3]
 8002e26:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3308      	adds	r3, #8
 8002e38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e3c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e40:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e44:	e841 2300 	strex	r3, r2, [r1]
 8002e48:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1e3      	bne.n	8002e18 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e66:	e853 3f00 	ldrex	r3, [r3]
 8002e6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e6e:	f023 0310 	bic.w	r3, r3, #16
 8002e72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e80:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e82:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e88:	e841 2300 	strex	r3, r2, [r1]
 8002e8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1e4      	bne.n	8002e5e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd fdba 	bl	8000a12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f8d7 	bl	800306c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ebe:	e0b9      	b.n	8003034 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80ab 	beq.w	8003038 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002ee2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80a6 	beq.w	8003038 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef4:	e853 3f00 	ldrex	r3, [r3]
 8002ef8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f10:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1e4      	bne.n	8002eec <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	3308      	adds	r3, #8
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	e853 3f00 	ldrex	r3, [r3]
 8002f30:	623b      	str	r3, [r7, #32]
   return(result);
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	f023 0301 	bic.w	r3, r3, #1
 8002f38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3308      	adds	r3, #8
 8002f42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f46:	633a      	str	r2, [r7, #48]	; 0x30
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f4e:	e841 2300 	strex	r3, r2, [r1]
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1e3      	bne.n	8002f22 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	e853 3f00 	ldrex	r3, [r3]
 8002f7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 0310 	bic.w	r3, r3, #16
 8002f82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f90:	61fb      	str	r3, [r7, #28]
 8002f92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f94:	69b9      	ldr	r1, [r7, #24]
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	e841 2300 	strex	r3, r2, [r1]
 8002f9c:	617b      	str	r3, [r7, #20]
   return(result);
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1e4      	bne.n	8002f6e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002faa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fae:	4619      	mov	r1, r3
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f85b 	bl	800306c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fb6:	e03f      	b.n	8003038 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00e      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x56a>
 8002fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 feea 	bl	8003db4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fe0:	e02d      	b.n	800303e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00e      	beq.n	800300c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d008      	beq.n	800300c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d01c      	beq.n	800303c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	4798      	blx	r3
    }
    return;
 800300a:	e017      	b.n	800303c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800300c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003014:	2b00      	cmp	r3, #0
 8003016:	d012      	beq.n	800303e <HAL_UART_IRQHandler+0x5c6>
 8003018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800301c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00c      	beq.n	800303e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fcf3 	bl	8003a10 <UART_EndTransmit_IT>
    return;
 800302a:	e008      	b.n	800303e <HAL_UART_IRQHandler+0x5c6>
      return;
 800302c:	bf00      	nop
 800302e:	e006      	b.n	800303e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003030:	bf00      	nop
 8003032:	e004      	b.n	800303e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003034:	bf00      	nop
 8003036:	e002      	b.n	800303e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003038:	bf00      	nop
 800303a:	e000      	b.n	800303e <HAL_UART_IRQHandler+0x5c6>
    return;
 800303c:	bf00      	nop
  }

}
 800303e:	37e8      	adds	r7, #232	; 0xe8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	4b92      	ldr	r3, [pc, #584]	; (80032f8 <UART_SetConfig+0x274>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	6979      	ldr	r1, [r7, #20]
 80030b8:	430b      	orrs	r3, r1
 80030ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a80      	ldr	r2, [pc, #512]	; (80032fc <UART_SetConfig+0x278>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d120      	bne.n	8003142 <UART_SetConfig+0xbe>
 8003100:	4b7f      	ldr	r3, [pc, #508]	; (8003300 <UART_SetConfig+0x27c>)
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2b03      	cmp	r3, #3
 800310a:	d817      	bhi.n	800313c <UART_SetConfig+0xb8>
 800310c:	a201      	add	r2, pc, #4	; (adr r2, 8003114 <UART_SetConfig+0x90>)
 800310e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003112:	bf00      	nop
 8003114:	08003125 	.word	0x08003125
 8003118:	08003131 	.word	0x08003131
 800311c:	08003137 	.word	0x08003137
 8003120:	0800312b 	.word	0x0800312b
 8003124:	2301      	movs	r3, #1
 8003126:	77fb      	strb	r3, [r7, #31]
 8003128:	e0b5      	b.n	8003296 <UART_SetConfig+0x212>
 800312a:	2302      	movs	r3, #2
 800312c:	77fb      	strb	r3, [r7, #31]
 800312e:	e0b2      	b.n	8003296 <UART_SetConfig+0x212>
 8003130:	2304      	movs	r3, #4
 8003132:	77fb      	strb	r3, [r7, #31]
 8003134:	e0af      	b.n	8003296 <UART_SetConfig+0x212>
 8003136:	2308      	movs	r3, #8
 8003138:	77fb      	strb	r3, [r7, #31]
 800313a:	e0ac      	b.n	8003296 <UART_SetConfig+0x212>
 800313c:	2310      	movs	r3, #16
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	e0a9      	b.n	8003296 <UART_SetConfig+0x212>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a6f      	ldr	r2, [pc, #444]	; (8003304 <UART_SetConfig+0x280>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d124      	bne.n	8003196 <UART_SetConfig+0x112>
 800314c:	4b6c      	ldr	r3, [pc, #432]	; (8003300 <UART_SetConfig+0x27c>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003154:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003158:	d011      	beq.n	800317e <UART_SetConfig+0xfa>
 800315a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800315e:	d817      	bhi.n	8003190 <UART_SetConfig+0x10c>
 8003160:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003164:	d011      	beq.n	800318a <UART_SetConfig+0x106>
 8003166:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800316a:	d811      	bhi.n	8003190 <UART_SetConfig+0x10c>
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <UART_SetConfig+0xf4>
 8003170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003174:	d006      	beq.n	8003184 <UART_SetConfig+0x100>
 8003176:	e00b      	b.n	8003190 <UART_SetConfig+0x10c>
 8003178:	2300      	movs	r3, #0
 800317a:	77fb      	strb	r3, [r7, #31]
 800317c:	e08b      	b.n	8003296 <UART_SetConfig+0x212>
 800317e:	2302      	movs	r3, #2
 8003180:	77fb      	strb	r3, [r7, #31]
 8003182:	e088      	b.n	8003296 <UART_SetConfig+0x212>
 8003184:	2304      	movs	r3, #4
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	e085      	b.n	8003296 <UART_SetConfig+0x212>
 800318a:	2308      	movs	r3, #8
 800318c:	77fb      	strb	r3, [r7, #31]
 800318e:	e082      	b.n	8003296 <UART_SetConfig+0x212>
 8003190:	2310      	movs	r3, #16
 8003192:	77fb      	strb	r3, [r7, #31]
 8003194:	e07f      	b.n	8003296 <UART_SetConfig+0x212>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a5b      	ldr	r2, [pc, #364]	; (8003308 <UART_SetConfig+0x284>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d124      	bne.n	80031ea <UART_SetConfig+0x166>
 80031a0:	4b57      	ldr	r3, [pc, #348]	; (8003300 <UART_SetConfig+0x27c>)
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80031a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031ac:	d011      	beq.n	80031d2 <UART_SetConfig+0x14e>
 80031ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031b2:	d817      	bhi.n	80031e4 <UART_SetConfig+0x160>
 80031b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031b8:	d011      	beq.n	80031de <UART_SetConfig+0x15a>
 80031ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031be:	d811      	bhi.n	80031e4 <UART_SetConfig+0x160>
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <UART_SetConfig+0x148>
 80031c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031c8:	d006      	beq.n	80031d8 <UART_SetConfig+0x154>
 80031ca:	e00b      	b.n	80031e4 <UART_SetConfig+0x160>
 80031cc:	2300      	movs	r3, #0
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	e061      	b.n	8003296 <UART_SetConfig+0x212>
 80031d2:	2302      	movs	r3, #2
 80031d4:	77fb      	strb	r3, [r7, #31]
 80031d6:	e05e      	b.n	8003296 <UART_SetConfig+0x212>
 80031d8:	2304      	movs	r3, #4
 80031da:	77fb      	strb	r3, [r7, #31]
 80031dc:	e05b      	b.n	8003296 <UART_SetConfig+0x212>
 80031de:	2308      	movs	r3, #8
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e058      	b.n	8003296 <UART_SetConfig+0x212>
 80031e4:	2310      	movs	r3, #16
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e055      	b.n	8003296 <UART_SetConfig+0x212>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a47      	ldr	r2, [pc, #284]	; (800330c <UART_SetConfig+0x288>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d124      	bne.n	800323e <UART_SetConfig+0x1ba>
 80031f4:	4b42      	ldr	r3, [pc, #264]	; (8003300 <UART_SetConfig+0x27c>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80031fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003200:	d011      	beq.n	8003226 <UART_SetConfig+0x1a2>
 8003202:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003206:	d817      	bhi.n	8003238 <UART_SetConfig+0x1b4>
 8003208:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800320c:	d011      	beq.n	8003232 <UART_SetConfig+0x1ae>
 800320e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003212:	d811      	bhi.n	8003238 <UART_SetConfig+0x1b4>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <UART_SetConfig+0x19c>
 8003218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800321c:	d006      	beq.n	800322c <UART_SetConfig+0x1a8>
 800321e:	e00b      	b.n	8003238 <UART_SetConfig+0x1b4>
 8003220:	2300      	movs	r3, #0
 8003222:	77fb      	strb	r3, [r7, #31]
 8003224:	e037      	b.n	8003296 <UART_SetConfig+0x212>
 8003226:	2302      	movs	r3, #2
 8003228:	77fb      	strb	r3, [r7, #31]
 800322a:	e034      	b.n	8003296 <UART_SetConfig+0x212>
 800322c:	2304      	movs	r3, #4
 800322e:	77fb      	strb	r3, [r7, #31]
 8003230:	e031      	b.n	8003296 <UART_SetConfig+0x212>
 8003232:	2308      	movs	r3, #8
 8003234:	77fb      	strb	r3, [r7, #31]
 8003236:	e02e      	b.n	8003296 <UART_SetConfig+0x212>
 8003238:	2310      	movs	r3, #16
 800323a:	77fb      	strb	r3, [r7, #31]
 800323c:	e02b      	b.n	8003296 <UART_SetConfig+0x212>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a33      	ldr	r2, [pc, #204]	; (8003310 <UART_SetConfig+0x28c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d124      	bne.n	8003292 <UART_SetConfig+0x20e>
 8003248:	4b2d      	ldr	r3, [pc, #180]	; (8003300 <UART_SetConfig+0x27c>)
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003250:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003254:	d011      	beq.n	800327a <UART_SetConfig+0x1f6>
 8003256:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800325a:	d817      	bhi.n	800328c <UART_SetConfig+0x208>
 800325c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003260:	d011      	beq.n	8003286 <UART_SetConfig+0x202>
 8003262:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003266:	d811      	bhi.n	800328c <UART_SetConfig+0x208>
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <UART_SetConfig+0x1f0>
 800326c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003270:	d006      	beq.n	8003280 <UART_SetConfig+0x1fc>
 8003272:	e00b      	b.n	800328c <UART_SetConfig+0x208>
 8003274:	2300      	movs	r3, #0
 8003276:	77fb      	strb	r3, [r7, #31]
 8003278:	e00d      	b.n	8003296 <UART_SetConfig+0x212>
 800327a:	2302      	movs	r3, #2
 800327c:	77fb      	strb	r3, [r7, #31]
 800327e:	e00a      	b.n	8003296 <UART_SetConfig+0x212>
 8003280:	2304      	movs	r3, #4
 8003282:	77fb      	strb	r3, [r7, #31]
 8003284:	e007      	b.n	8003296 <UART_SetConfig+0x212>
 8003286:	2308      	movs	r3, #8
 8003288:	77fb      	strb	r3, [r7, #31]
 800328a:	e004      	b.n	8003296 <UART_SetConfig+0x212>
 800328c:	2310      	movs	r3, #16
 800328e:	77fb      	strb	r3, [r7, #31]
 8003290:	e001      	b.n	8003296 <UART_SetConfig+0x212>
 8003292:	2310      	movs	r3, #16
 8003294:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800329e:	d16b      	bne.n	8003378 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80032a0:	7ffb      	ldrb	r3, [r7, #31]
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d838      	bhi.n	8003318 <UART_SetConfig+0x294>
 80032a6:	a201      	add	r2, pc, #4	; (adr r2, 80032ac <UART_SetConfig+0x228>)
 80032a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ac:	080032d1 	.word	0x080032d1
 80032b0:	080032d9 	.word	0x080032d9
 80032b4:	080032e1 	.word	0x080032e1
 80032b8:	08003319 	.word	0x08003319
 80032bc:	080032e7 	.word	0x080032e7
 80032c0:	08003319 	.word	0x08003319
 80032c4:	08003319 	.word	0x08003319
 80032c8:	08003319 	.word	0x08003319
 80032cc:	080032ef 	.word	0x080032ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d0:	f7ff f854 	bl	800237c <HAL_RCC_GetPCLK1Freq>
 80032d4:	61b8      	str	r0, [r7, #24]
        break;
 80032d6:	e024      	b.n	8003322 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032d8:	f7ff f872 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 80032dc:	61b8      	str	r0, [r7, #24]
        break;
 80032de:	e020      	b.n	8003322 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e0:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <UART_SetConfig+0x290>)
 80032e2:	61bb      	str	r3, [r7, #24]
        break;
 80032e4:	e01d      	b.n	8003322 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032e6:	f7fe ffd3 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 80032ea:	61b8      	str	r0, [r7, #24]
        break;
 80032ec:	e019      	b.n	8003322 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032f2:	61bb      	str	r3, [r7, #24]
        break;
 80032f4:	e015      	b.n	8003322 <UART_SetConfig+0x29e>
 80032f6:	bf00      	nop
 80032f8:	efff69f3 	.word	0xefff69f3
 80032fc:	40013800 	.word	0x40013800
 8003300:	40021000 	.word	0x40021000
 8003304:	40004400 	.word	0x40004400
 8003308:	40004800 	.word	0x40004800
 800330c:	40004c00 	.word	0x40004c00
 8003310:	40005000 	.word	0x40005000
 8003314:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	77bb      	strb	r3, [r7, #30]
        break;
 8003320:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d073      	beq.n	8003410 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	005a      	lsls	r2, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	441a      	add	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	fbb2 f3f3 	udiv	r3, r2, r3
 800333c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	2b0f      	cmp	r3, #15
 8003342:	d916      	bls.n	8003372 <UART_SetConfig+0x2ee>
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334a:	d212      	bcs.n	8003372 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	b29b      	uxth	r3, r3
 8003350:	f023 030f 	bic.w	r3, r3, #15
 8003354:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	085b      	lsrs	r3, r3, #1
 800335a:	b29b      	uxth	r3, r3
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	b29a      	uxth	r2, r3
 8003362:	89fb      	ldrh	r3, [r7, #14]
 8003364:	4313      	orrs	r3, r2
 8003366:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	89fa      	ldrh	r2, [r7, #14]
 800336e:	60da      	str	r2, [r3, #12]
 8003370:	e04e      	b.n	8003410 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	77bb      	strb	r3, [r7, #30]
 8003376:	e04b      	b.n	8003410 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003378:	7ffb      	ldrb	r3, [r7, #31]
 800337a:	2b08      	cmp	r3, #8
 800337c:	d827      	bhi.n	80033ce <UART_SetConfig+0x34a>
 800337e:	a201      	add	r2, pc, #4	; (adr r2, 8003384 <UART_SetConfig+0x300>)
 8003380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003384:	080033a9 	.word	0x080033a9
 8003388:	080033b1 	.word	0x080033b1
 800338c:	080033b9 	.word	0x080033b9
 8003390:	080033cf 	.word	0x080033cf
 8003394:	080033bf 	.word	0x080033bf
 8003398:	080033cf 	.word	0x080033cf
 800339c:	080033cf 	.word	0x080033cf
 80033a0:	080033cf 	.word	0x080033cf
 80033a4:	080033c7 	.word	0x080033c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033a8:	f7fe ffe8 	bl	800237c <HAL_RCC_GetPCLK1Freq>
 80033ac:	61b8      	str	r0, [r7, #24]
        break;
 80033ae:	e013      	b.n	80033d8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033b0:	f7ff f806 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 80033b4:	61b8      	str	r0, [r7, #24]
        break;
 80033b6:	e00f      	b.n	80033d8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033b8:	4b1b      	ldr	r3, [pc, #108]	; (8003428 <UART_SetConfig+0x3a4>)
 80033ba:	61bb      	str	r3, [r7, #24]
        break;
 80033bc:	e00c      	b.n	80033d8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033be:	f7fe ff67 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 80033c2:	61b8      	str	r0, [r7, #24]
        break;
 80033c4:	e008      	b.n	80033d8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ca:	61bb      	str	r3, [r7, #24]
        break;
 80033cc:	e004      	b.n	80033d8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	77bb      	strb	r3, [r7, #30]
        break;
 80033d6:	bf00      	nop
    }

    if (pclk != 0U)
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d018      	beq.n	8003410 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	085a      	lsrs	r2, r3, #1
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	441a      	add	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	2b0f      	cmp	r3, #15
 80033f6:	d909      	bls.n	800340c <UART_SetConfig+0x388>
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fe:	d205      	bcs.n	800340c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	b29a      	uxth	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	e001      	b.n	8003410 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800341c:	7fbb      	ldrb	r3, [r7, #30]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3720      	adds	r7, #32
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	007a1200 	.word	0x007a1200

0800342c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01a      	beq.n	8003542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800352a:	d10a      	bne.n	8003542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	605a      	str	r2, [r3, #4]
  }
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b098      	sub	sp, #96	; 0x60
 8003574:	af02      	add	r7, sp, #8
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003580:	f7fd f906 	bl	8000790 <HAL_GetTick>
 8003584:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b08      	cmp	r3, #8
 8003592:	d12e      	bne.n	80035f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359c:	2200      	movs	r2, #0
 800359e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f88c 	bl	80036c0 <UART_WaitOnFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d021      	beq.n	80035f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b6:	e853 3f00 	ldrex	r3, [r3]
 80035ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035c2:	653b      	str	r3, [r7, #80]	; 0x50
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035cc:	647b      	str	r3, [r7, #68]	; 0x44
 80035ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035d4:	e841 2300 	strex	r3, r2, [r1]
 80035d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e6      	bne.n	80035ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2220      	movs	r2, #32
 80035e4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e062      	b.n	80036b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d149      	bne.n	8003694 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003600:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003608:	2200      	movs	r2, #0
 800360a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f856 	bl	80036c0 <UART_WaitOnFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d03c      	beq.n	8003694 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	e853 3f00 	ldrex	r3, [r3]
 8003626:	623b      	str	r3, [r7, #32]
   return(result);
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800362e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	461a      	mov	r2, r3
 8003636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003638:	633b      	str	r3, [r7, #48]	; 0x30
 800363a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800363e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003640:	e841 2300 	strex	r3, r2, [r1]
 8003644:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e6      	bne.n	800361a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3308      	adds	r3, #8
 8003652:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	60fb      	str	r3, [r7, #12]
   return(result);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	64bb      	str	r3, [r7, #72]	; 0x48
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3308      	adds	r3, #8
 800366a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800366c:	61fa      	str	r2, [r7, #28]
 800366e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	69b9      	ldr	r1, [r7, #24]
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	617b      	str	r3, [r7, #20]
   return(result);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e5      	bne.n	800364c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e011      	b.n	80036b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3758      	adds	r7, #88	; 0x58
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	4613      	mov	r3, r2
 80036ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d0:	e049      	b.n	8003766 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d045      	beq.n	8003766 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036da:	f7fd f859 	bl	8000790 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d302      	bcc.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e048      	b.n	8003786 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d031      	beq.n	8003766 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b08      	cmp	r3, #8
 800370e:	d110      	bne.n	8003732 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2208      	movs	r2, #8
 8003716:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f8ff 	bl	800391c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2208      	movs	r2, #8
 8003722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e029      	b.n	8003786 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800373c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003740:	d111      	bne.n	8003766 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800374a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f8e5 	bl	800391c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e00f      	b.n	8003786 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4013      	ands	r3, r2
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	429a      	cmp	r2, r3
 8003774:	bf0c      	ite	eq
 8003776:	2301      	moveq	r3, #1
 8003778:	2300      	movne	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	429a      	cmp	r2, r3
 8003782:	d0a6      	beq.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003790:	b480      	push	{r7}
 8003792:	b097      	sub	sp, #92	; 0x5c
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	4613      	mov	r3, r2
 800379c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	88fa      	ldrh	r2, [r7, #6]
 80037a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	88fa      	ldrh	r2, [r7, #6]
 80037b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c2:	d10e      	bne.n	80037e2 <UART_Start_Receive_IT+0x52>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d105      	bne.n	80037d8 <UART_Start_Receive_IT+0x48>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80037d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037d6:	e02d      	b.n	8003834 <UART_Start_Receive_IT+0xa4>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	22ff      	movs	r2, #255	; 0xff
 80037dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037e0:	e028      	b.n	8003834 <UART_Start_Receive_IT+0xa4>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10d      	bne.n	8003806 <UART_Start_Receive_IT+0x76>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d104      	bne.n	80037fc <UART_Start_Receive_IT+0x6c>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	22ff      	movs	r2, #255	; 0xff
 80037f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037fa:	e01b      	b.n	8003834 <UART_Start_Receive_IT+0xa4>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	227f      	movs	r2, #127	; 0x7f
 8003800:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003804:	e016      	b.n	8003834 <UART_Start_Receive_IT+0xa4>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800380e:	d10d      	bne.n	800382c <UART_Start_Receive_IT+0x9c>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d104      	bne.n	8003822 <UART_Start_Receive_IT+0x92>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	227f      	movs	r2, #127	; 0x7f
 800381c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003820:	e008      	b.n	8003834 <UART_Start_Receive_IT+0xa4>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	223f      	movs	r2, #63	; 0x3f
 8003826:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800382a:	e003      	b.n	8003834 <UART_Start_Receive_IT+0xa4>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2222      	movs	r2, #34	; 0x22
 8003840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3308      	adds	r3, #8
 800384a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800384e:	e853 3f00 	ldrex	r3, [r3]
 8003852:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	657b      	str	r3, [r7, #84]	; 0x54
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3308      	adds	r3, #8
 8003862:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003864:	64ba      	str	r2, [r7, #72]	; 0x48
 8003866:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003868:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800386a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800386c:	e841 2300 	strex	r3, r2, [r1]
 8003870:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e5      	bne.n	8003844 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003880:	d107      	bne.n	8003892 <UART_Start_Receive_IT+0x102>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d103      	bne.n	8003892 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4a21      	ldr	r2, [pc, #132]	; (8003914 <UART_Start_Receive_IT+0x184>)
 800388e:	669a      	str	r2, [r3, #104]	; 0x68
 8003890:	e002      	b.n	8003898 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4a20      	ldr	r2, [pc, #128]	; (8003918 <UART_Start_Receive_IT+0x188>)
 8003896:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d019      	beq.n	80038d4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	e853 3f00 	ldrex	r3, [r3]
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80038b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038be:	637b      	str	r3, [r7, #52]	; 0x34
 80038c0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038c6:	e841 2300 	strex	r3, r2, [r1]
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1e6      	bne.n	80038a0 <UART_Start_Receive_IT+0x110>
 80038d2:	e018      	b.n	8003906 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	613b      	str	r3, [r7, #16]
   return(result);
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f043 0320 	orr.w	r3, r3, #32
 80038e8:	653b      	str	r3, [r7, #80]	; 0x50
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038f2:	623b      	str	r3, [r7, #32]
 80038f4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	69f9      	ldr	r1, [r7, #28]
 80038f8:	6a3a      	ldr	r2, [r7, #32]
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e6      	bne.n	80038d4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	375c      	adds	r7, #92	; 0x5c
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	08003c0d 	.word	0x08003c0d
 8003918:	08003a65 	.word	0x08003a65

0800391c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800391c:	b480      	push	{r7}
 800391e:	b095      	sub	sp, #84	; 0x54
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003938:	64fb      	str	r3, [r7, #76]	; 0x4c
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003942:	643b      	str	r3, [r7, #64]	; 0x40
 8003944:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003946:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003948:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800394a:	e841 2300 	strex	r3, r2, [r1]
 800394e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1e6      	bne.n	8003924 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3308      	adds	r3, #8
 800395c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	e853 3f00 	ldrex	r3, [r3]
 8003964:	61fb      	str	r3, [r7, #28]
   return(result);
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	64bb      	str	r3, [r7, #72]	; 0x48
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3308      	adds	r3, #8
 8003974:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003976:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800397c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e5      	bne.n	8003956 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800398e:	2b01      	cmp	r3, #1
 8003990:	d118      	bne.n	80039c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	60bb      	str	r3, [r7, #8]
   return(result);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f023 0310 	bic.w	r3, r3, #16
 80039a6:	647b      	str	r3, [r7, #68]	; 0x44
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	461a      	mov	r2, r3
 80039ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b4:	6979      	ldr	r1, [r7, #20]
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	e841 2300 	strex	r3, r2, [r1]
 80039bc:	613b      	str	r3, [r7, #16]
   return(result);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1e6      	bne.n	8003992 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80039d8:	bf00      	nop
 80039da:	3754      	adds	r7, #84	; 0x54
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f7ff fb28 	bl	8003058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	6979      	ldr	r1, [r7, #20]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	613b      	str	r3, [r7, #16]
   return(result);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e6      	bne.n	8003a18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff faf4 	bl	8003044 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a5c:	bf00      	nop
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b09c      	sub	sp, #112	; 0x70
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a72:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a7c:	2b22      	cmp	r3, #34	; 0x22
 8003a7e:	f040 80b9 	bne.w	8003bf4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003a90:	b2d9      	uxtb	r1, r3
 8003a92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f040 809c 	bne.w	8003c04 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003adc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ae0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003aea:	65bb      	str	r3, [r7, #88]	; 0x58
 8003aec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003af0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e6      	bne.n	8003acc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3308      	adds	r3, #8
 8003b04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b10:	f023 0301 	bic.w	r3, r3, #1
 8003b14:	667b      	str	r3, [r7, #100]	; 0x64
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b1e:	647a      	str	r2, [r7, #68]	; 0x44
 8003b20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e5      	bne.n	8003afe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d018      	beq.n	8003b86 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	623b      	str	r3, [r7, #32]
   return(result);
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b68:	663b      	str	r3, [r7, #96]	; 0x60
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b72:	633b      	str	r3, [r7, #48]	; 0x30
 8003b74:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1e6      	bne.n	8003b54 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d12e      	bne.n	8003bec <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f023 0310 	bic.w	r3, r3, #16
 8003ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	69b9      	ldr	r1, [r7, #24]
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	617b      	str	r3, [r7, #20]
   return(result);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e6      	bne.n	8003b94 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	2b10      	cmp	r3, #16
 8003bd2:	d103      	bne.n	8003bdc <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2210      	movs	r2, #16
 8003bda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003be2:	4619      	mov	r1, r3
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff fa41 	bl	800306c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003bea:	e00b      	b.n	8003c04 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7fc faf1 	bl	80001d4 <HAL_UART_RxCpltCallback>
}
 8003bf2:	e007      	b.n	8003c04 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0208 	orr.w	r2, r2, #8
 8003c02:	619a      	str	r2, [r3, #24]
}
 8003c04:	bf00      	nop
 8003c06:	3770      	adds	r7, #112	; 0x70
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b09c      	sub	sp, #112	; 0x70
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c1a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c24:	2b22      	cmp	r3, #34	; 0x22
 8003c26:	f040 80b9 	bne.w	8003d9c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003c30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c38:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003c3a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003c3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003c42:	4013      	ands	r3, r2
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4e:	1c9a      	adds	r2, r3, #2
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f040 809c 	bne.w	8003dac <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c7c:	e853 3f00 	ldrex	r3, [r3]
 8003c80:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c88:	667b      	str	r3, [r7, #100]	; 0x64
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c92:	657b      	str	r3, [r7, #84]	; 0x54
 8003c94:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003c98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e6      	bne.n	8003c74 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3308      	adds	r3, #8
 8003cac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	f023 0301 	bic.w	r3, r3, #1
 8003cbc:	663b      	str	r3, [r7, #96]	; 0x60
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cc6:	643a      	str	r2, [r7, #64]	; 0x40
 8003cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ccc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cce:	e841 2300 	strex	r3, r2, [r1]
 8003cd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1e5      	bne.n	8003ca6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d018      	beq.n	8003d2e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d1c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e6      	bne.n	8003cfc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d12e      	bne.n	8003d94 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f023 0310 	bic.w	r3, r3, #16
 8003d50:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d5a:	61bb      	str	r3, [r7, #24]
 8003d5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6979      	ldr	r1, [r7, #20]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	613b      	str	r3, [r7, #16]
   return(result);
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e6      	bne.n	8003d3c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	2b10      	cmp	r3, #16
 8003d7a:	d103      	bne.n	8003d84 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2210      	movs	r2, #16
 8003d82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff f96d 	bl	800306c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d92:	e00b      	b.n	8003dac <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7fc fa1d 	bl	80001d4 <HAL_UART_RxCpltCallback>
}
 8003d9a:	e007      	b.n	8003dac <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0208 	orr.w	r2, r2, #8
 8003daa:	619a      	str	r2, [r3, #24]
}
 8003dac:	bf00      	nop
 8003dae:	3770      	adds	r7, #112	; 0x70
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <__libc_init_array>:
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	4d0d      	ldr	r5, [pc, #52]	; (8003e00 <__libc_init_array+0x38>)
 8003dcc:	4c0d      	ldr	r4, [pc, #52]	; (8003e04 <__libc_init_array+0x3c>)
 8003dce:	1b64      	subs	r4, r4, r5
 8003dd0:	10a4      	asrs	r4, r4, #2
 8003dd2:	2600      	movs	r6, #0
 8003dd4:	42a6      	cmp	r6, r4
 8003dd6:	d109      	bne.n	8003dec <__libc_init_array+0x24>
 8003dd8:	4d0b      	ldr	r5, [pc, #44]	; (8003e08 <__libc_init_array+0x40>)
 8003dda:	4c0c      	ldr	r4, [pc, #48]	; (8003e0c <__libc_init_array+0x44>)
 8003ddc:	f000 f820 	bl	8003e20 <_init>
 8003de0:	1b64      	subs	r4, r4, r5
 8003de2:	10a4      	asrs	r4, r4, #2
 8003de4:	2600      	movs	r6, #0
 8003de6:	42a6      	cmp	r6, r4
 8003de8:	d105      	bne.n	8003df6 <__libc_init_array+0x2e>
 8003dea:	bd70      	pop	{r4, r5, r6, pc}
 8003dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df0:	4798      	blx	r3
 8003df2:	3601      	adds	r6, #1
 8003df4:	e7ee      	b.n	8003dd4 <__libc_init_array+0xc>
 8003df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dfa:	4798      	blx	r3
 8003dfc:	3601      	adds	r6, #1
 8003dfe:	e7f2      	b.n	8003de6 <__libc_init_array+0x1e>
 8003e00:	08003e70 	.word	0x08003e70
 8003e04:	08003e70 	.word	0x08003e70
 8003e08:	08003e70 	.word	0x08003e70
 8003e0c:	08003e74 	.word	0x08003e74

08003e10 <memset>:
 8003e10:	4402      	add	r2, r0
 8003e12:	4603      	mov	r3, r0
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d100      	bne.n	8003e1a <memset+0xa>
 8003e18:	4770      	bx	lr
 8003e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e1e:	e7f9      	b.n	8003e14 <memset+0x4>

08003e20 <_init>:
 8003e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e22:	bf00      	nop
 8003e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e26:	bc08      	pop	{r3}
 8003e28:	469e      	mov	lr, r3
 8003e2a:	4770      	bx	lr

08003e2c <_fini>:
 8003e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2e:	bf00      	nop
 8003e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e32:	bc08      	pop	{r3}
 8003e34:	469e      	mov	lr, r3
 8003e36:	4770      	bx	lr
